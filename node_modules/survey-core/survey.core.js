/*!
 * surveyjs - Survey JavaScript library v1.9.77
 * Copyright (c) 2015-2023 Devsoft Baltic OÃœ  - http://surveyjs.io/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("survey-core", [], factory);
	else if(typeof exports === 'object')
		exports["survey-core"] = factory();
	else
		root["Survey"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/entries/core.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6â€“8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/signature_pad/dist/signature_pad.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/signature_pad/dist/signature_pad.mjs ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
 * Signature Pad v2.3.2
 * https://github.com/szimek/signature_pad
 *
 * Copyright 2017 Szymon Nowak
 * Released under the MIT license
 *
 * The main idea and some parts of the code (e.g. drawing variable width BÃ©zier curve) are taken from:
 * http://corner.squareup.com/2012/07/smoother-signatures.html
 *
 * Implementation of interpolation using cubic BÃ©zier curves is taken from:
 * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript
 *
 * Algorithm for approximated length of a BÃ©zier curve is taken from:
 * http://www.lemoda.net/maths/bezier-length/index.html
 *
 */

function Point(x, y, time) {
  this.x = x;
  this.y = y;
  this.time = time || new Date().getTime();
}

Point.prototype.velocityFrom = function (start) {
  return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 1;
};

Point.prototype.distanceTo = function (start) {
  return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
};

Point.prototype.equals = function (other) {
  return this.x === other.x && this.y === other.y && this.time === other.time;
};

function Bezier(startPoint, control1, control2, endPoint) {
  this.startPoint = startPoint;
  this.control1 = control1;
  this.control2 = control2;
  this.endPoint = endPoint;
}

// Returns approximated length.
Bezier.prototype.length = function () {
  var steps = 10;
  var length = 0;
  var px = void 0;
  var py = void 0;

  for (var i = 0; i <= steps; i += 1) {
    var t = i / steps;
    var cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
    var cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
    if (i > 0) {
      var xdiff = cx - px;
      var ydiff = cy - py;
      length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
    }
    px = cx;
    py = cy;
  }

  return length;
};

/* eslint-disable no-multi-spaces, space-in-parens */
Bezier.prototype._point = function (t, start, c1, c2, end) {
  return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;
};

/* eslint-disable */

// http://stackoverflow.com/a/27078401/815507
function throttle(func, wait, options) {
  var context, args, result;
  var timeout = null;
  var previous = 0;
  if (!options) options = {};
  var later = function later() {
    previous = options.leading === false ? 0 : Date.now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null;
  };
  return function () {
    var now = Date.now();
    if (!previous && options.leading === false) previous = now;
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = now;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result;
  };
}

function SignaturePad(canvas, options) {
  var self = this;
  var opts = options || {};

  this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;
  this.minWidth = opts.minWidth || 0.5;
  this.maxWidth = opts.maxWidth || 2.5;
  this.throttle = 'throttle' in opts ? opts.throttle : 16; // in miliseconds
  this.minDistance = 'minDistance' in opts ? opts.minDistance : 5;

  if (this.throttle) {
    this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);
  } else {
    this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;
  }

  this.dotSize = opts.dotSize || function () {
    return (this.minWidth + this.maxWidth) / 2;
  };
  this.penColor = opts.penColor || 'black';
  this.backgroundColor = opts.backgroundColor || 'rgba(0,0,0,0)';
  this.onBegin = opts.onBegin;
  this.onEnd = opts.onEnd;

  this._canvas = canvas;
  this._ctx = canvas.getContext('2d');
  this.clear();

  // We need add these inline so they are available to unbind while still having
  // access to 'self' we could use _.bind but it's not worth adding a dependency.
  this._handleMouseDown = function (event) {
    if (event.which === 1) {
      self._mouseButtonDown = true;
      self._strokeBegin(event);
    }
  };

  this._handleMouseMove = function (event) {
    if (self._mouseButtonDown) {
      self._strokeMoveUpdate(event);
    }
  };

  this._handleMouseUp = function (event) {
    if (event.which === 1 && self._mouseButtonDown) {
      self._mouseButtonDown = false;
      self._strokeEnd(event);
    }
  };

  this._handleTouchStart = function (event) {
    if (event.targetTouches.length === 1) {
      var touch = event.changedTouches[0];
      self._strokeBegin(touch);
    }
  };

  this._handleTouchMove = function (event) {
    // Prevent scrolling.
    event.preventDefault();

    var touch = event.targetTouches[0];
    self._strokeMoveUpdate(touch);
  };

  this._handleTouchEnd = function (event) {
    var wasCanvasTouched = event.target === self._canvas;
    if (wasCanvasTouched) {
      event.preventDefault();
      self._strokeEnd(event);
    }
  };

  // Enable mouse and touch event handlers
  this.on();
}

// Public methods
SignaturePad.prototype.clear = function () {
  var ctx = this._ctx;
  var canvas = this._canvas;

  ctx.fillStyle = this.backgroundColor;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  this._data = [];
  this._reset();
  this._isEmpty = true;
};

SignaturePad.prototype.fromDataURL = function (dataUrl) {
  var _this = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var image = new Image();
  var ratio = options.ratio || window.devicePixelRatio || 1;
  var width = options.width || this._canvas.width / ratio;
  var height = options.height || this._canvas.height / ratio;

  this._reset();
  image.src = dataUrl;
  image.onload = function () {
    _this._ctx.drawImage(image, 0, 0, width, height);
  };
  this._isEmpty = false;
};

SignaturePad.prototype.toDataURL = function (type) {
  var _canvas;

  switch (type) {
    case 'image/svg+xml':
      return this._toSVG();
    default:
      for (var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        options[_key - 1] = arguments[_key];
      }

      return (_canvas = this._canvas).toDataURL.apply(_canvas, [type].concat(options));
  }
};

SignaturePad.prototype.on = function () {
  this._handleMouseEvents();
  this._handleTouchEvents();
};

SignaturePad.prototype.off = function () {
  this._canvas.removeEventListener('mousedown', this._handleMouseDown);
  this._canvas.removeEventListener('mousemove', this._handleMouseMove);
  document.removeEventListener('mouseup', this._handleMouseUp);

  this._canvas.removeEventListener('touchstart', this._handleTouchStart);
  this._canvas.removeEventListener('touchmove', this._handleTouchMove);
  this._canvas.removeEventListener('touchend', this._handleTouchEnd);
};

SignaturePad.prototype.isEmpty = function () {
  return this._isEmpty;
};

// Private methods
SignaturePad.prototype._strokeBegin = function (event) {
  this._data.push([]);
  this._reset();
  this._strokeUpdate(event);

  if (typeof this.onBegin === 'function') {
    this.onBegin(event);
  }
};

SignaturePad.prototype._strokeUpdate = function (event) {
  var x = event.clientX;
  var y = event.clientY;

  var point = this._createPoint(x, y);
  var lastPointGroup = this._data[this._data.length - 1];
  var lastPoint = lastPointGroup && lastPointGroup[lastPointGroup.length - 1];
  var isLastPointTooClose = lastPoint && point.distanceTo(lastPoint) < this.minDistance;

  // Skip this point if it's too close to the previous one
  if (!(lastPoint && isLastPointTooClose)) {
    var _addPoint = this._addPoint(point),
        curve = _addPoint.curve,
        widths = _addPoint.widths;

    if (curve && widths) {
      this._drawCurve(curve, widths.start, widths.end);
    }

    this._data[this._data.length - 1].push({
      x: point.x,
      y: point.y,
      time: point.time,
      color: this.penColor
    });
  }
};

SignaturePad.prototype._strokeEnd = function (event) {
  var canDrawCurve = this.points.length > 2;
  var point = this.points[0]; // Point instance

  if (!canDrawCurve && point) {
    this._drawDot(point);
  }

  if (point) {
    var lastPointGroup = this._data[this._data.length - 1];
    var lastPoint = lastPointGroup[lastPointGroup.length - 1]; // plain object

    // When drawing a dot, there's only one point in a group, so without this check
    // such group would end up with exactly the same 2 points.
    if (!point.equals(lastPoint)) {
      lastPointGroup.push({
        x: point.x,
        y: point.y,
        time: point.time,
        color: this.penColor
      });
    }
  }

  if (typeof this.onEnd === 'function') {
    this.onEnd(event);
  }
};

SignaturePad.prototype._handleMouseEvents = function () {
  this._mouseButtonDown = false;

  this._canvas.addEventListener('mousedown', this._handleMouseDown);
  this._canvas.addEventListener('mousemove', this._handleMouseMove);
  document.addEventListener('mouseup', this._handleMouseUp);
};

SignaturePad.prototype._handleTouchEvents = function () {
  // Pass touch events to canvas element on mobile IE11 and Edge.
  this._canvas.style.msTouchAction = 'none';
  this._canvas.style.touchAction = 'none';

  this._canvas.addEventListener('touchstart', this._handleTouchStart);
  this._canvas.addEventListener('touchmove', this._handleTouchMove);
  this._canvas.addEventListener('touchend', this._handleTouchEnd);
};

SignaturePad.prototype._reset = function () {
  this.points = [];
  this._lastVelocity = 0;
  this._lastWidth = (this.minWidth + this.maxWidth) / 2;
  this._ctx.fillStyle = this.penColor;
};

SignaturePad.prototype._createPoint = function (x, y, time) {
  var rect = this._canvas.getBoundingClientRect();

  return new Point(x - rect.left, y - rect.top, time || new Date().getTime());
};

SignaturePad.prototype._addPoint = function (point) {
  var points = this.points;
  var tmp = void 0;

  points.push(point);

  if (points.length > 2) {
    // To reduce the initial lag make it work with 3 points
    // by copying the first point to the beginning.
    if (points.length === 3) points.unshift(points[0]);

    tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);
    var c2 = tmp.c2;
    tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);
    var c3 = tmp.c1;
    var curve = new Bezier(points[1], c2, c3, points[2]);
    var widths = this._calculateCurveWidths(curve);

    // Remove the first element from the list,
    // so that we always have no more than 4 points in points array.
    points.shift();

    return { curve: curve, widths: widths };
  }

  return {};
};

SignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {
  var dx1 = s1.x - s2.x;
  var dy1 = s1.y - s2.y;
  var dx2 = s2.x - s3.x;
  var dy2 = s2.y - s3.y;

  var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };
  var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };

  var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
  var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);

  var dxm = m1.x - m2.x;
  var dym = m1.y - m2.y;

  var k = l2 / (l1 + l2);
  var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };

  var tx = s2.x - cm.x;
  var ty = s2.y - cm.y;

  return {
    c1: new Point(m1.x + tx, m1.y + ty),
    c2: new Point(m2.x + tx, m2.y + ty)
  };
};

SignaturePad.prototype._calculateCurveWidths = function (curve) {
  var startPoint = curve.startPoint;
  var endPoint = curve.endPoint;
  var widths = { start: null, end: null };

  var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this._lastVelocity;

  var newWidth = this._strokeWidth(velocity);

  widths.start = this._lastWidth;
  widths.end = newWidth;

  this._lastVelocity = velocity;
  this._lastWidth = newWidth;

  return widths;
};

SignaturePad.prototype._strokeWidth = function (velocity) {
  return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
};

SignaturePad.prototype._drawPoint = function (x, y, size) {
  var ctx = this._ctx;

  ctx.moveTo(x, y);
  ctx.arc(x, y, size, 0, 2 * Math.PI, false);
  this._isEmpty = false;
};

SignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {
  var ctx = this._ctx;
  var widthDelta = endWidth - startWidth;
  var drawSteps = Math.floor(curve.length());

  ctx.beginPath();

  for (var i = 0; i < drawSteps; i += 1) {
    // Calculate the Bezier (x, y) coordinate for this step.
    var t = i / drawSteps;
    var tt = t * t;
    var ttt = tt * t;
    var u = 1 - t;
    var uu = u * u;
    var uuu = uu * u;

    var x = uuu * curve.startPoint.x;
    x += 3 * uu * t * curve.control1.x;
    x += 3 * u * tt * curve.control2.x;
    x += ttt * curve.endPoint.x;

    var y = uuu * curve.startPoint.y;
    y += 3 * uu * t * curve.control1.y;
    y += 3 * u * tt * curve.control2.y;
    y += ttt * curve.endPoint.y;

    var width = startWidth + ttt * widthDelta;
    this._drawPoint(x, y, width);
  }

  ctx.closePath();
  ctx.fill();
};

SignaturePad.prototype._drawDot = function (point) {
  var ctx = this._ctx;
  var width = typeof this.dotSize === 'function' ? this.dotSize() : this.dotSize;

  ctx.beginPath();
  this._drawPoint(point.x, point.y, width);
  ctx.closePath();
  ctx.fill();
};

SignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {
  for (var i = 0; i < pointGroups.length; i += 1) {
    var group = pointGroups[i];

    if (group.length > 1) {
      for (var j = 0; j < group.length; j += 1) {
        var rawPoint = group[j];
        var point = new Point(rawPoint.x, rawPoint.y, rawPoint.time);
        var color = rawPoint.color;

        if (j === 0) {
          // First point in a group. Nothing to draw yet.

          // All points in the group have the same color, so it's enough to set
          // penColor just at the beginning.
          this.penColor = color;
          this._reset();

          this._addPoint(point);
        } else if (j !== group.length - 1) {
          // Middle point in a group.
          var _addPoint2 = this._addPoint(point),
              curve = _addPoint2.curve,
              widths = _addPoint2.widths;

          if (curve && widths) {
            drawCurve(curve, widths, color);
          }
        } else {
          // Last point in a group. Do nothing.
        }
      }
    } else {
      this._reset();
      var _rawPoint = group[0];
      drawDot(_rawPoint);
    }
  }
};

SignaturePad.prototype._toSVG = function () {
  var _this2 = this;

  var pointGroups = this._data;
  var canvas = this._canvas;
  var ratio = Math.max(window.devicePixelRatio || 1, 1);
  var minX = 0;
  var minY = 0;
  var maxX = canvas.width / ratio;
  var maxY = canvas.height / ratio;
  var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');

  svg.setAttributeNS(null, 'width', canvas.width);
  svg.setAttributeNS(null, 'height', canvas.height);

  this._fromData(pointGroups, function (curve, widths, color) {
    var path = document.createElement('path');

    // Need to check curve for NaN values, these pop up when drawing
    // lines on the canvas that are not continuous. E.g. Sharp corners
    // or stopping mid-stroke and than continuing without lifting mouse.
    if (!isNaN(curve.control1.x) && !isNaN(curve.control1.y) && !isNaN(curve.control2.x) && !isNaN(curve.control2.y)) {
      var attr = 'M ' + curve.startPoint.x.toFixed(3) + ',' + curve.startPoint.y.toFixed(3) + ' ' + ('C ' + curve.control1.x.toFixed(3) + ',' + curve.control1.y.toFixed(3) + ' ') + (curve.control2.x.toFixed(3) + ',' + curve.control2.y.toFixed(3) + ' ') + (curve.endPoint.x.toFixed(3) + ',' + curve.endPoint.y.toFixed(3));

      path.setAttribute('d', attr);
      path.setAttribute('stroke-width', (widths.end * 2.25).toFixed(3));
      path.setAttribute('stroke', color);
      path.setAttribute('fill', 'none');
      path.setAttribute('stroke-linecap', 'round');

      svg.appendChild(path);
    }
  }, function (rawPoint) {
    var circle = document.createElement('circle');
    var dotSize = typeof _this2.dotSize === 'function' ? _this2.dotSize() : _this2.dotSize;
    circle.setAttribute('r', dotSize);
    circle.setAttribute('cx', rawPoint.x);
    circle.setAttribute('cy', rawPoint.y);
    circle.setAttribute('fill', rawPoint.color);

    svg.appendChild(circle);
  });

  var prefix = 'data:image/svg+xml;base64,';
  var header = '<svg' + ' xmlns="http://www.w3.org/2000/svg"' + ' xmlns:xlink="http://www.w3.org/1999/xlink"' + (' viewBox="' + minX + ' ' + minY + ' ' + maxX + ' ' + maxY + '"') + (' width="' + maxX + '"') + (' height="' + maxY + '"') + '>';
  var body = svg.innerHTML;

  // IE hack for missing innerHTML property on SVGElement
  if (body === undefined) {
    var dummy = document.createElement('dummy');
    var nodes = svg.childNodes;
    dummy.innerHTML = '';

    for (var i = 0; i < nodes.length; i += 1) {
      dummy.appendChild(nodes[i].cloneNode(true));
    }

    body = dummy.innerHTML;
  }

  var footer = '</svg>';
  var data = header + body + footer;

  return prefix + btoa(data);
};

SignaturePad.prototype.fromData = function (pointGroups) {
  var _this3 = this;

  this.clear();

  this._fromData(pointGroups, function (curve, widths) {
    return _this3._drawCurve(curve, widths.start, widths.end);
  }, function (rawPoint) {
    return _this3._drawDot(rawPoint);
  });

  this._data = pointGroups;
};

SignaturePad.prototype.toData = function () {
  return this._data;
};

/* harmony default export */ __webpack_exports__["default"] = (SignaturePad);


/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/actions/action.ts":
/*!*******************************!*\
  !*** ./src/actions/action.ts ***!
  \*******************************/
/*! exports provided: createDropdownActionModel, createDropdownActionModelAdvanced, BaseAction, Action, ActionDropdownViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDropdownActionModel", function() { return createDropdownActionModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDropdownActionModelAdvanced", function() { return createDropdownActionModelAdvanced; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseAction", function() { return BaseAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Action", function() { return Action; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionDropdownViewModel", function() { return ActionDropdownViewModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./src/base.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../list */ "./src/list.ts");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../popup */ "./src/popup.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./container */ "./src/actions/container.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







function createDropdownActionModel(actionOptions, dropdownOptions, locOwner) {
    return createDropdownActionModelAdvanced(actionOptions, dropdownOptions, dropdownOptions, locOwner);
}
function createDropdownActionModelAdvanced(actionOptions, listOptions, popupOptions, locOwner) {
    var listModel = new _list__WEBPACK_IMPORTED_MODULE_3__["ListModel"](listOptions.items, function (item) {
        listOptions.onSelectionChanged(item),
            innerPopupModel.toggleVisibility();
    }, listOptions.allowSelection, listOptions.selectedItem, listOptions.onFilterStringChangedCallback);
    listModel.locOwner = locOwner;
    var innerPopupModel = new _popup__WEBPACK_IMPORTED_MODULE_4__["PopupModel"]("sv-list", { model: listModel }, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.verticalPosition, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.horizontalPosition, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.showPointer, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.isModal, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.onCancel, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.onApply, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.onHide, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.onShow, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.cssClass, popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.title);
    innerPopupModel.displayMode = popupOptions === null || popupOptions === void 0 ? void 0 : popupOptions.displayMode;
    var newActionOptions = Object.assign({}, actionOptions, {
        component: "sv-action-bar-item-dropdown",
        popupModel: innerPopupModel,
        action: function () {
            !!(actionOptions.action) && actionOptions.action();
            innerPopupModel.toggleVisibility();
        },
    });
    var newAction = new Action(newActionOptions);
    newAction.data = listModel;
    return newAction;
}
var BaseAction = /** @class */ (function (_super) {
    __extends(BaseAction, _super);
    function BaseAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.iconSize = 24;
        return _this;
    }
    Object.defineProperty(BaseAction.prototype, "visible", {
        get: function () {
            return this.getVisible();
        },
        set: function (val) {
            this.setVisible(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "enabled", {
        get: function () {
            return this.getEnabled();
        },
        set: function (val) {
            this.setEnabled(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "component", {
        get: function () {
            return this.getComponent();
        },
        set: function (val) {
            this.setComponent(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "locTitle", {
        get: function () {
            return this.getLocTitle();
        },
        set: function (val) {
            this.setLocTitle(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "title", {
        get: function () {
            return this.getTitle();
        },
        set: function (val) {
            this.setTitle(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "cssClasses", {
        get: function () {
            return this.cssClassesValue || _container__WEBPACK_IMPORTED_MODULE_6__["defaultActionBarCss"];
        },
        set: function (val) {
            this.cssClassesValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "isVisible", {
        get: function () {
            return this.visible && this.mode !== "popup";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "disabled", {
        get: function () {
            return this.enabled !== undefined && !this.enabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "canShrink", {
        get: function () {
            return !!this.iconName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAction.prototype, "hasTitle", {
        get: function () {
            return (((this.mode != "small" &&
                (this.showTitle || this.showTitle === undefined)) ||
                !this.iconName) &&
                !!this.title);
        },
        enumerable: false,
        configurable: true
    });
    BaseAction.prototype.getActionBarItemTitleCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(this.cssClasses.itemTitle)
            .append(this.cssClasses.itemTitleWithIcon, !!this.iconName)
            .toString();
    };
    BaseAction.prototype.getActionBarItemCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(this.cssClasses.item)
            .append(this.cssClasses.itemAsIcon, !this.hasTitle)
            .append(this.cssClasses.itemActive, !!this.active)
            .append(this.cssClasses.itemPressed, !!this.pressed)
            .append(this.innerCss)
            .toString();
    };
    BaseAction.prototype.getActionRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append("sv-action")
            .append(this.css)
            .append("sv-action--space", this.needSpace)
            .append("sv-action--hidden", !this.isVisible)
            .toString();
    };
    BaseAction.prototype.getTooltip = function () {
        return this.tooltip || this.title;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "tooltip", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "showTitle", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "innerCss", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "active", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "pressed", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "data", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "popupModel", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "needSeparator", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "template", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "large" })
    ], BaseAction.prototype, "mode", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "owner", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "visibleIndex", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "disableTabStop", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "disableShrink", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "disableHide", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: false })
    ], BaseAction.prototype, "needSpace", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "ariaChecked", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "ariaExpanded", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "button" })
    ], BaseAction.prototype, "ariaRole", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "iconName", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "iconSize", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], BaseAction.prototype, "css", void 0);
    return BaseAction;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));

var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action(innerItem) {
        var _this = _super.call(this) || this;
        _this.innerItem = innerItem;
        _this.locTitleChanged = function () {
            var val = _this.locTitle.renderedHtml;
            _this.setPropertyValue("_title", !!val ? val : undefined);
        };
        _this.locTitle = !!innerItem ? innerItem["locTitle"] : null;
        //Object.assign(this, item) to support IE11
        if (!!innerItem) {
            for (var key in innerItem) {
                _this[key] = innerItem[key];
            }
        }
        if (!!_this.locTitleName) {
            _this.locTitleChanged();
        }
        _this.locStrChangedInPopupModel();
        return _this;
    }
    Action.prototype.raiseUpdate = function () {
        this.updateCallback && this.updateCallback();
    };
    Action.prototype.createLocTitle = function () {
        return this.createLocalizableString("title", this, true);
    };
    Action.prototype.getLocTitle = function () {
        return this.locTitleValue;
    };
    Action.prototype.setLocTitle = function (val) {
        if (!val && !this.locTitleValue) {
            val = this.createLocTitle();
        }
        if (!!this.locTitleValue) {
            this.locTitleValue.onStringChanged.remove(this.locTitleChanged);
        }
        this.locTitleValue = val;
        this.locTitleValue.onStringChanged.add(this.locTitleChanged);
        this.locTitleChanged();
    };
    Action.prototype.getTitle = function () {
        return this._title;
    };
    Action.prototype.setTitle = function (val) {
        this._title = val;
    };
    Object.defineProperty(Action.prototype, "locTitleName", {
        get: function () {
            return this.locTitle.localizationName;
        },
        set: function (val) {
            this.locTitle.localizationName = val;
        },
        enumerable: false,
        configurable: true
    });
    Action.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.locTooltipChanged();
        this.locStrChangedInPopupModel();
    };
    Action.prototype.locStrChangedInPopupModel = function () {
        if (!this.popupModel || !this.popupModel.contentComponentData || !this.popupModel.contentComponentData.model)
            return;
        var model = this.popupModel.contentComponentData.model;
        if (Array.isArray(model.actions)) {
            var actions = model.actions;
            actions.forEach(function (item) {
                if (!!item.locStrsChanged) {
                    item.locStrsChanged();
                }
            });
        }
    };
    Action.prototype.locTooltipChanged = function () {
        if (!this.locTooltipName)
            return;
        this.tooltip = _surveyStrings__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getString(this.locTooltipName, this.locTitle.locale);
    };
    //ILocalizableOwner
    Action.prototype.getLocale = function () { return this.owner ? this.owner.getLocale() : ""; };
    Action.prototype.getMarkdownHtml = function (text, name) { return this.owner ? this.owner.getMarkdownHtml(text, name) : undefined; };
    Action.prototype.getProcessedText = function (text) { return this.owner ? this.owner.getProcessedText(text) : text; };
    Action.prototype.getRenderer = function (name) { return this.owner ? this.owner.getRenderer(name) : null; };
    Action.prototype.getRendererContext = function (locStr) { return this.owner ? this.owner.getRendererContext(locStr) : locStr; };
    Action.prototype.setVisible = function (val) {
        this._visible = val;
    };
    Action.prototype.getVisible = function () {
        return this._visible;
    };
    Action.prototype.setEnabled = function (val) {
        this._enabled = val;
    };
    Action.prototype.getEnabled = function () {
        return this._enabled;
    };
    Action.prototype.setComponent = function (val) {
        this._component = val;
    };
    Action.prototype.getComponent = function () {
        return this._component;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Action.prototype, "id", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: true,
            onSet: function (_, target) {
                target.raiseUpdate();
            }
        })
    ], Action.prototype, "_visible", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({
            onSet: function (_, target) {
                target.locTooltipChanged();
            }
        })
    ], Action.prototype, "locTooltipName", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Action.prototype, "_enabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Action.prototype, "action", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Action.prototype, "_component", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Action.prototype, "items", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({
            onSet: function (val, target) {
                if (target.locTitleValue.text === val)
                    return;
                target.locTitleValue.text = val;
            }
        })
    ], Action.prototype, "_title", void 0);
    return Action;
}(BaseAction));

var ActionDropdownViewModel = /** @class */ (function () {
    function ActionDropdownViewModel(item) {
        this.item = item;
        this.funcKey = "sv-dropdown-action";
        this.setupPopupCallbacks();
    }
    ActionDropdownViewModel.prototype.setupPopupCallbacks = function () {
        var _this = this;
        var popupModel = this.popupModel = this.item.popupModel;
        if (!popupModel)
            return;
        popupModel.registerPropertyChangedHandlers(["isVisible"], function () {
            if (!popupModel.isVisible) {
                _this.item.pressed = false;
            }
            else {
                _this.item.pressed = true;
            }
        }, this.funcKey);
    };
    ActionDropdownViewModel.prototype.removePopupCallbacks = function () {
        if (!!this.popupModel) {
            this.popupModel.unregisterPropertyChangedHandlers(["isVisible"], this.funcKey);
        }
    };
    ActionDropdownViewModel.prototype.dispose = function () {
        this.removePopupCallbacks();
    };
    return ActionDropdownViewModel;
}());



/***/ }),

/***/ "./src/actions/adaptive-container.ts":
/*!*******************************************!*\
  !*** ./src/actions/adaptive-container.ts ***!
  \*******************************************/
/*! exports provided: AdaptiveActionContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdaptiveActionContainer", function() { return AdaptiveActionContainer; });
/* harmony import */ var _utils_responsivity_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/responsivity-manager */ "./src/utils/responsivity-manager.ts");
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action */ "./src/actions/action.ts");
/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container */ "./src/actions/container.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../surveyStrings */ "./src/surveyStrings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var AdaptiveActionContainer = /** @class */ (function (_super) {
    __extends(AdaptiveActionContainer, _super);
    function AdaptiveActionContainer() {
        var _this = _super.call(this) || this;
        _this.minVisibleItemsCount = 0;
        _this.isResponsivenessDisabled = false;
        _this.dotsItem = Object(_action__WEBPACK_IMPORTED_MODULE_1__["createDropdownActionModelAdvanced"])({
            id: "dotsItem-id" + AdaptiveActionContainer.ContainerID++,
            css: "sv-dots",
            innerCss: "sv-dots__item",
            iconName: "icon-more",
            visible: false,
            tooltip: _surveyStrings__WEBPACK_IMPORTED_MODULE_3__["surveyLocalization"].getString("more"),
        }, {
            items: [],
            onSelectionChanged: function (item) {
                _this.hiddenItemSelected(item);
            },
            allowSelection: false
        });
        return _this;
    }
    AdaptiveActionContainer.prototype.hideItemsGreaterN = function (visibleItemsCount) {
        var actionsToHide = this.visibleActions.filter(function (action) { return !action.disableHide; });
        visibleItemsCount = Math.max(visibleItemsCount, this.minVisibleItemsCount) - (this.visibleActions.length - actionsToHide.length);
        var hiddenItems = [];
        actionsToHide.forEach(function (item) {
            if (visibleItemsCount <= 0) {
                item.mode = "popup";
                hiddenItems.push(item.innerItem);
            }
            visibleItemsCount--;
        });
        this.hiddenItemsListModel.setItems(hiddenItems);
    };
    AdaptiveActionContainer.prototype.getVisibleItemsCount = function (availableSize) {
        var itemsSizes = this.visibleActions.map(function (item) { return item.minDimension; });
        var currSize = 0;
        for (var i = 0; i < itemsSizes.length; i++) {
            currSize += itemsSizes[i];
            if (currSize > availableSize)
                return i;
        }
        return i;
    };
    AdaptiveActionContainer.prototype.updateItemMode = function (availableSize, itemsSize) {
        var items = this.visibleActions;
        for (var index = items.length - 1; index >= 0; index--) {
            if (itemsSize > availableSize && !items[index].disableShrink) {
                itemsSize -= items[index].maxDimension - items[index].minDimension;
                items[index].mode = "small";
            }
            else {
                items[index].mode = "large";
            }
        }
    };
    Object.defineProperty(AdaptiveActionContainer.prototype, "hiddenItemsListModel", {
        get: function () {
            return this.dotsItem.data;
        },
        enumerable: false,
        configurable: true
    });
    AdaptiveActionContainer.prototype.hiddenItemSelected = function (item) {
        if (!!item && typeof item.action === "function") {
            item.action();
        }
    };
    AdaptiveActionContainer.prototype.onSet = function () {
        var _this = this;
        this.actions.forEach(function (action) { return action.updateCallback = function () { return _this.raiseUpdate(false); }; });
        _super.prototype.onSet.call(this);
    };
    AdaptiveActionContainer.prototype.onPush = function (item) {
        var _this = this;
        item.updateCallback = function () { return _this.raiseUpdate(false); };
        _super.prototype.onPush.call(this, item);
    };
    AdaptiveActionContainer.prototype.getRenderedActions = function () {
        if (this.actions.length === 1 && !!this.actions[0].iconName)
            return this.actions;
        return this.actions.concat([this.dotsItem]);
    };
    AdaptiveActionContainer.prototype.raiseUpdate = function (isResetInitialized) {
        if (!this.isResponsivenessDisabled) {
            _super.prototype.raiseUpdate.call(this, isResetInitialized);
        }
    };
    AdaptiveActionContainer.prototype.fit = function (dimension, dotsItemSize) {
        if (dimension <= 0)
            return;
        this.dotsItem.visible = false;
        var minSize = 0;
        var maxSize = 0;
        var items = this.visibleActions;
        items.forEach(function (item) {
            minSize += item.minDimension;
            maxSize += item.maxDimension;
        });
        if (dimension >= maxSize) {
            this.setActionsMode("large");
        }
        else if (dimension < minSize) {
            this.setActionsMode("small");
            this.hideItemsGreaterN(this.getVisibleItemsCount(dimension - dotsItemSize));
            this.dotsItem.visible = true;
        }
        else {
            this.updateItemMode(dimension, maxSize);
        }
    };
    AdaptiveActionContainer.prototype.initResponsivityManager = function (container) {
        this.responsivityManager = new _utils_responsivity_manager__WEBPACK_IMPORTED_MODULE_0__["ResponsivityManager"](container, this, ".sv-action:not(.sv-dots)>.sv-action__content");
    };
    AdaptiveActionContainer.prototype.resetResponsivityManager = function () {
        if (!!this.responsivityManager) {
            this.responsivityManager.dispose();
            this.responsivityManager = undefined;
        }
    };
    AdaptiveActionContainer.prototype.setActionsMode = function (mode) {
        this.actions.forEach(function (action) { return (action.mode = mode); });
    };
    AdaptiveActionContainer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.resetResponsivityManager();
    };
    AdaptiveActionContainer.ContainerID = 1;
    return AdaptiveActionContainer;
}(_container__WEBPACK_IMPORTED_MODULE_2__["ActionContainer"]));



/***/ }),

/***/ "./src/actions/container.ts":
/*!**********************************!*\
  !*** ./src/actions/container.ts ***!
  \**********************************/
/*! exports provided: defaultActionBarCss, ActionContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultActionBarCss", function() { return defaultActionBarCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionContainer", function() { return ActionContainer; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "./src/base.ts");
/* harmony import */ var _action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./action */ "./src/actions/action.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var defaultActionBarCss = {
    root: "sv-action-bar",
    defaultSizeMode: "sv-action-bar--default-size-mode",
    smallSizeMode: "sv-action-bar--small-size-mode",
    item: "sv-action-bar-item",
    itemActive: "sv-action-bar-item--active",
    itemPressed: "sv-action-bar-item--pressed",
    itemIcon: "sv-action-bar-item__icon",
    itemTitle: "sv-action-bar-item__title",
    itemTitleWithIcon: "sv-action-bar-item__title--with-icon",
};
var ActionContainer = /** @class */ (function (_super) {
    __extends(ActionContainer, _super);
    function ActionContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sizeMode = "default";
        return _this;
    }
    ActionContainer.prototype.getMarkdownHtml = function (text, name) {
        return !!this.locOwner ? this.locOwner.getMarkdownHtml(text, name) : undefined;
    };
    ActionContainer.prototype.getRenderer = function (name) {
        return !!this.locOwner ? this.locOwner.getRenderer(name) : null;
    };
    ActionContainer.prototype.getRendererContext = function (locStr) {
        return !!this.locOwner ? this.locOwner.getRendererContext(locStr) : locStr;
    };
    ActionContainer.prototype.getProcessedText = function (text) {
        return this.locOwner ? this.locOwner.getProcessedText(text) : text;
    };
    ActionContainer.prototype.getLocale = function () {
        return !!this.locOwner ? this.locOwner.getLocale() : "";
    };
    ActionContainer.prototype.getRenderedActions = function () {
        return this.actions;
    };
    ActionContainer.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.actions.forEach(function (item) { return item.locStrsChanged(); });
    };
    ActionContainer.prototype.raiseUpdate = function (isResetInitialized) {
        this.isEmpty = !this.actions.some(function (action) { return action.visible; });
        this.updateCallback && this.updateCallback(isResetInitialized);
    };
    ActionContainer.prototype.onSet = function () {
        var _this = this;
        this.actions.forEach(function (item) { _this.setActionCssClasses(item); });
        this.raiseUpdate(true);
    };
    ActionContainer.prototype.onPush = function (item) {
        this.setActionCssClasses(item);
        item.owner = this;
        this.raiseUpdate(true);
    };
    ActionContainer.prototype.onRemove = function (item) {
        item.owner = null;
        this.raiseUpdate(true);
    };
    ActionContainer.prototype.setActionCssClasses = function (item) {
        item.cssClasses = this.cssClasses;
    };
    Object.defineProperty(ActionContainer.prototype, "hasActions", {
        get: function () {
            return (this.actions || []).length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ActionContainer.prototype, "renderedActions", {
        get: function () {
            return this.getRenderedActions();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ActionContainer.prototype, "visibleActions", {
        get: function () {
            return this.actions.filter(function (action) { return action.visible !== false; });
        },
        enumerable: false,
        configurable: true
    });
    ActionContainer.prototype.getRootCss = function () {
        var sizeModeClass = this.sizeMode === "small" ? this.cssClasses.smallSizeMode : this.cssClasses.defaultSizeMode;
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]().append(this.cssClasses.root + (!!sizeModeClass ? " " + sizeModeClass : "") + (!!this.containerCss ? " " + this.containerCss : ""))
            .append(this.cssClasses.root + "--empty", this.isEmpty)
            .toString();
    };
    ActionContainer.prototype.getDefaultCssClasses = function () {
        return defaultActionBarCss;
    };
    Object.defineProperty(ActionContainer.prototype, "cssClasses", {
        get: function () {
            if (!this.cssClassesValue) {
                this.cssClassesValue = this.getDefaultCssClasses();
            }
            return this.cssClassesValue;
        },
        set: function (val) {
            var _this = this;
            this.cssClassesValue = {};
            this.copyCssClasses(this.cssClassesValue, this.getDefaultCssClasses());
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["mergeValues"])(val, this.cssClasses);
            this.actions.forEach(function (action) {
                _this.setActionCssClasses(action);
            });
        },
        enumerable: false,
        configurable: true
    });
    ActionContainer.prototype.createAction = function (item) {
        return (item instanceof _action__WEBPACK_IMPORTED_MODULE_2__["BaseAction"] ? item : new _action__WEBPACK_IMPORTED_MODULE_2__["Action"](item));
    };
    ActionContainer.prototype.addAction = function (val, sortByVisibleIndex) {
        if (sortByVisibleIndex === void 0) { sortByVisibleIndex = true; }
        var res = this.createAction(val);
        this.actions.push(res);
        this.sortItems();
        return res;
    };
    ActionContainer.prototype.sortItems = function () {
        this.actions = []
            .concat(this.actions.filter(function (item) { return item.visibleIndex === undefined || item.visibleIndex >= 0; }))
            .sort(function (firstItem, secondItem) {
            return firstItem.visibleIndex - secondItem.visibleIndex;
        });
    };
    ActionContainer.prototype.setItems = function (items, sortByVisibleIndex) {
        var _this = this;
        if (sortByVisibleIndex === void 0) { sortByVisibleIndex = true; }
        this.actions = items.map(function (item) { return _this.createAction(item); });
        if (sortByVisibleIndex) {
            this.sortItems();
        }
    };
    ActionContainer.prototype.initResponsivityManager = function (container) {
        return;
    };
    ActionContainer.prototype.resetResponsivityManager = function () { };
    ActionContainer.prototype.getActionById = function (id) {
        for (var i = 0; i < this.actions.length; i++) {
            if (this.actions[i].id === id)
                return this.actions[i];
        }
        return null;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["propertyArray"])({
            onSet: function (_, target) {
                target.onSet();
            },
            onPush: function (item, i, target) {
                target.onPush(item);
            },
            onRemove: function (item, i, target) {
                target.onRemove(item);
            }
        })
    ], ActionContainer.prototype, "actions", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], ActionContainer.prototype, "isEmpty", void 0);
    return ActionContainer;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/base.ts":
/*!*********************!*\
  !*** ./src/base.ts ***!
  \*********************/
/*! exports provided: Bindings, Dependencies, ComputedUpdater, Base, ArrayChanges, Event, EventBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bindings", function() { return Bindings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dependencies", function() { return Dependencies; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComputedUpdater", function() { return ComputedUpdater; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return Base; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayChanges", function() { return ArrayChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return Event; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventBase", function() { return EventBase; });
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};






var Bindings = /** @class */ (function () {
    function Bindings(obj) {
        this.obj = obj;
        this.properties = null;
        this.values = null;
    }
    Bindings.prototype.getType = function () {
        return "bindings";
    };
    Bindings.prototype.getNames = function () {
        var res = [];
        this.fillProperties();
        for (var i = 0; i < this.properties.length; i++) {
            if (this.properties[i].isVisible("", this.obj)) {
                res.push(this.properties[i].name);
            }
        }
        return res;
    };
    Bindings.prototype.getProperties = function () {
        var res = [];
        this.fillProperties();
        for (var i = 0; i < this.properties.length; i++) {
            res.push(this.properties[i]);
        }
        return res;
    };
    Bindings.prototype.setBinding = function (propertyName, valueName) {
        if (!this.values)
            this.values = {};
        var oldValue = this.getJson();
        if (oldValue === valueName)
            return;
        if (!!valueName) {
            this.values[propertyName] = valueName;
        }
        else {
            delete this.values[propertyName];
            if (Object.keys(this.values).length == 0) {
                this.values = null;
            }
        }
        this.onChangedJSON(oldValue);
    };
    Bindings.prototype.clearBinding = function (propertyName) {
        this.setBinding(propertyName, "");
    };
    Bindings.prototype.isEmpty = function () {
        if (!this.values)
            return true;
        for (var key in this.values)
            return false;
        return true;
    };
    Bindings.prototype.getValueNameByPropertyName = function (propertyName) {
        if (!this.values)
            return undefined;
        return this.values[propertyName];
    };
    Bindings.prototype.getPropertiesByValueName = function (valueName) {
        if (!this.values)
            return [];
        var res = [];
        for (var key in this.values) {
            if (this.values[key] == valueName) {
                res.push(key);
            }
        }
        return res;
    };
    Bindings.prototype.getJson = function () {
        if (this.isEmpty())
            return undefined;
        var res = {};
        for (var key in this.values) {
            res[key] = this.values[key];
        }
        return res;
    };
    Bindings.prototype.setJson = function (value) {
        var oldValue = this.getJson();
        this.values = null;
        if (!!value) {
            this.values = {};
            for (var key in value) {
                this.values[key] = value[key];
            }
        }
        this.onChangedJSON(oldValue);
    };
    Bindings.prototype.fillProperties = function () {
        if (this.properties !== null)
            return;
        this.properties = [];
        var objProperties = _jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].getPropertiesByObj(this.obj);
        for (var i = 0; i < objProperties.length; i++) {
            if (objProperties[i].isBindable) {
                this.properties.push(objProperties[i]);
            }
        }
    };
    Bindings.prototype.onChangedJSON = function (oldValue) {
        if (this.obj) {
            this.obj.onBindingChanged(oldValue, this.getJson());
        }
    };
    return Bindings;
}());

var Dependencies = /** @class */ (function () {
    function Dependencies(currentDependency, target, property) {
        this.currentDependency = currentDependency;
        this.target = target;
        this.property = property;
        this.dependencies = [];
        this.id = "" + (++Dependencies.DependenciesCount);
    }
    Dependencies.prototype.addDependency = function (target, property) {
        if (this.target === target && this.property === property)
            return;
        if (this.dependencies.some(function (dependency) { return dependency.obj === target && dependency.prop === property; }))
            return;
        this.dependencies.push({
            obj: target,
            prop: property,
            id: this.id
        });
        target.registerPropertyChangedHandlers([property], this.currentDependency, this.id);
    };
    Dependencies.prototype.dispose = function () {
        this.dependencies.forEach(function (dependency) {
            dependency.obj.unregisterPropertyChangedHandlers([dependency.prop], dependency.id);
        });
    };
    Dependencies.DependenciesCount = 0;
    return Dependencies;
}());

var ComputedUpdater = /** @class */ (function () {
    function ComputedUpdater(_updater) {
        this._updater = _updater;
        this.dependencies = undefined;
        this.type = ComputedUpdater.ComputedUpdaterType;
    }
    Object.defineProperty(ComputedUpdater.prototype, "updater", {
        get: function () {
            return this._updater;
        },
        enumerable: false,
        configurable: true
    });
    ComputedUpdater.prototype.setDependencies = function (dependencies) {
        this.clearDependencies();
        this.dependencies = dependencies;
    };
    ComputedUpdater.prototype.getDependencies = function () {
        return this.dependencies;
    };
    ComputedUpdater.prototype.clearDependencies = function () {
        if (this.dependencies) {
            this.dependencies.dispose();
            this.dependencies = undefined;
        }
    };
    ComputedUpdater.prototype.dispose = function () {
        this.clearDependencies();
    };
    ComputedUpdater.ComputedUpdaterType = "__dependency_computed";
    return ComputedUpdater;
}());

/**
 * A base class for all SurveyJS objects.
 */
var Base = /** @class */ (function () {
    function Base() {
        this.propertyHash = {};
        this.eventList = [];
        this.isLoadingFromJsonValue = false;
        this.loadingOwner = null;
        /**
         * An event that is raised when a property of this SurveyJS object has changed.
         *
         * Parameters:
         *
         * - `sender`: `this`\
         * A SurveyJS object whose property has changed.
         * - `options.name`: `String`\
         * The name of the changed property.
         * - `options.newValue`: `any`\
         * A new value for the property.
         * - `options.oldValue`: `any`\
         * An old value of the property. If the property is an array, `oldValue` contains the same array as `newValue` does.
         */
        this.onPropertyChanged = this.addEvent();
        /**
         * An event that is raised when an [`ItemValue`](https://surveyjs.io/form-library/documentation/itemvalue) property is changed.
         *
         * Parameters:
         *
         * - `sender`: `this`\
         * A SurveyJS object whose property contains an array of `ItemValue` objects.
         * - `options.obj`: [`ItemValue`](https://surveyjs.io/form-library/documentation/itemvalue)\
         * An `ItemValue` object.
         * - `options.propertyName`: `String`\
         * The name of the property to which an array of `ItemValue` objects is assigned (for example, `"choices"` or `"rows"`).
         * - `options.name`: `"text"` | `"value"`\
         * The name of the changed property.
         * - `options.newValue`: `any`\
         * A new value for the property.
         */
        this.onItemValuePropertyChanged = this.addEvent();
        this.isCreating = true;
        this.bindingsValue = new Bindings(this);
        _jsonobject__WEBPACK_IMPORTED_MODULE_2__["CustomPropertiesCollection"].createProperties(this);
        this.onBaseCreating();
        this.isCreating = false;
    }
    Base.finishCollectDependencies = function () {
        var deps = Base.currentDependencis;
        Base.currentDependencis = undefined;
        return deps;
    };
    Base.startCollectDependencies = function (updater, target, property) {
        if (Base.currentDependencis !== undefined) {
            throw new Error("Attempt to collect nested dependencies. Nested dependencies are not supported.");
        }
        Base.currentDependencis = new Dependencies(updater, target, property);
    };
    Base.collectDependency = function (target, property) {
        if (Base.currentDependencis === undefined)
            return;
        Base.currentDependencis.addDependency(target, property);
    };
    Object.defineProperty(Base, "commentSuffix", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].commentSuffix;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].commentSuffix = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Base, "commentPrefix", {
        get: function () {
            return Base.commentSuffix;
        },
        set: function (val) {
            Base.commentSuffix = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns `true` if a passed `value` is an empty string, array, or object or if it equals to `undefined` or `null`.
     *
     * @param value A value to be checked.
     * @param trimString (Optional) When this parameter is `true`, the method ignores whitespace characters at the beginning and end of a string value. Pass `false` to disable this functionality.
     */
    Base.prototype.isValueEmpty = function (value, trimString) {
        if (trimString === void 0) { trimString = true; }
        if (trimString) {
            value = this.trimValue(value);
        }
        return _helpers__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isValueEmpty(value);
    };
    Base.prototype.trimValue = function (value) {
        if (!!value && (typeof value === "string" || value instanceof String))
            return value.trim();
        return value;
    };
    Base.prototype.isPropertyEmpty = function (value) {
        return value !== "" && this.isValueEmpty(value);
    };
    Base.prototype.dispose = function () {
        for (var i = 0; i < this.eventList.length; i++) {
            this.eventList[i].clear();
        }
        this.onPropertyValueChangedCallback = undefined;
        this.isDisposedValue = true;
    };
    Object.defineProperty(Base.prototype, "isDisposed", {
        get: function () {
            return this.isDisposedValue === true;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.addEvent = function () {
        var res = new EventBase();
        this.eventList.push(res);
        return res;
    };
    Base.prototype.onBaseCreating = function () { };
    /**
     * Returns the object type as it is used in the JSON schema.
     */
    Base.prototype.getType = function () {
        return "base";
    };
    /**
     * Use this method to find out if the current object is of a given `typeName` or inherited from it.
     *
     * @param typeName One of the values listed in the [getType()](https://surveyjs.io/form-library/documentation/question#getType) description.
     * @returns `true` if the current object is of a given `typeName` or inherited from it.
     * @see getType
     */
    Base.prototype.isDescendantOf = function (typeName) {
        return _jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].isDescendantOf(this.getType(), typeName);
    };
    Base.prototype.getSurvey = function (isLive) {
        if (isLive === void 0) { isLive = false; }
        return null;
    };
    Object.defineProperty(Base.prototype, "isDesignMode", {
        /**
         * Returns `true` if the survey is being designed in Survey Creator.
         */
        get: function () {
            var survey = this.getSurvey();
            return !!survey && survey.isDesignMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Base.prototype, "inSurvey", {
        /**
         * Returns `true` if the object is included in a survey.
         *
         * This property may return `false`, for example, when you [create a survey model dynamically](https://surveyjs.io/form-library/documentation/design-survey-create-a-simple-survey#create-or-change-a-survey-model-dynamically).
         */
        get: function () {
            return !!this.getSurvey(true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Base.prototype, "bindings", {
        get: function () {
            return this.bindingsValue;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.checkBindings = function (valueName, value) { };
    Base.prototype.updateBindings = function (propertyName, value) {
        var valueName = this.bindings.getValueNameByPropertyName(propertyName);
        if (!!valueName) {
            this.updateBindingValue(valueName, value);
        }
    };
    Base.prototype.updateBindingValue = function (valueName, value) { };
    Base.prototype.getTemplate = function () {
        return this.getType();
    };
    Object.defineProperty(Base.prototype, "isLoadingFromJson", {
        /**
         * Returns `true` if the object configuration is being loaded from JSON.
         */
        get: function () {
            return this.isLoadingFromJsonValue || this.getIsLoadingFromJson();
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.getIsLoadingFromJson = function () {
        if (!!this.loadingOwner && this.loadingOwner.isLoadingFromJson)
            return true;
        return this.isLoadingFromJsonValue;
    };
    Base.prototype.startLoadingFromJson = function (json) {
        this.isLoadingFromJsonValue = true;
    };
    Base.prototype.endLoadingFromJson = function () {
        this.isLoadingFromJsonValue = false;
    };
    /**
     * Returns a JSON object that corresponds to the current SurveyJS object.
     * @see fromJSON
     */
    Base.prototype.toJSON = function () {
        return new _jsonobject__WEBPACK_IMPORTED_MODULE_2__["JsonObject"]().toJsonObject(this);
    };
    /**
     * Assigns a new configuration to the current SurveyJS object. This configuration is taken from a passed JSON object.
     *
     * The JSON object should contain only serializable properties of this SurveyJS object. Event handlers and properties that do not belong to the SurveyJS object are ignored.
     *
     * @param json A JSON object with properties that you want to apply to the current SurveyJS object.
     * @see toJSON
     */
    Base.prototype.fromJSON = function (json) {
        new _jsonobject__WEBPACK_IMPORTED_MODULE_2__["JsonObject"]().toObject(json, this);
        this.onSurveyLoad();
    };
    Base.prototype.onSurveyLoad = function () { };
    /**
     * Creates a new object that has the same type and properties as the current SurveyJS object.
     */
    Base.prototype.clone = function () {
        var clonedObj = _jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].createClass(this.getType());
        clonedObj.fromJSON(this.toJSON());
        return clonedObj;
    };
    /**
     * Returns a `JsonObjectProperty` object with metadata about a serializable property that belongs to the current SurveyJS object.
     *
     * If the property is not found, this method returns `null`.
     * @param propName A property name.
     */
    Base.prototype.getPropertyByName = function (propName) {
        if (!this.classMetaData) {
            this.classMetaData = _jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].findClass(this.getType());
        }
        return !!this.classMetaData ? this.classMetaData.findProperty(propName) : null;
    };
    Base.prototype.isPropertyVisible = function (propName) {
        var prop = this.getPropertyByName(propName);
        return !!prop ? prop.isVisible("", this) : false;
    };
    Base.createProgressInfo = function () {
        return {
            questionCount: 0,
            answeredQuestionCount: 0,
            requiredQuestionCount: 0,
            requiredAnsweredQuestionCount: 0,
        };
    };
    Base.prototype.getProgressInfo = function () {
        return Base.createProgressInfo();
    };
    Base.prototype.localeChanged = function () { };
    Base.prototype.locStrsChanged = function () {
        if (!!this.arraysInfo) {
            for (var key in this.arraysInfo) {
                var item = this.arraysInfo[key];
                if (item && item.isItemValues) {
                    var arr = this.getPropertyValue(key);
                    if (arr && !!Base.itemValueLocStrChanged)
                        Base.itemValueLocStrChanged(arr);
                }
            }
        }
        if (!!this.localizableStrings) {
            for (var key in this.localizableStrings) {
                var item = this.getLocalizableString(key);
                if (item)
                    item.strChanged();
            }
        }
    };
    /**
     * Returns the value of a property with a specified name.
     *
     * If the property is not found or does not have a value, this method returns either `undefined`, `defaultValue` specified in the property configuration, or a value passed as the `defaultValue` parameter.
     *
     * @param name A property name.
     * @param defaultValue (Optional) A value to return if the property is not found or does not have a value.
     */
    Base.prototype.getPropertyValue = function (name, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        var res = this.getPropertyValueCore(this.propertyHash, name);
        if (this.isPropertyEmpty(res)) {
            if (defaultValue != null)
                return defaultValue;
            var propDefaultValue = this.getDefaultValueFromProperty(name);
            if (propDefaultValue !== undefined)
                return propDefaultValue;
        }
        return res;
    };
    Base.prototype.getDefaultValueFromProperty = function (name) {
        var prop = this.getPropertyByName(name);
        if (!prop || prop.isCustom && this.isCreating)
            return undefined;
        var dValue = prop.defaultValue;
        if (!this.isPropertyEmpty(dValue) && !Array.isArray(dValue))
            return dValue;
        if (prop.type == "boolean" || prop.type == "switch")
            return false;
        if (prop.isCustom && !!prop.onGetValue)
            return prop.onGetValue(this);
        return undefined;
    };
    Base.prototype.getPropertyValueCore = function (propertiesHash, name) {
        if (!this.isLoadingFromJson) {
            Base.collectDependency(this, name);
        }
        if (this.getPropertyValueCoreHandler)
            return this.getPropertyValueCoreHandler(propertiesHash, name);
        else
            return propertiesHash[name];
    };
    Base.prototype.geValueFromHash = function () {
        return this.propertyHash["value"];
    };
    Base.prototype.setPropertyValueCore = function (propertiesHash, name, val) {
        if (this.setPropertyValueCoreHandler) {
            if (!this.isDisposedValue) {
                this.setPropertyValueCoreHandler(propertiesHash, name, val);
            }
            else {
                // eslint-disable-next-line no-console
                console.warn("Attempt to set property '" + name + "' of a disposed object '" + this.getType() + "'");
            }
        }
        else
            propertiesHash[name] = val;
    };
    Object.defineProperty(Base.prototype, "isEditingSurveyElement", {
        get: function () {
            var survey = this.getSurvey();
            return !!survey && survey.isEditingSurveyElement;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.iteratePropertiesHash = function (func) {
        var _this = this;
        var keys = [];
        for (var key in this.propertyHash) {
            if (key === "value" &&
                this.isEditingSurveyElement &&
                Array.isArray(this.value))
                continue;
            keys.push(key);
        }
        keys.forEach(function (key) { return func(_this.propertyHash, key); });
    };
    /**
     * Assigns a new value to a specified property.
     * @param name A property name.
     * @param val A new value for the property.
     */
    Base.prototype.setPropertyValue = function (name, val) {
        if (!this.isLoadingFromJson) {
            var prop = this.getPropertyByName(name);
            if (!!prop) {
                val = prop.settingValue(this, val);
            }
        }
        var oldValue = this.getPropertyValue(name);
        if (oldValue &&
            Array.isArray(oldValue) &&
            !!this.arraysInfo &&
            (!val || Array.isArray(val))) {
            if (this.isTwoValueEquals(oldValue, val))
                return;
            this.setArrayPropertyDirectly(name, val);
        }
        else {
            this.setPropertyValueDirectly(name, val);
            if (!this.isDisposedValue && !this.isTwoValueEquals(oldValue, val)) {
                this.propertyValueChanged(name, oldValue, val);
            }
        }
    };
    Base.prototype.setArrayPropertyDirectly = function (name, val, sendNotification) {
        if (sendNotification === void 0) { sendNotification = true; }
        var arrayInfo = this.arraysInfo[name];
        this.setArray(name, this.getPropertyValue(name), val, arrayInfo ? arrayInfo.isItemValues : false, arrayInfo ? sendNotification && arrayInfo.onPush : null);
    };
    Base.prototype.setPropertyValueDirectly = function (name, val) {
        this.setPropertyValueCore(this.propertyHash, name, val);
    };
    Base.prototype.clearPropertyValue = function (name) {
        this.setPropertyValueCore(this.propertyHash, name, null);
        delete this.propertyHash[name];
    };
    Base.prototype.onPropertyValueChangedCallback = function (name, oldValue, newValue, sender, arrayChanges) { };
    Base.prototype.itemValuePropertyChanged = function (item, name, oldValue, newValue) {
        this.onItemValuePropertyChanged.fire(this, {
            obj: item,
            name: name,
            oldValue: oldValue,
            newValue: newValue,
            propertyName: item.ownerPropertyName,
        });
    };
    Base.prototype.onPropertyValueChanged = function (name, oldValue, newValue) { };
    Base.prototype.propertyValueChanged = function (name, oldValue, newValue, arrayChanges, target) {
        if (this.isLoadingFromJson)
            return;
        this.updateBindings(name, newValue);
        this.onPropertyValueChanged(name, oldValue, newValue);
        this.onPropertyChanged.fire(this, {
            name: name,
            oldValue: oldValue,
            newValue: newValue,
        });
        this.doPropertyValueChangedCallback(name, oldValue, newValue, arrayChanges, this);
        this.checkConditionPropertyChanged(name);
        if (!this.onPropChangeFunctions)
            return;
        for (var i = 0; i < this.onPropChangeFunctions.length; i++) {
            if (this.onPropChangeFunctions[i].name == name)
                this.onPropChangeFunctions[i].func(newValue);
        }
    };
    Base.prototype.onBindingChanged = function (oldValue, newValue) {
        if (this.isLoadingFromJson)
            return;
        this.doPropertyValueChangedCallback("bindings", oldValue, newValue);
    };
    Object.defineProperty(Base.prototype, "isInternal", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.doPropertyValueChangedCallback = function (name, oldValue, newValue, arrayChanges, target) {
        if (this.isInternal)
            return;
        if (!target)
            target = this;
        var notifier = this.getSurvey();
        if (!notifier)
            notifier = this;
        if (!!notifier.onPropertyValueChangedCallback) {
            notifier.onPropertyValueChangedCallback(name, oldValue, newValue, target, arrayChanges);
        }
        if (notifier !== this && !!this.onPropertyValueChangedCallback) {
            this.onPropertyValueChangedCallback(name, oldValue, newValue, target, arrayChanges);
        }
    };
    Base.prototype.addExpressionProperty = function (name, onExecute, canRun) {
        if (!this.expressionInfo) {
            this.expressionInfo = {};
        }
        this.expressionInfo[name] = { onExecute: onExecute, canRun: canRun };
    };
    Base.prototype.getDataFilteredValues = function () {
        return {};
    };
    Base.prototype.getDataFilteredProperties = function () {
        return {};
    };
    Base.prototype.runConditionCore = function (values, properties) {
        if (!this.expressionInfo)
            return;
        for (var key in this.expressionInfo) {
            this.runConditionItemCore(key, values, properties);
        }
    };
    Base.prototype.canRunConditions = function () {
        return !this.isDesignMode;
    };
    Base.prototype.checkConditionPropertyChanged = function (propName) {
        if (!this.expressionInfo || !this.expressionInfo[propName])
            return;
        if (!this.canRunConditions())
            return;
        this.runConditionItemCore(propName, this.getDataFilteredValues(), this.getDataFilteredProperties());
    };
    Base.prototype.runConditionItemCore = function (propName, values, properties) {
        var _this = this;
        var info = this.expressionInfo[propName];
        var expression = this.getPropertyValue(propName);
        if (!expression)
            return;
        if (!!info.canRun && !info.canRun(this))
            return;
        if (!info.runner) {
            info.runner = new _conditions__WEBPACK_IMPORTED_MODULE_4__["ExpressionRunner"](expression);
            info.runner.onRunComplete = function (res) {
                info.onExecute(_this, res);
            };
        }
        info.runner.expression = expression;
        info.runner.run(values, properties);
    };
    /**
     * Registers a function to call when a property value changes.
     * @param propertyNames An array of one or multiple property names.
     * @param handler A function to call when one of the listed properties change.
     * @param key (Optional) A key that identifies the current registration. If a function for one of the properties is already registered with the same key, the function will be overwritten. You can also use the key to subsequently unregister handlers.
     * @see unregisterPropertyChangedHandlers
     */
    Base.prototype.registerPropertyChangedHandlers = function (propertyNames, handler, key) {
        if (key === void 0) { key = null; }
        for (var i = 0; i < propertyNames.length; i++) {
            this.registerFunctionOnPropertyValueChanged(propertyNames[i], handler, key);
        }
    };
    /**
     * Unregisters value change event handlers for the specified properties.
     * @param propertyNames An array of one or multiple property names.
     * @param key (Optional) A key of the registration that you want to cancel.
     * @see registerPropertyChangedHandlers
     */
    Base.prototype.unregisterPropertyChangedHandlers = function (propertyNames, key) {
        if (key === void 0) { key = null; }
        for (var i = 0; i < propertyNames.length; i++) {
            this.unRegisterFunctionOnPropertyValueChanged(propertyNames[i], key);
        }
    };
    Base.prototype.registerFunctionOnPropertyValueChanged = function (name, func, key) {
        if (key === void 0) { key = null; }
        if (!this.onPropChangeFunctions) {
            this.onPropChangeFunctions = [];
        }
        if (key) {
            for (var i = 0; i < this.onPropChangeFunctions.length; i++) {
                var item = this.onPropChangeFunctions[i];
                if (item.name == name && item.key == key) {
                    item.func = func;
                    return;
                }
            }
        }
        this.onPropChangeFunctions.push({ name: name, func: func, key: key });
    };
    Base.prototype.registerFunctionOnPropertiesValueChanged = function (names, func, key) {
        if (key === void 0) { key = null; }
        this.registerPropertyChangedHandlers(names, func, key);
    };
    Base.prototype.unRegisterFunctionOnPropertyValueChanged = function (name, key) {
        if (key === void 0) { key = null; }
        if (!this.onPropChangeFunctions)
            return;
        for (var i = 0; i < this.onPropChangeFunctions.length; i++) {
            var item = this.onPropChangeFunctions[i];
            if (item.name == name && item.key == key) {
                this.onPropChangeFunctions.splice(i, 1);
                return;
            }
        }
    };
    Base.prototype.unRegisterFunctionOnPropertiesValueChanged = function (names, key) {
        if (key === void 0) { key = null; }
        this.unregisterPropertyChangedHandlers(names, key);
    };
    Base.prototype.createCustomLocalizableObj = function (name) {
        var locStr = this.getLocalizableString(name);
        if (locStr)
            return;
        this.createLocalizableString(name, this, false, true);
    };
    Base.prototype.getLocale = function () {
        var locOwner = this.getSurvey();
        return !!locOwner ? locOwner.getLocale() : "";
    };
    Base.prototype.getLocalizationString = function (strName) {
        return _surveyStrings__WEBPACK_IMPORTED_MODULE_5__["surveyLocalization"].getString(strName, this.getLocale());
    };
    Base.prototype.getLocalizationFormatString = function (strName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var str = this.getLocalizationString(strName);
        if (!str || !str.format)
            return "";
        return str.format.apply(str, args);
    };
    Base.prototype.createLocalizableString = function (name, owner, useMarkDown, defaultStr) {
        var _this = this;
        if (useMarkDown === void 0) { useMarkDown = false; }
        if (defaultStr === void 0) { defaultStr = false; }
        var locStr = new _localizablestring__WEBPACK_IMPORTED_MODULE_0__["LocalizableString"](owner, useMarkDown, name);
        if (defaultStr) {
            locStr.localizationName = defaultStr === true ? name : defaultStr;
        }
        locStr.onStrChanged = function (oldValue, newValue) {
            _this.propertyValueChanged(name, oldValue, newValue);
        };
        if (!this.localizableStrings) {
            this.localizableStrings = {};
        }
        this.localizableStrings[name] = locStr;
        return locStr;
    };
    Base.prototype.getLocalizableString = function (name) {
        return !!this.localizableStrings ? this.localizableStrings[name] : null;
    };
    Base.prototype.getLocalizableStringText = function (name, defaultStr) {
        if (defaultStr === void 0) { defaultStr = ""; }
        Base.collectDependency(this, name);
        var locStr = this.getLocalizableString(name);
        if (!locStr)
            return "";
        var res = locStr.text;
        return res ? res : defaultStr;
    };
    Base.prototype.setLocalizableStringText = function (name, value) {
        var locStr = this.getLocalizableString(name);
        if (!locStr)
            return;
        var oldValue = locStr.text;
        if (oldValue != value) {
            locStr.text = value;
            // this.propertyValueChanged(name, oldValue, value);
        }
    };
    Base.prototype.addUsedLocales = function (locales) {
        if (!!this.localizableStrings) {
            for (var key in this.localizableStrings) {
                var item = this.getLocalizableString(key);
                if (item)
                    this.AddLocStringToUsedLocales(item, locales);
            }
        }
        if (!!this.arraysInfo) {
            for (var key in this.arraysInfo) {
                var items = this.getPropertyValue(key);
                if (!items || !items.length)
                    continue;
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    if (item && item.addUsedLocales) {
                        item.addUsedLocales(locales);
                    }
                }
            }
        }
    };
    Base.prototype.searchText = function (text, founded) {
        var strs = [];
        this.getSearchableLocalizedStrings(strs);
        for (var i = 0; i < strs.length; i++) {
            if (strs[i].setFindText(text)) {
                founded.push({ element: this, str: strs[i] });
            }
        }
    };
    Base.prototype.getSearchableLocalizedStrings = function (arr) {
        if (!!this.localizableStrings) {
            var keys_1 = [];
            this.getSearchableLocKeys(keys_1);
            for (var i = 0; i < keys_1.length; i++) {
                var item = this.getLocalizableString(keys_1[i]);
                if (item)
                    arr.push(item);
            }
        }
        if (!this.arraysInfo)
            return;
        var keys = [];
        this.getSearchableItemValueKeys(keys);
        for (var i = 0; i < keys.length; i++) {
            var items = this.getPropertyValue(keys[i]);
            if (!items)
                continue;
            for (var j = 0; j < items.length; j++) {
                arr.push(items[j].locText);
            }
        }
    };
    Base.prototype.getSearchableLocKeys = function (keys) { };
    Base.prototype.getSearchableItemValueKeys = function (keys) { };
    Base.prototype.AddLocStringToUsedLocales = function (locStr, locales) {
        var locs = locStr.getLocales();
        for (var i = 0; i < locs.length; i++) {
            if (locales.indexOf(locs[i]) < 0) {
                locales.push(locs[i]);
            }
        }
    };
    Base.prototype.createItemValues = function (name) {
        var self = this;
        var result = this.createNewArray(name, function (item) {
            item.locOwner = self;
            item.ownerPropertyName = name;
            if (typeof item.getSurvey == "function") {
                var survey = item.getSurvey();
                if (!!survey && typeof survey.makeReactive == "function") {
                    survey.makeReactive(item);
                }
            }
        });
        this.arraysInfo[name].isItemValues = true;
        return result;
    };
    Base.prototype.notifyArrayChanged = function (ar, arrayChanges) {
        !!ar.onArrayChanged && ar.onArrayChanged(arrayChanges);
    };
    Base.prototype.createNewArrayCore = function (name) {
        var res = null;
        if (!!this.createArrayCoreHandler) {
            res = this.createArrayCoreHandler(this.propertyHash, name);
        }
        if (!res) {
            res = new Array();
            this.setPropertyValueCore(this.propertyHash, name, res);
        }
        return res;
    };
    Base.prototype.ensureArray = function (name, onPush, onRemove) {
        if (onPush === void 0) { onPush = null; }
        if (onRemove === void 0) { onRemove = null; }
        if (this.arraysInfo && this.arraysInfo[name]) {
            return;
        }
        return this.createNewArray(name, onPush, onRemove);
    };
    Base.prototype.createNewArray = function (name, onPush, onRemove) {
        if (onPush === void 0) { onPush = null; }
        if (onRemove === void 0) { onRemove = null; }
        var newArray = this.createNewArrayCore(name);
        if (!this.arraysInfo) {
            this.arraysInfo = {};
        }
        this.arraysInfo[name] = { onPush: onPush, isItemValues: false };
        var self = this;
        newArray.push = function (value) {
            var result = Object.getPrototypeOf(newArray).push.call(newArray, value);
            if (!self.isDisposedValue) {
                if (onPush)
                    onPush(value, newArray.length - 1);
                var arrayChanges = new ArrayChanges(newArray.length - 1, 0, [value], []);
                self.propertyValueChanged(name, newArray, newArray, arrayChanges);
                self.notifyArrayChanged(newArray, arrayChanges);
            }
            return result;
        };
        newArray.shift = function () {
            var result = Object.getPrototypeOf(newArray).shift.call(newArray);
            if (!self.isDisposedValue && result) {
                if (onRemove)
                    onRemove(result);
                var arrayChanges = new ArrayChanges(newArray.length - 1, 1, [], []);
                self.propertyValueChanged(name, newArray, newArray, arrayChanges);
                self.notifyArrayChanged(newArray, arrayChanges);
            }
            return result;
        };
        newArray.unshift = function (value) {
            var result = Object.getPrototypeOf(newArray).unshift.call(newArray, value);
            if (!self.isDisposedValue) {
                if (onPush)
                    onPush(value, newArray.length - 1);
                var arrayChanges = new ArrayChanges(0, 0, [value], []);
                self.propertyValueChanged(name, newArray, newArray, arrayChanges);
                self.notifyArrayChanged(newArray, arrayChanges);
            }
            return result;
        };
        newArray.pop = function () {
            var result = Object.getPrototypeOf(newArray).pop.call(newArray);
            if (!self.isDisposedValue) {
                if (onRemove)
                    onRemove(result);
                var arrayChanges = new ArrayChanges(newArray.length - 1, 1, [], []);
                self.propertyValueChanged(name, newArray, newArray, arrayChanges);
                self.notifyArrayChanged(newArray, arrayChanges);
            }
            return result;
        };
        newArray.splice = function (start, deleteCount) {
            var _a;
            var items = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                items[_i - 2] = arguments[_i];
            }
            if (!start)
                start = 0;
            if (!deleteCount)
                deleteCount = 0;
            var result = (_a = Object.getPrototypeOf(newArray).splice).call.apply(_a, __spreadArray([newArray,
                start,
                deleteCount], items));
            if (!items)
                items = [];
            if (!self.isDisposedValue) {
                if (onRemove && result) {
                    for (var i = 0; i < result.length; i++) {
                        onRemove(result[i]);
                    }
                }
                if (onPush) {
                    for (var i = 0; i < items.length; i++) {
                        onPush(items[i], start + i);
                    }
                }
                var arrayChanges = new ArrayChanges(start, deleteCount, items, result);
                self.propertyValueChanged(name, newArray, newArray, arrayChanges);
                self.notifyArrayChanged(newArray, arrayChanges);
            }
            return result;
        };
        return newArray;
    };
    Base.prototype.getItemValueType = function () {
        return undefined;
    };
    Base.prototype.setArray = function (name, src, dest, isItemValues, onPush) {
        var deletedItems = [].concat(src);
        Object.getPrototypeOf(src).splice.call(src, 0, src.length);
        if (!!dest) {
            for (var i = 0; i < dest.length; i++) {
                var item = dest[i];
                if (isItemValues) {
                    if (!!Base.createItemValue) {
                        item = Base.createItemValue(item, this.getItemValueType());
                    }
                }
                Object.getPrototypeOf(src).push.call(src, item);
                if (onPush)
                    onPush(src[i]);
            }
        }
        var arrayChanges = new ArrayChanges(0, deletedItems.length, src, deletedItems);
        this.propertyValueChanged(name, deletedItems, src, arrayChanges);
        this.notifyArrayChanged(src, arrayChanges);
    };
    Base.prototype.isTwoValueEquals = function (x, y, caseInSensitive, trimString) {
        if (caseInSensitive === void 0) { caseInSensitive = false; }
        if (trimString === void 0) { trimString = false; }
        return _helpers__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isTwoValueEquals(x, y, false, !caseInSensitive, trimString);
    };
    Base.copyObject = function (dst, src) {
        for (var key in src) {
            var source = src[key];
            if (typeof source === "object") {
                source = {};
                this.copyObject(source, src[key]);
            }
            dst[key] = source;
        }
    };
    Base.prototype.copyCssClasses = function (dest, source) {
        if (!source)
            return;
        if (typeof source === "string" || source instanceof String) {
            dest["root"] = source;
        }
        else {
            Base.copyObject(dest, source);
        }
    };
    Base.prototype.getValueInLowCase = function (val) {
        if (!!val && typeof val == "string")
            return val.toLowerCase();
        return val;
    };
    Base.prototype.getElementsInDesign = function (includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        return [];
    };
    Base.currentDependencis = undefined;
    return Base;
}());

var ArrayChanges = /** @class */ (function () {
    function ArrayChanges(index, deleteCount, itemsToAdd, deletedItems) {
        this.index = index;
        this.deleteCount = deleteCount;
        this.itemsToAdd = itemsToAdd;
        this.deletedItems = deletedItems;
    }
    return ArrayChanges;
}());

var Event = /** @class */ (function () {
    function Event() {
    }
    Object.defineProperty(Event.prototype, "isEmpty", {
        get: function () {
            return this.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "length", {
        get: function () {
            return !!this.callbacks ? this.callbacks.length : 0;
        },
        enumerable: false,
        configurable: true
    });
    Event.prototype.fireByCreatingOptions = function (sender, createOptions) {
        if (!this.callbacks)
            return;
        for (var i = 0; i < this.callbacks.length; i++) {
            this.callbacks[i](sender, createOptions());
            if (!this.callbacks)
                return;
        }
    };
    Event.prototype.fire = function (sender, options) {
        if (!this.callbacks)
            return;
        for (var i = 0; i < this.callbacks.length; i++) {
            this.callbacks[i](sender, options);
            if (!this.callbacks)
                return;
        }
    };
    Event.prototype.clear = function () {
        this.callbacks = undefined;
    };
    Event.prototype.add = function (func) {
        if (this.hasFunc(func))
            return;
        if (!this.callbacks) {
            this.callbacks = new Array();
        }
        this.callbacks.push(func);
        this.fireCallbackChanged();
    };
    Event.prototype.remove = function (func) {
        if (this.hasFunc(func)) {
            var index = this.callbacks.indexOf(func, 0);
            this.callbacks.splice(index, 1);
            this.fireCallbackChanged();
        }
    };
    Event.prototype.hasFunc = function (func) {
        if (this.callbacks == null)
            return false;
        return this.callbacks.indexOf(func, 0) > -1;
    };
    Event.prototype.fireCallbackChanged = function () {
        if (!!this.onCallbacksChanged) {
            this.onCallbacksChanged();
        }
    };
    return Event;
}());

var EventBase = /** @class */ (function (_super) {
    __extends(EventBase, _super);
    function EventBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EventBase;
}(Event));



/***/ }),

/***/ "./src/calculatedValue.ts":
/*!********************************!*\
  !*** ./src/calculatedValue.ts ***!
  \********************************/
/*! exports provided: CalculatedValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CalculatedValue", function() { return CalculatedValue; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * The calculated value is a way to define the variable in Survey Creator.
 * It has two main properties: name and expression. Based on expression the value read-only property is automatically calculated.
 * The name property should be unique though all calculated values.
 * It uses survey.getVariable/seruvey.setVariable functions to get/set its value. The class do not store its value internally.
 * You may set includeIntoResult property to true to store this calculated value into survey result.
 */
var CalculatedValue = /** @class */ (function (_super) {
    __extends(CalculatedValue, _super);
    function CalculatedValue(name, expression) {
        if (name === void 0) { name = null; }
        if (expression === void 0) { expression = null; }
        var _this = _super.call(this) || this;
        _this.expressionIsRunning = false;
        _this.isCalculated = false;
        if (!!name) {
            _this.name = name;
        }
        if (!!expression) {
            _this.expression = expression;
        }
        return _this;
    }
    CalculatedValue.prototype.setOwner = function (data) {
        this.data = data;
        this.rerunExpression();
    };
    CalculatedValue.prototype.getType = function () {
        return "calculatedvalue";
    };
    CalculatedValue.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        return !!this.data && !!this.data["getSurvey"]
            ? this.data.getSurvey()
            : null;
    };
    Object.defineProperty(CalculatedValue.prototype, "owner", {
        get: function () {
            return this.data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CalculatedValue.prototype, "name", {
        /**
         * The calculated value name. It should be non empty and unique.
         */
        get: function () {
            return this.getPropertyValue("name", "");
        },
        set: function (val) {
            this.setPropertyValue("name", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CalculatedValue.prototype, "includeIntoResult", {
        /**
         * Set this property to true to include the non-empty calculated value into survey result, survey.data property.
         */
        get: function () {
            return this.getPropertyValue("includeIntoResult", false);
        },
        set: function (val) {
            this.setPropertyValue("includeIntoResult", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CalculatedValue.prototype, "expression", {
        /**
         * The Expression that used to calculate the value. You may use standard operators like +, -, * and /, squares (). Here is the example of accessing the question value {questionname}.
         * Example: "({quantity} * {price}) * (100 - {discount}) / 100"
         */
        get: function () {
            return this.getPropertyValue("expression", "");
        },
        set: function (val) {
            this.setPropertyValue("expression", val);
            this.rerunExpression();
        },
        enumerable: false,
        configurable: true
    });
    CalculatedValue.prototype.locCalculation = function () {
        this.expressionIsRunning = true;
    };
    CalculatedValue.prototype.unlocCalculation = function () {
        this.expressionIsRunning = false;
    };
    CalculatedValue.prototype.resetCalculation = function () {
        this.isCalculated = false;
    };
    CalculatedValue.prototype.doCalculation = function (calculatedValues, values, properties) {
        if (this.isCalculated)
            return;
        this.runExpressionCore(calculatedValues, values, properties);
        this.isCalculated = true;
    };
    CalculatedValue.prototype.runExpression = function (values, properties) {
        this.runExpressionCore(null, values, properties);
    };
    Object.defineProperty(CalculatedValue.prototype, "value", {
        get: function () {
            if (!this.data)
                return undefined;
            return this.data.getVariable(this.name);
        },
        enumerable: false,
        configurable: true
    });
    CalculatedValue.prototype.setValue = function (val) {
        if (!this.data)
            return;
        this.data.setVariable(this.name, val);
    };
    Object.defineProperty(CalculatedValue.prototype, "canRunExpression", {
        get: function () {
            return (!!this.data &&
                !this.isLoadingFromJson &&
                !!this.expression &&
                !this.expressionIsRunning &&
                !!this.name);
        },
        enumerable: false,
        configurable: true
    });
    CalculatedValue.prototype.rerunExpression = function () {
        if (!this.canRunExpression)
            return;
        this.runExpression(this.data.getFilteredValues(), this.data.getFilteredProperties());
    };
    CalculatedValue.prototype.runExpressionCore = function (calculatedValues, values, properties) {
        if (!this.canRunExpression)
            return;
        this.ensureExpression(values);
        this.locCalculation();
        if (!!calculatedValues) {
            this.runDependentExpressions(calculatedValues, values, properties);
        }
        this.expressionRunner.run(values, properties);
    };
    CalculatedValue.prototype.runDependentExpressions = function (calculatedValues, values, properties) {
        var variables = this.expressionRunner.getVariables();
        if (!variables)
            return;
        for (var i = 0; i < calculatedValues.length; i++) {
            var calcItem = calculatedValues[i];
            if (calcItem === this || variables.indexOf(calcItem.name) < 0)
                continue;
            calcItem.doCalculation(calculatedValues, values, properties);
            values[calcItem.name] = calcItem.value;
        }
    };
    CalculatedValue.prototype.ensureExpression = function (values) {
        var _this = this;
        if (!!this.expressionRunner)
            return;
        this.expressionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_2__["ExpressionRunner"](this.expression);
        this.expressionRunner.onRunComplete = function (newValue) {
            if (!_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(newValue, _this.value)) {
                _this.setValue(newValue);
            }
            _this.unlocCalculation();
        };
    };
    return CalculatedValue;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_3__["Serializer"].addClass("calculatedvalue", [
    { name: "!name", isUnique: true },
    "expression:expression",
    "includeIntoResult:boolean",
], function () {
    return new CalculatedValue();
}, "base");


/***/ }),

/***/ "./src/choicesRestful.ts":
/*!*******************************!*\
  !*** ./src/choicesRestful.ts ***!
  \*******************************/
/*! exports provided: ChoicesRestful, ChoicesRestfull */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestful", function() { return ChoicesRestful; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestfull", function() { return ChoicesRestfull; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var XmlParser = /** @class */ (function () {
    function XmlParser() {
        this.parser = new DOMParser();
    }
    XmlParser.prototype.assignValue = function (target, name, value) {
        if (Array.isArray(target[name])) {
            target[name].push(value);
        }
        else if (target[name] !== undefined) {
            target[name] = [target[name]].concat(value);
        }
        else if (typeof value === "object" &&
            Object.keys(value).length === 1 &&
            Object.keys(value)[0] === name) {
            target[name] = value[name];
        }
        else {
            target[name] = value;
        }
    };
    XmlParser.prototype.xml2Json = function (xmlNode, result) {
        if (xmlNode.children && xmlNode.children.length > 0) {
            for (var i = 0; i < xmlNode.children.length; i++) {
                var childNode = xmlNode.children[i];
                var childObject = {};
                this.xml2Json(childNode, childObject);
                this.assignValue(result, childNode.nodeName, childObject);
            }
        }
        else {
            this.assignValue(result, xmlNode.nodeName, xmlNode.textContent);
        }
    };
    XmlParser.prototype.parseXmlString = function (xmlString) {
        var xmlRoot = this.parser.parseFromString(xmlString, "text/xml");
        var json = {};
        this.xml2Json(xmlRoot, json);
        return json;
    };
    return XmlParser;
}());
/**
 * Configures access to a RESTful service that returns choices for [Checkbox](https://surveyjs.io/Examples/Library?id=questiontype-checkbox), [Dropdown](https://surveyjs.io/Examples/Library?id=questiontype-dropdown), [Radiogroup](https://surveyjs.io/Examples/Library?id=questiontype-radiogroup), and other multiple-choice question types.
 *
 * Use the following properties to configure this object:
 *
 * ```js
 * {
 *   url: "http://...", // A RESTful service's URL.
 *   valueName: "value", // Specifies which field contains choice values.
 *   titleName: "title", // Specifies which field contains display texts for choice values.
 *   imageLinkName: "imageUrl", // Specifies which field contains image URLs. Used in Image Picker questions.
 *   // Path to the array of choices. Specify `path` only if the array of choices is nested within the object returned by the service.
 *   // The following path separators are allowed: semicolon `;`, comma `,`.
 *   path: "myNestedArray"
 * }
 * ```
 *
 * Typically, you should assign this object to a question's [`choicesByUrl`](https://surveyjs.io/Documentation/Library?id=QuestionSelectBase#choicesByUrl) property.
 */
var ChoicesRestful = /** @class */ (function (_super) {
    __extends(ChoicesRestful, _super);
    function ChoicesRestful() {
        var _this = _super.call(this) || this;
        _this.lastObjHash = "";
        _this.isRunningValue = false;
        _this.processedUrl = "";
        _this.processedPath = "";
        _this.isUsingCacheFromUrl = undefined;
        _this.error = null;
        _this.createItemValue = function (value) {
            return new _itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](value);
        };
        return _this;
    }
    Object.defineProperty(ChoicesRestful, "EncodeParameters", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].webserviceEncodeParameters;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].webserviceEncodeParameters = val;
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestful.clearCache = function () {
        ChoicesRestful.itemsResult = {};
        ChoicesRestful.sendingSameRequests = {};
    };
    ChoicesRestful.addSameRequest = function (obj) {
        if (!obj.isUsingCache)
            return false;
        var hash = obj.objHash;
        var res = ChoicesRestful.sendingSameRequests[hash];
        if (!res) {
            ChoicesRestful.sendingSameRequests[obj.objHash] = [];
            return false;
        }
        res.push(obj);
        obj.isRunningValue = true;
        return true;
    };
    ChoicesRestful.unregisterSameRequests = function (obj, items) {
        if (!obj.isUsingCache)
            return;
        var res = ChoicesRestful.sendingSameRequests[obj.objHash];
        delete ChoicesRestful.sendingSameRequests[obj.objHash];
        if (!res)
            return;
        for (var i = 0; i < res.length; i++) {
            res[i].isRunningValue = false;
            if (!!res[i].getResultCallback) {
                res[i].getResultCallback(items);
            }
        }
    };
    ChoicesRestful.getCachedItemsResult = function (obj) {
        var hash = obj.objHash;
        var res = ChoicesRestful.itemsResult[hash];
        if (!res)
            return false;
        if (obj.getResultCallback) {
            obj.getResultCallback(res);
        }
        return true;
    };
    ChoicesRestful.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        return !!this.owner ? this.owner.survey : null;
    };
    ChoicesRestful.prototype.run = function (textProcessor) {
        if (textProcessor === void 0) { textProcessor = null; }
        if (!this.url || !this.getResultCallback)
            return;
        this.processedText(textProcessor);
        if (!this.processedUrl) {
            this.doEmptyResultCallback({});
            this.lastObjHash = this.objHash;
            return;
        }
        if (this.lastObjHash === this.objHash)
            return;
        this.lastObjHash = this.objHash;
        this.error = null;
        if (this.useChangedItemsResults())
            return;
        if (ChoicesRestful.addSameRequest(this))
            return;
        this.sendRequest();
    };
    Object.defineProperty(ChoicesRestful.prototype, "isUsingCache", {
        get: function () {
            if (this.isUsingCacheFromUrl === true)
                return true;
            if (this.isUsingCacheFromUrl === false)
                return false;
            return _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].useCachingForChoicesRestful;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "isRunning", {
        get: function () {
            return this.getIsRunning();
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestful.prototype.getIsRunning = function () {
        return this.isRunningValue;
    };
    Object.defineProperty(ChoicesRestful.prototype, "isWaitingForParameters", {
        get: function () {
            return this.url && !this.processedUrl;
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestful.prototype.useChangedItemsResults = function () {
        return ChoicesRestful.getCachedItemsResult(this);
    };
    ChoicesRestful.prototype.doEmptyResultCallback = function (serverResult) {
        var items = [];
        if (this.updateResultCallback) {
            items = this.updateResultCallback(items, serverResult);
        }
        this.getResultCallback(items);
    };
    ChoicesRestful.prototype.processedText = function (textProcessor) {
        var urlText = this.url;
        if (!!urlText) {
            urlText = urlText
                .replace(ChoicesRestful.cacheText, "")
                .replace(ChoicesRestful.noCacheText, "");
        }
        if (textProcessor) {
            var pUrl = textProcessor.processTextEx(urlText, false, _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].webserviceEncodeParameters);
            var pPath = textProcessor.processTextEx(this.path, false, _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].webserviceEncodeParameters);
            if (!pUrl.hasAllValuesOnLastRun || !pPath.hasAllValuesOnLastRun) {
                this.processedUrl = "";
                this.processedPath = "";
            }
            else {
                this.processedUrl = pUrl.text;
                this.processedPath = pPath.text;
            }
        }
        else {
            this.processedUrl = urlText;
            this.processedPath = this.path;
        }
        if (this.onProcessedUrlCallback) {
            this.onProcessedUrlCallback(this.processedUrl, this.processedPath);
        }
    };
    ChoicesRestful.prototype.parseResponse = function (response) {
        var parsedResponse;
        if (!!response &&
            typeof response.indexOf === "function" &&
            response.indexOf("<") === 0) {
            var parser = new XmlParser();
            parsedResponse = parser.parseXmlString(response);
        }
        else {
            try {
                parsedResponse = JSON.parse(response);
            }
            catch (_a) {
                parsedResponse = (response || "")
                    .split("\n")
                    .map(function (s) { return s.trim(" "); })
                    .filter(function (s) { return !!s; });
            }
        }
        return parsedResponse;
    };
    ChoicesRestful.prototype.sendRequest = function () {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", this.processedUrl);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        var self = this;
        var loadingObjHash = this.objHash;
        xhr.onload = function () {
            self.beforeLoadRequest();
            if (xhr.status === 200) {
                self.onLoad(self.parseResponse(xhr.response), loadingObjHash);
            }
            else {
                self.onError(xhr.statusText, xhr.responseText);
            }
        };
        var options = { request: xhr };
        if (!!ChoicesRestful.onBeforeSendRequest) {
            ChoicesRestful.onBeforeSendRequest(this, options);
        }
        this.beforeSendRequest();
        options.request.send();
    };
    ChoicesRestful.prototype.getType = function () {
        return "choicesByUrl";
    };
    Object.defineProperty(ChoicesRestful.prototype, "isEmpty", {
        get: function () {
            return (!this.url &&
                !this.path &&
                !this.valueName &&
                !this.titleName &&
                !this.imageLinkName);
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestful.prototype.getCustomPropertiesNames = function () {
        var properties = this.getCustomProperties();
        var res = new Array();
        for (var i = 0; i < properties.length; i++) {
            res.push(this.getCustomPropertyName(properties[i].name));
        }
        return res;
    };
    ChoicesRestful.prototype.getCustomPropertyName = function (propertyName) {
        return propertyName + "Name";
    };
    ChoicesRestful.prototype.getCustomProperties = function () {
        var properties = _jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].getProperties(this.itemValueType);
        var res = [];
        for (var i = 0; i < properties.length; i++) {
            if (properties[i].name === "value" ||
                properties[i].name === "text" ||
                properties[i].name === "visibleIf" ||
                properties[i].name === "enableIf")
                continue;
            res.push(properties[i]);
        }
        return res;
    };
    ChoicesRestful.prototype.setData = function (json) {
        this.clear();
        if (json.url)
            this.url = json.url;
        if (json.path)
            this.path = json.path;
        if (json.valueName)
            this.valueName = json.valueName;
        if (json.titleName)
            this.titleName = json.titleName;
        if (json.imageLinkName)
            this.imageLinkName = json.imageLinkName;
        if (json.allowEmptyResponse !== undefined)
            this.allowEmptyResponse = json.allowEmptyResponse;
        if (json.attachOriginalItems !== undefined)
            this.attachOriginalItems = json.attachOriginalItems;
        var properties = this.getCustomPropertiesNames();
        for (var i = 0; i < properties.length; i++) {
            if (json[properties[i]])
                this[properties[i]] = json[properties[i]];
        }
    };
    ChoicesRestful.prototype.getData = function () {
        if (this.isEmpty)
            return null;
        var res = {};
        if (this.url)
            res["url"] = this.url;
        if (this.path)
            res["path"] = this.path;
        if (this.valueName)
            res["valueName"] = this.valueName;
        if (this.titleName)
            res["titleName"] = this.titleName;
        if (this.imageLinkName)
            res["imageLinkName"] = this.imageLinkName;
        if (this.allowEmptyResponse)
            res["allowEmptyResponse"] = this.allowEmptyResponse;
        if (this.attachOriginalItems)
            res["attachOriginalItems"] = this.attachOriginalItems;
        var properties = this.getCustomPropertiesNames();
        for (var i = 0; i < properties.length; i++) {
            if (this[properties[i]])
                res[properties[i]] = this[properties[i]];
        }
        return res;
    };
    Object.defineProperty(ChoicesRestful.prototype, "url", {
        /**
         * A RESTful service's URL.
         *
         * This property supports [dynamic URLs](https://surveyjs.io/Documentation/Library?id=design-survey-conditional-logic#dynamic-texts). For example, the URL below depends on the `region` question's value. When the value changes, the survey automatically loads a new dataset that corresponds to the selected region.
         *
         * ```js
         * url: "https://surveyjs.io/api/CountriesExample?region={region}"
         * ```
         *
         * [View Demo](https://surveyjs.io/Examples/Library/?id=questiontype-dropdownrestfull (linkStyle))
         * @see path
         * @see valueName
         * @see titleName
         */
        get: function () {
            return this.getPropertyValue("url", "");
        },
        set: function (val) {
            this.setPropertyValue("url", val);
            this.isUsingCacheFromUrl = undefined;
            if (!val)
                return;
            if (val.indexOf(ChoicesRestful.cacheText) > -1) {
                this.isUsingCacheFromUrl = true;
            }
            else {
                if (val.indexOf(ChoicesRestful.noCacheText) > -1) {
                    this.isUsingCacheFromUrl = false;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "path", {
        /**
         * Path to the array of choices. The following path separators are allowed: semicolon `;`, comma `,`.
         *
         * Specify this property only if the array of choices is nested within the object returned by the service. For example, the service returns the following object:
         *
         * ```js
         * {
         *   countries: [ ... ],
         *   capitals: [ ... ]
         * }
         * ```
         *
         * To populate choices with values from the `countries` array, set the `path` property to `"countries"`. To use the `capitals` array, set this property to `"capitals"`.
         * @see url
         * @see valueName
         * @see titleName
         */
        get: function () {
            return this.getPropertyValue("path", "");
        },
        set: function (val) {
            this.setPropertyValue("path", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "valueName", {
        /**
         * Specifies which property in the obtained data object contains choice values.
         *
         * [View Demo](https://surveyjs.io/Examples/Library/?id=questiontype-dropdownrestfull (linkStyle))
         *
         * @see url
         * @see path
         * @see titleName
         */
        get: function () {
            return this.getPropertyValue("valueName", "");
        },
        set: function (val) {
            this.setPropertyValue("valueName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "titleName", {
        /**
         * Specifies which property in the obtained data object contains display texts for choices.
         *
         * @see url
         * @see path
         * @see valueName
         */
        get: function () {
            return this.getPropertyValue("titleName", "");
        },
        set: function (val) {
            this.setPropertyValue("titleName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "imageLinkName", {
        /**
         * Specifies which property in the obtained data object contains image URLs. Used only in [Image Picker](https://surveyjs.io/Examples/Library?id=questiontype-imagepicker) questions.
         *
         * @see url
         * @see path
         * @see valueName
         */
        get: function () {
            return this.getPropertyValue("imageLinkName", "");
        },
        set: function (val) {
            this.setPropertyValue("imageLinkName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "allowEmptyResponse", {
        get: function () {
            return this.getPropertyValue("allowEmptyResponse");
        },
        set: function (val) {
            this.setPropertyValue("allowEmptyResponse", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "attachOriginalItems", {
        get: function () {
            return this.getPropertyValue("attachOriginalItems");
        },
        set: function (val) {
            this.setPropertyValue("attachOriginalItems", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChoicesRestful.prototype, "itemValueType", {
        get: function () {
            if (!this.owner)
                return "itemvalue";
            var prop = _jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].findProperty(this.owner.getType(), "choices");
            if (!prop)
                return "itemvalue";
            if (prop.type == "itemvalue[]")
                return "itemvalue";
            return prop.type;
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestful.prototype.clear = function () {
        this.url = "";
        this.path = "";
        this.valueName = "";
        this.titleName = "";
        this.imageLinkName = "";
        var properties = this.getCustomPropertiesNames();
        for (var i = 0; i < properties.length; i++) {
            if (this[properties[i]])
                this[properties[i]] = "";
        }
    };
    ChoicesRestful.prototype.beforeSendRequest = function () {
        this.isRunningValue = true;
        if (!!this.beforeSendRequestCallback) {
            this.beforeSendRequestCallback();
        }
    };
    ChoicesRestful.prototype.beforeLoadRequest = function () {
        this.isRunningValue = false;
    };
    ChoicesRestful.prototype.onLoad = function (result, loadingObjHash) {
        if (loadingObjHash === void 0) { loadingObjHash = null; }
        if (!loadingObjHash) {
            loadingObjHash = this.objHash;
        }
        var items = new Array();
        var updatedResult = this.getResultAfterPath(result);
        if (updatedResult && updatedResult["length"]) {
            for (var i = 0; i < updatedResult.length; i++) {
                var itemValue = updatedResult[i];
                if (!itemValue)
                    continue;
                var value = !!this.getItemValueCallback
                    ? this.getItemValueCallback(itemValue)
                    : this.getValue(itemValue);
                var item = this.createItemValue(value);
                this.setTitle(item, itemValue);
                this.setCustomProperties(item, itemValue);
                if (this.attachOriginalItems) {
                    item.originalItem = itemValue;
                }
                var imageLink = this.getImageLink(itemValue);
                if (!!imageLink) {
                    item.imageLink = imageLink;
                }
                items.push(item);
            }
        }
        else {
            if (!this.allowEmptyResponse) {
                this.error = new _error__WEBPACK_IMPORTED_MODULE_3__["WebRequestEmptyError"](null, this.owner);
            }
        }
        if (this.updateResultCallback) {
            items = this.updateResultCallback(items, result);
        }
        if (this.isUsingCache) {
            ChoicesRestful.itemsResult[loadingObjHash] = items;
        }
        this.callResultCallback(items, loadingObjHash);
        ChoicesRestful.unregisterSameRequests(this, items);
    };
    ChoicesRestful.prototype.callResultCallback = function (items, loadingObjHash) {
        if (loadingObjHash != this.objHash)
            return;
        this.getResultCallback(items);
    };
    ChoicesRestful.prototype.setCustomProperties = function (item, itemValue) {
        var properties = this.getCustomProperties();
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            var val = this.getValueCore(itemValue, this.getPropertyBinding(prop.name));
            if (!this.isValueEmpty(val)) {
                item[prop.name] = val;
            }
        }
    };
    ChoicesRestful.prototype.getPropertyBinding = function (propertyName) {
        if (this[this.getCustomPropertyName(propertyName)])
            return this[this.getCustomPropertyName(propertyName)];
        if (this[propertyName])
            return this[propertyName];
        return propertyName;
    };
    ChoicesRestful.prototype.onError = function (status, response) {
        this.error = new _error__WEBPACK_IMPORTED_MODULE_3__["WebRequestError"](status, response, this.owner);
        this.doEmptyResultCallback(response);
        ChoicesRestful.unregisterSameRequests(this, []);
    };
    ChoicesRestful.prototype.getResultAfterPath = function (result) {
        if (!result)
            return result;
        if (!this.processedPath)
            return result;
        var pathes = this.getPathes();
        for (var i = 0; i < pathes.length; i++) {
            result = result[pathes[i]];
            if (!result)
                return null;
        }
        return result;
    };
    ChoicesRestful.prototype.getPathes = function () {
        var pathes = [];
        if (this.processedPath.indexOf(";") > -1) {
            pathes = this.path.split(";");
        }
        else {
            pathes = this.processedPath.split(",");
        }
        if (pathes.length == 0)
            pathes.push(this.processedPath);
        return pathes;
    };
    ChoicesRestful.prototype.getValue = function (item) {
        if (!item)
            return null;
        if (this.valueName)
            return this.getValueCore(item, this.valueName);
        if (!(item instanceof Object))
            return item;
        var len = Object.keys(item).length;
        if (len < 1)
            return null;
        return item[Object.keys(item)[0]];
    };
    ChoicesRestful.prototype.setTitle = function (item, itemValue) {
        var title = this.titleName ? this.titleName : "title";
        var val = this.getValueCore(itemValue, title);
        if (!val)
            return;
        if (typeof val === "string") {
            item.text = val;
        }
        else {
            item.locText.setJson(val);
        }
    };
    ChoicesRestful.prototype.getImageLink = function (item) {
        var imageLink = this.imageLinkName ? this.imageLinkName : "imageLink";
        return this.getValueCore(item, imageLink);
    };
    ChoicesRestful.prototype.getValueCore = function (item, property) {
        if (!item)
            return null;
        if (property.indexOf(".") < 0)
            return item[property];
        var properties = property.split(".");
        for (var i = 0; i < properties.length; i++) {
            item = item[properties[i]];
            if (!item)
                return null;
        }
        return item;
    };
    Object.defineProperty(ChoicesRestful.prototype, "objHash", {
        get: function () {
            return (this.processedUrl +
                ";" +
                this.processedPath +
                ";" +
                this.valueName +
                ";" +
                this.titleName +
                ";" +
                this.imageLinkName);
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestful.cacheText = "{CACHE}";
    ChoicesRestful.noCacheText = "{NOCACHE}";
    ChoicesRestful.itemsResult = {};
    ChoicesRestful.sendingSameRequests = {};
    return ChoicesRestful;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));

/**
 * Obsolete, please use ChoicesRestful
 */
var ChoicesRestfull = /** @class */ (function (_super) {
    __extends(ChoicesRestfull, _super);
    function ChoicesRestfull() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ChoicesRestfull, "EncodeParameters", {
        get: function () {
            return ChoicesRestful.EncodeParameters;
        },
        set: function (val) {
            ChoicesRestful.EncodeParameters = val;
        },
        enumerable: false,
        configurable: true
    });
    ChoicesRestfull.clearCache = function () {
        ChoicesRestful.clearCache();
    };
    Object.defineProperty(ChoicesRestfull, "onBeforeSendRequest", {
        get: function () {
            return ChoicesRestful.onBeforeSendRequest;
        },
        set: function (val) {
            ChoicesRestful.onBeforeSendRequest = val;
        },
        enumerable: false,
        configurable: true
    });
    return ChoicesRestfull;
}(ChoicesRestful));

_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("choicesByUrl", [
    "url",
    "path",
    "valueName",
    "titleName",
    {
        name: "imageLinkName",
        visibleIf: function (obj) {
            return !!obj && !!obj.owner && obj.owner.getType() == "imagepicker";
        },
    },
    { name: "allowEmptyResponse:boolean" },
    { name: "attachOriginalItems:boolean", visible: false },
], function () {
    return new ChoicesRestful();
});


/***/ }),

/***/ "./src/conditionProcessValue.ts":
/*!**************************************!*\
  !*** ./src/conditionProcessValue.ts ***!
  \**************************************/
/*! exports provided: ProcessValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProcessValue", function() { return ProcessValue; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");

var surveyBuiltInVarible = "@survey";
var ProcessValue = /** @class */ (function () {
    function ProcessValue() {
        this.values = null;
        this.properties = null;
    }
    ProcessValue.prototype.getFirstName = function (text, obj) {
        if (obj === void 0) { obj = null; }
        if (!text)
            return text;
        var res = "";
        if (!!obj) {
            res = this.getFirstPropertyName(text, obj);
            if (!!res)
                return res;
        }
        for (var i = 0; i < text.length; i++) {
            var ch = text[i];
            if (ch == "." || ch == "[")
                break;
            res += ch;
        }
        return res;
    };
    ProcessValue.prototype.hasValue = function (text, values) {
        if (values === void 0) { values = null; }
        if (!values)
            values = this.values;
        var res = this.getValueCore(text, values);
        return res.hasValue;
    };
    ProcessValue.prototype.getValue = function (text, values) {
        if (values === void 0) { values = null; }
        if (!values)
            values = this.values;
        var res = this.getValueCore(text, values);
        return res.value;
    };
    ProcessValue.prototype.setValue = function (obj, text, value) {
        if (!text)
            return;
        var nonNestedObj = this.getNonNestedObject(obj, text, true);
        if (!nonNestedObj)
            return;
        obj = nonNestedObj.value;
        text = nonNestedObj.text;
        if (!!obj && !!text) {
            obj[text] = value;
        }
    };
    ProcessValue.prototype.getValueInfo = function (valueInfo) {
        if (!!valueInfo.path) {
            valueInfo.value = this.getValueFromPath(valueInfo.path, this.values);
            valueInfo.hasValue =
                valueInfo.value !== null && !_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(valueInfo.value);
            if (!valueInfo.hasValue &&
                valueInfo.path.length > 1 &&
                valueInfo.path[valueInfo.path.length - 1] == "length") {
                valueInfo.hasValue = true;
                valueInfo.value = 0;
            }
            return;
        }
        var res = this.getValueCore(valueInfo.name, this.values);
        valueInfo.value = res.value;
        valueInfo.hasValue = res.hasValue;
        valueInfo.path = res.hasValue ? res.path : null;
    };
    ProcessValue.prototype.getValueFromPath = function (path, values) {
        if (path.length === 2 && path[0] === surveyBuiltInVarible) {
            return this.getValueFromSurvey(path[1]);
        }
        var index = 0;
        while (!!values && index < path.length) {
            var ind_name = path[index];
            if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(ind_name) &&
                Array.isArray(values) &&
                ind_name >= values.length)
                return null;
            values = values[ind_name];
            index++;
        }
        return values;
    };
    ProcessValue.prototype.getValueCore = function (text, values) {
        var question = this.getQuestionDirectly(text);
        if (question) {
            return { hasValue: true, value: question.value, path: [text] };
        }
        var res = this.getValueFromValues(text, values);
        if (!!text && !res.hasValue) {
            var val = this.getValueFromSurvey(text);
            if (val !== undefined) {
                res.hasValue = true;
                res.value = val;
                res.path = [surveyBuiltInVarible, text];
            }
        }
        return res;
    };
    ProcessValue.prototype.getQuestionDirectly = function (name) {
        if (!!this.properties && !!this.properties.survey)
            return this.properties.survey.getQuestionByValueName(name);
        return undefined;
    };
    ProcessValue.prototype.getValueFromSurvey = function (name) {
        if (!!this.properties && !!this.properties.survey)
            return this.properties.survey.getBuiltInVariableValue(name.toLocaleLowerCase());
        return undefined;
    };
    ProcessValue.prototype.getValueFromValues = function (text, values) {
        var res = { hasValue: false, value: null, path: null };
        var curValue = values;
        if (!curValue && curValue !== 0 && curValue !== false)
            return res;
        if (text &&
            text.lastIndexOf(".length") > -1 &&
            text.lastIndexOf(".length") === text.length - ".length".length) {
            res.value = 0;
            res.hasValue = true;
        }
        var nonNestedObj = this.getNonNestedObject(curValue, text, false);
        if (!nonNestedObj)
            return res;
        res.path = nonNestedObj.path;
        res.value = !!nonNestedObj.text
            ? this.getObjectValue(nonNestedObj.value, nonNestedObj.text)
            : nonNestedObj.value;
        res.hasValue = !_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(res.value);
        return res;
    };
    ProcessValue.prototype.getNonNestedObject = function (obj, text, createPath) {
        var curName = this.getFirstPropertyName(text, obj, createPath);
        var path = !!curName ? [curName] : null;
        while (text != curName && !!obj) {
            var isArray = text[0] == "[";
            if (!isArray) {
                if (!curName && text == this.getFirstName(text))
                    return { value: obj, text: text, path: path };
                obj = this.getObjectValue(obj, curName);
                if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(obj) && !createPath)
                    return null;
                text = text.substring(curName.length);
            }
            else {
                var objInArray = this.getObjInArray(obj, text);
                if (!objInArray)
                    return null;
                obj = objInArray.value;
                text = objInArray.text;
                path.push(objInArray.index);
            }
            if (!!text && text[0] == ".") {
                text = text.substring(1);
            }
            curName = this.getFirstPropertyName(text, obj, createPath);
            if (!!curName) {
                path.push(curName);
            }
        }
        return { value: obj, text: text, path: path };
    };
    ProcessValue.prototype.getObjInArray = function (curValue, text) {
        if (!Array.isArray(curValue))
            return null;
        var index = 1;
        var str = "";
        while (index < text.length && text[index] != "]") {
            str += text[index];
            index++;
        }
        text = index < text.length ? text.substring(index + 1) : "";
        index = this.getIntValue(str);
        if (index < 0 || index >= curValue.length)
            return null;
        return { value: curValue[index], text: text, index: index };
    };
    ProcessValue.prototype.getFirstPropertyName = function (name, obj, createProp) {
        if (createProp === void 0) { createProp = false; }
        if (!name)
            return name;
        if (!obj)
            obj = {};
        if (obj.hasOwnProperty(name))
            return name;
        var nameInLow = name.toLowerCase();
        var A = nameInLow[0];
        var a = A.toUpperCase();
        for (var key in obj) {
            var first = key[0];
            if (first === a || first === A) {
                var keyName = key.toLowerCase();
                if (keyName == nameInLow)
                    return key;
                if (nameInLow.length <= keyName.length)
                    continue;
                var ch = nameInLow[keyName.length];
                if (ch != "." && ch != "[")
                    continue;
                if (keyName == nameInLow.substring(0, keyName.length))
                    return key;
            }
        }
        if (createProp && name[0] !== "[") {
            var ind = name.indexOf(".");
            if (ind > -1) {
                name = name.substring(0, ind);
                obj[name] = {};
            }
            return name;
        }
        return "";
    };
    ProcessValue.prototype.getObjectValue = function (obj, name) {
        if (!name)
            return null;
        return obj[name];
    };
    ProcessValue.prototype.getIntValue = function (str) {
        if (str == "0" || ((str | 0) > 0 && str % 1 == 0))
            return Number(str);
        return -1;
    };
    return ProcessValue;
}());



/***/ }),

/***/ "./src/conditions.ts":
/*!***************************!*\
  !*** ./src/conditions.ts ***!
  \***************************/
/*! exports provided: ExpressionExecutor, ExpressionRunnerBase, ConditionRunner, ExpressionRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionExecutor", function() { return ExpressionExecutor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionRunnerBase", function() { return ExpressionRunnerBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionRunner", function() { return ConditionRunner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionRunner", function() { return ExpressionRunner; });
/* harmony import */ var _conditionProcessValue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./conditionProcessValue */ "./src/conditionProcessValue.ts");
/* harmony import */ var _conditionsParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conditionsParser */ "./src/conditionsParser.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ExpressionExecutor = /** @class */ (function () {
    function ExpressionExecutor(expression) {
        this.processValue = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_0__["ProcessValue"]();
        this.parser = new _conditionsParser__WEBPACK_IMPORTED_MODULE_1__["ConditionsParser"]();
        this.isAsyncValue = false;
        this.hasFunctionValue = false;
        this.setExpression(expression);
    }
    Object.defineProperty(ExpressionExecutor.prototype, "expression", {
        get: function () {
            return this.expressionValue;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionExecutor.prototype.setExpression = function (value) {
        if (this.expression === value)
            return;
        this.expressionValue = value;
        this.operand = this.parser.parseExpression(value);
        this.hasFunctionValue = this.canRun() ? this.operand.hasFunction() : false;
        this.isAsyncValue = this.hasFunction()
            ? this.operand.hasAsyncFunction()
            : false;
    };
    ExpressionExecutor.prototype.getVariables = function () {
        if (!this.operand)
            return [];
        var variables = [];
        this.operand.setVariables(variables);
        return variables;
    };
    ExpressionExecutor.prototype.hasFunction = function () {
        return this.hasFunctionValue;
    };
    Object.defineProperty(ExpressionExecutor.prototype, "isAsync", {
        get: function () {
            return this.isAsyncValue;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionExecutor.prototype.canRun = function () {
        return !!this.operand;
    };
    ExpressionExecutor.prototype.run = function (values, properties) {
        var _this = this;
        if (properties === void 0) { properties = null; }
        if (!this.operand)
            return null;
        this.processValue.values = values;
        this.processValue.properties = properties;
        if (!this.isAsync)
            return this.runValues();
        this.asyncFuncList = [];
        this.operand.addToAsyncList(this.asyncFuncList);
        for (var i = 0; i < this.asyncFuncList.length; i++) {
            this.asyncFuncList[i].onAsyncReady = function () {
                _this.doAsyncFunctionReady();
            };
        }
        for (var i = 0; i < this.asyncFuncList.length; i++) {
            this.asyncFuncList[i].evaluateAsync(this.processValue);
        }
        return false;
    };
    ExpressionExecutor.prototype.doAsyncFunctionReady = function () {
        for (var i = 0; i < this.asyncFuncList.length; i++) {
            if (!this.asyncFuncList[i].isReady)
                return;
        }
        this.runValues();
    };
    ExpressionExecutor.prototype.runValues = function () {
        var res = this.operand.evaluate(this.processValue);
        if (!!this.onComplete) {
            this.onComplete(res);
        }
        return res;
    };
    ExpressionExecutor.createExpressionExecutor = function (expression) { return new ExpressionExecutor(expression); };
    return ExpressionExecutor;
}());

var ExpressionRunnerBase = /** @class */ (function () {
    function ExpressionRunnerBase(expression) {
        this.expression = expression;
    }
    Object.defineProperty(ExpressionRunnerBase.prototype, "expression", {
        get: function () {
            return !!this.expressionExecutor ? this.expressionExecutor.expression : "";
        },
        set: function (value) {
            var _this = this;
            if (!!this.expressionExecutor && value === this.expression)
                return;
            this.expressionExecutor = ExpressionExecutor.createExpressionExecutor(value);
            this.expressionExecutor.onComplete = function (res) { _this.doOnComplete(res); };
        },
        enumerable: false,
        configurable: true
    });
    ExpressionRunnerBase.prototype.getVariables = function () {
        return this.expressionExecutor.getVariables();
    };
    ExpressionRunnerBase.prototype.hasFunction = function () {
        return this.expressionExecutor.hasFunction();
    };
    Object.defineProperty(ExpressionRunnerBase.prototype, "isAsync", {
        get: function () {
            return this.expressionExecutor.isAsync;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionRunnerBase.prototype.canRun = function () {
        return this.expressionExecutor.canRun();
    };
    ExpressionRunnerBase.prototype.runCore = function (values, properties) {
        if (properties === void 0) { properties = null; }
        return this.expressionExecutor.run(values, properties);
    };
    ExpressionRunnerBase.prototype.doOnComplete = function (res) { };
    return ExpressionRunnerBase;
}());

var ConditionRunner = /** @class */ (function (_super) {
    __extends(ConditionRunner, _super);
    function ConditionRunner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConditionRunner.prototype.run = function (values, properties) {
        if (properties === void 0) { properties = null; }
        return this.runCore(values, properties) == true;
    };
    ConditionRunner.prototype.doOnComplete = function (res) {
        if (!!this.onRunComplete)
            this.onRunComplete(res == true);
    };
    return ConditionRunner;
}(ExpressionRunnerBase));

var ExpressionRunner = /** @class */ (function (_super) {
    __extends(ExpressionRunner, _super);
    function ExpressionRunner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExpressionRunner.prototype.run = function (values, properties) {
        if (properties === void 0) { properties = null; }
        return this.runCore(values, properties);
    };
    ExpressionRunner.prototype.doOnComplete = function (res) {
        if (!!this.onRunComplete)
            this.onRunComplete(res);
    };
    return ExpressionRunner;
}(ExpressionRunnerBase));



/***/ }),

/***/ "./src/conditionsParser.ts":
/*!*********************************!*\
  !*** ./src/conditionsParser.ts ***!
  \*********************************/
/*! exports provided: ConditionsParserError, ConditionsParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionsParserError", function() { return ConditionsParserError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionsParser", function() { return ConditionsParser; });
/* harmony import */ var _expressions_expressionParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./expressions/expressionParser */ "./src/expressions/expressionParser.ts");

var ConditionsParserError = /** @class */ (function () {
    function ConditionsParserError(at, code) {
        this.at = at;
        this.code = code;
    }
    return ConditionsParserError;
}());

var ConditionsParser = /** @class */ (function () {
    function ConditionsParser() {
    }
    ConditionsParser.prototype.patchExpression = function (text) {
        return text
            .replace(/=>/g, ">=")
            .replace(/=</g, "<=")
            .replace(/<>/g, "!=")
            .replace(/equals/g, "equal ")
            .replace(/notequals/g, "notequal ");
    };
    ConditionsParser.prototype.createCondition = function (text) {
        return this.parseExpression(text);
    };
    ConditionsParser.prototype.parseExpression = function (text) {
        try {
            var result = ConditionsParser.parserCache[text];
            if (result === undefined) {
                result = Object(_expressions_expressionParser__WEBPACK_IMPORTED_MODULE_0__["parse"])(this.patchExpression(text));
                if (!result.hasAsyncFunction()) {
                    ConditionsParser.parserCache[text] = result;
                }
            }
            return result;
        }
        catch (e) {
            if (e instanceof _expressions_expressionParser__WEBPACK_IMPORTED_MODULE_0__["SyntaxError"]) {
                this.conditionError = new ConditionsParserError(e.location.start.offset, e.message);
            }
        }
    };
    Object.defineProperty(ConditionsParser.prototype, "error", {
        get: function () {
            return this.conditionError;
        },
        enumerable: false,
        configurable: true
    });
    ConditionsParser.parserCache = {};
    return ConditionsParser;
}());



/***/ }),

/***/ "./src/defaultCss/cssmodern.ts":
/*!*************************************!*\
  !*** ./src/defaultCss/cssmodern.ts ***!
  \*************************************/
/*! exports provided: modernCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modernCss", function() { return modernCss; });
/* harmony import */ var _defaultV2Css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultV2Css */ "./src/defaultCss/defaultV2Css.ts");

var modernCss = {
    root: "sv-root-modern",
    timerRoot: "sv-body__timer",
    container: "sv-container-modern",
    header: "sv-title sv-container-modern__title",
    headerClose: "sv-container-modern__close",
    bodyContainer: "sv-components-row",
    body: "sv-components-column sv-components-column--expandable sv-body",
    bodyEmpty: "sv-body sv-body--empty",
    footer: "sv-footer sv-body__footer sv-clearfix",
    title: "",
    description: "",
    logo: "sv-logo",
    logoImage: "sv-logo__image",
    headerText: "sv-header__text",
    navigationButton: "sv-btn sv-btn--navigation",
    completedPage: "sv-completedpage",
    navigation: {
        complete: "sv-footer__complete-btn",
        prev: "sv-footer__prev-btn",
        next: "sv-footer__next-btn",
        start: "sv-footer__start-btn",
        preview: "sv-footer__preview-btn",
        edit: "sv-footer__edit-btn",
    },
    panel: {
        title: "sv-title sv-panel__title",
        titleExpandable: "sv-panel__title--expandable",
        titleExpanded: "sv-panel__title--expanded",
        titleCollapsed: "sv-panel__title--collapsed",
        titleOnError: "sv-panel__title--error",
        description: "sv-description sv-panel__description",
        container: "sv-panel sv-row__panel",
        content: "sv-panel__content",
        icon: "sv-panel__icon",
        iconExpanded: "sv-panel__icon--expanded",
        footer: "sv-panel__footer",
        requiredText: "sv-panel__required-text",
        number: "sv-question__num",
    },
    paneldynamic: {
        root: "sv-paneldynamic",
        navigation: "sv-paneldynamic__navigation",
        title: "sv-title sv-question__title",
        button: "sv-btn",
        buttonRemove: "sv-paneldynamic__remove-btn",
        buttonRemoveRight: "sv-paneldynamic__remove-btn--right",
        buttonAdd: "sv-paneldynamic__add-btn",
        progressTop: "sv-paneldynamic__progress sv-paneldynamic__progress--top",
        progressBottom: "sv-paneldynamic__progress sv-paneldynamic__progress--bottom",
        buttonPrev: "sv-paneldynamic__prev-btn",
        buttonNext: "sv-paneldynamic__next-btn",
        buttonPrevDisabled: "sv-paneldynamic__prev-btn--disabled",
        buttonNextDisabled: "sv-paneldynamic__next-btn--disabled",
        progressContainer: "sv-paneldynamic__progress-container",
        progress: "sv-progress",
        progressBar: "sv-progress__bar",
        progressText: "sv-paneldynamic__progress-text",
        separator: "sv-paneldynamic__separator",
        panelWrapper: "sv-paneldynamic__panel-wrapper",
        panelWrapperInRow: "sv-paneldynamic__panel-wrapper--in-row",
        progressBtnIcon: "icon-progressbutton",
        footer: ""
    },
    progress: "sv-progress sv-body__progress",
    progressBar: "sv-progress__bar",
    progressText: "sv-progress__text",
    progressTextInBar: "sv-hidden",
    progressButtonsContainerCenter: "sv_progress-buttons__container-center",
    progressButtonsContainer: "sv_progress-buttons__container",
    progressButtonsImageButtonLeft: "sv_progress-buttons__image-button-left",
    progressButtonsImageButtonRight: "sv_progress-buttons__image-button-right",
    progressButtonsImageButtonHidden: "sv_progress-buttons__image-button--hidden",
    progressButtonsListContainer: "sv_progress-buttons__list-container",
    progressButtonsList: "sv_progress-buttons__list",
    progressButtonsListElementPassed: "sv_progress-buttons__list-element--passed",
    progressButtonsListElementCurrent: "sv_progress-buttons__list-element--current",
    progressButtonsListElementNonClickable: "sv_progress-buttons__list-element--nonclickable",
    progressButtonsPageTitle: "sv_progress-buttons__page-title",
    progressButtonsPageDescription: "sv_progress-buttons__page-description",
    page: {
        root: "sv-page sv-body__page",
        title: "sv-title sv-page__title",
        description: "sv-description sv-page__description",
    },
    pageTitle: "sv-title sv-page__title",
    pageDescription: "sv-description sv-page__description",
    row: "sv-row sv-clearfix",
    question: {
        mainRoot: "sv-question sv-row__question",
        flowRoot: "sv-question sv-row__question sv-row__question--flow",
        asCell: "sv-table__cell",
        header: "sv-question__header",
        headerLeft: "sv-question__header--location--left",
        headerTop: "sv-question__header--location--top",
        headerBottom: "sv-question__header--location--bottom",
        content: "sv-question__content",
        contentLeft: "sv-question__content--left",
        titleLeftRoot: "",
        answered: "sv-question--answered",
        titleOnAnswer: "sv-question__title--answer",
        titleOnError: "sv-question__title--error",
        title: "sv-title sv-question__title",
        titleExpandable: "sv-question__title--expandable",
        titleExpanded: "sv-question__title--expanded",
        titleCollapsed: "sv-question__title--collapsed",
        icon: "sv-question__icon",
        iconExpanded: "sv-question__icon--expanded",
        requiredText: "sv-question__required-text",
        number: "sv-question__num",
        description: "sv-description sv-question__description",
        descriptionUnderInput: "sv-description sv-question__description",
        comment: "sv-comment",
        required: "sv-question--required",
        titleRequired: "sv-question__title--required",
        indent: 20,
        footer: "sv-question__footer",
        formGroup: "sv-question__form-group",
        hasError: "",
        disabled: "sv-question--disabled",
    },
    image: { root: "sv-image", image: "sv_image_image" },
    error: {
        root: "sv-question__erbox",
        icon: "",
        item: "",
        locationTop: "sv-question__erbox--location--top",
        locationBottom: "sv-question__erbox--location--bottom",
    },
    checkbox: {
        root: "sv-selectbase",
        item: "sv-item sv-checkbox sv-selectbase__item",
        itemSelectAll: "sv-checkbox--selectall",
        itemNone: "sv-checkbox--none",
        itemDisabled: "sv-item--disabled sv-checkbox--disabled",
        itemChecked: "sv-checkbox--checked",
        itemHover: "sv-checkbox--allowhover",
        itemInline: "sv-selectbase__item--inline",
        label: "sv-selectbase__label",
        labelChecked: "",
        itemControl: "sv-visuallyhidden sv-item__control",
        itemDecorator: "sv-item__svg sv-checkbox__svg",
        itemSvgIconId: "#icon-moderncheck",
        controlLabel: "sv-item__control-label",
        materialDecorator: "sv-item__decorator sv-selectbase__decorator sv-checkbox__decorator",
        other: "sv-comment sv-question__other",
        column: "sv-selectbase__column",
    },
    ranking: {
        root: "sv-ranking",
        rootMobileMod: "sv-ranking--mobile",
        rootDragMod: "sv-ranking--drag",
        rootDisabled: "sv-ranking--disabled",
        rootDragHandleAreaIcon: "sv-ranking--drag-handle-area-icon",
        item: "sv-ranking-item",
        itemContent: "sv-ranking-item__content",
        itemIndex: "sv-ranking-item__index",
        itemIndexEmptyMode: "sv-ranking-item__index--empty",
        // itemText: "sv-ranking-item__text",
        controlLabel: "sv-ranking-item__text",
        itemGhostNode: "sv-ranking-item__ghost",
        itemIconContainer: "sv-ranking-item__icon-container",
        itemIcon: "sv-ranking-item__icon",
        itemIconHoverMod: "sv-ranking-item__icon--hover",
        itemIconFocusMod: "sv-ranking-item__icon--focus",
        itemGhostMod: "sv-ranking-item--ghost",
        itemDragMod: "sv-ranking-item--drag",
    },
    radiogroup: {
        root: "sv-selectbase",
        item: "sv-item sv-radio sv-selectbase__item",
        itemInline: "sv-selectbase__item--inline",
        label: "sv-selectbase__label",
        labelChecked: "",
        itemDisabled: "sv-item--disabled sv-radio--disabled",
        itemChecked: "sv-radio--checked",
        itemHover: "sv-radio--allowhover",
        itemControl: "sv-visuallyhidden sv-item__control",
        itemDecorator: "sv-item__svg sv-radio__svg",
        itemSvgIconId: "#icon-modernradio",
        controlLabel: "sv-item__control-label",
        materialDecorator: "sv-item__decorator sv-selectbase__decorator sv-radio__decorator",
        other: "sv-comment sv-question__other",
        clearButton: "sv-btn sv-selectbase__clear-btn",
        column: "sv-selectbase__column",
    },
    buttongroup: {
        root: "sv-button-group",
        item: "sv-button-group__item",
        itemIcon: "sv-button-group__item-icon",
        itemDecorator: "sv-button-group__item-decorator",
        itemCaption: "sv-button-group__item-caption",
        itemSelected: "sv-button-group__item--selected",
        itemHover: "sv-button-group__item--hover",
        itemDisabled: "sv-button-group__item--disabled",
        itemControl: "sv-visuallyhidden",
    },
    boolean: {
        root: "sv_qbln",
        rootRadio: "sv_qbln",
        small: "sv-row__question--small",
        item: "sv-boolean sv-item",
        control: "sv-visuallyhidden",
        itemChecked: "sv-boolean--checked",
        itemIndeterminate: "sv-boolean--indeterminate",
        itemDisabled: "sv-item--disabled sv-boolean--disabled",
        switch: "sv-boolean__switch",
        slider: "sv-boolean__slider",
        label: "sv-boolean__label",
        disabledLabel: "sv-boolean__label--disabled",
        //checkbox
        rootCheckbox: "sv_qbln",
        checkboxItem: "sv-boolean sv-item",
        checkboxItemChecked: "sv-boolean--checked",
        controlCheckbox: "sv-visuallyhidden",
        checkboxControlLabel: "sv-boolean__label",
        checkboxItemIndeterminate: "sv-boolean--indeterminate",
        checkboxItemDisabled: "sv-item--disabled sv-boolean--disabled",
        checkboxMaterialDecorator: "sv-item__decorator sv-boolean__decorator ",
        checkboxItemDecorator: "sv-item__svg  sv-boolean__svg",
        indeterminatePath: "sv-boolean__indeterminate-path",
        svgIconCheckedId: "#icon-modernbooleancheckchecked",
        svgIconUncheckedId: "#icon-modernbooleancheckunchecked",
        svgIconIndId: "#icon-modernbooleancheckind",
    },
    text: {
        root: "sv-text",
        small: "sv-row__question--small",
        remainingCharacterCounter: "sv-remaining-character-counter",
        onError: "sv-text--error",
    },
    multipletext: {
        root: "sv-multipletext",
        item: "sv-multipletext__item",
        itemLabel: "sv-multipletext__item-label",
        itemTitle: "sv-multipletext__item-title",
        row: "sv-multipletext__row",
        cell: "sv-multipletext__cell",
    },
    dropdown: {
        root: "",
        popup: "sv-dropdown-popup",
        small: "sv-row__question--small",
        control: "sv-dropdown",
        selectWrapper: "",
        other: "sv-comment sv-question__other",
        onError: "sv-dropdown--error",
        cleanButton: "sv-dropdown_clean-button",
        cleanButtonSvg: "sv-dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear_16x16",
        filterStringInput: "sv-dropdown__filter-string-input",
        controlValue: "sv-dropdown__value",
        controlInputFieldComponent: "sv_dropdown_control__input-field-component",
    },
    tagbox: {
        root: "",
        popup: "sv-dropdown-popup",
        small: "sv-row__question--small",
        selectWrapper: "sv_select_wrapper sv-tagbox_wrapper",
        other: "sv-input sv-comment sv-selectbase__other",
        cleanButton: "sv-tagbox_clean-button sv-dropdown_clean-button",
        cleanButtonSvg: "sv-tagbox_clean-button-svg sv-dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear_16x16",
        cleanItemButton: "sv-tagbox__item_clean-button",
        cleanItemButtonSvg: "sv-tagbox__item_clean-button-svg",
        cleanItemButtonIconId: "icon-clear_16x16",
        control: "sv-input sv-tagbox sv-dropdown",
        controlValue: "sv-tagbox__value sv-dropdown__value",
        controlEmpty: "sv-dropdown--empty sv-tagbox--empty",
        placeholderInput: "sv-tagbox__placeholder",
        filterStringInput: "sv-tagbox__filter-string-input sv-dropdown__filter-string-input"
    },
    imagepicker: {
        root: "sv-selectbase sv-imagepicker",
        column: "sv-selectbase__column",
        item: "sv-imagepicker__item",
        itemInline: "sv-imagepicker__item--inline",
        itemChecked: "sv-imagepicker__item--checked",
        itemDisabled: "sv-imagepicker__item--disabled",
        itemHover: "sv-imagepicker__item--allowhover",
        label: "sv-imagepicker__label",
        itemControl: "sv-imagepicker__control sv-visuallyhidden",
        image: "sv-imagepicker__image",
        itemText: "sv-imagepicker__text",
        clearButton: "sv-btn",
        other: "sv-comment sv-question__other",
    },
    matrix: {
        tableWrapper: "sv-matrix",
        root: "sv-table sv-matrix-root",
        rowError: "sv-matrix__row--error",
        cell: "sv-table__cell sv-matrix__cell",
        headerCell: "sv-table__cell sv-table__cell--header",
        label: "sv-item sv-radio sv-matrix__label",
        itemValue: "sv-visuallyhidden sv-item__control sv-radio__control",
        itemChecked: "sv-radio--checked",
        itemDisabled: "sv-item--disabled sv-radio--disabled",
        itemHover: "sv-radio--allowhover",
        materialDecorator: "sv-item__decorator sv-radio__decorator",
        itemDecorator: "sv-item__svg sv-radio__svg",
        cellText: "sv-matrix__text",
        cellTextSelected: "sv-matrix__text--checked",
        cellTextDisabled: "sv-matrix__text--disabled",
        cellResponsiveTitle: "sv-hidden",
        itemSvgIconId: "#icon-modernradio",
    },
    matrixdropdown: {
        root: "sv-table sv-matrixdropdown",
        cell: "sv-table__cell",
        headerCell: "sv-table__cell sv-table__cell--header",
        row: "sv-table__row",
        rowAdditional: "sv-table__row--additional",
        detailRow: "sv-table__row--detail",
        detailRowText: "sv-table__cell--detail-rowtext",
        detailCell: "sv-table__cell--detail",
        choiceCell: "sv-table__cell--choice",
        detailButton: "sv-table__cell--detail-button",
        detailButtonExpanded: "sv-table__cell--detail-button--expanded",
        detailIcon: "sv-detail-panel__icon",
        detailIconExpanded: "sv-detail-panel__icon--expanded",
        detailPanelCell: "sv-table__cell--detail-panel",
        actionsCell: "sv-table__cell sv-table__cell--actions",
    },
    matrixdynamic: {
        root: "sv-table sv-matrixdynamic",
        cell: "sv-table__cell",
        headerCell: "sv-table__cell sv-table__cell--header",
        button: "sv-btn",
        buttonAdd: "sv-matrixdynamic__add-btn",
        buttonRemove: "sv-matrixdynamic__remove-btn",
        iconAdd: "",
        iconRemove: "",
        iconDrag: "sv-matrixdynamic__drag-icon",
        row: "sv-table__row",
        detailRow: "sv-table__row--detail",
        detailCell: "sv-table__cell--detail",
        choiceCell: "sv-table__cell--choice",
        detailButton: "sv-table__cell--detail-button",
        detailButtonExpanded: "sv-table__cell--detail-button--expanded",
        detailIcon: "sv-detail-panel__icon",
        detailIconExpanded: "sv-detail-panel__icon--expanded",
        detailPanelCell: "sv-table__cell--detail-panel",
        actionsCell: "sv-table__cell sv-table__cell--actions",
        emptyRowsSection: "sv-table__empty--rows--section",
        emptyRowsText: "sv-table__empty--rows--text",
        emptyRowsButton: "",
        ghostRow: "sv-matrix-row--drag-drop-ghost-mod"
    },
    rating: {
        root: "sv-rating",
        item: "sv-rating__item",
        selected: "sv-rating__item--selected",
        minText: "sv-rating__min-text",
        itemText: "sv-rating__item-text",
        maxText: "sv-rating__max-text",
        itemDisabled: "sv-rating--disabled",
        filterStringInput: "sv-dropdown__filter-string-input",
        control: "sv-dropdown",
        cleanButton: "sv-dropdown_clean-button",
        cleanButtonSvg: "sv-dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear_16x16",
        controlValue: "sv-dropdown__value",
        controlInputFieldComponent: "sv_dropdown_control__input-field-component"
    },
    comment: {
        root: "sv-comment",
        small: "sv-row__question--small",
        remainingCharacterCounter: "sv-remaining-character-counter",
    },
    expression: "",
    file: {
        root: "sv-file",
        other: "sv-comment sv-question__other",
        placeholderInput: "sv-visuallyhidden",
        preview: "sv-file__preview",
        fileSignBottom: "sv-file__sign",
        fileDecorator: "sv-file__decorator",
        fileInput: "sv-visuallyhidden",
        noFileChosen: "sv-description sv-file__no-file-chosen",
        chooseFile: "sv-btn sv-file__choose-btn",
        controlDisabled: "sv-file__choose-btn--disabled",
        removeButton: "sv-hidden",
        removeButtonBottom: "sv-btn sv-file__clean-btn",
        removeFile: "sv-hidden",
        removeFileSvg: "sv-file__remove-svg",
        removeFileSvgIconId: "icon-removefile",
        wrapper: "sv-file__wrapper",
        dragAreaPlaceholder: "sv-hidden",
        fileList: "",
    },
    signaturepad: {
        root: "sv-signaturepad sjs_sp_container",
        small: "sv-row__question--small",
        controls: "sjs_sp_controls",
        placeholder: "sjs_sp_placeholder",
        clearButton: "sjs_sp_clear",
    },
    saveData: {
        root: "sv-save-data_root",
        info: "sv-save-data_info",
        error: "sv-save-data_error",
        success: "sv-save-data_success",
        button: "sv-save-data_button",
    },
    window: {
        root: "sv_window",
        body: "sv_window_content",
        header: {
            root: "sv_window_title",
            title: "",
            button: "",
            buttonExpanded: "",
            buttonCollapsed: "",
        },
    },
    variables: {
        themeMark: "--sv-modern-mark"
    }
};
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["modern"] = modernCss;


/***/ }),

/***/ "./src/defaultCss/cssstandard.ts":
/*!***************************************!*\
  !*** ./src/defaultCss/cssstandard.ts ***!
  \***************************************/
/*! exports provided: defaultStandardCss */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultStandardCss", function() { return defaultStandardCss; });
/* harmony import */ var _defaultV2Css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultV2Css */ "./src/defaultCss/defaultV2Css.ts");

var defaultStandardCss = {
    root: "sv_main sv_default_css",
    container: "sv_container",
    header: "sv_header",
    bodyContainer: "sv-components-row",
    body: "sv-components-column sv-components-column--expandable sv_body",
    bodyEmpty: "sv_body sv_body_empty",
    footer: "sv_nav",
    title: "",
    description: "",
    logo: "sv_logo",
    logoImage: "sv_logo__image",
    headerText: "sv_header__text",
    navigationButton: "sv_nav_btn",
    completedPage: "sv_completed_page",
    navigation: {
        complete: "sv_complete_btn",
        prev: "sv_prev_btn",
        next: "sv_next_btn",
        start: "sv_start_btn",
        preview: "sv_preview_btn",
        edit: "sv_edit_btn",
    },
    progress: "sv_progress",
    progressBar: "sv_progress_bar",
    progressTextInBar: "sv-hidden",
    progressButtonsContainerCenter: "sv_progress-buttons__container-center",
    progressButtonsContainer: "sv_progress-buttons__container",
    progressButtonsImageButtonLeft: "sv_progress-buttons__image-button-left",
    progressButtonsImageButtonRight: "sv_progress-buttons__image-button-right",
    progressButtonsImageButtonHidden: "sv_progress-buttons__image-button--hidden",
    progressButtonsListContainer: "sv_progress-buttons__list-container",
    progressButtonsList: "sv_progress-buttons__list",
    progressButtonsListElementPassed: "sv_progress-buttons__list-element--passed",
    progressButtonsListElementCurrent: "sv_progress-buttons__list-element--current",
    progressButtonsListElementNonClickable: "sv_progress-buttons__list-element--nonclickable",
    progressButtonsPageTitle: "sv_progress-buttons__page-title",
    progressButtonsPageDescription: "sv_progress-buttons__page-description",
    page: {
        root: "sv_p_root",
        title: "sv_page_title",
        description: "",
    },
    // TODO: move to the page object
    pageTitle: "sv_page_title",
    pageDescription: "",
    row: "sv_row",
    question: {
        mainRoot: "sv_q sv_qstn",
        flowRoot: "sv_q_flow sv_qstn",
        header: "",
        headerLeft: "title-left",
        content: "",
        contentLeft: "content-left",
        titleLeftRoot: "sv_qstn_left",
        requiredText: "sv_q_required_text",
        title: "sv_q_title",
        titleExpandable: "sv_q_title_expandable",
        titleExpanded: "sv_q_title_expanded",
        titleCollapsed: "sv_q_title_collapsed",
        number: "sv_q_num",
        description: "sv_q_description",
        comment: "",
        required: "",
        titleRequired: "",
        hasError: "",
        indent: 20,
        footer: "sv_q_footer",
        formGroup: "form-group",
        asCell: "sv_matrix_cell",
        icon: "sv_question_icon",
        iconExpanded: "sv_expanded",
        disabled: "sv_q--disabled",
    },
    panel: {
        title: "sv_p_title",
        titleExpandable: "sv_p_title_expandable",
        titleExpanded: "sv_p_title_expanded",
        titleCollapsed: "sv_p_title_collapsed",
        titleOnError: "",
        icon: "sv_panel_icon",
        iconExpanded: "sv_expanded",
        description: "sv_p_description",
        container: "sv_p_container",
        footer: "sv_p_footer",
        number: "sv_q_num",
        requiredText: "sv_q_required_text",
    },
    error: {
        root: "sv_q_erbox",
        icon: "",
        item: "",
        locationTop: "sv_qstn_error_top",
        locationBottom: "sv_qstn_error_bottom",
    },
    boolean: {
        root: "sv_qcbc sv_qbln",
        rootRadio: "sv_qcbc sv_qbln",
        item: "sv-boolean",
        control: "sv-visuallyhidden",
        itemChecked: "sv-boolean--checked checked",
        itemIndeterminate: "sv-boolean--indeterminate",
        itemDisabled: "sv-boolean--disabled",
        switch: "sv-boolean__switch",
        slider: "sv-boolean__slider",
        label: "sv-boolean__label ",
        disabledLabel: "sv-boolean__label--disabled",
        //checkbox
        rootCheckbox: "sv_qcbc sv_qbln",
        checkboxItem: "sv-boolean",
        checkboxItemChecked: "sv-boolean--checked",
        controlCheckbox: "sv-visuallyvisible",
        checkboxControlLabel: "sv-boolean__label",
        checkboxItemIndeterminate: "sv-boolean--indeterminate",
        checkboxItemDisabled: "sv-item--disabled sv-boolean--disabled",
        checkboxMaterialDecorator: "sv-item__decorator sv-boolean__decorator",
        checkboxItemDecorator: "sv-item__svg sv-boolean__svg",
    },
    checkbox: {
        root: "sv_qcbc sv_qcbx",
        item: "sv_q_checkbox",
        itemSelectAll: "sv_q_checkbox_selectall",
        itemNone: "sv_q_checkbox_none",
        itemChecked: "checked",
        itemInline: "sv_q_checkbox_inline",
        label: "sv_q_checkbox_label",
        labelChecked: "",
        itemControl: "sv_q_checkbox_control_item",
        itemDecorator: "sv-hidden",
        controlLabel: "sv_q_checkbox_control_label",
        other: "sv_q_other sv_q_checkbox_other",
        column: "sv_q_select_column",
    },
    ranking: {
        root: "sv-ranking",
        rootMobileMod: "sv-ranking--mobile",
        rootDragMod: "sv-ranking--drag",
        rootDisabled: "sv-ranking--disabled",
        rootDragHandleAreaIcon: "sv-ranking--drag-handle-area-icon",
        item: "sv-ranking-item",
        itemContent: "sv-ranking-item__content",
        itemIndex: "sv-ranking-item__index",
        itemIndexEmptyMode: "sv-ranking-item__index--empty",
        // itemText: "sv-ranking-item__text",
        controlLabel: "sv-ranking-item__text",
        itemGhostNode: "sv-ranking-item__ghost",
        itemIconContainer: "sv-ranking-item__icon-container",
        itemIcon: "sv-ranking-item__icon",
        itemIconHoverMod: "sv-ranking-item__icon--hover",
        itemIconFocusMod: "sv-ranking-item__icon--focus",
        itemGhostMod: "sv-ranking-item--ghost",
        itemDragMod: "sv-ranking-item--drag",
    },
    comment: {
        remainingCharacterCounter: "sv-remaining-character-counter",
    },
    dropdown: {
        root: "",
        popup: "sv-dropdown-popup",
        control: "sv_q_dropdown_control",
        controlInputFieldComponent: "sv_q_dropdown_control__input-field-component",
        selectWrapper: "sv_select_wrapper",
        other: "sv_q_dd_other",
        cleanButton: "sv_q_dropdown_clean-button",
        cleanButtonSvg: "sv_q_dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear_16x16",
        controlValue: "sv_q_dropdown__value",
        filterStringInput: "sv_q_dropdown__filter-string-input"
    },
    html: { root: "" },
    image: { root: "sv_q_image", image: "sv_image_image" },
    matrix: {
        root: "sv_q_matrix",
        label: "sv_q_m_label",
        itemChecked: "checked",
        itemDecorator: "sv-hidden",
        cell: "sv_q_m_cell",
        cellText: "sv_q_m_cell_text",
        cellTextSelected: "sv_q_m_cell_selected",
        cellLabel: "sv_q_m_cell_label",
        cellResponsiveTitle: "sv-hidden"
    },
    matrixdropdown: {
        root: "sv_q_matrix_dropdown",
        cell: "sv_matrix_cell",
        headerCell: "sv_matrix_cell_header",
        row: "sv_matrix_row",
        rowAdditional: "sv-matrix__row--additional",
        detailRow: "sv_matrix_detail_row",
        detailRowText: "sv_matrix_cell_detail_rowtext",
        detailCell: "sv_matrix_cell_detail",
        choiceCell: "sv-table__cell--choice",
        detailButton: "sv_matrix_cell_detail_button",
        detailButtonExpanded: "sv_matrix_cell_detail_button_expanded",
        detailIcon: "sv_detail_panel_icon",
        detailIconExpanded: "sv_detail_expanded",
        detailPanelCell: "sv_matrix_cell_detail_panel",
        actionsCell: "sv_matrix_cell sv_matrix_cell_actions",
    },
    matrixdynamic: {
        root: "sv_q_matrix_dynamic",
        button: "sv_matrix_dynamic_button",
        buttonAdd: "",
        buttonRemove: "",
        iconAdd: "",
        iconRemove: "",
        iconDrag: "sv-matrixdynamic__drag-icon",
        cell: "sv_matrix_cell",
        headerCell: "sv_matrix_cell_header",
        row: "sv_matrix_row",
        detailRow: "sv_matrix_detail_row",
        detailCell: "sv_matrix_cell_detail",
        choiceCell: "sv-table__cell--choice",
        detailButton: "sv_matrix_cell_detail_button",
        detailButtonExpanded: "sv_matrix_cell_detail_button_expanded",
        detailIcon: "sv_detail_panel_icon",
        detailIconExpanded: "sv_detail_expanded",
        detailPanelCell: "sv_matrix_cell_detail_panel",
        actionsCell: "sv_matrix_cell sv_matrix_cell_actions",
        emptyRowsSection: "sv_matrix_empty_rows_section",
        emptyRowsText: "sv_matrix_empty_rows_text",
        emptyRowsButton: "",
        ghostRow: "sv-matrix-row--drag-drop-ghost-mod"
    },
    paneldynamic: {
        root: "sv_panel_dynamic",
        title: "sv_p_title",
        button: "",
        buttonAdd: "sv-paneldynamic__add-btn",
        buttonRemove: "sv_p_remove_btn",
        buttonRemoveRight: "sv_p_remove_btn_right",
        buttonPrev: "sv-paneldynamic__prev-btn",
        buttonPrevDisabled: "sv-paneldynamic__prev-btn--disabled",
        buttonNextDisabled: "sv-paneldynamic__next-btn--disabled",
        buttonNext: "sv-paneldynamic__next-btn",
        progressContainer: "sv-paneldynamic__progress-container",
        progress: "sv-progress",
        progressBar: "sv-progress__bar",
        progressText: "sv-paneldynamic__progress-text",
        panelWrapper: "sv_p_wrapper",
        panelWrapperInRow: "sv_p_wrapper_in_row",
        footer: "",
        progressBtnIcon: "icon-progressbutton"
    },
    multipletext: {
        root: "sv_q_mt",
        itemTitle: "sv_q_mt_title",
        item: "sv_q_mt_item",
        row: "sv_q_mt_row",
        itemLabel: "sv_q_mt_label",
        itemValue: "sv_q_mt_item_value sv_q_text_root",
    },
    radiogroup: {
        root: "sv_qcbc",
        item: "sv_q_radiogroup",
        itemChecked: "checked",
        itemInline: "sv_q_radiogroup_inline",
        itemDecorator: "sv-hidden",
        label: "sv_q_radiogroup_label",
        labelChecked: "",
        itemControl: "sv_q_radiogroup_control_item",
        controlLabel: "",
        other: "sv_q_other sv_q_radiogroup_other",
        clearButton: "sv_q_radiogroup_clear",
        column: "sv_q_select_column",
    },
    buttongroup: {
        root: "sv-button-group",
        item: "sv-button-group__item",
        itemIcon: "sv-button-group__item-icon",
        itemDecorator: "sv-button-group__item-decorator",
        itemCaption: "sv-button-group__item-caption",
        itemHover: "sv-button-group__item--hover",
        itemSelected: "sv-button-group__item--selected",
        itemDisabled: "sv-button-group__item--disabled",
        itemControl: "sv-visuallyhidden",
    },
    imagepicker: {
        root: "sv_imgsel",
        item: "sv_q_imgsel",
        itemChecked: "checked",
        label: "sv_q_imgsel_label",
        itemControl: "sv_q_imgsel_control_item",
        image: "sv_q_imgsel_image",
        itemInline: "sv_q_imagepicker_inline",
        itemText: "sv_q_imgsel_text",
        clearButton: "sv_q_radiogroup_clear",
        column: "sv_q_select_column"
    },
    rating: {
        root: "sv_q_rating",
        item: "sv_q_rating_item",
        selected: "active",
        minText: "sv_q_rating_min_text",
        itemText: "sv_q_rating_item_text",
        maxText: "sv_q_rating_max_text",
    },
    text: {
        root: "sv_q_text_root",
        remainingCharacterCounter: "sv-remaining-character-counter",
    },
    expression: "",
    file: {
        root: "sv_q_file",
        placeholderInput: "sv-visuallyhidden",
        preview: "sv_q_file_preview",
        removeButton: "sv_q_file_remove_button",
        fileInput: "sv-visuallyhidden",
        removeFile: "sv_q_file_remove",
        fileDecorator: "sv-file__decorator",
        fileSign: "sv_q_file_sign",
        chooseFile: "sv_q_file_choose_button",
        noFileChosen: "sv_q_file_placeholder",
        dragAreaPlaceholder: "sv-hidden",
        fileList: "",
    },
    signaturepad: {
        root: "sv_q_signaturepad sjs_sp_container",
        controls: "sjs_sp_controls",
        placeholder: "sjs_sp_placeholder",
        clearButton: "sjs_sp_clear",
    },
    saveData: {
        root: "sv-save-data_root",
        info: "sv-save-data_info",
        error: "sv-save-data_error",
        success: "sv-save-data_success",
        button: "sv-save-data_button",
    },
    window: {
        root: "sv_window",
        body: "sv_window_content",
        header: {
            root: "sv_window_title",
            title: "",
            button: "",
            buttonExpanded: "",
            buttonCollapsed: "",
        },
    },
    variables: {
        themeMark: "--sv-default-mark"
    },
    tagbox: {
        root: "",
        popup: "sv-dropdown-popup",
        small: "sv_q_row__question--small",
        selectWrapper: "sv_select_wrapper sv_q_tagbox_wrapper",
        other: "sv_q_input sv_q_comment sv_q_selectbase__other",
        cleanButton: "sv_q_tagbox_clean-button sv_q_dropdown_clean-button",
        cleanButtonSvg: "sv_q_tagbox_clean-button-svg sv_q_dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear_16x16",
        cleanItemButton: "sv_q_tagbox-item_clean-button",
        cleanItemButtonSvg: "sv_q_tagbox-item_clean-button-svg",
        cleanItemButtonIconId: "icon-clear_16x16",
        control: "sv_q_input sv_q_tagbox sv_q_dropdown_control",
        controlValue: "sv_q_tagbox__value sv_q_dropdown__value",
        controlEmpty: "sv_q_dropdown--empty sv_q_tagbox--empty",
        placeholderInput: "sv_q_tagbox__placeholder",
        filterStringInput: "sv_q_tagbox__filter-string-input sv_q_dropdown__filter-string-input"
    },
};
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["default"] = defaultStandardCss;
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["orange"] = defaultStandardCss;
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["darkblue"] = defaultStandardCss;
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["darkrose"] = defaultStandardCss;
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["stone"] = defaultStandardCss;
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["winter"] = defaultStandardCss;
_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]["winterstone"] = defaultStandardCss;


/***/ }),

/***/ "./src/defaultCss/defaultV2Css.ts":
/*!****************************************!*\
  !*** ./src/defaultCss/defaultV2Css.ts ***!
  \****************************************/
/*! exports provided: surveyCss, defaultV2Css, defaultV2ThemeName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "surveyCss", function() { return surveyCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultV2Css", function() { return defaultV2Css; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultV2ThemeName", function() { return defaultV2ThemeName; });
var surveyCss = {
    currentType: "",
    getCss: function () {
        var loc = this.currentType ? this[this.currentType] : defaultV2Css;
        if (!loc)
            loc = defaultV2Css;
        return loc;
    },
    getAvailableThemes: function () {
        return Object.keys(this).filter(function (propertyName) { return ["currentType", "getCss", "getAvailableThemes"].indexOf(propertyName) === -1; });
    }
};
var defaultV2Css = {
    root: "sd-root-modern",
    rootMobile: "sd-root-modern--mobile",
    rootReadOnly: "sd-root--readonly",
    container: "sd-container-modern",
    header: "sd-title sd-container-modern__title",
    bodyContainer: "sv-components-row",
    body: "sv-components-column sv-components-column--expandable sd-body",
    bodyWithTimer: "sd-body--with-timer",
    clockTimerRoot: "sd-timer",
    clockTimerRootTop: "sd-timer--top",
    clockTimerRootBottom: "sd-timer--bottom",
    clockTimerProgress: "sd-timer__progress",
    clockTimerProgressAnimation: "sd-timer__progress--animation",
    clockTimerTextContainer: "sd-timer__text-container",
    clockTimerMinorText: "sd-timer__text--minor",
    clockTimerMajorText: "sd-timer__text--major",
    bodyEmpty: "sd-body sd-body--empty",
    footer: "sd-footer sd-body__navigation sd-clearfix",
    title: "sd-title",
    description: "sd-description",
    logo: "sd-logo",
    logoImage: "sd-logo__image",
    headerText: "sd-header__text",
    headerClose: "sd-hidden",
    navigationButton: "",
    bodyNavigationButton: "sd-btn",
    completedPage: "sd-completedpage",
    timerRoot: "sd-body__timer",
    navigation: {
        complete: "sd-btn--action sd-navigation__complete-btn",
        prev: "sd-navigation__prev-btn",
        next: "sd-navigation__next-btn",
        start: "sd-navigation__start-btn",
        preview: "sd-navigation__preview-btn",
        edit: "",
    },
    panel: {
        number: "sd-element__num",
        title: "sd-title sd-element__title sd-panel__title",
        titleExpandable: "sd-element__title--expandable",
        titleExpanded: "sd-element__title--expanded",
        titleCollapsed: "sd-element__title--collapsed",
        titleDisabled: "sd-element__title--disabled",
        titleOnExpand: "sd-panel__title--expanded",
        titleOnError: "sd-panel__title--error",
        titleBar: "sd-action-title-bar",
        description: "sd-description sd-panel__description",
        container: "sd-element sd-element--complex sd-panel sd-row__panel",
        withFrame: "sd-element--with-frame",
        content: "sd-panel__content",
        icon: "sd-panel__icon",
        iconExpanded: "sd-panel__icon--expanded",
        footer: "sd-panel__footer",
        requiredText: "sd-panel__required-text",
        header: "sd-panel__header sd-element__header sd-element__header--location-top",
        collapsed: "sd-element--collapsed",
        expanded: "sd-element--expanded",
        nested: "sd-element--nested",
        invisible: "sd-element--invisible",
        navigationButton: "",
    },
    paneldynamic: {
        mainRoot: "sd-element  sd-question sd-question--paneldynamic sd-element--complex sd-question--complex sd-row__question",
        empty: "sd-question--empty",
        root: "sd-paneldynamic",
        navigation: "sd-paneldynamic__navigation",
        title: "sd-title sd-element__title sd-question__title",
        button: "sd-action sd-paneldynamic__btn",
        buttonRemove: "sd-action--negative sd-paneldynamic__remove-btn",
        buttonAdd: "sd-paneldynamic__add-btn",
        buttonPrev: "sd-paneldynamic__prev-btn sd-action--icon sd-action",
        buttonPrevDisabled: "sd-action--disabled",
        buttonNextDisabled: "sd-action--disabled",
        buttonNext: "sd-paneldynamic__next-btn sd-action--icon sd-action",
        progressContainer: "sd-paneldynamic__progress-container",
        progress: "sd-progress",
        progressBar: "sd-progress__bar",
        progressText: "sd-paneldynamic__progress-text",
        separator: "sd-paneldynamic__separator",
        panelWrapper: "sd-paneldynamic__panel-wrapper",
        footer: "sd-paneldynamic__footer",
        panelFooter: "sd-paneldynamic__panel-footer",
        footerButtonsContainer: "sd-paneldynamic__buttons-container",
        panelWrapperInRow: "sd-paneldynamic__panel-wrapper--in-row",
        progressBtnIcon: "icon-progressbuttonv2",
        noEntriesPlaceholder: "sd-paneldynamic__placeholder sd-question__placeholder"
    },
    progress: "sd-progress sd-body__progress",
    progressTop: "sd-body__progress--top",
    progressBottom: "sd-body__progress--bottom",
    progressBar: "sd-progress__bar",
    progressText: "sd-progress__text",
    progressButtonsContainerCenter: "sd-progress-buttons__container-center",
    progressButtonsContainer: "sd-progress-buttons__container",
    progressButtonsImageButtonLeft: "sd-progress-buttons__image-button-left",
    progressButtonsImageButtonRight: "sd-progress-buttons__image-button-right",
    progressButtonsImageButtonHidden: "sd-progress-buttons__image-button--hidden",
    progressButtonsListContainer: "sd-progress-buttons__list-container",
    progressButtonsList: "sd-progress-buttons__list",
    progressButtonsListElementPassed: "sd-progress-buttons__list-element--passed",
    progressButtonsListElementCurrent: "sd-progress-buttons__list-element--current",
    progressButtonsListElementNonClickable: "sd-progress-buttons__list-element--nonclickable",
    progressButtonsPageTitle: "sd-progress-buttons__page-title",
    progressButtonsPageDescription: "sd-progress-buttons__page-description",
    progressTextInBar: "sd-hidden",
    page: {
        root: "sd-page sd-body__page",
        emptyHeaderRoot: "sd-page__empty-header",
        title: "sd-title sd-page__title",
        description: "sd-description sd-page__description"
    },
    pageTitle: "sd-title sd-page__title",
    pageDescription: "sd-description sd-page__description",
    row: "sd-row sd-clearfix",
    rowMultiple: "sd-row--multiple",
    pageRow: "sd-page__row",
    question: {
        mainRoot: "sd-element sd-question sd-row__question",
        flowRoot: "sd-element sd-question sd-row__question sd-row__question--flow",
        withFrame: "sd-element--with-frame",
        asCell: "sd-table__cell",
        answered: "sd-question--answered",
        header: "sd-question__header sd-element__header",
        headerLeft: "sd-question__header--location--left",
        headerTop: "sd-question__header--location-top sd-element__header--location-top",
        headerBottom: "sd-question__header--location--bottom",
        content: "sd-question__content",
        contentLeft: "sd-question__content--left",
        titleLeftRoot: "sd-question--left",
        titleOnAnswer: "sd-question__title--answer",
        titleOnError: "sd-question__title--error",
        title: "sd-title sd-element__title sd-question__title",
        titleExpandable: "sd-element__title--expandable",
        titleExpanded: "sd-element__title--expanded",
        titleCollapsed: "sd-element__title--collapsed",
        titleDisabled: "sd-element__title--disabled",
        titleBar: "sd-action-title-bar",
        requiredText: "sd-question__required-text",
        number: "sd-element__num",
        description: "sd-description sd-question__description",
        descriptionUnderInput: "sd-description sd-question__description sd-question__description--under-input",
        comment: "sd-input sd-comment",
        other: "sd-input sd-comment",
        required: "sd-question--required",
        titleRequired: "sd-question__title--required",
        indent: 20,
        footer: "sd-question__footer",
        commentArea: "sd-question__comment-area",
        formGroup: "sd-question__form-group",
        hasError: "sd-question--error",
        collapsed: "sd-element--collapsed",
        expanded: "sd-element--expanded",
        nested: "sd-element--nested",
        invisible: "sd-element--invisible",
        composite: "sd-element--complex",
        disabled: "sd-question--disabled",
    },
    image: {
        mainRoot: "sd-question sd-question--image",
        root: "sd-image",
        image: "sd-image__image",
        adaptive: "sd-image__image--adaptive",
        withFrame: ""
    },
    html: {
        mainRoot: "sd-question sd-row__question sd-question--html",
        root: "sd-html",
        withFrame: ""
    },
    error: {
        root: "sd-question__erbox",
        icon: "",
        item: "",
        tooltip: "sd-question__erbox--tooltip",
        outsideQuestion: "sd-question__erbox--outside-question",
        aboveQuestion: "sd-question__erbox--above-question",
        belowQuestion: "sd-question__erbox--below-question",
        locationTop: "sd-question__erbox--location--top",
        locationBottom: "sd-question__erbox--location--bottom"
    },
    checkbox: {
        root: "sd-selectbase",
        rootRow: "sd-selectbase--row",
        rootMultiColumn: "sd-selectbase--multi-column",
        item: "sd-item sd-checkbox sd-selectbase__item",
        itemOnError: "sd-item--error",
        itemSelectAll: "sd-checkbox--selectall",
        itemNone: "sd-checkbox--none",
        itemDisabled: "sd-item--disabled sd-checkbox--disabled",
        itemChecked: "sd-item--checked sd-checkbox--checked",
        itemHover: "sd-item--allowhover sd-checkbox--allowhover",
        itemInline: "sd-selectbase__item--inline",
        label: "sd-selectbase__label",
        labelChecked: "",
        itemControl: "sd-visuallyhidden sd-item__control sd-checkbox__control",
        itemDecorator: "sd-item__svg sd-checkbox__svg",
        itemSvgIconId: "#icon-v2check",
        controlLabel: "sd-item__control-label",
        materialDecorator: "sd-item__decorator sd-checkbox__decorator",
        other: "sd-input sd-comment sd-selectbase__other",
        column: "sd-selectbase__column",
    },
    radiogroup: {
        root: "sd-selectbase",
        rootRow: "sd-selectbase--row",
        rootMultiColumn: "sd-selectbase--multi-column",
        item: "sd-item sd-radio sd-selectbase__item",
        itemOnError: "sd-item--error",
        itemInline: "sd-selectbase__item--inline",
        label: "sd-selectbase__label",
        labelChecked: "",
        itemDisabled: "sd-item--disabled sd-radio--disabled",
        itemChecked: "sd-item--checked sd-radio--checked",
        itemHover: "sd-item--allowhover sd-radio--allowhover",
        itemControl: "sd-visuallyhidden sd-item__control sd-radio__control",
        itemDecorator: "sd-item__svg sd-radio__svg",
        controlLabel: "sd-item__control-label",
        materialDecorator: "sd-item__decorator sd-radio__decorator",
        other: "sd-input sd-comment sd-selectbase__other",
        clearButton: "",
        column: "sd-selectbase__column"
    },
    boolean: {
        mainRoot: "sd-element sd-question sd-row__question sd-question--boolean",
        root: "sv_qcbc sv_qbln sd-scrollable-container",
        rootRadio: "sv_qcbc sv_qbln sd-scrollable-container sd-scrollable-container--compact",
        item: "sd-boolean",
        itemOnError: "sd-boolean--error",
        control: "sd-boolean__control sd-visuallyhidden",
        itemChecked: "sd-boolean--checked",
        itemIndeterminate: "sd-boolean--indeterminate",
        itemDisabled: "sd-boolean--disabled",
        label: "sd-boolean__label",
        switch: "sd-boolean__switch",
        disabledLabel: "sd-checkbox__label--disabled",
        sliderText: "sd-boolean__thumb-text",
        slider: "sd-boolean__thumb",
        //radio
        radioItem: "sd-item",
        radioItemChecked: "sd-item--checked sd-radio--checked",
        radioLabel: "sd-selectbase__label",
        radioControlLabel: "sd-item__control-label",
        radioFieldset: "sd-selectbase",
        itemRadioDecorator: "sd-item__svg sd-radio__svg",
        materialRadioDecorator: "sd-item__decorator sd-radio__decorator",
        itemRadioControl: "sd-visuallyhidden sd-item__control sd-radio__control",
        //end radio
        //checkbox
        rootCheckbox: "sd-selectbase",
        checkboxItem: "sd-item sd-selectbase__item sd-checkbox",
        checkboxLabel: "sd-selectbase__label",
        checkboxItemOnError: "sd-item--error",
        checkboxItemIndeterminate: "sd-checkbox--intermediate",
        checkboxItemChecked: "sd-item--checked sd-checkbox--checked",
        checkboxItemDecorator: "sd-item__svg sd-checkbox__svg",
        checkboxItemDisabled: "sd-checkbox--disabled",
        controlCheckbox: "sd-visuallyhidden sd-item__control sd-checkbox__control",
        checkboxMaterialDecorator: "sd-item__decorator sd-checkbox__decorator",
        checkboxControlLabel: "sd-item__control-label",
        svgIconCheckedId: "#icon-v2check",
    },
    text: {
        root: "sd-input sd-text",
        small: "sd-row__question--small",
        controlDisabled: "sd-input--disabled",
        content: "sd-text__content sd-question__content",
        remainingCharacterCounter: "sd-remaining-character-counter",
        onError: "sd-input--error"
    },
    multipletext: {
        root: "sd-multipletext",
        itemLabel: "sd-multipletext__item-container sd-input",
        itemLabelOnError: "sd-multipletext__item-container--error",
        item: "sd-multipletext__item",
        itemTitle: "sd-multipletext__item-title",
        row: "sd-multipletext__row",
        cell: "sd-multipletext__cell"
    },
    dropdown: {
        root: "sd-selectbase",
        popup: "sv-dropdown-popup",
        small: "sd-row__question--small",
        selectWrapper: "",
        other: "sd-input sd-comment sd-selectbase__other",
        onError: "sd-input--error",
        label: "sd-selectbase__label",
        item: "sd-item sd-radio sd-selectbase__item",
        itemDisabled: "sd-item--disabled sd-radio--disabled",
        itemChecked: "sd-item--checked sd-radio--checked",
        itemHover: "sd-item--allowhover sd-radio--allowhover",
        itemControl: "sd-visuallyhidden sd-item__control sd-radio__control",
        itemDecorator: "sd-item__svg sd-radio__svg",
        cleanButton: "sd-dropdown_clean-button",
        cleanButtonSvg: "sd-dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear",
        control: "sd-input sd-dropdown",
        controlInputFieldComponent: "sd-dropdown__input-field-component",
        controlValue: "sd-dropdown__value",
        controlDisabled: "sd-input--disabled",
        controlEmpty: "sd-dropdown--empty",
        controlLabel: "sd-item__control-label",
        filterStringInput: "sd-dropdown__filter-string-input",
        materialDecorator: "sd-item__decorator sd-radio__decorator"
    },
    imagepicker: {
        mainRoot: "sd-element sd-question sd-row__question",
        root: "sd-selectbase sd-imagepicker",
        rootColumn: "sd-imagepicker--column",
        item: "sd-imagepicker__item",
        itemOnError: "sd-imagepicker__item--error",
        itemInline: "sd-imagepicker__item--inline",
        itemChecked: "sd-imagepicker__item--checked",
        itemDisabled: "sd-imagepicker__item--disabled",
        itemHover: "sd-imagepicker__item--allowhover",
        label: "sd-imagepicker__label",
        itemDecorator: "sd-imagepicker__item-decorator",
        imageContainer: "sd-imagepicker__image-container",
        itemControl: "sd-imagepicker__control sd-visuallyhidden",
        image: "sd-imagepicker__image",
        itemText: "sd-imagepicker__text",
        other: "sd-input sd-comment",
        itemNoImage: "sd-imagepicker__no-image",
        itemNoImageSvgIcon: "sd-imagepicker__no-image-svg",
        itemNoImageSvgIconId: "#icon-no-image",
        column: "sd-selectbase__column sd-imagepicker__column",
        checkedItemDecorator: "sd-imagepicker__check-decorator",
        checkedItemSvgIcon: "sd-imagepicker__check-icon",
        checkedItemSvgIconId: "icon-v2check_24x24",
    },
    matrix: {
        mainRoot: "sd-element sd-question sd-row__question sd-element--complex sd-question--complex sd-question--table",
        tableWrapper: "sd-matrix sd-table-wrapper",
        root: "sd-table sd-matrix__table",
        rootVerticalAlignTop: "sd-table--align-top",
        rootVerticalAlignMiddle: "sd-table--align-middle",
        rootAlternateRows: "sd-table--alternate-rows",
        rowError: "sd-matrix__row--error",
        cell: "sd-table__cell sd-matrix__cell",
        row: "sd-table__row",
        headerCell: "sd-table__cell sd-table__cell--header",
        rowTextCell: "sd-table__cell sd-matrix__cell sd-table__cell--row-text",
        label: "sd-item sd-radio sd-matrix__label",
        itemOnError: "sd-item--error",
        itemValue: "sd-visuallyhidden sd-item__control sd-radio__control",
        itemChecked: "sd-item--checked sd-radio--checked",
        itemDisabled: "sd-item--disabled sd-radio--disabled",
        itemHover: "sd-radio--allowhover",
        materialDecorator: "sd-item__decorator sd-radio__decorator",
        itemDecorator: "sd-item__svg sd-radio__svg",
        cellText: "sd-matrix__text",
        cellTextSelected: "sd-matrix__text--checked",
        cellTextDisabled: "sd-matrix__text--disabled",
        cellResponsiveTitle: "sd-matrix__responsive-title"
    },
    matrixdropdown: {
        mainRoot: "sd-element sd-question sd-row__question sd-element--complex sd-question--complex sd-question--table",
        rootScroll: "sd-question--scroll",
        root: "sd-table sd-matrixdropdown",
        rootVerticalAlignTop: "sd-table--align-top",
        rootVerticalAlignMiddle: "sd-table--align-middle",
        tableWrapper: "sd-table-wrapper",
        rootAlternateRows: "sd-table--alternate-rows",
        cell: "sd-table__cell",
        itemCell: "sd-table__cell--item",
        row: "sd-table__row",
        headerCell: "sd-table__cell sd-table__cell--header",
        rowTextCell: "sd-table__cell sd-table__cell--row-text",
        cellRequiredText: "sd-question__required-text",
        detailButton: "sd-table__cell--detail-button",
        detailButtonExpanded: "sd-table__cell--detail-button--expanded",
        detailIcon: "sd-detail-panel__icon",
        detailIconExpanded: "sd-detail-panel__icon--expanded",
        detailIconId: "icon-expanddetail",
        detailIconExpandedId: "icon-collapsedetail",
        actionsCell: "sd-table__cell sd-table__cell--actions",
        emptyCell: "sd-table__cell--empty",
        verticalCell: "sd-table__cell--vertical",
        cellQuestionWrapper: "sd-table__question-wrapper"
    },
    matrixdynamic: {
        mainRoot: "sd-element sd-question sd-row__question sd-element--complex sd-question--complex sd-question--table",
        rootScroll: "sd-question--scroll",
        empty: "sd-question--empty",
        root: "sd-table sd-matrixdynamic",
        tableWrapper: "sd-table-wrapper",
        cell: "sd-table__cell",
        row: "sd-table__row",
        itemCell: "sd-table__cell--item",
        headerCell: "sd-table__cell sd-table__cell--header",
        rowTextCell: "sd-table__cell sd-table__cell--row-text",
        cellRequiredText: "sd-question__required-text",
        button: "sd-action sd-matrixdynamic__btn",
        detailRow: "sd-table__row sd-table__row--detail",
        detailButton: "sd-table__cell--detail-button",
        detailButtonExpanded: "sd-table__cell--detail-button--expanded",
        detailIcon: "sd-detail-panel__icon",
        detailIconExpanded: "sd-detail-panel__icon--expanded",
        detailIconId: "icon-expanddetail",
        detailIconExpandedId: "icon-collapsedetail",
        detailPanelCell: "sd-table__cell--detail-panel",
        actionsCell: "sd-table__cell sd-table__cell--actions",
        buttonAdd: "sd-matrixdynamic__add-btn",
        buttonRemove: "sd-action--negative sd-matrixdynamic__remove-btn",
        iconAdd: "",
        iconRemove: "",
        dragElementDecorator: "sd-drag-element__svg",
        iconDragElement: "#icon-v2dragelement_16x16",
        footer: "sd-matrixdynamic__footer",
        emptyRowsSection: "sd-matrixdynamic__placeholder sd-question__placeholder",
        iconDrag: "sv-matrixdynamic__drag-icon",
        ghostRow: "sv-matrix-row--drag-drop-ghost-mod",
        emptyCell: "sd-table__cell--empty",
        verticalCell: "sd-table__cell--vertical",
        cellQuestionWrapper: "sd-table__question-wrapper"
    },
    rating: {
        rootDropdown: "sd-scrollable-container sd-scrollable-container--compact sd-selectbase",
        root: "sd-scrollable-container sd-rating",
        rootWrappable: "sd-scrollable-container sd-rating sd-rating--wrappable",
        item: "sd-rating__item",
        itemOnError: "sd-rating__item--error",
        itemHover: "sd-rating__item--allowhover",
        selected: "sd-rating__item--selected",
        itemStar: "sd-rating__item-star",
        itemStarOnError: "sd-rating__item-star--error",
        itemStarHover: "sd-rating__item-star--allowhover",
        itemStarSelected: "sd-rating__item-star--selected",
        itemStarDisabled: "sd-rating__item-star--disabled",
        itemStarHighlighted: "sd-rating__item-star--highlighted",
        itemStarUnhighlighted: "sd-rating__item-star--unhighlighted",
        minText: "sd-rating__item-text sd-rating__min-text",
        itemText: "sd-rating__item-text",
        maxText: "sd-rating__item-text sd-rating__max-text",
        itemDisabled: "sd-rating__item--disabled",
        control: "sd-input sd-dropdown",
        controlValue: "sd-dropdown__value",
        controlDisabled: "sd-input--disabled",
        controlEmpty: "sd-dropdown--empty",
        filterStringInput: "sd-dropdown__filter-string-input",
        popup: "sv-dropdown-popup",
        onError: "sd-input--error",
    },
    comment: {
        root: "sd-input sd-comment",
        small: "sd-row__question--small",
        controlDisabled: "sd-input--disabled",
        content: "sd-comment__content sd-question__content",
        remainingCharacterCounter: "sd-remaining-character-counter",
        onError: "sd-input--error"
    },
    expression: "sd-expression",
    file: {
        root: "sd-file",
        other: "sd-input sd-comment",
        placeholderInput: "sd-visuallyhidden",
        preview: "sd-file__preview",
        fileSign: "",
        fileList: "sd-file__list",
        fileSignBottom: "sd-file__sign",
        dragArea: "sd-file__drag-area",
        dragAreaActive: "sd-file__drag-area--active",
        fileDecorator: "sd-file__decorator",
        onError: "sd-file__decorator--error",
        fileDecoratorDrag: "sd-file__decorator--drag",
        fileInput: "sd-visuallyhidden",
        noFileChosen: "sd-description sd-file__no-file-chosen",
        chooseFile: "sd-file__choose-btn",
        chooseFileAsText: "sd-action sd-file__choose-btn--text",
        chooseFileAsTextDisabled: "sd-action--disabled",
        chooseFileAsIcon: "sd-context-btn sd-file__choose-btn--icon",
        chooseFileIconId: "icon-choosefile",
        disabled: "sd-file__choose-btn--disabled",
        removeButton: "sd-context-btn sd-context-btn--negative sd-file__btn sd-file__clean-btn",
        removeButtonBottom: "",
        removeButtonIconId: "icon-clear",
        removeFile: "sd-hidden",
        removeFileSvg: "",
        removeFileSvgIconId: "icon-delete",
        wrapper: "sd-file__wrapper",
        defaultImage: "sd-file__default-image",
        defaultImageIconId: "icon-defaultfile",
        leftIconId: "icon-arrowleft",
        rightIconId: "icon-arrowright",
        removeFileButton: "sd-context-btn sd-context-btn--negative sd-file__remove-file-button",
        dragAreaPlaceholder: "sd-file__drag-area-placeholder",
        imageWrapper: "sd-file__image-wrapper",
        single: "sd-file--single",
        singleImage: "sd-file--single-image",
        mobile: "sd-file--mobile",
    },
    signaturepad: {
        mainRoot: "sd-element sd-question sd-question--signature sd-row__question",
        root: "sd-signaturepad sjs_sp_container",
        small: "sd-row__question--small",
        controls: "sjs_sp_controls sd-signaturepad__controls",
        placeholder: "sjs_sp_placeholder",
        clearButton: "sjs_sp_clear sd-context-btn sd-context-btn--negative sd-signaturepad__clear",
        clearButtonIconId: "icon-clear"
    },
    saveData: {
        root: "sv-save-data_root",
        info: "sv-save-data_info",
        error: "sv-save-data_error",
        success: "sv-save-data_success",
        button: "sv-save-data_button",
    },
    window: {
        root: "sv_window",
        body: "sv_window_content",
        header: {
            root: "sv_window_title",
            title: "",
            button: "",
            buttonExpanded: "",
            buttonCollapsed: ""
        }
    },
    ranking: {
        root: "sv-ranking",
        rootMobileMod: "sv-ranking--mobile",
        rootDragMod: "sv-ranking--drag",
        rootDisabled: "sd-ranking--disabled",
        rootDesignMode: "sv-ranking--design-mode",
        rootDragHandleAreaIcon: "sv-ranking--drag-handle-area-icon",
        item: "sv-ranking-item",
        itemContent: "sv-ranking-item__content sd-ranking-item__content",
        itemIndex: "sv-ranking-item__index sd-ranking-item__index",
        itemIndexEmptyMode: "sv-ranking-item__index--empty sd-ranking-item__index--empty",
        // itemText: "sv-ranking-item__text",
        controlLabel: "sv-ranking-item__text",
        itemGhostNode: "sv-ranking-item__ghost",
        itemIconContainer: "sv-ranking-item__icon-container",
        itemIcon: "sv-ranking-item__icon",
        itemIconHoverMod: "sv-ranking-item__icon--hover",
        itemIconFocusMod: "sv-ranking-item__icon--focus",
        itemGhostMod: "sv-ranking-item--ghost",
        itemDragMod: "sv-ranking--drag",
        itemOnError: "sv-ranking-item--error",
    },
    buttongroup: {
        root: "sv-button-group",
        item: "sv-button-group__item",
        itemIcon: "sv-button-group__item-icon",
        itemDecorator: "sv-button-group__item-decorator",
        itemCaption: "sv-button-group__item-caption",
        itemHover: "sv-button-group__item--hover",
        itemSelected: "sv-button-group__item--selected",
        itemDisabled: "sv-button-group__item--disabled",
        itemControl: "sv-visuallyhidden",
    },
    list: {
        root: "sv-list__container sd-list",
        item: "sv-list__item sd-list__item",
        itemBody: "sv-list__item-body sd-list__item-body",
        itemSelected: "sv-list__item--selected sd-list__item--selected"
    },
    actionBar: {
        root: "sd-action-bar",
        item: "sd-action",
        defaultSizeMode: "",
        smallSizeMode: "",
        itemPressed: "sd-action--pressed",
        itemAsIcon: "sd-action--icon",
        itemIcon: "sd-action__icon",
        itemTitle: "sd-action__title",
    },
    variables: {
        mobileWidth: "--sd-mobile-width",
        imagepickerGapBetweenItems: "--sd-imagepicker-gap",
        themeMark: "--sv-defaultV2-mark"
    },
    tagbox: {
        root: "sd-selectbase",
        popup: "sv-dropdown-popup",
        small: "sd-row__question--small",
        selectWrapper: "",
        other: "sd-input sd-comment sd-selectbase__other",
        onError: "sd-input--error",
        label: "sd-selectbase__label",
        item: "sd-item sd-radio sd-selectbase__item",
        itemDisabled: "sd-item--disabled sd-radio--disabled",
        itemChecked: "sd-item--checked sd-radio--checked",
        itemHover: "sd-item--allowhover sd-radio--allowhover",
        itemControl: "sd-visuallyhidden sd-item__control sd-radio__control",
        itemDecorator: "sd-item__svg sd-radio__svg",
        cleanButton: "sd-tagbox_clean-button sd-dropdown_clean-button",
        cleanButtonSvg: "sd-tagbox_clean-button-svg sd-dropdown_clean-button-svg",
        cleanButtonIconId: "icon-clear",
        cleanItemButton: "sd-tagbox-item_clean-button",
        cleanItemButtonSvg: "sd-tagbox-item_clean-button-svg",
        cleanItemButtonIconId: "icon-clear_16x16",
        control: "sd-input sd-tagbox sd-dropdown",
        controlValue: "sd-tagbox__value sd-dropdown__value",
        controlValueItems: "sd-tagbox__value-items",
        placeholderInput: "sd-tagbox__placeholder",
        controlDisabled: "sd-input--disabled",
        controlEmpty: "sd-dropdown--empty sd-tagbox--empty",
        controlLabel: "sd-item__control-label",
        filterStringInput: "sd-tagbox__filter-string-input sd-dropdown__filter-string-input",
        materialDecorator: "sd-item__decorator sd-checkbox__decorator"
    },
};
var defaultV2ThemeName = "defaultV2";
surveyCss[defaultV2ThemeName] = defaultV2Css;


/***/ }),

/***/ "./src/defaultTitle.ts":
/*!*****************************!*\
  !*** ./src/defaultTitle.ts ***!
  \*****************************/
/*! exports provided: DefaultTitleModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultTitleModel", function() { return DefaultTitleModel; });
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");

var DefaultTitleModel = /** @class */ (function () {
    function DefaultTitleModel() {
    }
    DefaultTitleModel.getIconCss = function (cssClasses, isCollapsed) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]()
            .append(cssClasses.icon)
            .append(cssClasses.iconExpanded, !isCollapsed)
            .toString();
    };
    return DefaultTitleModel;
}());



/***/ }),

/***/ "./src/dragdrop/choices.ts":
/*!*********************************!*\
  !*** ./src/dragdrop/choices.ts ***!
  \*********************************/
/*! exports provided: DragDropChoices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropChoices", function() { return DragDropChoices; });
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ "./src/dragdrop/core.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var DragDropChoices = /** @class */ (function (_super) {
    __extends(DragDropChoices, _super);
    function DragDropChoices() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.doDragOver = function () {
            if (_this.parentElement.getType() === "imagepicker")
                return;
            var node = _this.draggedElementShortcut.querySelector(".svc-item-value-controls__button");
            node.style.cursor = "grabbing";
        };
        _this.doBanDropHere = function () {
            if (_this.parentElement.getType() === "imagepicker")
                return;
            var node = _this.draggedElementShortcut.querySelector(".svc-item-value-controls__button");
            node.style.cursor = "not-allowed";
        };
        return _this;
    }
    Object.defineProperty(DragDropChoices.prototype, "draggedElementType", {
        get: function () {
            return "item-value";
        },
        enumerable: false,
        configurable: true
    });
    DragDropChoices.prototype.createDraggedElementShortcut = function (text, draggedElementNode, event) {
        if (this.parentElement.getType() === "imagepicker") {
            return this.createImagePickerShortcut(this.draggedElement, text, draggedElementNode, event);
        }
        var draggedElementShortcut = document.createElement("div");
        // draggedElementShortcut.innerText = text;
        draggedElementShortcut.style.cssText = " \n          cursor: grabbing;\n          position: absolute;\n          z-index: 1000;\n          font-family: var(--font-family, $font-family);\n        ";
        var isDeepClone = true;
        var clone = (draggedElementNode
            .closest("[data-sv-drop-target-item-value]")
            .cloneNode(isDeepClone));
        clone.style.cssText = "\n      min-width: 100px;\n      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);\n      background-color: var(--background, white);\n      border-radius: 36px;\n      padding-right: 16px;\n      margin-left: 0;\n    ";
        var dragIcon = clone.querySelector(".svc-item-value-controls__drag-icon");
        dragIcon.style.visibility = "visible";
        var removeIcon = clone.querySelector(".svc-item-value-controls__remove");
        removeIcon.style.backgroundColor = "transparent";
        clone.classList.remove("svc-item-value--moveup");
        clone.classList.remove("svc-item-value--movedown");
        this.draggedElement.isDragDropMoveDown = false;
        this.draggedElement.isDragDropMoveUp = false;
        draggedElementShortcut.appendChild(clone);
        var rect = draggedElementNode.getBoundingClientRect();
        draggedElementShortcut.shortcutXOffset = event.clientX - rect.x;
        draggedElementShortcut.shortcutYOffset = event.clientY - rect.y;
        this.isBottom = null;
        return draggedElementShortcut;
    };
    DragDropChoices.prototype.createImagePickerShortcut = function (item, text, draggedElementNode, event) {
        var draggedElementShortcut = document.createElement("div");
        draggedElementShortcut.style.cssText = " \n      cursor: grabbing;\n      position: absolute;\n      z-index: 1000;\n      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);\n      padding: 4px;\n      border-radius: 4px;\n      background: white;\n    ";
        var itemValueNode = draggedElementNode.closest("[data-sv-drop-target-item-value]");
        var controlsNode = itemValueNode.querySelector(".svc-image-item-value-controls");
        var imageContainerNode = itemValueNode.querySelector(".sd-imagepicker__image-container");
        var imageNode = itemValueNode.querySelector(item.imageLink ? "img" : ".sd-imagepicker__no-image").cloneNode(true);
        controlsNode.style.display = "none";
        imageContainerNode.style.width = imageNode.width + "px";
        imageContainerNode.style.height = imageNode.height + "px";
        imageNode.style.objectFit = "cover";
        imageNode.style.borderRadius = "4px";
        draggedElementShortcut.appendChild(imageNode);
        return draggedElementShortcut;
    };
    DragDropChoices.prototype.findDropTargetNodeByDragOverNode = function (dragOverNode) {
        var result = dragOverNode.closest(this.dropTargetDataAttributeName);
        return result;
    };
    DragDropChoices.prototype.getDropTargetByDataAttributeValue = function (dataAttributeValue) {
        var dragOverChoice;
        dragOverChoice = this.parentElement.choices.filter(function (choice) { return "" + choice.value == dataAttributeValue; })[0];
        return dragOverChoice;
    };
    DragDropChoices.prototype.getVisibleChoices = function () {
        var parent = this.parentElement;
        if (parent.getType() === "ranking")
            return parent.rankingChoices;
        return parent.visibleChoices;
    };
    DragDropChoices.prototype.isDropTargetValid = function (dropTarget) {
        var choices = this.getVisibleChoices();
        if (this.parentElement.getType() !== "imagepicker") {
            var dropTargetIndex = choices.indexOf(this.dropTarget);
            var draggedElementIndex = choices.indexOf(this.draggedElement);
            if (draggedElementIndex > dropTargetIndex && this.dropTarget.isDragDropMoveUp) {
                this.dropTarget.isDragDropMoveUp = false;
                return false;
            }
            if (draggedElementIndex < dropTargetIndex && this.dropTarget.isDragDropMoveDown) {
                this.dropTarget.isDragDropMoveDown = false;
                return false;
            }
        }
        // shouldn't allow to drop on "adorners" (selectall, none, other)
        if (choices.indexOf(dropTarget) === -1)
            return false;
        return true;
    };
    DragDropChoices.prototype.calculateIsBottom = function (clientY) {
        var choices = this.getVisibleChoices();
        return (choices.indexOf(this.dropTarget) - choices.indexOf(this.draggedElement) >
            0);
    };
    DragDropChoices.prototype.afterDragOver = function (dropTargetNode) {
        if (this.isDropTargetDoesntChanged(this.isBottom))
            return;
        if (this.dropTarget === this.draggedElement)
            return;
        var choices = this.getVisibleChoices();
        var dropTargetIndex = choices.indexOf(this.dropTarget);
        var draggedElementIndex = choices.indexOf(this.draggedElement);
        choices.splice(draggedElementIndex, 1);
        choices.splice(dropTargetIndex, 0, this.draggedElement);
        if (this.parentElement.getType() === "imagepicker")
            return;
        if (draggedElementIndex !== dropTargetIndex) {
            dropTargetNode.classList.remove("svc-item-value--moveup");
            dropTargetNode.classList.remove("svc-item-value--movedown");
            this.dropTarget.isDragDropMoveDown = false;
            this.dropTarget.isDragDropMoveUp = false;
        }
        if (draggedElementIndex > dropTargetIndex) {
            this.dropTarget.isDragDropMoveDown = true;
        }
        if (draggedElementIndex < dropTargetIndex) {
            this.dropTarget.isDragDropMoveUp = true;
        }
        _super.prototype.ghostPositionChanged.call(this);
    };
    DragDropChoices.prototype.doDrop = function () {
        var choices = this.parentElement.choices;
        var filteredChoices = this.getVisibleChoices().filter(function (item) {
            return choices.indexOf(item) !== -1;
        });
        var oldIndex = choices.indexOf(this.draggedElement);
        var newIndex = filteredChoices.indexOf(this.draggedElement);
        choices.splice(oldIndex, 1);
        choices.splice(newIndex, 0, this.draggedElement);
        return this.parentElement;
    };
    DragDropChoices.prototype.doClear = function () {
        this.updateVisibleChoices();
    };
    DragDropChoices.prototype.updateVisibleChoices = function () {
        var parent = this.parentElement;
        this.parentElement.getType() === "ranking" ?
            parent.updateRankingChoices() :
            parent["updateVisibleChoices"]();
    };
    return DragDropChoices;
}(_core__WEBPACK_IMPORTED_MODULE_0__["DragDropCore"]));



/***/ }),

/***/ "./src/dragdrop/core.ts":
/*!******************************!*\
  !*** ./src/dragdrop/core.ts ***!
  \******************************/
/*! exports provided: DragDropCore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropCore", function() { return DragDropCore; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "./src/base.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/devices */ "./src/utils/devices.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




// WebKit requires cancelable `touchmove` events to be added as early as possible
// see https://bugs.webkit.org/show_bug.cgi?id=184250
if (typeof window !== "undefined") {
    window.addEventListener("touchmove", function (event) {
        if (!DragDropCore.PreventScrolling) {
            return;
        }
        // Prevent scrolling
        event.preventDefault();
    }, { passive: false });
}
var DragDropCore = /** @class */ (function (_super) {
    __extends(DragDropCore, _super);
    function DragDropCore(surveyValue, creator, longTap) {
        var _this = _super.call(this) || this;
        _this.surveyValue = surveyValue;
        _this.creator = creator;
        _this.longTap = longTap;
        _this.onGhostPositionChanged = new _base__WEBPACK_IMPORTED_MODULE_0__["EventBase"]();
        _this.onBeforeDrop = new _base__WEBPACK_IMPORTED_MODULE_0__["EventBase"]();
        _this.onAfterDrop = new _base__WEBPACK_IMPORTED_MODULE_0__["EventBase"]();
        _this.draggedElement = null;
        _this.dropTarget = null;
        _this.prevDropTarget = null;
        _this.draggedElementShortcut = null;
        _this.scrollIntervalId = null;
        _this.allowDropHere = false;
        _this.stopLongTapIfMoveEnough = function (pointerMoveEvent) {
            pointerMoveEvent.preventDefault();
            _this.currentX = pointerMoveEvent.pageX;
            _this.currentY = pointerMoveEvent.pageY;
            if (_this.isMicroMovement)
                return;
            document.body.style.setProperty("touch-action", "");
            document.body.style.setProperty("user-select", "");
            document.body.style.setProperty("-webkit-user-select", "");
            _this.stopLongTap();
        };
        _this.stopLongTap = function (e) {
            clearTimeout(_this.timeoutID);
            _this.timeoutID = null;
            document.removeEventListener("pointerup", _this.stopLongTap);
            document.removeEventListener("pointermove", _this.stopLongTapIfMoveEnough);
        };
        _this.onContextMenu = function (event) {
            event.preventDefault();
            event.stopPropagation();
        };
        _this.dragOver = function (event) {
            _this.moveShortcutElement(event);
            _this.draggedElementShortcut.style.cursor = "grabbing";
            var dropTargetNode = _this.findDropTargetNodeFromPoint(event.clientX, event.clientY);
            if (!dropTargetNode) {
                _this.banDropHere();
                return;
            }
            _this.dropTarget = _this.getDropTargetByNode(dropTargetNode, event);
            var isDropTargetValid = _this.isDropTargetValid(_this.dropTarget, dropTargetNode);
            _this.doDragOver(dropTargetNode, event);
            if (!isDropTargetValid) {
                _this.banDropHere();
                return;
            }
            var isBottom = _this.calculateIsBottom(event.clientY, dropTargetNode);
            _this.allowDropHere = true;
            if (_this.isDropTargetDoesntChanged(isBottom))
                return;
            _this.isBottom = null; //TODO need for property change trigger with guarantee but it would be better not to watch on isBottom property but have some event like onValidTargetDragOver
            _this.isBottom = isBottom;
            _this.afterDragOver(dropTargetNode, event);
            _this.prevDropTarget = _this.dropTarget;
        };
        _this.drop = function () {
            if (_this.allowDropHere) {
                var fromElement = _this.draggedElement.parent;
                _this.onBeforeDrop.fire(_this, { fromElement: fromElement, draggedElement: _this.draggedElement });
                var newElement = _this.doDrop();
                _this.onAfterDrop.fire(_this, { fromElement: fromElement, draggedElement: newElement, toElement: _this.dropTarget });
            }
            _this.clear();
        };
        _this.handlePointerCancel = function (event) {
            _this.clear();
        };
        _this.handleEscapeButton = function (event) {
            if (event.keyCode == 27) {
                _this.clear();
            }
        };
        _this.banDropHere = function () {
            _this.allowDropHere = false;
            _this.doBanDropHere();
            _this.dropTarget = null;
            _this.draggedElementShortcut.style.cursor = "not-allowed";
            _this.isBottom = null;
        };
        _this.doBanDropHere = function () { };
        _this.clear = function () {
            cancelAnimationFrame(_this.scrollIntervalId);
            document.removeEventListener("pointermove", _this.dragOver);
            document.removeEventListener("pointercancel", _this.handlePointerCancel);
            document.removeEventListener("keydown", _this.handleEscapeButton);
            document.removeEventListener("pointerup", _this.drop);
            _this.draggedElementShortcut.removeEventListener("pointerup", _this.drop);
            if (_utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"]) {
                _this.draggedElementShortcut.removeEventListener("contextmenu", _this.onContextMenu);
            }
            document.body.removeChild(_this.draggedElementShortcut);
            _this.doClear();
            _this.dropTarget = null;
            _this.draggedElementShortcut = null;
            _this.draggedElement = null;
            _this.isBottom = null;
            _this.parentElement = null;
            _this.scrollIntervalId = null;
            if (_utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"]) {
                _this.savedTargetNode && document.body.removeChild(_this.savedTargetNode);
                DragDropCore.PreventScrolling = false;
            }
            document.body.style.setProperty("touch-action", "");
            document.body.style.setProperty("user-select", "");
            document.body.style.setProperty("-webkit-user-select", "");
        };
        return _this;
    }
    DragDropCore.prototype.ghostPositionChanged = function () {
        this.onGhostPositionChanged.fire({}, {});
    };
    Object.defineProperty(DragDropCore.prototype, "dropTargetDataAttributeName", {
        get: function () {
            return "[data-sv-drop-target-" + this.draggedElementType + "]";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DragDropCore.prototype, "survey", {
        get: function () {
            return this.surveyValue || this.creator.survey;
        },
        enumerable: false,
        configurable: true
    });
    DragDropCore.prototype.startDrag = function (event, draggedElement, parentElement, draggedElementNode, preventSaveTargetNode) {
        if (preventSaveTargetNode === void 0) { preventSaveTargetNode = false; }
        if (_utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"]) {
            this.startLongTapProcessing(event, draggedElement, parentElement, draggedElementNode, preventSaveTargetNode);
            return;
        }
        this.doStartDrag(event, draggedElement, parentElement, draggedElementNode);
    };
    DragDropCore.prototype.startLongTapProcessing = function (event, draggedElement, parentElement, draggedElementNode, preventSaveTargetNode) {
        var _this = this;
        if (preventSaveTargetNode === void 0) { preventSaveTargetNode = false; }
        this.startX = event.pageX;
        this.startY = event.pageY;
        document.body.style.setProperty("touch-action", "none", "important");
        document.body.style.setProperty("user-select", "none", "important");
        document.body.style.setProperty("-webkit-user-select", "none", "important");
        this.timeoutID = setTimeout(function () {
            _this.doStartDrag(event, draggedElement, parentElement, draggedElementNode);
            if (!preventSaveTargetNode) {
                _this.savedTargetNode = event.target;
                _this.savedTargetNode.style.cssText =
                    "\n          position: absolute;\n          height: 1px!important;\n          width: 1px!important;\n          overflow: hidden;\n          clip: rect(1px 1px 1px 1px);\n          clip: rect(1px, 1px, 1px, 1px);\n        ";
                document.body.appendChild(_this.savedTargetNode);
            }
            _this.stopLongTap();
        }, this.longTap ? 500 : 0);
        document.addEventListener("pointerup", this.stopLongTap);
        document.addEventListener("pointermove", this.stopLongTapIfMoveEnough);
    };
    Object.defineProperty(DragDropCore.prototype, "isMicroMovement", {
        // see https://stackoverflow.com/questions/6042202/how-to-distinguish-mouse-click-and-drag
        get: function () {
            var delta = 5;
            var diffX = Math.abs(this.currentX - this.startX);
            var diffY = Math.abs(this.currentY - this.startY);
            return diffX < delta && diffY < delta;
        },
        enumerable: false,
        configurable: true
    });
    // EO long tap
    DragDropCore.prototype.doStartDrag = function (event, draggedElement, parentElement, draggedElementNode) {
        if (_utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"]) {
            DragDropCore.PreventScrolling = true;
        }
        if (event.which === 3)
            return; //right mouse btn
        this.draggedElement = draggedElement;
        this.parentElement = parentElement;
        this.onStartDrag();
        var shortcutText = this.getShortcutText(this.draggedElement);
        this.draggedElementShortcut = this.createDraggedElementShortcut(shortcutText, draggedElementNode, event);
        document.body.append(this.draggedElementShortcut);
        this.moveShortcutElement(event);
        document.addEventListener("pointermove", this.dragOver);
        document.addEventListener("pointercancel", this.handlePointerCancel);
        document.addEventListener("keydown", this.handleEscapeButton);
        document.addEventListener("pointerup", this.drop);
        if (!_utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"]) {
            this.draggedElementShortcut.addEventListener("pointerup", this.drop);
        }
        else {
            this.draggedElementShortcut.addEventListener("contextmenu", this.onContextMenu);
        }
    };
    DragDropCore.prototype.isDropTargetDoesntChanged = function (newIsBottom) {
        return (this.dropTarget === this.prevDropTarget && newIsBottom === this.isBottom);
    };
    DragDropCore.prototype.onStartDrag = function () { };
    DragDropCore.prototype.getShortcutText = function (draggedElement) {
        return draggedElement.shortcutText;
    };
    DragDropCore.prototype.createDraggedElementShortcut = function (text, draggedElementNode, event) {
        var draggedElementShortcut = document.createElement("div");
        draggedElementShortcut.innerText = text;
        draggedElementShortcut.className = this.getDraggedElementClass();
        return draggedElementShortcut;
    };
    DragDropCore.prototype.getDraggedElementClass = function () {
        return "sv-dragged-element-shortcut";
    };
    DragDropCore.prototype.doDragOver = function (dropTargetNode, event) { };
    DragDropCore.prototype.afterDragOver = function (dropTargetNode, event) { };
    DragDropCore.prototype.getGhostPosition = function (item) {
        if (this.dropTarget !== item)
            return null;
        if (this.isBottom)
            return "bottom";
        return "top";
    };
    DragDropCore.prototype.moveShortcutElement = function (event) {
        this.doScroll(event.clientY, event.clientX);
        var shortcutHeight = this.draggedElementShortcut.offsetHeight;
        var shortcutWidth = this.draggedElementShortcut.offsetWidth;
        var shortcutXOffset = this.draggedElementShortcut.shortcutXOffset || shortcutWidth / 2;
        var shortcutYOffset = this.draggedElementShortcut.shortcutYOffset || shortcutHeight / 2;
        // TODO this is hot fix for RTL support. Probably we need better global strategy for it. https://github.com/surveyjs/survey-library/issues/4554
        if (document.querySelectorAll("[dir='rtl']").length !== 0) {
            shortcutXOffset = shortcutWidth / 2;
            shortcutYOffset = shortcutHeight / 2;
        }
        var documentBottom = document.documentElement.clientHeight;
        var documentRight = document.documentElement.clientWidth;
        var shortcutBottomCoordinate = this.getShortcutBottomCoordinate(event.clientY, shortcutHeight, shortcutYOffset);
        var shortcutRightCoordinate = this.getShortcutRightCoordinate(event.clientX, shortcutWidth, shortcutXOffset);
        if (shortcutRightCoordinate >= documentRight) {
            this.draggedElementShortcut.style.left =
                event.pageX -
                    event.clientX +
                    documentRight -
                    shortcutWidth +
                    "px";
            this.draggedElementShortcut.style.top =
                event.pageY - shortcutYOffset + "px";
            return;
        }
        if (event.clientX - shortcutXOffset <= 0) {
            this.draggedElementShortcut.style.left =
                event.pageX - event.clientX + "px";
            this.draggedElementShortcut.style.top =
                event.pageY - shortcutYOffset + "px";
            return;
        }
        if (shortcutBottomCoordinate >= documentBottom) {
            this.draggedElementShortcut.style.left =
                event.pageX - shortcutXOffset + "px";
            this.draggedElementShortcut.style.top =
                event.pageY -
                    event.clientY +
                    documentBottom -
                    shortcutHeight +
                    "px";
            return;
        }
        if (event.clientY - shortcutYOffset <= 0) {
            this.draggedElementShortcut.style.left =
                event.pageX - shortcutXOffset + "px";
            this.draggedElementShortcut.style.top =
                event.pageY - event.clientY + "px";
            return;
        }
        this.draggedElementShortcut.style.left =
            event.pageX - shortcutXOffset + "px";
        this.draggedElementShortcut.style.top =
            event.pageY - shortcutYOffset + "px";
    };
    DragDropCore.prototype.getShortcutBottomCoordinate = function (currentY, shortcutHeight, shortcutYOffset) {
        return currentY + shortcutHeight - shortcutYOffset;
    };
    DragDropCore.prototype.getShortcutRightCoordinate = function (currentX, shortcutWidth, shortcutXOffset) {
        return currentX + shortcutWidth - shortcutXOffset;
    };
    DragDropCore.prototype.doScroll = function (clientY, clientX) {
        var _this = this;
        cancelAnimationFrame(this.scrollIntervalId);
        var startScrollBoundary = 50;
        this.draggedElementShortcut.hidden = true;
        var dragOverNode = document.elementFromPoint(clientX, clientY);
        this.draggedElementShortcut.hidden = false;
        var scrollableParentNode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["findScrollableParent"])(dragOverNode);
        var top;
        var bottom;
        var left;
        var right;
        if (scrollableParentNode.tagName === "HTML") {
            top = 0;
            bottom = document.documentElement.clientHeight;
            left = 0;
            right = document.documentElement.clientWidth;
        }
        else {
            top = scrollableParentNode.getBoundingClientRect().top;
            bottom = scrollableParentNode.getBoundingClientRect().bottom;
            left = scrollableParentNode.getBoundingClientRect().left;
            right = scrollableParentNode.getBoundingClientRect().right;
        }
        var repeat = function () {
            if (clientY - top <= startScrollBoundary) {
                scrollableParentNode.scrollTop -= 15;
            }
            else if (bottom - clientY <= startScrollBoundary) {
                scrollableParentNode.scrollTop += 15;
            }
            else if (right - clientX <= startScrollBoundary) {
                scrollableParentNode.scrollLeft += 15;
            }
            else if (clientX - left <= startScrollBoundary) {
                scrollableParentNode.scrollLeft -= 15;
            }
            _this.scrollIntervalId = requestAnimationFrame(repeat);
        };
        this.scrollIntervalId = requestAnimationFrame(repeat);
    };
    DragDropCore.prototype.getDataAttributeValueByNode = function (node) {
        var _this = this;
        var datasetName = "svDropTarget";
        var words = this.draggedElementType.split("-");
        words.forEach(function (word) {
            datasetName += _this.capitalizeFirstLetter(word);
        });
        return node.dataset[datasetName];
    };
    DragDropCore.prototype.getDropTargetByNode = function (dropTargetNode, event) {
        var dataAttributeValue = this.getDataAttributeValueByNode(dropTargetNode);
        return this.getDropTargetByDataAttributeValue(dataAttributeValue, dropTargetNode, event);
    };
    DragDropCore.prototype.capitalizeFirstLetter = function (string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    };
    DragDropCore.prototype.calculateVerticalMiddleOfHTMLElement = function (HTMLElement) {
        var rect = HTMLElement.getBoundingClientRect();
        return rect.y + rect.height / 2;
    };
    DragDropCore.prototype.calculateHorizontalMiddleOfHTMLElement = function (HTMLElement) {
        var rect = HTMLElement.getBoundingClientRect();
        return rect.x + rect.width / 2;
    };
    DragDropCore.prototype.findDropTargetNodeFromPoint = function (clientX, clientY) {
        this.draggedElementShortcut.hidden = true;
        var dragOverNode = document.elementFromPoint(clientX, clientY);
        this.draggedElementShortcut.hidden = false;
        if (!dragOverNode)
            return null;
        return this.findDropTargetNodeByDragOverNode(dragOverNode);
    };
    DragDropCore.prototype.findDropTargetNodeByDragOverNode = function (dragOverNode) {
        var result = dragOverNode.querySelector(this.dropTargetDataAttributeName) ||
            dragOverNode.closest(this.dropTargetDataAttributeName);
        return result;
    };
    DragDropCore.prototype.doClear = function () { };
    DragDropCore.PreventScrolling = false;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: null,
            onSet: function (val, target) {
                target.ghostPositionChanged();
            },
        })
    ], DragDropCore.prototype, "isBottom", void 0);
    return DragDropCore;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));



/***/ }),

/***/ "./src/dragdrop/matrix-rows.ts":
/*!*************************************!*\
  !*** ./src/dragdrop/matrix-rows.ts ***!
  \*************************************/
/*! exports provided: DragDropMatrixRows */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropMatrixRows", function() { return DragDropMatrixRows; });
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ "./src/dragdrop/core.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var DragDropMatrixRows = /** @class */ (function (_super) {
    __extends(DragDropMatrixRows, _super);
    function DragDropMatrixRows() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fromIndex = null;
        _this.toIndex = null;
        _this.doDrop = function () {
            _this.parentElement.moveRowByIndex(_this.fromIndex, _this.toIndex);
            return _this.parentElement;
        };
        return _this;
    }
    Object.defineProperty(DragDropMatrixRows.prototype, "draggedElementType", {
        get: function () {
            return "matrix-row";
        },
        enumerable: false,
        configurable: true
    });
    DragDropMatrixRows.prototype.createDraggedElementShortcut = function (text, draggedElementNode, event) {
        var _this = this;
        var draggedElementShortcut = document.createElement("div");
        // draggedElementShortcut.innerText = text;
        draggedElementShortcut.style.cssText = " \n          cursor: grabbing;\n          position: absolute;\n          z-index: 1000;\n          font-family: var(--font-family, $font-family);\n        ";
        var isDeepClone = true;
        var row = (draggedElementNode
            .closest("[data-sv-drop-target-matrix-row]"));
        var clone = (row.cloneNode(isDeepClone));
        clone.style.cssText = "\n      box-shadow: rgb(0 0 0 / 10%) 0px 8px 16px;\n      background-color: white;\n      display: flex;\n      flex-grow: 0;\n      flex-shrink: 0;\n      align-items: center;\n      line-height: 0;\n      width: " + row.offsetWidth + "px;\n    ";
        clone.classList.remove("sv-matrix__drag-drop--moveup");
        clone.classList.remove("sv-matrix__drag-drop--movedown");
        this.draggedElement.isDragDropMoveDown = false;
        this.draggedElement.isDragDropMoveUp = false;
        draggedElementShortcut.appendChild(clone);
        var rect = draggedElementNode.getBoundingClientRect();
        draggedElementShortcut.shortcutXOffset = event.clientX - rect.x;
        draggedElementShortcut.shortcutYOffset = event.clientY - rect.y;
        //this.isBottom = null;
        var renderedRows = this.parentElement.renderedTable.rows;
        renderedRows.forEach(function (renderedRow, index) {
            if (renderedRow.row === _this.draggedElement) {
                renderedRow.isGhostRow = true;
            }
        });
        this.fromIndex = this.parentElement.visibleRows.indexOf(this.draggedElement);
        return draggedElementShortcut;
    };
    // protected ghostPositionChanged(): void {
    //   let ghostPosition;
    //   this.parentElement.renderedTable.rows.forEach(
    //     (renderedRow: QuestionMatrixDropdownRenderedRow) => {
    //       ghostPosition = this.getGhostPosition(
    //         renderedRow.row
    //       );
    //       renderedRow.isGhostRow = !ghostPosition;
    //     }
    //   );
    //   super.ghostPositionChanged();
    // }
    DragDropMatrixRows.prototype.getDropTargetByDataAttributeValue = function (dataAttributeValue) {
        var matrix = this.parentElement;
        var dropTargetRenderedRow;
        dropTargetRenderedRow = matrix.renderedTable.rows.filter(function (renderedRow) { return renderedRow.row.id === dataAttributeValue; })[0];
        return dropTargetRenderedRow.row;
    };
    DragDropMatrixRows.prototype.isDropTargetValid = function (dropTarget) {
        return true;
    };
    DragDropMatrixRows.prototype.findDropTargetNodeByDragOverNode = function (dragOverNode) {
        var result = dragOverNode.closest(this.dropTargetDataAttributeName);
        return result;
    };
    DragDropMatrixRows.prototype.calculateIsBottom = function (clientY) {
        var rendreredRows = this.parentElement.renderedTable.rows;
        var rows = rendreredRows.map(function (rendredRow) { return rendredRow.row; });
        return (rows.indexOf(this.dropTarget) - rows.indexOf(this.draggedElement) > 0);
    };
    DragDropMatrixRows.prototype.afterDragOver = function (dropTargetNode) {
        var _this = this;
        if (this.isDropTargetDoesntChanged(this.isBottom))
            return;
        if (this.dropTarget === this.draggedElement)
            return;
        var dropTargetIndex;
        var draggedElementIndex;
        var draggedRenderedRow;
        var renderedRows = this.parentElement.renderedTable.rows;
        renderedRows.forEach(function (renderedRow, index) {
            if (renderedRow.row === _this.dropTarget) {
                // renderedRow.isGhostRow = true;
                dropTargetIndex = index;
            }
            if (renderedRow.row === _this.draggedElement) {
                draggedRenderedRow = renderedRow;
                draggedElementIndex = index;
                draggedRenderedRow.isGhostRow = true;
            }
        });
        renderedRows.splice(draggedElementIndex, 1);
        renderedRows.splice(dropTargetIndex, 0, draggedRenderedRow);
        this.toIndex = dropTargetIndex;
        // const matrix = this.parentElement;
        // const fromIndex = matrix.visibleRows.indexOf(this.draggedElement);
        // const toIndex = matrix.visibleRows.indexOf(this.dropTarget);
        // matrix.moveRowByIndex(fromIndex, toIndex);
        // if (draggedElementIndex !== dropTargetIndex) {
        //   dropTargetNode.classList.remove("sv-matrix__drag-drop--moveup");
        //   dropTargetNode.classList.remove("sv-matrix__drag-drop--movedown");
        //   this.dropTarget.isDragDropMoveDown = false;
        //   this.dropTarget.isDragDropMoveUp = false;
        // }
        // if (draggedElementIndex > dropTargetIndex) {
        //   this.dropTarget.isDragDropMoveDown = true;
        // }
        // if (draggedElementIndex < dropTargetIndex) {
        //   this.dropTarget.isDragDropMoveUp = true;
        // }
        _super.prototype.ghostPositionChanged.call(this);
    };
    DragDropMatrixRows.prototype.doClear = function () {
        this.parentElement["resetRenderedTable"]();
        this.fromIndex = null;
        this.toIndex = null;
    };
    return DragDropMatrixRows;
}(_core__WEBPACK_IMPORTED_MODULE_0__["DragDropCore"]));



/***/ }),

/***/ "./src/dragdrop/ranking-choices.ts":
/*!*****************************************!*\
  !*** ./src/dragdrop/ranking-choices.ts ***!
  \*****************************************/
/*! exports provided: DragDropRankingChoices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropRankingChoices", function() { return DragDropRankingChoices; });
/* harmony import */ var _choices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./choices */ "./src/dragdrop/choices.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/devices */ "./src/utils/devices.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DragDropRankingChoices = /** @class */ (function (_super) {
    __extends(DragDropRankingChoices, _super);
    function DragDropRankingChoices() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isDragOverRootNode = false;
        _this.doDragOver = function () {
            var node = _this.draggedElementShortcut.querySelector(".sv-ranking-item");
            node.style.cursor = "grabbing";
        };
        _this.doBanDropHere = function () {
            if (_this.isDragOverRootNode) {
                _this.allowDropHere = true;
                return;
            }
            var node = _this.draggedElementShortcut.querySelector(".sv-ranking-item");
            node.style.cursor = "not-allowed";
        };
        _this.doDrop = function () {
            _this.parentElement.setValue();
            return _this.parentElement;
        };
        _this.doClear = function () {
            _this.parentElement.dropTargetNodeMove = null;
            _this.parentElement.updateRankingChoices(true);
        };
        return _this;
    }
    Object.defineProperty(DragDropRankingChoices.prototype, "draggedElementType", {
        get: function () {
            return "ranking-item";
        },
        enumerable: false,
        configurable: true
    });
    DragDropRankingChoices.prototype.createDraggedElementShortcut = function (text, draggedElementNode, event) {
        var draggedElementShortcut = document.createElement("div");
        draggedElementShortcut.className = this.shortcutClass + " sv-ranking-shortcut";
        draggedElementShortcut.style.cssText = " \n          cursor: grabbing;\n          position: absolute;\n          z-index: 1000;\n          border-radius: 36px;\n          min-width: 100px;\n          box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);\n          background-color: var(--background, white);\n          font-family: var(--font-family, $font-family);\n        ";
        var isDeepClone = true;
        var clone = draggedElementNode.cloneNode(isDeepClone);
        draggedElementShortcut.appendChild(clone);
        var rect = draggedElementNode.getBoundingClientRect();
        draggedElementShortcut.shortcutXOffset = event.clientX - rect.x;
        draggedElementShortcut.shortcutYOffset = event.clientY - rect.y;
        return draggedElementShortcut;
    };
    Object.defineProperty(DragDropRankingChoices.prototype, "shortcutClass", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_1__["CssClassBuilder"]()
                .append(this.parentElement.cssClasses.root)
                .append(this.parentElement.cssClasses.rootMobileMod, _utils_devices__WEBPACK_IMPORTED_MODULE_2__["IsMobile"])
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    DragDropRankingChoices.prototype.getDropTargetByDataAttributeValue = function (dataAttributeValue) {
        return this.parentElement.rankingChoices[dataAttributeValue];
    };
    DragDropRankingChoices.prototype.findDropTargetNodeByDragOverNode = function (dragOverNode) {
        this.isDragOverRootNode = this.getIsDragOverRootNode(dragOverNode);
        return dragOverNode.closest(this.dropTargetDataAttributeName);
    };
    DragDropRankingChoices.prototype.getIsDragOverRootNode = function (dragOverNode) {
        // dragOverNode might be <path></path> for example and the className prop is obj
        return typeof dragOverNode.className === "string" &&
            dragOverNode.className.indexOf("sv-ranking") !== -1;
    };
    DragDropRankingChoices.prototype.isDropTargetValid = function (dropTarget, dropTargetNode) {
        var choices = this.parentElement.rankingChoices;
        var dropTargetIndex = choices.indexOf(this.dropTarget);
        var draggedElementIndex = choices.indexOf(this.draggedElement);
        if (draggedElementIndex > dropTargetIndex && dropTargetNode.classList.contains("sv-dragdrop-moveup")) {
            this.parentElement.dropTargetNodeMove = null;
            return false;
        }
        if (draggedElementIndex < dropTargetIndex && dropTargetNode.classList.contains("sv-dragdrop-movedown")) {
            this.parentElement.dropTargetNodeMove = null;
            return false;
        }
        if (choices.indexOf(dropTarget) === -1)
            // shouldn't allow to drop on "adorners" (selectall, none, other)
            return false;
        return true;
    };
    DragDropRankingChoices.prototype.calculateIsBottom = function (clientY) {
        var choices = this.parentElement.rankingChoices;
        return (choices.indexOf(this.dropTarget) - choices.indexOf(this.draggedElement) >
            0);
    };
    DragDropRankingChoices.prototype.afterDragOver = function (dropTargetNode) {
        var choices = this.parentElement.rankingChoices;
        var dropTargetIndex = choices.indexOf(this.dropTarget);
        var draggedElementIndex = choices.indexOf(this.draggedElement);
        choices.splice(draggedElementIndex, 1);
        choices.splice(dropTargetIndex, 0, this.draggedElement);
        this.parentElement.setPropertyValue("rankingChoices", choices);
        //return;
        this.updateDraggedElementShortcut(dropTargetIndex + 1);
        if (draggedElementIndex !== dropTargetIndex) {
            dropTargetNode.classList.remove("sv-dragdrop-moveup");
            dropTargetNode.classList.remove("sv-dragdrop-movedown");
            this.parentElement.dropTargetNodeMove = null;
        }
        if (draggedElementIndex > dropTargetIndex) {
            this.parentElement.dropTargetNodeMove = "down";
        }
        if (draggedElementIndex < dropTargetIndex) {
            this.parentElement.dropTargetNodeMove = "up";
        }
    };
    DragDropRankingChoices.prototype.updateDraggedElementShortcut = function (newIndex) {
        var newIndexText = newIndex + "";
        // TODO should avoid direct DOM manipulation, do through the frameworks instead
        var indexNode = this.draggedElementShortcut.querySelector(".sv-ranking-item__index");
        indexNode.innerText = newIndexText;
    };
    DragDropRankingChoices.prototype.ghostPositionChanged = function () {
        this.parentElement.currentDropTarget = this.draggedElement;
        _super.prototype.ghostPositionChanged.call(this);
    };
    return DragDropRankingChoices;
}(_choices__WEBPACK_IMPORTED_MODULE_0__["DragDropChoices"]));



/***/ }),

/***/ "./src/dragdrop/survey-elements.ts":
/*!*****************************************!*\
  !*** ./src/dragdrop/survey-elements.ts ***!
  \*****************************************/
/*! exports provided: DragDropSurveyElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropSurveyElements", function() { return DragDropSurveyElements; });
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../survey-element */ "./src/survey-element.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core */ "./src/dragdrop/core.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DragDropSurveyElements = /** @class */ (function (_super) {
    __extends(DragDropSurveyElements, _super);
    function DragDropSurveyElements() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isEdge = false;
        _this.prevIsEdge = null;
        _this.ghostSurveyElement = null;
        _this.isDraggedElementSelected = false;
        _this.doBanDropHere = function () {
            _this.removeGhostElementFromSurvey();
            _this.isEdge = null;
        };
        _this.doDrop = function () {
            if (_this.dropTarget) {
                document.activeElement.blur();
                return _this.insertRealElementIntoSurvey();
            }
            return null;
        };
        _this.doClear = function () {
            _this.removeGhostElementFromSurvey();
            _this.isEdge = null;
            _this.ghostSurveyElement = null;
            if (!!_this.draggedElement) {
                _this.draggedElement.isDragMe = false;
            }
            _this.isRight = null;
        };
        return _this;
    }
    Object.defineProperty(DragDropSurveyElements.prototype, "draggedElementType", {
        get: function () {
            return "survey-element";
        },
        enumerable: false,
        configurable: true
    });
    DragDropSurveyElements.prototype.startDragToolboxItem = function (event, draggedElementJson, toolboxItemTitle) {
        var preventSaveTargetNode = true;
        var draggedElement = this.createElementFromJson(draggedElementJson);
        draggedElement.toolboxItemTitle = toolboxItemTitle;
        this.startDrag(event, draggedElement, null, null, preventSaveTargetNode);
    };
    DragDropSurveyElements.prototype.startDragSurveyElement = function (event, draggedElement, isElementSelected) {
        this.isDraggedElementSelected = isElementSelected;
        this.startDrag(event, draggedElement);
    };
    DragDropSurveyElements.prototype.getShortcutText = function (draggedElement) {
        return draggedElement.toolboxItemTitle || _super.prototype.getShortcutText.call(this, draggedElement);
    };
    DragDropSurveyElements.prototype.createDraggedElementShortcut = function (text, draggedElementNode, event) {
        var draggedElementShortcut = document.createElement("div");
        var textSpan = document.createElement("span");
        textSpan.className = "svc-dragged-element-shortcut__text";
        textSpan.innerText = text;
        draggedElementShortcut.appendChild(this.createDraggedElementIcon());
        draggedElementShortcut.appendChild(textSpan);
        draggedElementShortcut.className = this.getDraggedElementClass();
        return draggedElementShortcut;
    };
    DragDropSurveyElements.prototype.createDraggedElementIcon = function () {
        var span = document.createElement("span");
        var type = this.draggedElement.getType();
        var svgString = "<svg class=\"sv-svg-icon\" role=\"img\" style=\"width: 24px; height: 24px;\"><use xlink:href=\"#icon-" + type + "\"></use></svg>";
        span.className = "svc-dragged-element-shortcut__icon";
        span.innerHTML = svgString;
        return span;
    };
    DragDropSurveyElements.prototype.getDraggedElementClass = function () {
        var result = "svc-dragged-element-shortcut";
        if (this.isDraggedElementSelected)
            result += " svc-dragged-element-shortcut--selected";
        return result;
    };
    DragDropSurveyElements.prototype.createElementFromJson = function (json) {
        var element = this.createNewElement(json);
        if (element["setSurveyImpl"]) {
            element["setSurveyImpl"](this.survey);
        }
        else {
            element["setData"](this.survey);
        }
        element.renderWidth = "100%";
        return element;
    };
    DragDropSurveyElements.prototype.createNewElement = function (json) {
        var newElement = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(json["type"]);
        new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, newElement);
        return newElement;
    };
    DragDropSurveyElements.prototype.getDropTargetByDataAttributeValue = function (dataAttributeValue, dropTargetNode, event) {
        this.isEdge = this.calculateIsEdge(dropTargetNode, event.clientY);
        if (!dataAttributeValue) {
            // panel dynamic
            var nearestDropTargetElement = dropTargetNode.parentElement.closest(this.dropTargetDataAttributeName);
            dataAttributeValue = this.getDataAttributeValueByNode(nearestDropTargetElement);
        }
        if (!dataAttributeValue) {
            throw new Error("Can't find drop target survey element name");
        }
        if (dataAttributeValue === DragDropSurveyElements.ghostSurveyElementName) {
            return this.prevDropTarget;
        }
        // drop to new page
        if (dataAttributeValue === "newGhostPage") {
            return DragDropSurveyElements.newGhostPage;
        }
        // drop to page
        var page = this.survey.getPageByName(dataAttributeValue);
        if (page) {
            if (
            // TODO we can't drop on not empty page directly for now
            page.elements.length !== 0) {
                return null;
            }
            return page;
        }
        // drop to question or panel
        var dropTarget;
        var question;
        this.survey.pages.forEach(function (page) {
            question = page.getElementByName(dataAttributeValue);
            if (question)
                dropTarget = question;
        });
        // drop to paneldynamic
        if (dropTarget.getType() === "paneldynamic" && !this.isEdge) {
            dropTarget = dropTarget.template;
        }
        // drop to matrix detail panel
        if ((dropTarget.getType() === "matrixdropdown" || dropTarget.getType() === "matrixdynamic") && dropTarget.detailPanelMode !== "none" && !this.isEdge) {
            dropTarget = dropTarget.detailPanel;
        }
        // drop to panel
        else if (dropTarget.isPanel) {
            dropTarget = this.getPanelDropTarget(dropTargetNode, dropTarget, event);
        }
        // drop to question
        //question inside paneldymanic
        if (!dropTarget.page) {
            var nearestDropTargetPageElement = dropTargetNode.parentElement.closest("[data-sv-drop-target-page]");
            dataAttributeValue = nearestDropTargetPageElement.dataset.svDropTargetPage;
            var page_1 = this.survey.getPageByName(dataAttributeValue);
            dropTarget.__page = page_1;
        }
        return dropTarget;
        // EO drop to question or panel
    };
    DragDropSurveyElements.prototype.isDropTargetValid = function () {
        if (!this.dropTarget)
            return false;
        if (this.dropTarget === this.draggedElement)
            return false;
        if (this.draggedElement.getType() === "paneldynamic" &&
            this.dropTarget === this.draggedElement.template)
            return false;
        if (DragDropSurveyElements.restrictDragQuestionBetweenPages &&
            this.shouldRestricDragQuestionBetweenPages(this.dropTarget)) {
            return false;
        }
        return true;
    };
    DragDropSurveyElements.prototype.calculateIsBottom = function (clientY, dropTargetNode) {
        // we shouldn't reculc isBottom if drag over ghost survey element
        if (this.getDataAttributeValueByNode(dropTargetNode) === DragDropSurveyElements.ghostSurveyElementName) {
            return this.isBottom;
        }
        var middle = this.calculateVerticalMiddleOfHTMLElement(dropTargetNode);
        return clientY >= middle;
    };
    DragDropSurveyElements.prototype.calculateIsRight = function (clientX, dropTargetNode) {
        // we shouldn't reculc isBottom if drag over ghost survey element
        if (this.getDataAttributeValueByNode(dropTargetNode) === DragDropSurveyElements.ghostSurveyElementName) {
            return this.isRight;
        }
        var middle = this.calculateHorizontalMiddleOfHTMLElement(dropTargetNode);
        return clientX >= middle;
    };
    DragDropSurveyElements.prototype.isDropTargetDoesntChanged = function (newIsBottom) {
        if (this.dropTarget === this.ghostSurveyElement)
            return true;
        return (this.dropTarget === this.prevDropTarget && newIsBottom === this.isBottom
            && this.isEdge === this.prevIsEdge && this.isRight === this.prevIsRight);
    };
    DragDropSurveyElements.prototype.shouldRestricDragQuestionBetweenPages = function (dropTarget) {
        var oldPage = this.draggedElement["page"];
        var newPage = dropTarget.isPage ? dropTarget : dropTarget["page"];
        // if oldPage === null then it is drop from the toolbox
        return oldPage && oldPage !== newPage;
    };
    DragDropSurveyElements.prototype.getPanelDropTarget = function (HTMLElement, dropTarget, event) {
        var isEdge = this.isEdge;
        if (!isEdge && dropTarget.questions.length !== 0) {
            HTMLElement = this.findDeepestDropTargetChild(HTMLElement);
            dropTarget = this.getDropTargetByNode(HTMLElement, event);
        }
        return dropTarget;
    };
    DragDropSurveyElements.prototype.findDeepestDropTargetChild = function (parent) {
        var selector = this.dropTargetDataAttributeName;
        var result = parent;
        while (!!parent) {
            result = parent;
            parent = parent.querySelector(selector);
        }
        return result;
    };
    DragDropSurveyElements.prototype.calculateIsEdge = function (dropTargetNode, clientY) {
        var rect = dropTargetNode.getBoundingClientRect();
        return clientY - rect.top <= DragDropSurveyElements.edgeHeight || rect.bottom - clientY <= DragDropSurveyElements.edgeHeight;
    };
    // private calculateIsRight(): boolean {
    //   // const dropTarget = this.dropTarget;
    //   // const targetRow = this.getTargetRow(dropTarget);
    //   // if (targetRow.elements.indexOf(this.draggedElement) !== -1) {
    //   //   var pageOrPanel = dropTarget.parent;
    //   //   var srcIndex = pageOrPanel.elements.indexOf(this.draggedElement);
    //   //   var destIndex = pageOrPanel.elements.indexOf(dropTarget);
    //   // } else {
    //   //   if (targetRow.elements.indexOf(dropTarget) === 0) {
    //   //     return false;
    //   //   } else {
    //   //     return true;
    //   //   }
    //   //   // else if (targetRow.elements.indexOf(dropTarget) === targetRow.elements.length -1) {
    //   //   //   return true;
    //   //   // }
    //   // }
    //   // return srcIndex < destIndex;
    //   const middle = this.calculateHorizontalMiddleOfHTMLElement(this.dropTargetNode);
    //   return clientY >= middle;
    // }
    DragDropSurveyElements.prototype.doDragOver = function (dropTargetNode, event) {
        this.isRight = this.calculateIsRight(event.clientX, dropTargetNode);
    };
    DragDropSurveyElements.prototype.afterDragOver = function (dropTargetNode, event) {
        this.prevIsEdge = this.isEdge;
        this.prevIsRight = this.isRight;
        this.insertGhostElementIntoSurvey();
    };
    DragDropSurveyElements.prototype.onStartDrag = function () {
        this.ghostSurveyElement = this.createGhostSurveyElement();
        this.draggedElement.isDragMe = true;
    };
    DragDropSurveyElements.prototype.insertGhostElementIntoSurvey = function () {
        this.removeGhostElementFromSurvey();
        var isTargetRowMultiple = this.calcTargetRowMultiple();
        this.ghostSurveyElement = this.createGhostSurveyElement(isTargetRowMultiple);
        this.ghostSurveyElement.name =
            DragDropSurveyElements.ghostSurveyElementName; // TODO why do we need setup it manually see createGhostSurveyElement method
        this.parentElement = this.dropTarget.isPage
            ? this.dropTarget
            : (this.dropTarget.page || this.dropTarget.__page);
        if (this.isDragOverInsideEmptyPanel()) {
            this.dropTarget.dragTypeOverMe = _survey_element__WEBPACK_IMPORTED_MODULE_0__["DragTypeOverMeEnum"].InsideEmptyPanel;
            return;
        }
        if (!this.isEdge && isTargetRowMultiple) {
            this.dropTarget.dragTypeOverMe = this.isRight ?
                _survey_element__WEBPACK_IMPORTED_MODULE_0__["DragTypeOverMeEnum"].MultilineRight :
                _survey_element__WEBPACK_IMPORTED_MODULE_0__["DragTypeOverMeEnum"].MultilineLeft;
            return;
        }
        this.parentElement.dragDropStart(this.draggedElement, this.ghostSurveyElement, DragDropSurveyElements.nestedPanelDepth);
        var result = this.parentElement.dragDropMoveTo(this.dropTarget, isTargetRowMultiple ? this.isRight : this.isBottom, this.isEdge);
        return result;
    };
    DragDropSurveyElements.prototype.calcTargetRowMultiple = function () {
        var targetParent = this.getTargetParent(this.dropTarget);
        var targetRow = this.getTargetRow(this.dropTarget);
        var isTargetRowMultiple = targetRow && targetRow.elements.length > 1;
        var isTemplatePanelInPanelDynamic = targetParent.isPanel && !targetParent.name;
        if (this.isEdge && isTargetRowMultiple && !isTemplatePanelInPanelDynamic) {
            targetParent.__page = this.dropTarget.page || this.dropTarget.__page;
            this.dropTarget = targetParent;
            return false;
        }
        return isTargetRowMultiple;
    };
    DragDropSurveyElements.prototype.getTargetParent = function (dropTarget) {
        var targetParent = dropTarget.isPage || dropTarget.isPanel ? dropTarget : dropTarget.parent;
        if (dropTarget.getType() === "paneldynamic") {
            targetParent = dropTarget.templateValue;
        }
        return targetParent;
    };
    DragDropSurveyElements.prototype.getTargetRow = function (dropTarget) {
        var targetParent = this.getTargetParent(dropTarget);
        var targetRow;
        targetParent.rows.forEach(function (row) {
            if (row.elements.indexOf(dropTarget) !== -1) {
                targetRow = row;
            }
        });
        return targetRow;
    };
    DragDropSurveyElements.prototype.isDragOverInsideEmptyPanel = function () {
        var isEmptyPanel = this.dropTarget.isPanel && this.dropTarget.questions.length === 0;
        var isDragOverInside = !this.isEdge;
        return isEmptyPanel && isDragOverInside;
    };
    DragDropSurveyElements.prototype.removeGhostElementFromSurvey = function () {
        var dropTarget = this.prevDropTarget || this.dropTarget;
        if (!!dropTarget) {
            dropTarget.dragTypeOverMe = null;
        }
        if (!!this.parentElement)
            this.parentElement.dragDropFinish(true);
    };
    DragDropSurveyElements.prototype.insertRealElementIntoSurvey = function () {
        this.removeGhostElementFromSurvey();
        var isTargetRowMultiple = this.calcTargetRowMultiple();
        // ghost new page
        if (this.dropTarget.isPage && this.dropTarget["_isGhost"]) {
            this.dropTarget["_addGhostPageViewModel"]();
        }
        // EO ghost new page
        //TODO need for dragDrop helper in library
        var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(this.draggedElement);
        json["type"] = this.draggedElement.getType();
        var fakeTargetElement = this.createFakeTargetElement(this.draggedElement.name, json);
        //
        this.parentElement.dragDropStart(this.draggedElement, fakeTargetElement, DragDropSurveyElements.nestedPanelDepth);
        this.parentElement.dragDropMoveTo(this.dropTarget, isTargetRowMultiple ? this.isRight : this.isBottom, this.isEdge);
        var newElement = this.parentElement.dragDropFinish();
        return newElement;
    };
    DragDropSurveyElements.prototype.createFakeTargetElement = function (elementName, json) {
        if (!elementName || !json)
            return null;
        var targetElement = null;
        targetElement = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(json["type"]);
        new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, targetElement);
        targetElement.name = elementName;
        if (targetElement["setSurveyImpl"]) {
            targetElement["setSurveyImpl"](this.survey);
        }
        else {
            targetElement["setData"](this.survey);
        }
        targetElement.renderWidth = "100%";
        return targetElement;
    };
    DragDropSurveyElements.prototype.createGhostSurveyElement = function (isMultipleRowDrag) {
        if (isMultipleRowDrag === void 0) { isMultipleRowDrag = false; }
        var className = "sv-drag-drop-ghost";
        var minWidth = "300px";
        if (isMultipleRowDrag) {
            minWidth = "4px";
            className += " sv-drag-drop-ghost--vertical";
        }
        var json = {
            type: "html",
            minWidth: minWidth,
            name: DragDropSurveyElements.ghostSurveyElementName,
            html: "<div class=\"" + className + "\"></div>",
        };
        var element = this.createElementFromJson(json);
        element.startWithNewLine = !isMultipleRowDrag;
        if (isMultipleRowDrag) {
            element.maxWidth = "4px";
            element.renderWidth = "0px";
            element.paddingRight = "0px";
            element.paddingLeft = "0px";
        }
        return element;
    };
    DragDropSurveyElements.newGhostPage = null;
    DragDropSurveyElements.restrictDragQuestionBetweenPages = false;
    DragDropSurveyElements.edgeHeight = 30;
    DragDropSurveyElements.nestedPanelDepth = -1;
    DragDropSurveyElements.ghostSurveyElementName = "sv-drag-drop-ghost-survey-element-name"; // before renaming use globa search (we have also css selectors)
    return DragDropSurveyElements;
}(_core__WEBPACK_IMPORTED_MODULE_2__["DragDropCore"]));



/***/ }),

/***/ "./src/dropdownListModel.ts":
/*!**********************************!*\
  !*** ./src/dropdownListModel.ts ***!
  \**********************************/
/*! exports provided: DropdownListModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownListModel", function() { return DropdownListModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./list */ "./src/list.ts");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./popup */ "./src/popup.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/devices */ "./src/utils/devices.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var DropdownListModel = /** @class */ (function (_super) {
    __extends(DropdownListModel, _super);
    function DropdownListModel(question, onSelectionChanged) {
        var _this = _super.call(this) || this;
        _this.question = question;
        _this.onSelectionChanged = onSelectionChanged;
        _this.minPageSize = 25;
        _this.loadingItemHeight = 40;
        _this.selectedItemSelector = ".sv-list__item--selected";
        _this.itemSelector = ".sv-list__item";
        _this.itemsSettings = { skip: 0, take: 0, totalCount: 0, items: [] };
        _this.isRunningLoadQuestionChoices = false;
        _this.popupCssClasses = "sv-single-select-list";
        _this.listModel = _this.createListModel();
        _this.updateAfterListModelCreated(_this.listModel);
        _this.setSearchEnabled(_this.question.searchEnabled);
        _this.createPopup();
        _this.resetItemsSettings();
        return _this;
    }
    Object.defineProperty(DropdownListModel.prototype, "focusFirstInputSelector", {
        get: function () {
            return this.getFocusFirstInputSelector();
        },
        enumerable: false,
        configurable: true
    });
    DropdownListModel.prototype.getFocusFirstInputSelector = function () {
        if (_utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"]) {
            return this.isValueEmpty(this.question.value) ? this.itemSelector : this.selectedItemSelector;
        }
        else {
            return (!this.listModel.showFilter && !!this.question.value) ? this.selectedItemSelector : "";
        }
    };
    DropdownListModel.prototype.resetItemsSettings = function () {
        this.itemsSettings.skip = 0;
        this.itemsSettings.take = Math.max(this.minPageSize, this.question.choicesLazyLoadPageSize);
        this.itemsSettings.totalCount = 0;
        this.itemsSettings.items = [];
    };
    DropdownListModel.prototype.setItems = function (items, totalCount) {
        this.itemsSettings.items = [].concat(this.itemsSettings.items, items);
        this.itemsSettings.totalCount = totalCount;
        this.listModel.isAllDataLoaded = this.question.choicesLazyLoadEnabled && this.itemsSettings.items.length == this.itemsSettings.totalCount;
        this.question.choices = this.itemsSettings.items;
    };
    DropdownListModel.prototype.updateQuestionChoices = function (callbackAfterItemsLoaded) {
        var _this = this;
        if (this.isRunningLoadQuestionChoices)
            return;
        var isUpdate = (this.itemsSettings.skip + 1) < this.itemsSettings.totalCount;
        if (!this.itemsSettings.skip || isUpdate) {
            this.isRunningLoadQuestionChoices = true;
            this.question.survey.loadQuestionChoices({
                question: this.question,
                filter: this.filterString,
                skip: this.itemsSettings.skip,
                take: this.itemsSettings.take,
                setItems: function (items, totalCount) {
                    _this.isRunningLoadQuestionChoices = false;
                    _this.setItems(items || [], totalCount || 0);
                    _this.popupRecalculatePosition(_this.itemsSettings.skip === _this.itemsSettings.take);
                    if (!!callbackAfterItemsLoaded) {
                        callbackAfterItemsLoaded();
                    }
                }
            });
            this.itemsSettings.skip += this.itemsSettings.take;
        }
    };
    DropdownListModel.prototype.updatePopupFocusFirstInputSelector = function () {
        this._popupModel.focusFirstInputSelector = this.focusFirstInputSelector;
    };
    DropdownListModel.prototype.createPopup = function () {
        var _this = this;
        this._popupModel = new _popup__WEBPACK_IMPORTED_MODULE_3__["PopupModel"]("sv-list", { model: this.listModel }, "bottom", "center", false);
        this._popupModel.displayMode = _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"] ? "overlay" : "popup";
        this._popupModel.positionMode = "fixed";
        this._popupModel.isFocusedContent = _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"];
        this._popupModel.setWidthByTarget = !_utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"];
        this.updatePopupFocusFirstInputSelector();
        this.listModel.registerPropertyChangedHandlers(["showFilter"], function () {
            _this.updatePopupFocusFirstInputSelector();
        });
        this._popupModel.cssClass = this.popupCssClasses;
        this._popupModel.onVisibilityChanged.add(function (_, option) {
            if (option.isVisible && _this.question.choicesLazyLoadEnabled) {
                _this.listModel.actions = [];
                _this.updateQuestionChoices();
            }
            if (option.isVisible && !!_this.question.onOpenedCallBack) {
                _this.updatePopupFocusFirstInputSelector();
                _this.question.onOpenedCallBack();
            }
            if (!option.isVisible) {
                _this.onHidePopup();
                if (_this.question.choicesLazyLoadEnabled) {
                    _this.resetItemsSettings();
                }
            }
        });
    };
    DropdownListModel.prototype.setFilterStringToListModel = function (newValue) {
        this.listModel.filterString = newValue;
        if (!this.listModel.focusedItem || !this.listModel.isItemVisible(this.listModel.focusedItem)) {
            this.listModel.focusFirstVisibleItem();
        }
    };
    DropdownListModel.prototype.popupRecalculatePosition = function (isResetHeight) {
        var _this = this;
        setTimeout(function () {
            _this.popupModel.recalculatePosition(isResetHeight);
        }, 1);
    };
    DropdownListModel.prototype.onHidePopup = function () {
        this.resetFilterString();
        this.listModel.refresh();
    };
    DropdownListModel.prototype.getAvailableItems = function () {
        return this.question.visibleChoices;
    };
    DropdownListModel.prototype.createListModel = function () {
        var _this = this;
        var visibleItems = this.getAvailableItems();
        var _onSelectionChanged = this.onSelectionChanged;
        if (!_onSelectionChanged) {
            _onSelectionChanged = function (item) {
                _this.question.value = item.value;
                _this._popupModel.toggleVisibility();
            };
        }
        var res = new _list__WEBPACK_IMPORTED_MODULE_2__["ListModel"](visibleItems, _onSelectionChanged, false);
        res.areSameItemsCallback = function (item1, item2) {
            return item1 === item2;
        };
        return res;
    };
    DropdownListModel.prototype.updateAfterListModelCreated = function (model) {
        var _this = this;
        model.isItemSelected = function (action) { return !!action.selected; };
        model.locOwner = this.question;
        model.onPropertyChanged.add(function (sender, options) {
            if (options.name == "hasVerticalScroller") {
                _this.hasScroll = options.newValue;
            }
        });
        model.isAllDataLoaded = !this.question.choicesLazyLoadEnabled;
    };
    DropdownListModel.prototype.updateCssClasses = function (popupCssClass, listCssClasses) {
        this.popupModel.cssClass = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]().append(popupCssClass).append(this.popupCssClasses).toString();
        this.listModel.cssClasses = listCssClasses;
    };
    DropdownListModel.prototype.resetFilterString = function () {
        if (!!this.filterString) {
            this.filterString = undefined;
        }
    };
    DropdownListModel.prototype.onSetFilterString = function () {
        var _this = this;
        if (!!this.filterString && !this.popupModel.isVisible) {
            this.popupModel.isVisible = true;
        }
        this.setInputHasValue(!!this.filterString);
        var updateAfterFilterStringChanged = function () {
            _this.setFilterStringToListModel(_this.filterString);
            _this.popupRecalculatePosition(true);
        };
        if (this.question.choicesLazyLoadEnabled) {
            this.resetItemsSettings();
            this.updateQuestionChoices(updateAfterFilterStringChanged);
        }
        else {
            updateAfterFilterStringChanged();
        }
    };
    DropdownListModel.prototype.setInputHasValue = function (newValue) {
        this.question.inputHasValue = newValue;
    };
    Object.defineProperty(DropdownListModel.prototype, "popupModel", {
        get: function () {
            return this._popupModel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DropdownListModel.prototype, "inputReadOnly", {
        get: function () {
            return this.question.isInputReadOnly || this.searchEnabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DropdownListModel.prototype, "filterStringEnabled", {
        get: function () {
            return !this.question.isInputReadOnly && this.searchEnabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DropdownListModel.prototype, "inputMode", {
        get: function () {
            return _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"] ? "none" : "text";
        },
        enumerable: false,
        configurable: true
    });
    DropdownListModel.prototype.setSearchEnabled = function (newValue) {
        this.listModel.searchEnabled = _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"];
        this.listModel.showSearchClearButton = _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"];
        this.searchEnabled = newValue;
    };
    DropdownListModel.prototype.updateItems = function () {
        this.listModel.setItems(this.getAvailableItems());
    };
    DropdownListModel.prototype.onClick = function (event) {
        this._popupModel.toggleVisibility();
        this.listModel.focusNextVisibleItem();
        if (this.searchEnabled && !!event && !!event.target) {
            var input = event.target.querySelector("input");
            if (!!input) {
                input.focus();
            }
        }
    };
    DropdownListModel.prototype.onClear = function (event) {
        this.question.clearValue();
        this.resetFilterString();
        event.preventDefault();
        event.stopPropagation();
    };
    DropdownListModel.prototype.getSelectedAction = function () {
        return this.question.selectedItem || null;
    };
    DropdownListModel.prototype.keyHandler = function (event) {
        var char = event.which || event.keyCode;
        if (this.popupModel.isVisible && event.keyCode === 38) {
            this.listModel.focusPrevVisibleItem();
            this.scrollToFocusedItem();
            event.preventDefault();
            event.stopPropagation();
        }
        else if (event.keyCode === 40) {
            if (!this.popupModel.isVisible) {
                this.popupModel.toggleVisibility();
            }
            this.listModel.focusNextVisibleItem();
            this.scrollToFocusedItem();
            event.preventDefault();
            event.stopPropagation();
        }
        else if (this.popupModel.isVisible && (event.keyCode === 13 || event.keyCode === 32)) {
            this.listModel.selectFocusedItem();
            event.preventDefault();
            event.stopPropagation();
        }
        else if (char === 46) {
            this.onClear(event);
        }
        else if (event.keyCode === 27) {
            this.popupModel.isVisible = false;
        }
        else {
            if (event.keyCode === 38 || event.keyCode === 40 || event.keyCode === 32) {
                event.preventDefault();
                event.stopPropagation();
            }
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["doKey2ClickUp"])(event, { processEsc: false, disableTabStop: this.question.isInputReadOnly });
        }
    };
    DropdownListModel.prototype.onScroll = function (event) {
        var target = event.target;
        if ((target.scrollHeight - (target.scrollTop + target.offsetHeight)) <= this.loadingItemHeight) {
            this.updateQuestionChoices();
        }
    };
    DropdownListModel.prototype.onBlur = function (event) {
        if (this.popupModel.isVisible && _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"]) {
            this._popupModel.isVisible = true;
            return;
        }
        if (this.popupModel.isVisible && !!this.filterString) {
            this.listModel.selectFocusedItem();
        }
        this.resetFilterString();
        this._popupModel.isVisible = false;
        this.setInputHasValue(false);
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_6__["doKey2ClickBlur"])(event);
    };
    DropdownListModel.prototype.scrollToFocusedItem = function () {
        this.listModel.scrollToFocusedItem();
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], DropdownListModel.prototype, "searchEnabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: "",
            onSet: function (_, target) {
                target.onSetFilterString();
            }
        })
    ], DropdownListModel.prototype, "filterString", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({
            defaultValue: false,
            onSet: function (newVal, target) {
                if (newVal) {
                    target.listModel.addScrollEventListener(function (e) { target.onScroll(e); });
                }
                else {
                    target.listModel.removeScrollEventListener();
                }
            }
        })
    ], DropdownListModel.prototype, "hasScroll", void 0);
    return DropdownListModel;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));



/***/ }),

/***/ "./src/dropdownMultiSelectListModel.ts":
/*!*********************************************!*\
  !*** ./src/dropdownMultiSelectListModel.ts ***!
  \*********************************************/
/*! exports provided: DropdownMultiSelectListModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownMultiSelectListModel", function() { return DropdownMultiSelectListModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _dropdownListModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropdownListModel */ "./src/dropdownListModel.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _multiSelectListModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./multiSelectListModel */ "./src/multiSelectListModel.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/devices */ "./src/utils/devices.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






var DropdownMultiSelectListModel = /** @class */ (function (_super) {
    __extends(DropdownMultiSelectListModel, _super);
    function DropdownMultiSelectListModel(question, onSelectionChanged) {
        var _this = _super.call(this, question, onSelectionChanged) || this;
        _this.popupCssClasses = "sv-multi-select-list";
        _this.setHideSelectedItems(question.hideSelectedItems);
        _this.syncFilterStringPlaceholder();
        _this.closeOnSelect = question.closeOnSelect;
        return _this;
    }
    DropdownMultiSelectListModel.prototype.updateListState = function () {
        this.listModel.updateState();
        this.syncFilterStringPlaceholder();
    };
    DropdownMultiSelectListModel.prototype.syncFilterStringPlaceholder = function () {
        var selectedActions = this.getSelectedActions();
        if (selectedActions.length || this.question.selectedItems.length) {
            this.filterStringPlaceholder = undefined;
        }
        else {
            this.filterStringPlaceholder = this.question.placeholder;
        }
    };
    DropdownMultiSelectListModel.prototype.getSelectedActions = function () {
        return this.listModel.actions.filter(function (item) { return item.selected; });
    };
    DropdownMultiSelectListModel.prototype.getFocusFirstInputSelector = function () {
        if (this.listModel.hideSelectedItems && _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"] && !this.isValueEmpty(this.question.value)) {
            return this.itemSelector;
        }
        else {
            return _super.prototype.getFocusFirstInputSelector.call(this);
        }
    };
    DropdownMultiSelectListModel.prototype.createListModel = function () {
        var _this = this;
        var visibleItems = this.getAvailableItems();
        var _onSelectionChanged = this.onSelectionChanged;
        if (!_onSelectionChanged) {
            _onSelectionChanged = function (item, status) {
                _this.resetFilterString();
                if (item.value === "selectall") {
                    _this.selectAllItems();
                }
                else if (status === "added" && item.value === _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].noneItemValue) {
                    _this.selectNoneItem();
                }
                else if (status === "added") {
                    _this.selectItem(item.value);
                }
                else if (status === "removed") {
                    _this.deselectItem(item.value);
                }
                _this.popupRecalculatePosition(false);
                if (_this.closeOnSelect) {
                    _this.popupModel.isVisible = false;
                }
            };
        }
        return new _multiSelectListModel__WEBPACK_IMPORTED_MODULE_3__["MultiSelectListModel"](visibleItems, _onSelectionChanged, false);
    };
    Object.defineProperty(DropdownMultiSelectListModel.prototype, "shouldResetAfterCancel", {
        get: function () {
            return _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsTouch"] && !this.closeOnSelect;
        },
        enumerable: false,
        configurable: true
    });
    DropdownMultiSelectListModel.prototype.createPopup = function () {
        var _this = this;
        _super.prototype.createPopup.call(this);
        this.popupModel.onFooterActionsCreated.add(function (_, opt) {
            if (_this.shouldResetAfterCancel) {
                opt.actions[0].needSpace = true;
                opt.actions = [{
                        id: "sv-dropdown-done-button",
                        title: _this.doneButtonCaption,
                        innerCss: "sv-popup__button--done",
                        action: function () { _this.popupModel.isVisible = false; },
                        enabled: new _base__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () { return !_this.isTwoValueEquals(_this.question.renderedValue, _this.previousValue); })
                    }].concat(opt.actions);
            }
        });
        this.popupModel.onVisibilityChanged.add(function (_, opt) {
            if (_this.shouldResetAfterCancel && opt.isVisible) {
                _this.previousValue = [].concat(_this.question.renderedValue || []);
            }
        });
        this.popupModel.onCancel = function () {
            if (_this.shouldResetAfterCancel) {
                _this.question.renderedValue = _this.previousValue;
                _this.updateListState();
            }
        };
    };
    DropdownMultiSelectListModel.prototype.selectAllItems = function () {
        this.question.toggleSelectAll();
        this.updateListState();
    };
    DropdownMultiSelectListModel.prototype.selectNoneItem = function () {
        this.question.renderedValue = [_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].noneItemValue];
        this.updateListState();
    };
    DropdownMultiSelectListModel.prototype.selectItem = function (id) {
        var newValue = [].concat(this.question.renderedValue || []);
        newValue.push(id);
        this.question.renderedValue = newValue;
        this.updateListState();
    };
    DropdownMultiSelectListModel.prototype.deselectItem = function (id) {
        var newValue = [].concat(this.question.renderedValue || []);
        newValue.splice(newValue.indexOf(id), 1);
        this.question.renderedValue = newValue;
        this.updateListState();
    };
    DropdownMultiSelectListModel.prototype.onClear = function (event) {
        _super.prototype.onClear.call(this, event);
        this.updateListState();
    };
    DropdownMultiSelectListModel.prototype.setHideSelectedItems = function (newValue) {
        this.listModel.hideSelectedItems = newValue;
        this.updateListState();
    };
    DropdownMultiSelectListModel.prototype.removeLastSelectedItem = function () {
        this.deselectItem(this.question.renderedValue[this.question.renderedValue.length - 1]);
        this.popupRecalculatePosition(false);
    };
    DropdownMultiSelectListModel.prototype.inputKeyHandler = function (event) {
        if (event.keyCode === 8 && !this.filterString) {
            this.removeLastSelectedItem();
            event.preventDefault();
            event.stopPropagation();
        }
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "" })
    ], DropdownMultiSelectListModel.prototype, "filterStringPlaceholder", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: true })
    ], DropdownMultiSelectListModel.prototype, "closeOnSelect", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], DropdownMultiSelectListModel.prototype, "previousValue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ localizable: { defaultStr: "tagboxDoneButtonCaption" } })
    ], DropdownMultiSelectListModel.prototype, "doneButtonCaption", void 0);
    return DropdownMultiSelectListModel;
}(_dropdownListModel__WEBPACK_IMPORTED_MODULE_1__["DropdownListModel"]));



/***/ }),

/***/ "./src/dxSurveyService.ts":
/*!********************************!*\
  !*** ./src/dxSurveyService.ts ***!
  \********************************/
/*! exports provided: dxSurveyService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dxSurveyService", function() { return dxSurveyService; });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");

/**
 * The class contains methods to work with api.surveyjs.io service.
 */
var dxSurveyService = /** @class */ (function () {
    function dxSurveyService() {
    }
    Object.defineProperty(dxSurveyService, "serviceUrl", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_0__["settings"].surveyServiceUrl;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_0__["settings"].surveyServiceUrl = val;
        },
        enumerable: false,
        configurable: true
    });
    dxSurveyService.prototype.loadSurvey = function (surveyId, onLoad) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", dxSurveyService.serviceUrl + "/getSurvey?surveyId=" + surveyId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onload = function () {
            var result = JSON.parse(xhr.response);
            onLoad(xhr.status == 200, result, xhr.response);
        };
        xhr.send();
    };
    dxSurveyService.prototype.getSurveyJsonAndIsCompleted = function (surveyId, clientId, onLoad) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", dxSurveyService.serviceUrl +
            "/getSurveyAndIsCompleted?surveyId=" +
            surveyId +
            "&clientId=" +
            clientId);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onload = function () {
            var result = JSON.parse(xhr.response);
            var surveyJson = result ? result.survey : null;
            var isCompleted = result ? result.isCompleted : null;
            onLoad(xhr.status == 200, surveyJson, isCompleted, xhr.response);
        };
        xhr.send();
    };
    dxSurveyService.prototype.sendResult = function (postId, result, onSendResult, clientId, isPartialCompleted) {
        if (clientId === void 0) { clientId = null; }
        if (isPartialCompleted === void 0) { isPartialCompleted = false; }
        var xhr = new XMLHttpRequest();
        xhr.open("POST", dxSurveyService.serviceUrl + "/post/");
        xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        var data = { postId: postId, surveyResult: JSON.stringify(result) };
        if (clientId)
            data["clientId"] = clientId;
        if (isPartialCompleted)
            data["isPartialCompleted"] = true;
        var dataStringify = JSON.stringify(data);
        var self = this;
        xhr.onload = xhr.onerror = function () {
            if (!onSendResult)
                return;
            onSendResult(xhr.status === 200, xhr.response, xhr);
        };
        xhr.send(dataStringify);
    };
    dxSurveyService.prototype.sendFile = function (postId, file, onSendFile) {
        var xhr = new XMLHttpRequest();
        xhr.onload = xhr.onerror = function () {
            if (!onSendFile)
                return;
            onSendFile(xhr.status == 200, JSON.parse(xhr.response));
        };
        xhr.open("POST", dxSurveyService.serviceUrl + "/upload/", true);
        var formData = new FormData();
        formData.append("file", file);
        formData.append("postId", postId);
        xhr.send(formData);
    };
    dxSurveyService.prototype.getResult = function (resultId, name, onGetResult) {
        var xhr = new XMLHttpRequest();
        var data = "resultId=" + resultId + "&name=" + name;
        xhr.open("GET", dxSurveyService.serviceUrl + "/getResult?" + data);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        var self = this;
        xhr.onload = function () {
            var result = null;
            var list = null;
            if (xhr.status == 200) {
                result = JSON.parse(xhr.response);
                list = [];
                for (var key in result.QuestionResult) {
                    var el = { name: key, value: result.QuestionResult[key] };
                    list.push(el);
                }
            }
            onGetResult(xhr.status == 200, result, list, xhr.response);
        };
        xhr.send();
    };
    dxSurveyService.prototype.isCompleted = function (resultId, clientId, onIsCompleted) {
        var xhr = new XMLHttpRequest();
        var data = "resultId=" + resultId + "&clientId=" + clientId;
        xhr.open("GET", dxSurveyService.serviceUrl + "/isCompleted?" + data);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        var self = this;
        xhr.onload = function () {
            var result = null;
            if (xhr.status == 200) {
                result = JSON.parse(xhr.response);
            }
            onIsCompleted(xhr.status == 200, result, xhr.response);
        };
        xhr.send();
    };
    return dxSurveyService;
}());



/***/ }),

/***/ "./src/element-helper.ts":
/*!*******************************!*\
  !*** ./src/element-helper.ts ***!
  \*******************************/
/*! exports provided: ElementHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementHelper", function() { return ElementHelper; });
var ElementHelper = /** @class */ (function () {
    function ElementHelper() {
    }
    ElementHelper.focusElement = function (element) {
        element && element.focus();
    };
    ElementHelper.visibility = function (node) {
        var style = window.getComputedStyle(node);
        if (style.display === "none" || style.visibility === "hidden")
            return false;
        return node.parentElement ? this.visibility(node.parentElement) : true;
    };
    ElementHelper.getNextElementPreorder = function (element) {
        var result = !!element.nextElementSibling ? element.nextElementSibling : element.parentElement.firstElementChild;
        if (this.visibility(result)) {
            return result;
        }
        else {
            return this.getNextElementPreorder(result);
        }
    };
    ElementHelper.getNextElementPostorder = function (element) {
        var result = !!element.previousElementSibling ? element.previousElementSibling : element.parentElement.lastElementChild;
        if (this.visibility(result)) {
            return result;
        }
        else {
            return this.getNextElementPostorder(result);
        }
    };
    ElementHelper.hasHorizontalScroller = function (element) {
        if (!!element) {
            return element.scrollWidth > element.offsetWidth;
        }
        return false;
    };
    ElementHelper.hasVerticalScroller = function (element) {
        if (!!element) {
            return element.scrollHeight > element.offsetHeight;
        }
        return false;
    };
    return ElementHelper;
}());



/***/ }),

/***/ "./src/entries/chunks/model.ts":
/*!*************************************!*\
  !*** ./src/entries/chunks/model.ts ***!
  \*************************************/
/*! exports provided: Version, checkLibraryVersion, settings, Helpers, AnswerCountValidator, EmailValidator, NumericValidator, RegexValidator, SurveyValidator, TextValidator, ValidatorResult, ExpressionValidator, ValidatorRunner, ItemValue, Base, Event, EventBase, ArrayChanges, ComputedUpdater, SurveyError, SurveyElementCore, SurveyElement, DragTypeOverMeEnum, CalculatedValue, CustomError, AnswerRequiredError, OneAnswerRequiredError, RequreNumericError, ExceedSizeError, LocalizableString, LocalizableStrings, HtmlConditionItem, UrlConditionItem, ChoicesRestful, ChoicesRestfull, FunctionFactory, registerFunction, ConditionRunner, ExpressionRunner, ExpressionExecutor, Operand, Const, BinaryOperand, Variable, FunctionOperand, ArrayOperand, UnaryOperand, ConditionsParser, ProcessValue, JsonError, JsonIncorrectTypeError, JsonMetadata, JsonMetadataClass, JsonMissingTypeError, JsonMissingTypeErrorBase, JsonObject, JsonObjectProperty, JsonRequiredPropertyError, JsonUnknownPropertyError, Serializer, property, propertyArray, MatrixDropdownCell, MatrixDropdownRowModelBase, QuestionMatrixDropdownModelBase, MatrixDropdownColumn, matrixDropdownColumnTypes, QuestionMatrixDropdownRenderedCell, QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownRenderedTable, MatrixDropdownRowModel, QuestionMatrixDropdownModel, MatrixDynamicRowModel, QuestionMatrixDynamicModel, MatrixRowModel, MatrixCells, QuestionMatrixModel, QuestionMatrixBaseModel, MultipleTextItemModel, QuestionMultipleTextModel, PanelModel, PanelModelBase, QuestionRowModel, FlowPanelModel, PageModel, DefaultTitleModel, Question, QuestionNonValue, QuestionEmptyModel, QuestionCheckboxBase, QuestionSelectBase, QuestionCheckboxModel, QuestionTagboxModel, QuestionRankingModel, QuestionCommentModel, QuestionDropdownModel, QuestionFactory, ElementFactory, QuestionFileModel, QuestionHtmlModel, QuestionRadiogroupModel, QuestionRatingModel, RenderedRatingItem, QuestionExpressionModel, QuestionTextBase, CharacterCounter, QuestionTextModel, QuestionBooleanModel, QuestionImagePickerModel, ImageItemValue, QuestionImageModel, QuestionSignaturePadModel, QuestionPanelDynamicModel, QuestionPanelDynamicItem, SurveyTimer, SurveyTimerModel, tryNavigateToPage, createTOCListModel, SurveyProgressModel, SurveyProgressButtonsModel, SurveyModel, SurveyTrigger, SurveyTriggerComplete, SurveyTriggerSetValue, SurveyTriggerVisible, SurveyTriggerCopyValue, SurveyTriggerRunExpression, Trigger, PopupSurveyModel, SurveyWindowModel, TextPreProcessor, Notifier, dxSurveyService, englishStrings, surveyLocalization, surveyStrings, QuestionCustomWidget, CustomWidgetCollection, QuestionCustomModel, QuestionCompositeModel, ComponentQuestionJSON, ComponentCollection, StylesManager, ListModel, MultiSelectListModel, PopupModel, createDialogOptions, PopupBaseViewModel, PopupDropdownViewModel, PopupModalViewModel, createPopupViewModel, createPopupModalViewModel, DropdownListModel, DropdownMultiSelectListModel, QuestionButtonGroupModel, ButtonGroupItemModel, ButtonGroupItemValue, IsMobile, IsTouch, _setIsTouch, confirmAction, detectIEOrEdge, doKey2ClickUp, doKey2ClickDown, doKey2ClickBlur, loadFileFromBase64, increaseHeightByContent, createSvg, sanitizeEditableContent, CssClassBuilder, surveyCss, defaultV2Css, defaultV2ThemeName, DragDropSurveyElements, DragDropChoices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkLibraryVersion", function() { return checkLibraryVersion; });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../settings */ "./src/settings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return _settings__WEBPACK_IMPORTED_MODULE_0__["settings"]; });

/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helpers */ "./src/helpers.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Helpers", function() { return _helpers__WEBPACK_IMPORTED_MODULE_1__["Helpers"]; });

/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../validator */ "./src/validator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnswerCountValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["AnswerCountValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmailValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["EmailValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumericValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["NumericValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegexValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["RegexValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["SurveyValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["TextValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorResult", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["ValidatorResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionValidator", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["ExpressionValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorRunner", function() { return _validator__WEBPACK_IMPORTED_MODULE_2__["ValidatorRunner"]; });

/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../itemvalue */ "./src/itemvalue.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ItemValue", function() { return _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"]; });

/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../base */ "./src/base.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return _base__WEBPACK_IMPORTED_MODULE_4__["Base"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return _base__WEBPACK_IMPORTED_MODULE_4__["Event"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventBase", function() { return _base__WEBPACK_IMPORTED_MODULE_4__["EventBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayChanges", function() { return _base__WEBPACK_IMPORTED_MODULE_4__["ArrayChanges"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComputedUpdater", function() { return _base__WEBPACK_IMPORTED_MODULE_4__["ComputedUpdater"]; });

/* harmony import */ var _survey_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../survey-error */ "./src/survey-error.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyError", function() { return _survey_error__WEBPACK_IMPORTED_MODULE_5__["SurveyError"]; });

/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../survey-element */ "./src/survey-element.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyElementCore", function() { return _survey_element__WEBPACK_IMPORTED_MODULE_6__["SurveyElementCore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyElement", function() { return _survey_element__WEBPACK_IMPORTED_MODULE_6__["SurveyElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragTypeOverMeEnum", function() { return _survey_element__WEBPACK_IMPORTED_MODULE_6__["DragTypeOverMeEnum"]; });

/* harmony import */ var _calculatedValue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../calculatedValue */ "./src/calculatedValue.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CalculatedValue", function() { return _calculatedValue__WEBPACK_IMPORTED_MODULE_7__["CalculatedValue"]; });

/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../error */ "./src/error.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomError", function() { return _error__WEBPACK_IMPORTED_MODULE_8__["CustomError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnswerRequiredError", function() { return _error__WEBPACK_IMPORTED_MODULE_8__["AnswerRequiredError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneAnswerRequiredError", function() { return _error__WEBPACK_IMPORTED_MODULE_8__["OneAnswerRequiredError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequreNumericError", function() { return _error__WEBPACK_IMPORTED_MODULE_8__["RequreNumericError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExceedSizeError", function() { return _error__WEBPACK_IMPORTED_MODULE_8__["ExceedSizeError"]; });

/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../localizablestring */ "./src/localizablestring.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizableString", function() { return _localizablestring__WEBPACK_IMPORTED_MODULE_9__["LocalizableString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizableStrings", function() { return _localizablestring__WEBPACK_IMPORTED_MODULE_9__["LocalizableStrings"]; });

/* harmony import */ var _expressionItems__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../expressionItems */ "./src/expressionItems.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HtmlConditionItem", function() { return _expressionItems__WEBPACK_IMPORTED_MODULE_10__["HtmlConditionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlConditionItem", function() { return _expressionItems__WEBPACK_IMPORTED_MODULE_10__["UrlConditionItem"]; });

/* harmony import */ var _choicesRestful__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../choicesRestful */ "./src/choicesRestful.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestful", function() { return _choicesRestful__WEBPACK_IMPORTED_MODULE_11__["ChoicesRestful"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestfull", function() { return _choicesRestful__WEBPACK_IMPORTED_MODULE_11__["ChoicesRestfull"]; });

/* harmony import */ var _functionsfactory__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../functionsfactory */ "./src/functionsfactory.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionFactory", function() { return _functionsfactory__WEBPACK_IMPORTED_MODULE_12__["FunctionFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerFunction", function() { return _functionsfactory__WEBPACK_IMPORTED_MODULE_12__["registerFunction"]; });

/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../conditions */ "./src/conditions.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionRunner", function() { return _conditions__WEBPACK_IMPORTED_MODULE_13__["ConditionRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionRunner", function() { return _conditions__WEBPACK_IMPORTED_MODULE_13__["ExpressionRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionExecutor", function() { return _conditions__WEBPACK_IMPORTED_MODULE_13__["ExpressionExecutor"]; });

/* harmony import */ var _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../expressions/expressions */ "./src/expressions/expressions.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Operand", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["Operand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Const", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["Const"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BinaryOperand", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["BinaryOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["Variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionOperand", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["FunctionOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayOperand", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["ArrayOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnaryOperand", function() { return _expressions_expressions__WEBPACK_IMPORTED_MODULE_14__["UnaryOperand"]; });

/* harmony import */ var _conditionsParser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../conditionsParser */ "./src/conditionsParser.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionsParser", function() { return _conditionsParser__WEBPACK_IMPORTED_MODULE_15__["ConditionsParser"]; });

/* harmony import */ var _conditionProcessValue__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../conditionProcessValue */ "./src/conditionProcessValue.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProcessValue", function() { return _conditionProcessValue__WEBPACK_IMPORTED_MODULE_16__["ProcessValue"]; });

/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../jsonobject */ "./src/jsonobject.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonError", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonIncorrectTypeError", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonIncorrectTypeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMetadata", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonMetadata"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMetadataClass", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonMetadataClass"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeError", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonMissingTypeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeErrorBase", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonMissingTypeErrorBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonObject", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonObjectProperty", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonObjectProperty"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonRequiredPropertyError", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonRequiredPropertyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonUnknownPropertyError", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["JsonUnknownPropertyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["Serializer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "property", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["property"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propertyArray", function() { return _jsonobject__WEBPACK_IMPORTED_MODULE_17__["propertyArray"]; });

/* harmony import */ var _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../question_matrixdropdownbase */ "./src/question_matrixdropdownbase.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownCell", function() { return _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_18__["MatrixDropdownCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModelBase", function() { return _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_18__["MatrixDropdownRowModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModelBase", function() { return _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_18__["QuestionMatrixDropdownModelBase"]; });

/* harmony import */ var _question_matrixdropdowncolumn__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../question_matrixdropdowncolumn */ "./src/question_matrixdropdowncolumn.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownColumn", function() { return _question_matrixdropdowncolumn__WEBPACK_IMPORTED_MODULE_19__["MatrixDropdownColumn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matrixDropdownColumnTypes", function() { return _question_matrixdropdowncolumn__WEBPACK_IMPORTED_MODULE_19__["matrixDropdownColumnTypes"]; });

/* harmony import */ var _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../question_matrixdropdownrendered */ "./src/question_matrixdropdownrendered.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedCell", function() { return _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_20__["QuestionMatrixDropdownRenderedCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedRow", function() { return _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_20__["QuestionMatrixDropdownRenderedRow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedTable", function() { return _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_20__["QuestionMatrixDropdownRenderedTable"]; });

/* harmony import */ var _question_matrixdropdown__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../question_matrixdropdown */ "./src/question_matrixdropdown.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModel", function() { return _question_matrixdropdown__WEBPACK_IMPORTED_MODULE_21__["MatrixDropdownRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModel", function() { return _question_matrixdropdown__WEBPACK_IMPORTED_MODULE_21__["QuestionMatrixDropdownModel"]; });

/* harmony import */ var _question_matrixdynamic__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../question_matrixdynamic */ "./src/question_matrixdynamic.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDynamicRowModel", function() { return _question_matrixdynamic__WEBPACK_IMPORTED_MODULE_22__["MatrixDynamicRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDynamicModel", function() { return _question_matrixdynamic__WEBPACK_IMPORTED_MODULE_22__["QuestionMatrixDynamicModel"]; });

/* harmony import */ var _question_matrix__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../question_matrix */ "./src/question_matrix.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixRowModel", function() { return _question_matrix__WEBPACK_IMPORTED_MODULE_23__["MatrixRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixCells", function() { return _question_matrix__WEBPACK_IMPORTED_MODULE_23__["MatrixCells"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixModel", function() { return _question_matrix__WEBPACK_IMPORTED_MODULE_23__["QuestionMatrixModel"]; });

/* harmony import */ var _martixBase__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../martixBase */ "./src/martixBase.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixBaseModel", function() { return _martixBase__WEBPACK_IMPORTED_MODULE_24__["QuestionMatrixBaseModel"]; });

/* harmony import */ var _question_multipletext__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../question_multipletext */ "./src/question_multipletext.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultipleTextItemModel", function() { return _question_multipletext__WEBPACK_IMPORTED_MODULE_25__["MultipleTextItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMultipleTextModel", function() { return _question_multipletext__WEBPACK_IMPORTED_MODULE_25__["QuestionMultipleTextModel"]; });

/* harmony import */ var _panel__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../panel */ "./src/panel.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelModel", function() { return _panel__WEBPACK_IMPORTED_MODULE_26__["PanelModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelModelBase", function() { return _panel__WEBPACK_IMPORTED_MODULE_26__["PanelModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRowModel", function() { return _panel__WEBPACK_IMPORTED_MODULE_26__["QuestionRowModel"]; });

/* harmony import */ var _flowpanel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../flowpanel */ "./src/flowpanel.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlowPanelModel", function() { return _flowpanel__WEBPACK_IMPORTED_MODULE_27__["FlowPanelModel"]; });

/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../page */ "./src/page.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageModel", function() { return _page__WEBPACK_IMPORTED_MODULE_28__["PageModel"]; });

/* harmony import */ var _template_renderer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../template-renderer */ "./src/template-renderer.ts");
/* empty/unused harmony star reexport *//* harmony import */ var _defaultTitle__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../defaultTitle */ "./src/defaultTitle.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultTitleModel", function() { return _defaultTitle__WEBPACK_IMPORTED_MODULE_30__["DefaultTitleModel"]; });

/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../question */ "./src/question.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Question", function() { return _question__WEBPACK_IMPORTED_MODULE_31__["Question"]; });

/* harmony import */ var _questionnonvalue__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../questionnonvalue */ "./src/questionnonvalue.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionNonValue", function() { return _questionnonvalue__WEBPACK_IMPORTED_MODULE_32__["QuestionNonValue"]; });

/* harmony import */ var _question_empty__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../question_empty */ "./src/question_empty.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionEmptyModel", function() { return _question_empty__WEBPACK_IMPORTED_MODULE_33__["QuestionEmptyModel"]; });

/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../question_baseselect */ "./src/question_baseselect.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxBase", function() { return _question_baseselect__WEBPACK_IMPORTED_MODULE_34__["QuestionCheckboxBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSelectBase", function() { return _question_baseselect__WEBPACK_IMPORTED_MODULE_34__["QuestionSelectBase"]; });

/* harmony import */ var _question_checkbox__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../question_checkbox */ "./src/question_checkbox.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxModel", function() { return _question_checkbox__WEBPACK_IMPORTED_MODULE_35__["QuestionCheckboxModel"]; });

/* harmony import */ var _question_tagbox__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../../question_tagbox */ "./src/question_tagbox.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTagboxModel", function() { return _question_tagbox__WEBPACK_IMPORTED_MODULE_36__["QuestionTagboxModel"]; });

/* harmony import */ var _question_ranking__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../question_ranking */ "./src/question_ranking.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRankingModel", function() { return _question_ranking__WEBPACK_IMPORTED_MODULE_37__["QuestionRankingModel"]; });

/* harmony import */ var _question_comment__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../question_comment */ "./src/question_comment.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCommentModel", function() { return _question_comment__WEBPACK_IMPORTED_MODULE_38__["QuestionCommentModel"]; });

/* harmony import */ var _question_dropdown__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../../question_dropdown */ "./src/question_dropdown.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionDropdownModel", function() { return _question_dropdown__WEBPACK_IMPORTED_MODULE_39__["QuestionDropdownModel"]; });

/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../../questionfactory */ "./src/questionfactory.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFactory", function() { return _questionfactory__WEBPACK_IMPORTED_MODULE_40__["QuestionFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ElementFactory", function() { return _questionfactory__WEBPACK_IMPORTED_MODULE_40__["ElementFactory"]; });

/* harmony import */ var _question_file__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../../question_file */ "./src/question_file.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFileModel", function() { return _question_file__WEBPACK_IMPORTED_MODULE_41__["QuestionFileModel"]; });

/* harmony import */ var _question_html__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../../question_html */ "./src/question_html.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionHtmlModel", function() { return _question_html__WEBPACK_IMPORTED_MODULE_42__["QuestionHtmlModel"]; });

/* harmony import */ var _question_radiogroup__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../../question_radiogroup */ "./src/question_radiogroup.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRadiogroupModel", function() { return _question_radiogroup__WEBPACK_IMPORTED_MODULE_43__["QuestionRadiogroupModel"]; });

/* harmony import */ var _question_rating__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../../question_rating */ "./src/question_rating.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRatingModel", function() { return _question_rating__WEBPACK_IMPORTED_MODULE_44__["QuestionRatingModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RenderedRatingItem", function() { return _question_rating__WEBPACK_IMPORTED_MODULE_44__["RenderedRatingItem"]; });

/* harmony import */ var _question_expression__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../../question_expression */ "./src/question_expression.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionExpressionModel", function() { return _question_expression__WEBPACK_IMPORTED_MODULE_45__["QuestionExpressionModel"]; });

/* harmony import */ var _question_textbase__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../../question_textbase */ "./src/question_textbase.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextBase", function() { return _question_textbase__WEBPACK_IMPORTED_MODULE_46__["QuestionTextBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CharacterCounter", function() { return _question_textbase__WEBPACK_IMPORTED_MODULE_46__["CharacterCounter"]; });

/* harmony import */ var _question_text__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../../question_text */ "./src/question_text.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextModel", function() { return _question_text__WEBPACK_IMPORTED_MODULE_47__["QuestionTextModel"]; });

/* harmony import */ var _question_boolean__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../../question_boolean */ "./src/question_boolean.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionBooleanModel", function() { return _question_boolean__WEBPACK_IMPORTED_MODULE_48__["QuestionBooleanModel"]; });

/* harmony import */ var _question_imagepicker__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../../question_imagepicker */ "./src/question_imagepicker.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImagePickerModel", function() { return _question_imagepicker__WEBPACK_IMPORTED_MODULE_49__["QuestionImagePickerModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageItemValue", function() { return _question_imagepicker__WEBPACK_IMPORTED_MODULE_49__["ImageItemValue"]; });

/* harmony import */ var _question_image__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../../question_image */ "./src/question_image.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImageModel", function() { return _question_image__WEBPACK_IMPORTED_MODULE_50__["QuestionImageModel"]; });

/* harmony import */ var _question_signaturepad__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../../question_signaturepad */ "./src/question_signaturepad.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSignaturePadModel", function() { return _question_signaturepad__WEBPACK_IMPORTED_MODULE_51__["QuestionSignaturePadModel"]; });

/* harmony import */ var _question_paneldynamic__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../../question_paneldynamic */ "./src/question_paneldynamic.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicModel", function() { return _question_paneldynamic__WEBPACK_IMPORTED_MODULE_52__["QuestionPanelDynamicModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicItem", function() { return _question_paneldynamic__WEBPACK_IMPORTED_MODULE_52__["QuestionPanelDynamicItem"]; });

/* harmony import */ var _surveytimer__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../../surveytimer */ "./src/surveytimer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTimer", function() { return _surveytimer__WEBPACK_IMPORTED_MODULE_53__["SurveyTimer"]; });

/* harmony import */ var _surveyTimerModel__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../../surveyTimerModel */ "./src/surveyTimerModel.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTimerModel", function() { return _surveyTimerModel__WEBPACK_IMPORTED_MODULE_54__["SurveyTimerModel"]; });

/* harmony import */ var _surveyToc__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../../surveyToc */ "./src/surveyToc.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tryNavigateToPage", function() { return _surveyToc__WEBPACK_IMPORTED_MODULE_55__["tryNavigateToPage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTOCListModel", function() { return _surveyToc__WEBPACK_IMPORTED_MODULE_55__["createTOCListModel"]; });

/* harmony import */ var _surveyProgress__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../../surveyProgress */ "./src/surveyProgress.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressModel", function() { return _surveyProgress__WEBPACK_IMPORTED_MODULE_56__["SurveyProgressModel"]; });

/* harmony import */ var _surveyProgressButtons__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../../surveyProgressButtons */ "./src/surveyProgressButtons.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressButtonsModel", function() { return _surveyProgressButtons__WEBPACK_IMPORTED_MODULE_57__["SurveyProgressButtonsModel"]; });

/* harmony import */ var _survey__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../../survey */ "./src/survey.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyModel", function() { return _survey__WEBPACK_IMPORTED_MODULE_58__["SurveyModel"]; });

/* harmony import */ var _trigger__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../../trigger */ "./src/trigger.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTrigger", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["SurveyTrigger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerComplete", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["SurveyTriggerComplete"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerSetValue", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["SurveyTriggerSetValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerVisible", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["SurveyTriggerVisible"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerCopyValue", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["SurveyTriggerCopyValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerRunExpression", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["SurveyTriggerRunExpression"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trigger", function() { return _trigger__WEBPACK_IMPORTED_MODULE_59__["Trigger"]; });

/* harmony import */ var _popup_survey__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../../popup-survey */ "./src/popup-survey.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupSurveyModel", function() { return _popup_survey__WEBPACK_IMPORTED_MODULE_60__["PopupSurveyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyWindowModel", function() { return _popup_survey__WEBPACK_IMPORTED_MODULE_60__["SurveyWindowModel"]; });

/* harmony import */ var _textPreProcessor__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../../textPreProcessor */ "./src/textPreProcessor.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextPreProcessor", function() { return _textPreProcessor__WEBPACK_IMPORTED_MODULE_61__["TextPreProcessor"]; });

/* harmony import */ var _notifier__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../../notifier */ "./src/notifier.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Notifier", function() { return _notifier__WEBPACK_IMPORTED_MODULE_62__["Notifier"]; });

/* harmony import */ var _dxSurveyService__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../../dxSurveyService */ "./src/dxSurveyService.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dxSurveyService", function() { return _dxSurveyService__WEBPACK_IMPORTED_MODULE_63__["dxSurveyService"]; });

/* harmony import */ var _localization_english__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../../localization/english */ "./src/localization/english.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "englishStrings", function() { return _localization_english__WEBPACK_IMPORTED_MODULE_64__["englishStrings"]; });

/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../../surveyStrings */ "./src/surveyStrings.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyLocalization", function() { return _surveyStrings__WEBPACK_IMPORTED_MODULE_65__["surveyLocalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyStrings", function() { return _surveyStrings__WEBPACK_IMPORTED_MODULE_65__["surveyStrings"]; });

/* harmony import */ var _questionCustomWidgets__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../../questionCustomWidgets */ "./src/questionCustomWidgets.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomWidget", function() { return _questionCustomWidgets__WEBPACK_IMPORTED_MODULE_66__["QuestionCustomWidget"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomWidgetCollection", function() { return _questionCustomWidgets__WEBPACK_IMPORTED_MODULE_66__["CustomWidgetCollection"]; });

/* harmony import */ var _question_custom__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../../question_custom */ "./src/question_custom.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomModel", function() { return _question_custom__WEBPACK_IMPORTED_MODULE_67__["QuestionCustomModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCompositeModel", function() { return _question_custom__WEBPACK_IMPORTED_MODULE_67__["QuestionCompositeModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentQuestionJSON", function() { return _question_custom__WEBPACK_IMPORTED_MODULE_67__["ComponentQuestionJSON"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentCollection", function() { return _question_custom__WEBPACK_IMPORTED_MODULE_67__["ComponentCollection"]; });

/* harmony import */ var _stylesmanager__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../../stylesmanager */ "./src/stylesmanager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StylesManager", function() { return _stylesmanager__WEBPACK_IMPORTED_MODULE_68__["StylesManager"]; });

/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../../list */ "./src/list.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListModel", function() { return _list__WEBPACK_IMPORTED_MODULE_69__["ListModel"]; });

/* harmony import */ var _multiSelectListModel__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../../multiSelectListModel */ "./src/multiSelectListModel.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultiSelectListModel", function() { return _multiSelectListModel__WEBPACK_IMPORTED_MODULE_70__["MultiSelectListModel"]; });

/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ../../popup */ "./src/popup.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupModel", function() { return _popup__WEBPACK_IMPORTED_MODULE_71__["PopupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDialogOptions", function() { return _popup__WEBPACK_IMPORTED_MODULE_71__["createDialogOptions"]; });

/* harmony import */ var _popup_view_model__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ../../popup-view-model */ "./src/popup-view-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupBaseViewModel", function() { return _popup_view_model__WEBPACK_IMPORTED_MODULE_72__["PopupBaseViewModel"]; });

/* harmony import */ var _popup_dropdown_view_model__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ../../popup-dropdown-view-model */ "./src/popup-dropdown-view-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupDropdownViewModel", function() { return _popup_dropdown_view_model__WEBPACK_IMPORTED_MODULE_73__["PopupDropdownViewModel"]; });

/* harmony import */ var _popup_modal_view_model__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ../../popup-modal-view-model */ "./src/popup-modal-view-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupModalViewModel", function() { return _popup_modal_view_model__WEBPACK_IMPORTED_MODULE_74__["PopupModalViewModel"]; });

/* harmony import */ var _popup_utils__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ../../popup-utils */ "./src/popup-utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopupViewModel", function() { return _popup_utils__WEBPACK_IMPORTED_MODULE_75__["createPopupViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopupModalViewModel", function() { return _popup_utils__WEBPACK_IMPORTED_MODULE_75__["createPopupModalViewModel"]; });

/* harmony import */ var _dropdownListModel__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ../../dropdownListModel */ "./src/dropdownListModel.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownListModel", function() { return _dropdownListModel__WEBPACK_IMPORTED_MODULE_76__["DropdownListModel"]; });

/* harmony import */ var _dropdownMultiSelectListModel__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ../../dropdownMultiSelectListModel */ "./src/dropdownMultiSelectListModel.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownMultiSelectListModel", function() { return _dropdownMultiSelectListModel__WEBPACK_IMPORTED_MODULE_77__["DropdownMultiSelectListModel"]; });

/* harmony import */ var _question_buttongroup__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ../../question_buttongroup */ "./src/question_buttongroup.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionButtonGroupModel", function() { return _question_buttongroup__WEBPACK_IMPORTED_MODULE_78__["QuestionButtonGroupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemModel", function() { return _question_buttongroup__WEBPACK_IMPORTED_MODULE_78__["ButtonGroupItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemValue", function() { return _question_buttongroup__WEBPACK_IMPORTED_MODULE_78__["ButtonGroupItemValue"]; });

/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ../../utils/devices */ "./src/utils/devices.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsMobile", function() { return _utils_devices__WEBPACK_IMPORTED_MODULE_79__["IsMobile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsTouch", function() { return _utils_devices__WEBPACK_IMPORTED_MODULE_79__["IsTouch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_setIsTouch", function() { return _utils_devices__WEBPACK_IMPORTED_MODULE_79__["_setIsTouch"]; });

/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ../../utils/utils */ "./src/utils/utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "confirmAction", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["confirmAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectIEOrEdge", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["detectIEOrEdge"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickUp", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["doKey2ClickUp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickDown", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["doKey2ClickDown"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickBlur", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["doKey2ClickBlur"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadFileFromBase64", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["loadFileFromBase64"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "increaseHeightByContent", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["increaseHeightByContent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSvg", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["createSvg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sanitizeEditableContent", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_80__["sanitizeEditableContent"]; });

/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ../../utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CssClassBuilder", function() { return _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_81__["CssClassBuilder"]; });

/* harmony import */ var _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ../../defaultCss/defaultV2Css */ "./src/defaultCss/defaultV2Css.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyCss", function() { return _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_82__["surveyCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultV2Css", function() { return _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_82__["defaultV2Css"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultV2ThemeName", function() { return _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_82__["defaultV2ThemeName"]; });

/* harmony import */ var _dragdrop_survey_elements__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ../../dragdrop/survey-elements */ "./src/dragdrop/survey-elements.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragDropSurveyElements", function() { return _dragdrop_survey_elements__WEBPACK_IMPORTED_MODULE_83__["DragDropSurveyElements"]; });

/* harmony import */ var _dragdrop_choices__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ../../dragdrop/choices */ "./src/dragdrop/choices.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragDropChoices", function() { return _dragdrop_choices__WEBPACK_IMPORTED_MODULE_84__["DragDropChoices"]; });

// styles
// import "../../main.scss";
//import "../../modern.scss";
var Version;
Version = "" + "1.9.77";
function checkLibraryVersion(ver, libraryName) {
    if (Version != ver) {
        var str = "survey-core has version '" + Version + "' and " + libraryName
            + " has version '" + ver + "'. SurveyJS libraries should have the same versions to work correctly.";
        /* eslint no-console: ["error", { allow: ["error"] }] */
        console.error(str);
    }
}


































































// export { cultureInfo } from "../../cultureInfo";

















//Uncomment to include the "date" question type.
//export {default as QuestionDateModel} from "../../plugins/question_date";




/***/ }),

/***/ "./src/entries/core-wo-model.ts":
/*!**************************************!*\
  !*** ./src/entries/core-wo-model.ts ***!
  \**************************************/
/*! exports provided: Version, checkLibraryVersion, settings, Helpers, AnswerCountValidator, EmailValidator, NumericValidator, RegexValidator, SurveyValidator, TextValidator, ValidatorResult, ExpressionValidator, ValidatorRunner, ItemValue, Base, Event, EventBase, ArrayChanges, ComputedUpdater, SurveyError, SurveyElementCore, SurveyElement, DragTypeOverMeEnum, CalculatedValue, CustomError, AnswerRequiredError, OneAnswerRequiredError, RequreNumericError, ExceedSizeError, LocalizableString, LocalizableStrings, HtmlConditionItem, UrlConditionItem, ChoicesRestful, ChoicesRestfull, FunctionFactory, registerFunction, ConditionRunner, ExpressionRunner, ExpressionExecutor, Operand, Const, BinaryOperand, Variable, FunctionOperand, ArrayOperand, UnaryOperand, ConditionsParser, ProcessValue, JsonError, JsonIncorrectTypeError, JsonMetadata, JsonMetadataClass, JsonMissingTypeError, JsonMissingTypeErrorBase, JsonObject, JsonObjectProperty, JsonRequiredPropertyError, JsonUnknownPropertyError, Serializer, property, propertyArray, MatrixDropdownCell, MatrixDropdownRowModelBase, QuestionMatrixDropdownModelBase, MatrixDropdownColumn, matrixDropdownColumnTypes, QuestionMatrixDropdownRenderedCell, QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownRenderedTable, MatrixDropdownRowModel, QuestionMatrixDropdownModel, MatrixDynamicRowModel, QuestionMatrixDynamicModel, MatrixRowModel, MatrixCells, QuestionMatrixModel, QuestionMatrixBaseModel, MultipleTextItemModel, QuestionMultipleTextModel, PanelModel, PanelModelBase, QuestionRowModel, FlowPanelModel, PageModel, DefaultTitleModel, Question, QuestionNonValue, QuestionEmptyModel, QuestionCheckboxBase, QuestionSelectBase, QuestionCheckboxModel, QuestionTagboxModel, QuestionRankingModel, QuestionCommentModel, QuestionDropdownModel, QuestionFactory, ElementFactory, QuestionFileModel, QuestionHtmlModel, QuestionRadiogroupModel, QuestionRatingModel, RenderedRatingItem, QuestionExpressionModel, QuestionTextBase, CharacterCounter, QuestionTextModel, QuestionBooleanModel, QuestionImagePickerModel, ImageItemValue, QuestionImageModel, QuestionSignaturePadModel, QuestionPanelDynamicModel, QuestionPanelDynamicItem, SurveyTimer, SurveyTimerModel, tryNavigateToPage, createTOCListModel, SurveyProgressModel, SurveyProgressButtonsModel, SurveyModel, SurveyTrigger, SurveyTriggerComplete, SurveyTriggerSetValue, SurveyTriggerVisible, SurveyTriggerCopyValue, SurveyTriggerRunExpression, Trigger, PopupSurveyModel, SurveyWindowModel, TextPreProcessor, Notifier, dxSurveyService, englishStrings, surveyLocalization, surveyStrings, QuestionCustomWidget, CustomWidgetCollection, QuestionCustomModel, QuestionCompositeModel, ComponentQuestionJSON, ComponentCollection, StylesManager, ListModel, MultiSelectListModel, PopupModel, createDialogOptions, PopupBaseViewModel, PopupDropdownViewModel, PopupModalViewModel, createPopupViewModel, createPopupModalViewModel, DropdownListModel, DropdownMultiSelectListModel, QuestionButtonGroupModel, ButtonGroupItemModel, ButtonGroupItemValue, IsMobile, IsTouch, _setIsTouch, confirmAction, detectIEOrEdge, doKey2ClickUp, doKey2ClickDown, doKey2ClickBlur, loadFileFromBase64, increaseHeightByContent, createSvg, sanitizeEditableContent, CssClassBuilder, surveyCss, defaultV2Css, defaultV2ThemeName, DragDropSurveyElements, DragDropChoices, defaultStandardCss, modernCss, SvgIconRegistry, SvgRegistry, SvgBundleViewModel, RendererFactory, ResponsivityManager, VerticalResponsivityManager, unwrap, getOriginalEvent, createDropdownActionModel, createDropdownActionModelAdvanced, BaseAction, Action, ActionDropdownViewModel, AdaptiveActionContainer, defaultActionBarCss, ActionContainer, TooltipManager, DragOrClickHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _chunks_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/model */ "./src/entries/chunks/model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Version"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "checkLibraryVersion", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["checkLibraryVersion"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["settings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Helpers", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Helpers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnswerCountValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["AnswerCountValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmailValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["EmailValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumericValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["NumericValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegexValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["RegexValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["TextValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorResult", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ValidatorResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionValidator", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ExpressionValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorRunner", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ValidatorRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ItemValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Base"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Event"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["EventBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayChanges", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ArrayChanges"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComputedUpdater", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyElementCore", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyElementCore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyElement", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragTypeOverMeEnum", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["DragTypeOverMeEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CalculatedValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["CalculatedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["CustomError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnswerRequiredError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["AnswerRequiredError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneAnswerRequiredError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["OneAnswerRequiredError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequreNumericError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["RequreNumericError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExceedSizeError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ExceedSizeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizableString", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["LocalizableString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizableStrings", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["LocalizableStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HtmlConditionItem", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["HtmlConditionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlConditionItem", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["UrlConditionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestful", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ChoicesRestful"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestfull", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ChoicesRestfull"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionFactory", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["FunctionFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerFunction", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["registerFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionRunner", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ConditionRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionRunner", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ExpressionRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionExecutor", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ExpressionExecutor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Operand", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Operand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Const", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Const"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BinaryOperand", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["BinaryOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionOperand", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["FunctionOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayOperand", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ArrayOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnaryOperand", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["UnaryOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionsParser", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ConditionsParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProcessValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ProcessValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonIncorrectTypeError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonIncorrectTypeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMetadata", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonMetadata"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMetadataClass", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonMetadataClass"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonMissingTypeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeErrorBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonMissingTypeErrorBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonObject", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonObjectProperty", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonObjectProperty"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonRequiredPropertyError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonRequiredPropertyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonUnknownPropertyError", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["JsonUnknownPropertyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Serializer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "property", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["property"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propertyArray", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["propertyArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownCell", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModelBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownRowModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModelBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownColumn", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownColumn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matrixDropdownColumnTypes", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["matrixDropdownColumnTypes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedCell", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownRenderedCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedRow", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownRenderedRow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedTable", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownRenderedTable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDynamicRowModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDynamicRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDynamicModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDynamicModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixRowModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixCells", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MatrixCells"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixBaseModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixBaseModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultipleTextItemModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MultipleTextItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMultipleTextModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMultipleTextModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PanelModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelModelBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PanelModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRowModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlowPanelModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["FlowPanelModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PageModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultTitleModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["DefaultTitleModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Question", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Question"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionNonValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionNonValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionEmptyModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionEmptyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCheckboxBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSelectBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionSelectBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCheckboxModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTagboxModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionTagboxModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRankingModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRankingModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCommentModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCommentModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionDropdownModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionDropdownModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFactory", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ElementFactory", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ElementFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFileModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionFileModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionHtmlModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionHtmlModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRadiogroupModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRadiogroupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRatingModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRatingModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RenderedRatingItem", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["RenderedRatingItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionExpressionModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionExpressionModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextBase", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionTextBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CharacterCounter", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["CharacterCounter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionTextModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionBooleanModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionBooleanModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImagePickerModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionImagePickerModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageItemValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ImageItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImageModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionImageModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSignaturePadModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionSignaturePadModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionPanelDynamicModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicItem", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionPanelDynamicItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTimer", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTimer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTimerModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTimerModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tryNavigateToPage", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["tryNavigateToPage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTOCListModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["createTOCListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyProgressModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressButtonsModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyProgressButtonsModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTrigger", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTrigger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerComplete", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerComplete"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerSetValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerSetValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerVisible", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerVisible"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerCopyValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerCopyValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerRunExpression", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerRunExpression"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trigger", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Trigger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupSurveyModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PopupSurveyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyWindowModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["SurveyWindowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextPreProcessor", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["TextPreProcessor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Notifier", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["Notifier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dxSurveyService", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["dxSurveyService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "englishStrings", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["englishStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyLocalization", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyStrings", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["surveyStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomWidget", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCustomWidget"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomWidgetCollection", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["CustomWidgetCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCustomModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCompositeModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCompositeModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentQuestionJSON", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ComponentQuestionJSON"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentCollection", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ComponentCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StylesManager", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["StylesManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultiSelectListModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["MultiSelectListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PopupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDialogOptions", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["createDialogOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupBaseViewModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PopupBaseViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupDropdownViewModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PopupDropdownViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupModalViewModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["PopupModalViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopupViewModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["createPopupViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopupModalViewModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["createPopupModalViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownListModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["DropdownListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownMultiSelectListModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["DropdownMultiSelectListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionButtonGroupModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["QuestionButtonGroupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemModel", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ButtonGroupItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemValue", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["ButtonGroupItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsMobile", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["IsMobile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsTouch", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["IsTouch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_setIsTouch", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["_setIsTouch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "confirmAction", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["confirmAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectIEOrEdge", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["detectIEOrEdge"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickUp", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["doKey2ClickUp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickDown", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["doKey2ClickDown"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickBlur", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["doKey2ClickBlur"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadFileFromBase64", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["loadFileFromBase64"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "increaseHeightByContent", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["increaseHeightByContent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSvg", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["createSvg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sanitizeEditableContent", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["sanitizeEditableContent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CssClassBuilder", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyCss", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultV2Css", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["defaultV2Css"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultV2ThemeName", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["defaultV2ThemeName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragDropSurveyElements", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["DragDropSurveyElements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragDropChoices", function() { return _chunks_model__WEBPACK_IMPORTED_MODULE_0__["DragDropChoices"]; });

/* harmony import */ var _defaultCss_cssstandard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../defaultCss/cssstandard */ "./src/defaultCss/cssstandard.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultStandardCss", function() { return _defaultCss_cssstandard__WEBPACK_IMPORTED_MODULE_1__["defaultStandardCss"]; });

/* harmony import */ var _defaultCss_cssmodern__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../defaultCss/cssmodern */ "./src/defaultCss/cssmodern.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modernCss", function() { return _defaultCss_cssmodern__WEBPACK_IMPORTED_MODULE_2__["modernCss"]; });

/* harmony import */ var _svgbundle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../svgbundle */ "./src/svgbundle.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SvgIconRegistry", function() { return _svgbundle__WEBPACK_IMPORTED_MODULE_3__["SvgIconRegistry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SvgRegistry", function() { return _svgbundle__WEBPACK_IMPORTED_MODULE_3__["SvgRegistry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SvgBundleViewModel", function() { return _svgbundle__WEBPACK_IMPORTED_MODULE_3__["SvgBundleViewModel"]; });

/* harmony import */ var _rendererFactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../rendererFactory */ "./src/rendererFactory.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RendererFactory", function() { return _rendererFactory__WEBPACK_IMPORTED_MODULE_4__["RendererFactory"]; });

/* harmony import */ var _utils_responsivity_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/responsivity-manager */ "./src/utils/responsivity-manager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResponsivityManager", function() { return _utils_responsivity_manager__WEBPACK_IMPORTED_MODULE_5__["ResponsivityManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VerticalResponsivityManager", function() { return _utils_responsivity_manager__WEBPACK_IMPORTED_MODULE_5__["VerticalResponsivityManager"]; });

/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/utils */ "./src/utils/utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_6__["unwrap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOriginalEvent", function() { return _utils_utils__WEBPACK_IMPORTED_MODULE_6__["getOriginalEvent"]; });

/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../actions/action */ "./src/actions/action.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDropdownActionModel", function() { return _actions_action__WEBPACK_IMPORTED_MODULE_7__["createDropdownActionModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDropdownActionModelAdvanced", function() { return _actions_action__WEBPACK_IMPORTED_MODULE_7__["createDropdownActionModelAdvanced"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseAction", function() { return _actions_action__WEBPACK_IMPORTED_MODULE_7__["BaseAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Action", function() { return _actions_action__WEBPACK_IMPORTED_MODULE_7__["Action"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionDropdownViewModel", function() { return _actions_action__WEBPACK_IMPORTED_MODULE_7__["ActionDropdownViewModel"]; });

/* harmony import */ var _actions_adaptive_container__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../actions/adaptive-container */ "./src/actions/adaptive-container.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdaptiveActionContainer", function() { return _actions_adaptive_container__WEBPACK_IMPORTED_MODULE_8__["AdaptiveActionContainer"]; });

/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../actions/container */ "./src/actions/container.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultActionBarCss", function() { return _actions_container__WEBPACK_IMPORTED_MODULE_9__["defaultActionBarCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionContainer", function() { return _actions_container__WEBPACK_IMPORTED_MODULE_9__["ActionContainer"]; });

/* harmony import */ var _utils_tooltip__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/tooltip */ "./src/utils/tooltip.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TooltipManager", function() { return _utils_tooltip__WEBPACK_IMPORTED_MODULE_10__["TooltipManager"]; });

/* harmony import */ var _utils_dragOrClickHelper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/dragOrClickHelper */ "./src/utils/dragOrClickHelper.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragOrClickHelper", function() { return _utils_dragOrClickHelper__WEBPACK_IMPORTED_MODULE_11__["DragOrClickHelper"]; });

// model

// css standard classes

// css modern classes


// utils










/***/ }),

/***/ "./src/entries/core.ts":
/*!*****************************!*\
  !*** ./src/entries/core.ts ***!
  \*****************************/
/*! exports provided: Version, checkLibraryVersion, settings, Helpers, AnswerCountValidator, EmailValidator, NumericValidator, RegexValidator, SurveyValidator, TextValidator, ValidatorResult, ExpressionValidator, ValidatorRunner, ItemValue, Base, Event, EventBase, ArrayChanges, ComputedUpdater, SurveyError, SurveyElementCore, SurveyElement, DragTypeOverMeEnum, CalculatedValue, CustomError, AnswerRequiredError, OneAnswerRequiredError, RequreNumericError, ExceedSizeError, LocalizableString, LocalizableStrings, HtmlConditionItem, UrlConditionItem, ChoicesRestful, ChoicesRestfull, FunctionFactory, registerFunction, ConditionRunner, ExpressionRunner, ExpressionExecutor, Operand, Const, BinaryOperand, Variable, FunctionOperand, ArrayOperand, UnaryOperand, ConditionsParser, ProcessValue, JsonError, JsonIncorrectTypeError, JsonMetadata, JsonMetadataClass, JsonMissingTypeError, JsonMissingTypeErrorBase, JsonObject, JsonObjectProperty, JsonRequiredPropertyError, JsonUnknownPropertyError, Serializer, property, propertyArray, MatrixDropdownCell, MatrixDropdownRowModelBase, QuestionMatrixDropdownModelBase, MatrixDropdownColumn, matrixDropdownColumnTypes, QuestionMatrixDropdownRenderedCell, QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownRenderedTable, MatrixDropdownRowModel, QuestionMatrixDropdownModel, MatrixDynamicRowModel, QuestionMatrixDynamicModel, MatrixRowModel, MatrixCells, QuestionMatrixModel, QuestionMatrixBaseModel, MultipleTextItemModel, QuestionMultipleTextModel, PanelModel, PanelModelBase, QuestionRowModel, FlowPanelModel, PageModel, DefaultTitleModel, Question, QuestionNonValue, QuestionEmptyModel, QuestionCheckboxBase, QuestionSelectBase, QuestionCheckboxModel, QuestionTagboxModel, QuestionRankingModel, QuestionCommentModel, QuestionDropdownModel, QuestionFactory, ElementFactory, QuestionFileModel, QuestionHtmlModel, QuestionRadiogroupModel, QuestionRatingModel, RenderedRatingItem, QuestionExpressionModel, QuestionTextBase, CharacterCounter, QuestionTextModel, QuestionBooleanModel, QuestionImagePickerModel, ImageItemValue, QuestionImageModel, QuestionSignaturePadModel, QuestionPanelDynamicModel, QuestionPanelDynamicItem, SurveyTimer, SurveyTimerModel, tryNavigateToPage, createTOCListModel, SurveyProgressModel, SurveyProgressButtonsModel, SurveyModel, SurveyTrigger, SurveyTriggerComplete, SurveyTriggerSetValue, SurveyTriggerVisible, SurveyTriggerCopyValue, SurveyTriggerRunExpression, Trigger, PopupSurveyModel, SurveyWindowModel, TextPreProcessor, Notifier, dxSurveyService, englishStrings, surveyLocalization, surveyStrings, QuestionCustomWidget, CustomWidgetCollection, QuestionCustomModel, QuestionCompositeModel, ComponentQuestionJSON, ComponentCollection, StylesManager, ListModel, MultiSelectListModel, PopupModel, createDialogOptions, PopupBaseViewModel, PopupDropdownViewModel, PopupModalViewModel, createPopupViewModel, createPopupModalViewModel, DropdownListModel, DropdownMultiSelectListModel, QuestionButtonGroupModel, ButtonGroupItemModel, ButtonGroupItemValue, IsMobile, IsTouch, _setIsTouch, confirmAction, detectIEOrEdge, doKey2ClickUp, doKey2ClickDown, doKey2ClickBlur, loadFileFromBase64, increaseHeightByContent, createSvg, sanitizeEditableContent, CssClassBuilder, surveyCss, defaultV2Css, defaultV2ThemeName, DragDropSurveyElements, DragDropChoices, defaultStandardCss, modernCss, SvgIconRegistry, SvgRegistry, SvgBundleViewModel, RendererFactory, ResponsivityManager, VerticalResponsivityManager, unwrap, getOriginalEvent, createDropdownActionModel, createDropdownActionModelAdvanced, BaseAction, Action, ActionDropdownViewModel, AdaptiveActionContainer, defaultActionBarCss, ActionContainer, TooltipManager, DragOrClickHelper, Model */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_wo_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-wo-model */ "./src/entries/core-wo-model.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Version"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "checkLibraryVersion", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["checkLibraryVersion"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["settings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Helpers", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Helpers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnswerCountValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["AnswerCountValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmailValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["EmailValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumericValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["NumericValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegexValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["RegexValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["TextValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorResult", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ValidatorResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionValidator", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ExpressionValidator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValidatorRunner", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ValidatorRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ItemValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Base"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Event"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["EventBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayChanges", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ArrayChanges"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComputedUpdater", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyElementCore", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyElementCore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyElement", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragTypeOverMeEnum", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DragTypeOverMeEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CalculatedValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["CalculatedValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["CustomError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnswerRequiredError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["AnswerRequiredError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OneAnswerRequiredError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["OneAnswerRequiredError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequreNumericError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["RequreNumericError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExceedSizeError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ExceedSizeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizableString", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["LocalizableString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalizableStrings", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["LocalizableStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HtmlConditionItem", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["HtmlConditionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UrlConditionItem", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["UrlConditionItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestful", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ChoicesRestful"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChoicesRestfull", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ChoicesRestfull"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionFactory", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["FunctionFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerFunction", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["registerFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionRunner", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ConditionRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionRunner", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ExpressionRunner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpressionExecutor", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ExpressionExecutor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Operand", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Operand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Const", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Const"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BinaryOperand", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["BinaryOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Variable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionOperand", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["FunctionOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayOperand", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ArrayOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnaryOperand", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["UnaryOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionsParser", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ConditionsParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProcessValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ProcessValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonIncorrectTypeError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonIncorrectTypeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMetadata", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonMetadata"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMetadataClass", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonMetadataClass"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonMissingTypeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeErrorBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonMissingTypeErrorBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonObject", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonObjectProperty", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonObjectProperty"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonRequiredPropertyError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonRequiredPropertyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonUnknownPropertyError", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["JsonUnknownPropertyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Serializer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "property", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["property"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "propertyArray", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["propertyArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownCell", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModelBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownRowModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModelBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownColumn", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownColumn"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matrixDropdownColumnTypes", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["matrixDropdownColumnTypes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedCell", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownRenderedCell"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedRow", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownRenderedRow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedTable", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownRenderedTable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixDynamicRowModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixDynamicRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDynamicModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDynamicModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixRowModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MatrixCells", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MatrixCells"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixBaseModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixBaseModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultipleTextItemModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MultipleTextItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionMultipleTextModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionMultipleTextModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PanelModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PanelModelBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PanelModelBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRowModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FlowPanelModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["FlowPanelModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PageModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultTitleModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DefaultTitleModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Question", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Question"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionNonValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionNonValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionEmptyModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionEmptyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCheckboxBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSelectBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionSelectBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCheckboxModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTagboxModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionTagboxModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRankingModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRankingModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCommentModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCommentModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionDropdownModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionDropdownModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFactory", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ElementFactory", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ElementFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionFileModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionFileModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionHtmlModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionHtmlModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRadiogroupModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRadiogroupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionRatingModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionRatingModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RenderedRatingItem", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["RenderedRatingItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionExpressionModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionExpressionModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextBase", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionTextBase"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CharacterCounter", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["CharacterCounter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionTextModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionTextModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionBooleanModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionBooleanModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImagePickerModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionImagePickerModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageItemValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ImageItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionImageModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionImageModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionSignaturePadModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionSignaturePadModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionPanelDynamicModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicItem", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionPanelDynamicItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTimer", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTimer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTimerModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTimerModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tryNavigateToPage", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["tryNavigateToPage"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTOCListModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createTOCListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyProgressModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressButtonsModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyProgressButtonsModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTrigger", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTrigger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerComplete", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerComplete"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerSetValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerSetValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerVisible", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerVisible"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerCopyValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerCopyValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerRunExpression", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyTriggerRunExpression"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Trigger", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Trigger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupSurveyModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PopupSurveyModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SurveyWindowModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SurveyWindowModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextPreProcessor", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["TextPreProcessor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Notifier", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Notifier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dxSurveyService", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["dxSurveyService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "englishStrings", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["englishStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyLocalization", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyStrings", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["surveyStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomWidget", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCustomWidget"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CustomWidgetCollection", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["CustomWidgetCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCustomModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionCompositeModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionCompositeModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentQuestionJSON", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ComponentQuestionJSON"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentCollection", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ComponentCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StylesManager", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["StylesManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MultiSelectListModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["MultiSelectListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PopupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDialogOptions", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createDialogOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupBaseViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PopupBaseViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupDropdownViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PopupDropdownViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PopupModalViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["PopupModalViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopupViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createPopupViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopupModalViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createPopupModalViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownListModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DropdownListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownMultiSelectListModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DropdownMultiSelectListModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuestionButtonGroupModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["QuestionButtonGroupModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ButtonGroupItemModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemValue", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ButtonGroupItemValue"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsMobile", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["IsMobile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IsTouch", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["IsTouch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_setIsTouch", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["_setIsTouch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "confirmAction", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["confirmAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectIEOrEdge", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["detectIEOrEdge"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickUp", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["doKey2ClickUp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickDown", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["doKey2ClickDown"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickBlur", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["doKey2ClickBlur"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadFileFromBase64", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["loadFileFromBase64"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "increaseHeightByContent", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["increaseHeightByContent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSvg", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createSvg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sanitizeEditableContent", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["sanitizeEditableContent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CssClassBuilder", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "surveyCss", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["surveyCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultV2Css", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["defaultV2Css"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultV2ThemeName", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["defaultV2ThemeName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragDropSurveyElements", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DragDropSurveyElements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragDropChoices", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DragDropChoices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultStandardCss", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["defaultStandardCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modernCss", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["modernCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SvgIconRegistry", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SvgIconRegistry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SvgRegistry", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SvgRegistry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SvgBundleViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["SvgBundleViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RendererFactory", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["RendererFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResponsivityManager", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ResponsivityManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VerticalResponsivityManager", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["VerticalResponsivityManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["unwrap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOriginalEvent", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["getOriginalEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDropdownActionModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createDropdownActionModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDropdownActionModelAdvanced", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["createDropdownActionModelAdvanced"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseAction", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["BaseAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Action", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["Action"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionDropdownViewModel", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ActionDropdownViewModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AdaptiveActionContainer", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["AdaptiveActionContainer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultActionBarCss", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["defaultActionBarCss"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionContainer", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["ActionContainer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TooltipManager", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["TooltipManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DragOrClickHelper", function() { return _core_wo_model__WEBPACK_IMPORTED_MODULE_0__["DragOrClickHelper"]; });

/* harmony import */ var _survey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../survey */ "./src/survey.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return _survey__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"]; });

// model




/***/ }),

/***/ "./src/error.ts":
/*!**********************!*\
  !*** ./src/error.ts ***!
  \**********************/
/*! exports provided: AnswerRequiredError, OneAnswerRequiredError, RequreNumericError, ExceedSizeError, WebRequestError, WebRequestEmptyError, OtherEmptyError, UploadingFileError, RequiredInAllRowsError, MinRowCountError, KeyDuplicationError, CustomError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnswerRequiredError", function() { return AnswerRequiredError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneAnswerRequiredError", function() { return OneAnswerRequiredError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequreNumericError", function() { return RequreNumericError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExceedSizeError", function() { return ExceedSizeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebRequestError", function() { return WebRequestError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebRequestEmptyError", function() { return WebRequestEmptyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OtherEmptyError", function() { return OtherEmptyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UploadingFileError", function() { return UploadingFileError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequiredInAllRowsError", function() { return RequiredInAllRowsError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinRowCountError", function() { return MinRowCountError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyDuplicationError", function() { return KeyDuplicationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomError", function() { return CustomError; });
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _survey_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./survey-error */ "./src/survey-error.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var AnswerRequiredError = /** @class */ (function (_super) {
    __extends(AnswerRequiredError, _super);
    function AnswerRequiredError(text, errorOwner) {
        if (text === void 0) { text = null; }
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    AnswerRequiredError.prototype.getErrorType = function () {
        return "required";
    };
    AnswerRequiredError.prototype.getDefaultText = function () {
        return this.getLocalizationString("requiredError");
    };
    return AnswerRequiredError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var OneAnswerRequiredError = /** @class */ (function (_super) {
    __extends(OneAnswerRequiredError, _super);
    function OneAnswerRequiredError(text, errorOwner) {
        if (text === void 0) { text = null; }
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    OneAnswerRequiredError.prototype.getErrorType = function () {
        return "requireoneanswer";
    };
    OneAnswerRequiredError.prototype.getDefaultText = function () {
        return this.getLocalizationString("requiredErrorInPanel");
    };
    return OneAnswerRequiredError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var RequreNumericError = /** @class */ (function (_super) {
    __extends(RequreNumericError, _super);
    function RequreNumericError(text, errorOwner) {
        if (text === void 0) { text = null; }
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    RequreNumericError.prototype.getErrorType = function () {
        return "requirenumeric";
    };
    RequreNumericError.prototype.getDefaultText = function () {
        return this.getLocalizationString("numericError");
    };
    return RequreNumericError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var ExceedSizeError = /** @class */ (function (_super) {
    __extends(ExceedSizeError, _super);
    function ExceedSizeError(maxSize, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, null, errorOwner) || this;
        _this.maxSize = maxSize;
        _this.locText.text = _this.getText();
        return _this;
    }
    ExceedSizeError.prototype.getErrorType = function () {
        return "exceedsize";
    };
    ExceedSizeError.prototype.getDefaultText = function () {
        return _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"]
            .getString("exceedMaxSize")["format"](this.getTextSize());
    };
    ExceedSizeError.prototype.getTextSize = function () {
        var sizes = ["Bytes", "KB", "MB", "GB", "TB"];
        var fixed = [0, 0, 2, 3, 3];
        if (this.maxSize === 0) {
            return "0 Byte";
        }
        var i = Math.floor(Math.log(this.maxSize) / Math.log(1024));
        var value = this.maxSize / Math.pow(1024, i);
        return value.toFixed(fixed[i]) + " " + sizes[i];
    };
    return ExceedSizeError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var WebRequestError = /** @class */ (function (_super) {
    __extends(WebRequestError, _super);
    function WebRequestError(status, response, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, null, errorOwner) || this;
        _this.status = status;
        _this.response = response;
        return _this;
    }
    WebRequestError.prototype.getErrorType = function () {
        return "webrequest";
    };
    WebRequestError.prototype.getDefaultText = function () {
        var str = this.getLocalizationString("urlRequestError");
        return !!str ? str["format"](this.status, this.response) : "";
    };
    return WebRequestError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var WebRequestEmptyError = /** @class */ (function (_super) {
    __extends(WebRequestEmptyError, _super);
    function WebRequestEmptyError(text, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    WebRequestEmptyError.prototype.getErrorType = function () {
        return "webrequestempty";
    };
    WebRequestEmptyError.prototype.getDefaultText = function () {
        return this.getLocalizationString("urlGetChoicesError");
    };
    return WebRequestEmptyError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var OtherEmptyError = /** @class */ (function (_super) {
    __extends(OtherEmptyError, _super);
    function OtherEmptyError(text, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    OtherEmptyError.prototype.getErrorType = function () {
        return "otherempty";
    };
    OtherEmptyError.prototype.getDefaultText = function () {
        return this.getLocalizationString("otherRequiredError");
    };
    return OtherEmptyError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var UploadingFileError = /** @class */ (function (_super) {
    __extends(UploadingFileError, _super);
    function UploadingFileError(text, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    UploadingFileError.prototype.getErrorType = function () {
        return "uploadingfile";
    };
    UploadingFileError.prototype.getDefaultText = function () {
        return this.getLocalizationString("uploadingFile");
    };
    return UploadingFileError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var RequiredInAllRowsError = /** @class */ (function (_super) {
    __extends(RequiredInAllRowsError, _super);
    function RequiredInAllRowsError(text, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    RequiredInAllRowsError.prototype.getErrorType = function () {
        return "requiredinallrowserror";
    };
    RequiredInAllRowsError.prototype.getDefaultText = function () {
        return this.getLocalizationString("requiredInAllRowsError");
    };
    return RequiredInAllRowsError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var MinRowCountError = /** @class */ (function (_super) {
    __extends(MinRowCountError, _super);
    function MinRowCountError(minRowCount, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, null, errorOwner) || this;
        _this.minRowCount = minRowCount;
        return _this;
    }
    MinRowCountError.prototype.getErrorType = function () {
        return "minrowcounterror";
    };
    MinRowCountError.prototype.getDefaultText = function () {
        return _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"]
            .getString("minRowCountError")["format"](this.minRowCount);
    };
    return MinRowCountError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var KeyDuplicationError = /** @class */ (function (_super) {
    __extends(KeyDuplicationError, _super);
    function KeyDuplicationError(text, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    KeyDuplicationError.prototype.getErrorType = function () {
        return "keyduplicationerror";
    };
    KeyDuplicationError.prototype.getDefaultText = function () {
        return this.getLocalizationString("keyDuplicationError");
    };
    return KeyDuplicationError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));

var CustomError = /** @class */ (function (_super) {
    __extends(CustomError, _super);
    function CustomError(text, errorOwner) {
        if (errorOwner === void 0) { errorOwner = null; }
        var _this = _super.call(this, text, errorOwner) || this;
        _this.text = text;
        return _this;
    }
    CustomError.prototype.getErrorType = function () {
        return "custom";
    };
    return CustomError;
}(_survey_error__WEBPACK_IMPORTED_MODULE_1__["SurveyError"]));



/***/ }),

/***/ "./src/expressionItems.ts":
/*!********************************!*\
  !*** ./src/expressionItems.ts ***!
  \********************************/
/*! exports provided: ExpressionItem, HtmlConditionItem, UrlConditionItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionItem", function() { return ExpressionItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlConditionItem", function() { return HtmlConditionItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlConditionItem", function() { return UrlConditionItem; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Base class for HtmlConditionItem and UrlConditionItem classes.
 */
var ExpressionItem = /** @class */ (function (_super) {
    __extends(ExpressionItem, _super);
    function ExpressionItem(expression) {
        if (expression === void 0) { expression = null; }
        var _this = _super.call(this) || this;
        _this.expression = expression;
        return _this;
    }
    ExpressionItem.prototype.getType = function () {
        return "expressionitem";
    };
    ExpressionItem.prototype.runCondition = function (values, properties) {
        if (!this.expression)
            return false;
        return new _conditions__WEBPACK_IMPORTED_MODULE_2__["ConditionRunner"](this.expression).run(values, properties);
    };
    Object.defineProperty(ExpressionItem.prototype, "expression", {
        /**
         * The expression property. If this expression returns true, then survey will use html property to show on complete page.
         */
        get: function () {
            return this.getPropertyValue("expression", "");
        },
        set: function (val) {
            this.setPropertyValue("expression", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionItem.prototype, "locHtml", {
        get: function () {
            return this.getLocalizableString("html");
        },
        enumerable: false,
        configurable: true
    });
    ExpressionItem.prototype.getLocale = function () {
        return !!this.locOwner ? this.locOwner.getLocale() : "";
    };
    ExpressionItem.prototype.getMarkdownHtml = function (text, name) {
        return !!this.locOwner ? this.locOwner.getMarkdownHtml(text, name) : undefined;
    };
    ExpressionItem.prototype.getRenderer = function (name) {
        return !!this.locOwner ? this.locOwner.getRenderer(name) : null;
    };
    ExpressionItem.prototype.getRendererContext = function (locStr) {
        return !!this.locOwner ? this.locOwner.getRendererContext(locStr) : locStr;
    };
    ExpressionItem.prototype.getProcessedText = function (text) {
        return this.locOwner ? this.locOwner.getProcessedText(text) : text;
    };
    ExpressionItem.prototype.getSurvey = function (isLive) {
        if (isLive === void 0) { isLive = false; }
        return this.locOwner;
    };
    return ExpressionItem;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));

/**
 * A class that contains expression and html propeties. It uses in survey.completedHtmlOnCondition array.
 * If the expression returns true then html of this item uses instead of survey.completedHtml property
 * @see SurveyModel.completedHtmlOnCondition
 * @see SurveyModel.completedHtml
 */
var HtmlConditionItem = /** @class */ (function (_super) {
    __extends(HtmlConditionItem, _super);
    function HtmlConditionItem(expression, html) {
        if (expression === void 0) { expression = null; }
        if (html === void 0) { html = null; }
        var _this = _super.call(this, expression) || this;
        _this.createLocalizableString("html", _this);
        _this.html = html;
        return _this;
    }
    HtmlConditionItem.prototype.getType = function () {
        return "htmlconditionitem";
    };
    Object.defineProperty(HtmlConditionItem.prototype, "html", {
        /**
         * The html that shows on completed ('Thank you') page. The expression should return true
         * @see expression
         */
        get: function () {
            return this.getLocalizableStringText("html");
        },
        set: function (value) {
            this.setLocalizableStringText("html", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HtmlConditionItem.prototype, "locHtml", {
        get: function () {
            return this.getLocalizableString("html");
        },
        enumerable: false,
        configurable: true
    });
    return HtmlConditionItem;
}(ExpressionItem));

/**
 * A class that contains expression and url propeties. It uses in survey.navigateToUrlOnCondition array.
 * If the expression returns true then url of this item uses instead of survey.navigateToUrl property
 * @see SurveyModel.navigateToUrl
 */
var UrlConditionItem = /** @class */ (function (_super) {
    __extends(UrlConditionItem, _super);
    function UrlConditionItem(expression, url) {
        if (expression === void 0) { expression = null; }
        if (url === void 0) { url = null; }
        var _this = _super.call(this, expression) || this;
        _this.createLocalizableString("url", _this);
        _this.url = url;
        return _this;
    }
    UrlConditionItem.prototype.getType = function () {
        return "urlconditionitem";
    };
    Object.defineProperty(UrlConditionItem.prototype, "url", {
        /**
         * The url that survey navigates to on completing the survey. The expression should return true
         * @see expression
         */
        get: function () {
            return this.getLocalizableStringText("url");
        },
        set: function (value) {
            this.setLocalizableStringText("url", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UrlConditionItem.prototype, "locUrl", {
        get: function () {
            return this.getLocalizableString("url");
        },
        enumerable: false,
        configurable: true
    });
    return UrlConditionItem;
}(ExpressionItem));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("expressionitem", ["expression:condition"], function () {
    return new ExpressionItem();
}, "base");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("htmlconditionitem", [{ name: "html:html", serializationProperty: "locHtml" }], function () {
    return new HtmlConditionItem();
}, "expressionitem");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("urlconditionitem", [{ name: "url:string", serializationProperty: "locUrl" }], function () {
    return new UrlConditionItem();
}, "expressionitem");


/***/ }),

/***/ "./src/expressions/expressionParser.ts":
/*!*********************************************!*\
  !*** ./src/expressions/expressionParser.ts ***!
  \*********************************************/
/*! exports provided: SyntaxError, parse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SyntaxError", function() { return SyntaxError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return parse; });
/* harmony import */ var _expressions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./expressions */ "./src/expressions/expressions.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* eslint-disable */

// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.3.1 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs
"use strict";
var SyntaxError = /** @class */ (function (_super) {
    __extends(SyntaxError, _super);
    function SyntaxError(message, expected, found, location) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.expected = expected;
        _this.found = found;
        _this.location = location;
        _this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, SyntaxError);
        }
        return _this;
    }
    SyntaxError.buildMessage = function (expected, found) {
        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/"/g, "\\\"")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function classEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/\]/g, "\\]")
                .replace(/\^/g, "\\^")
                .replace(/-/g, "\\-")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function describeExpectation(expectation) {
            switch (expectation.type) {
                case "literal":
                    return "\"" + literalEscape(expectation.text) + "\"";
                case "class":
                    var escapedParts = expectation.parts.map(function (part) {
                        return Array.isArray(part)
                            ? classEscape(part[0]) + "-" + classEscape(part[1])
                            : classEscape(part);
                    });
                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                case "any":
                    return "any character";
                case "end":
                    return "end of input";
                case "other":
                    return expectation.description;
            }
        }
        function describeExpected(expected1) {
            var descriptions = expected1.map(describeExpectation);
            var i;
            var j;
            descriptions.sort();
            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }
            switch (descriptions.length) {
                case 1:
                    return descriptions[0];
                case 2:
                    return descriptions[0] + " or " + descriptions[1];
                default:
                    return descriptions.slice(0, -1).join(", ")
                        + ", or "
                        + descriptions[descriptions.length - 1];
            }
        }
        function describeFound(found1) {
            return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    return SyntaxError;
}(Error));

function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$startRuleFunctions = { Expression: peg$parseExpression };
    var peg$startRuleFunction = peg$parseExpression;
    var peg$c0 = function (head, tail) {
        return buildBinaryOperand(head, tail, true);
    };
    var peg$c1 = "||";
    var peg$c2 = peg$literalExpectation("||", false);
    var peg$c3 = "or";
    var peg$c4 = peg$literalExpectation("or", true);
    var peg$c5 = function () { return "or"; };
    var peg$c6 = "&&";
    var peg$c7 = peg$literalExpectation("&&", false);
    var peg$c8 = "and";
    var peg$c9 = peg$literalExpectation("and", true);
    var peg$c10 = function () { return "and"; };
    var peg$c11 = function (head, tail) {
        return buildBinaryOperand(head, tail);
    };
    var peg$c12 = "<=";
    var peg$c13 = peg$literalExpectation("<=", false);
    var peg$c14 = "lessorequal";
    var peg$c15 = peg$literalExpectation("lessorequal", true);
    var peg$c16 = function () { return "lessorequal"; };
    var peg$c17 = ">=";
    var peg$c18 = peg$literalExpectation(">=", false);
    var peg$c19 = "greaterorequal";
    var peg$c20 = peg$literalExpectation("greaterorequal", true);
    var peg$c21 = function () { return "greaterorequal"; };
    var peg$c22 = "==";
    var peg$c23 = peg$literalExpectation("==", false);
    var peg$c24 = "equal";
    var peg$c25 = peg$literalExpectation("equal", true);
    var peg$c26 = function () { return "equal"; };
    var peg$c27 = "=";
    var peg$c28 = peg$literalExpectation("=", false);
    var peg$c29 = "!=";
    var peg$c30 = peg$literalExpectation("!=", false);
    var peg$c31 = "notequal";
    var peg$c32 = peg$literalExpectation("notequal", true);
    var peg$c33 = function () { return "notequal"; };
    var peg$c34 = "<";
    var peg$c35 = peg$literalExpectation("<", false);
    var peg$c36 = "less";
    var peg$c37 = peg$literalExpectation("less", true);
    var peg$c38 = function () { return "less"; };
    var peg$c39 = ">";
    var peg$c40 = peg$literalExpectation(">", false);
    var peg$c41 = "greater";
    var peg$c42 = peg$literalExpectation("greater", true);
    var peg$c43 = function () { return "greater"; };
    var peg$c44 = "+";
    var peg$c45 = peg$literalExpectation("+", false);
    var peg$c46 = function () { return "plus"; };
    var peg$c47 = "-";
    var peg$c48 = peg$literalExpectation("-", false);
    var peg$c49 = function () { return "minus"; };
    var peg$c50 = "*";
    var peg$c51 = peg$literalExpectation("*", false);
    var peg$c52 = function () { return "mul"; };
    var peg$c53 = "/";
    var peg$c54 = peg$literalExpectation("/", false);
    var peg$c55 = function () { return "div"; };
    var peg$c56 = "%";
    var peg$c57 = peg$literalExpectation("%", false);
    var peg$c58 = function () { return "mod"; };
    var peg$c59 = "^";
    var peg$c60 = peg$literalExpectation("^", false);
    var peg$c61 = "power";
    var peg$c62 = peg$literalExpectation("power", true);
    var peg$c63 = function () { return "power"; };
    var peg$c64 = "*=";
    var peg$c65 = peg$literalExpectation("*=", false);
    var peg$c66 = "contains";
    var peg$c67 = peg$literalExpectation("contains", true);
    var peg$c68 = "contain";
    var peg$c69 = peg$literalExpectation("contain", true);
    var peg$c70 = function () { return "contains"; };
    var peg$c71 = "notcontains";
    var peg$c72 = peg$literalExpectation("notcontains", true);
    var peg$c73 = "notcontain";
    var peg$c74 = peg$literalExpectation("notcontain", true);
    var peg$c75 = function () { return "notcontains"; };
    var peg$c76 = "anyof";
    var peg$c77 = peg$literalExpectation("anyof", true);
    var peg$c78 = function () { return "anyof"; };
    var peg$c79 = "allof";
    var peg$c80 = peg$literalExpectation("allof", true);
    var peg$c81 = function () { return "allof"; };
    var peg$c82 = "(";
    var peg$c83 = peg$literalExpectation("(", false);
    var peg$c84 = ")";
    var peg$c85 = peg$literalExpectation(")", false);
    var peg$c86 = function (expr) { return expr; };
    var peg$c87 = function (name, params) { return new _expressions__WEBPACK_IMPORTED_MODULE_0__["FunctionOperand"](name, params); };
    var peg$c88 = "!";
    var peg$c89 = peg$literalExpectation("!", false);
    var peg$c90 = "negate";
    var peg$c91 = peg$literalExpectation("negate", true);
    var peg$c92 = function (expr) { return new _expressions__WEBPACK_IMPORTED_MODULE_0__["UnaryOperand"](expr, "negate"); };
    var peg$c93 = function (expr, op) { return new _expressions__WEBPACK_IMPORTED_MODULE_0__["UnaryOperand"](expr, op); };
    var peg$c94 = "empty";
    var peg$c95 = peg$literalExpectation("empty", true);
    var peg$c96 = function () { return "empty"; };
    var peg$c97 = "notempty";
    var peg$c98 = peg$literalExpectation("notempty", true);
    var peg$c99 = function () { return "notempty"; };
    var peg$c100 = "undefined";
    var peg$c101 = peg$literalExpectation("undefined", false);
    var peg$c102 = "null";
    var peg$c103 = peg$literalExpectation("null", false);
    var peg$c104 = function () { return null; };
    var peg$c105 = function (value) { return new _expressions__WEBPACK_IMPORTED_MODULE_0__["Const"](value); };
    var peg$c106 = "{";
    var peg$c107 = peg$literalExpectation("{", false);
    var peg$c108 = "}";
    var peg$c109 = peg$literalExpectation("}", false);
    var peg$c110 = function (value) { return new _expressions__WEBPACK_IMPORTED_MODULE_0__["Variable"](value); };
    var peg$c111 = function (value) { return value; };
    var peg$c112 = "''";
    var peg$c113 = peg$literalExpectation("''", false);
    var peg$c114 = function () { return ""; };
    var peg$c115 = "\"\"";
    var peg$c116 = peg$literalExpectation("\"\"", false);
    var peg$c117 = "'";
    var peg$c118 = peg$literalExpectation("'", false);
    var peg$c119 = function (value) { return "'" + value + "'"; };
    var peg$c120 = "\"";
    var peg$c121 = peg$literalExpectation("\"", false);
    var peg$c122 = "[";
    var peg$c123 = peg$literalExpectation("[", false);
    var peg$c124 = "]";
    var peg$c125 = peg$literalExpectation("]", false);
    var peg$c126 = function (sequence) { return sequence; };
    var peg$c127 = ",";
    var peg$c128 = peg$literalExpectation(",", false);
    var peg$c129 = function (expr, tail) {
        if (expr == null)
            return new _expressions__WEBPACK_IMPORTED_MODULE_0__["ArrayOperand"]([]);
        var array = [expr];
        if (Array.isArray(tail)) {
            var flatten = flattenArray(tail);
            for (var i = 3; i < flatten.length; i += 4) {
                array.push(flatten[i]);
            }
        }
        return new _expressions__WEBPACK_IMPORTED_MODULE_0__["ArrayOperand"](array);
    };
    var peg$c130 = "true";
    var peg$c131 = peg$literalExpectation("true", true);
    var peg$c132 = function () { return true; };
    var peg$c133 = "false";
    var peg$c134 = peg$literalExpectation("false", true);
    var peg$c135 = function () { return false; };
    var peg$c136 = "0x";
    var peg$c137 = peg$literalExpectation("0x", false);
    var peg$c138 = function () { return parseInt(text(), 16); };
    var peg$c139 = /^[\-]/;
    var peg$c140 = peg$classExpectation(["-"], false, false);
    var peg$c141 = function (sign, num) { return sign == null ? num : -num; };
    var peg$c142 = ".";
    var peg$c143 = peg$literalExpectation(".", false);
    var peg$c144 = function () { return parseFloat(text()); };
    var peg$c145 = function () { return parseInt(text(), 10); };
    var peg$c146 = "0";
    var peg$c147 = peg$literalExpectation("0", false);
    var peg$c148 = function () { return 0; };
    var peg$c149 = function (chars) { return chars.join(""); };
    var peg$c150 = "\\'";
    var peg$c151 = peg$literalExpectation("\\'", false);
    var peg$c152 = function () { return "'"; };
    var peg$c153 = "\\\"";
    var peg$c154 = peg$literalExpectation("\\\"", false);
    var peg$c155 = function () { return "\""; };
    var peg$c156 = /^[^"']/;
    var peg$c157 = peg$classExpectation(["\"", "'"], true, false);
    var peg$c158 = function () { return text(); };
    var peg$c159 = /^[^{}]/;
    var peg$c160 = peg$classExpectation(["{", "}"], true, false);
    var peg$c161 = /^[0-9]/;
    var peg$c162 = peg$classExpectation([["0", "9"]], false, false);
    var peg$c163 = /^[1-9]/;
    var peg$c164 = peg$classExpectation([["1", "9"]], false, false);
    var peg$c165 = /^[a-zA-Z_]/;
    var peg$c166 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
    var peg$c167 = peg$otherExpectation("whitespace");
    var peg$c168 = /^[ \t\n\r]/;
    var peg$c169 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$resultsCache = {};
    var peg$result;
    if (options.startRule !== undefined) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);
    }
    function error(message, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location1);
    }
    function peg$literalExpectation(text1, ignoreCase) {
        return { type: "literal", text: text1, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }
    function peg$fail(expected1) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected1);
    }
    function peg$buildSimpleError(message, location1) {
        return new SyntaxError(message, [], "", location1);
    }
    function peg$buildStructuredError(expected1, found, location1) {
        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
    }
    function peg$parseExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
        var key = peg$currPos * 34 + 0;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseLogicOr();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseOrSign();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parse_();
                        if (s7 !== peg$FAILED) {
                            s8 = peg$parseLogicOr();
                            if (s8 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8];
                                s4 = s5;
                            }
                            else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$currPos;
                    s5 = peg$parse_();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parseOrSign();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parse_();
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseLogicOr();
                                if (s8 !== peg$FAILED) {
                                    s5 = [s5, s6, s7, s8];
                                    s4 = s5;
                                }
                                else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c0(s2, s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseOrSign() {
        var s0, s1;
        var key = peg$currPos * 34 + 1;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c1) {
            s1 = peg$c1;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c2);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c3) {
                s1 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c4);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5();
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLogicOr() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 2;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseLogicAnd();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                s5 = peg$parseAndSign();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseLogicAnd();
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseAndSign();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseLogicAnd();
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseAndSign() {
        var s0, s1;
        var key = peg$currPos * 34 + 3;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c6) {
            s1 = peg$c6;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c8) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10();
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLogicAnd() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 4;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseCompOps();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                s5 = peg$parseComparableOperators();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseCompOps();
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseComparableOperators();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseCompOps();
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseComparableOperators() {
        var s0, s1;
        var key = peg$currPos * 34 + 5;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c12) {
            s1 = peg$c12;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c13);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c14) {
                s1 = input.substr(peg$currPos, 11);
                peg$currPos += 11;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c15);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c17) {
                s1 = peg$c17;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c18);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c19) {
                    s1 = input.substr(peg$currPos, 14);
                    peg$currPos += 14;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c20);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c22) {
                    s1 = peg$c22;
                    peg$currPos += 2;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c23);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c24) {
                        s1 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c25);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c26();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s1 = peg$c27;
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c28);
                        }
                    }
                    if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c24) {
                            s1 = input.substr(peg$currPos, 5);
                            peg$currPos += 5;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c25);
                            }
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c26();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c29) {
                            s1 = peg$c29;
                            peg$currPos += 2;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c30);
                            }
                        }
                        if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c31) {
                                s1 = input.substr(peg$currPos, 8);
                                peg$currPos += 8;
                            }
                            else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c32);
                                }
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c33();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 60) {
                                s1 = peg$c34;
                                peg$currPos++;
                            }
                            else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c35);
                                }
                            }
                            if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c36) {
                                    s1 = input.substr(peg$currPos, 4);
                                    peg$currPos += 4;
                                }
                                else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c37);
                                    }
                                }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c38();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 62) {
                                    s1 = peg$c39;
                                    peg$currPos++;
                                }
                                else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c40);
                                    }
                                }
                                if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c41) {
                                        s1 = input.substr(peg$currPos, 7);
                                        peg$currPos += 7;
                                    }
                                    else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c42);
                                        }
                                    }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c43();
                                }
                                s0 = s1;
                            }
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseCompOps() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 6;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parsePlusMinusOps();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                s5 = peg$parsePlusMinusSigns();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parsePlusMinusOps();
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parsePlusMinusSigns();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsePlusMinusOps();
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsePlusMinusSigns() {
        var s0, s1;
        var key = peg$currPos * 34 + 7;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 43) {
            s1 = peg$c44;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c45);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c46();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c47;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c48);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c49();
            }
            s0 = s1;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsePlusMinusOps() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 8;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseMulDivOps();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                s5 = peg$parseMulDivSigns();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseMulDivOps();
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseMulDivSigns();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseMulDivOps();
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseMulDivSigns() {
        var s0, s1;
        var key = peg$currPos * 34 + 9;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
            s1 = peg$c50;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c51);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
                s1 = peg$c53;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c54);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 37) {
                    s1 = peg$c56;
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c57);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c58();
                }
                s0 = s1;
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseMulDivOps() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 10;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseBinaryFuncOp();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                s5 = peg$parsePowerSigns();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseBinaryFuncOp();
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parsePowerSigns();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseBinaryFuncOp();
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsePowerSigns() {
        var s0, s1;
        var key = peg$currPos * 34 + 11;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 94) {
            s1 = peg$c59;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c60);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c61) {
                s1 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c62);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63();
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseBinaryFuncOp() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 12;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseFactor();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                s5 = peg$parseBinFunctions();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseFactor();
                        if (s7 === peg$FAILED) {
                            s7 = null;
                        }
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseBinFunctions();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseFactor();
                            if (s7 === peg$FAILED) {
                                s7 = null;
                            }
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseBinFunctions() {
        var s0, s1;
        var key = peg$currPos * 34 + 13;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c64) {
            s1 = peg$c64;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c65);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c66) {
                s1 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c67);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c68) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c69);
                    }
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c70();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c71) {
                s1 = input.substr(peg$currPos, 11);
                peg$currPos += 11;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c72);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c73) {
                    s1 = input.substr(peg$currPos, 10);
                    peg$currPos += 10;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c74);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c75();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c76) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c77);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c78();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c79) {
                        s1 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c80);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c81();
                    }
                    s0 = s1;
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseFactor() {
        var s0, s1, s2, s3, s4, s5;
        var key = peg$currPos * 34 + 14;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c82;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c83);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c84;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c85);
                            }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = null;
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c86(s3);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseFunctionOp();
            if (s0 === peg$FAILED) {
                s0 = peg$parseUnaryFunctionOp();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseAtom();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseArrayOp();
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseFunctionOp() {
        var s0, s1, s2, s3, s4;
        var key = peg$currPos * 34 + 15;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseLettersAndDigits();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c82;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c83);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseSequence();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s4 = peg$c84;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c85);
                        }
                    }
                    if (s4 === peg$FAILED) {
                        s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c87(s1, s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseUnaryFunctionOp() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 34 + 16;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 33) {
            s1 = peg$c88;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c89);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                s1 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c91);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c92(s3);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseAtom();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseUnFunctions();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c93(s1, s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseUnFunctions() {
        var s0, s1;
        var key = peg$currPos * 34 + 17;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c94) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c95);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c96();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c97) {
                s1 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c98);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c99();
            }
            s0 = s1;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseAtom() {
        var s0, s1, s2, s3, s4;
        var key = peg$currPos * 34 + 18;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c100) {
                s2 = peg$c100;
                peg$currPos += 9;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c101);
                }
            }
            if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c102) {
                    s2 = peg$c102;
                    peg$currPos += 4;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c103);
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c104();
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseConstValue();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c105(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s2 = peg$c106;
                        peg$currPos++;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c107);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseValueInput();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s4 = peg$c108;
                                peg$currPos++;
                            }
                            else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c109);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c110(s3);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseConstValue() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 34 + 19;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseLogicValue();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c111(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseArithmeticValue();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c111(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseLettersAndDigits();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c111(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c112) {
                        s1 = peg$c112;
                        peg$currPos += 2;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c113);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c114();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c115) {
                            s1 = peg$c115;
                            peg$currPos += 2;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c116);
                            }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c114();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                                s1 = peg$c117;
                                peg$currPos++;
                            }
                            else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c118);
                                }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parseAnyInput();
                                if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                        s3 = peg$c117;
                                        peg$currPos++;
                                    }
                                    else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c118);
                                        }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c119(s2);
                                        s0 = s1;
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                    s1 = peg$c120;
                                    peg$currPos++;
                                }
                                else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c121);
                                    }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parseAnyInput();
                                    if (s2 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                            s3 = peg$c120;
                                            peg$currPos++;
                                        }
                                        else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c121);
                                            }
                                        }
                                        if (s3 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c119(s2);
                                            s0 = s1;
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseArrayOp() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 34 + 20;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c122;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c123);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSequence();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c124;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c125);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c126(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseSequence() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 34 + 21;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c127;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c128);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                        s7 = peg$parseExpression();
                        if (s7 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c127;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c128);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseExpression();
                            if (s7 !== peg$FAILED) {
                                s4 = [s4, s5, s6, s7];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c129(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLogicValue() {
        var s0, s1;
        var key = peg$currPos * 34 + 22;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c130) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c131);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c132();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c133) {
                s1 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c134);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c135();
            }
            s0 = s1;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseArithmeticValue() {
        var s0, s1, s2;
        var key = peg$currPos * 34 + 23;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c136) {
            s1 = peg$c136;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c137);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseDigits();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c138();
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (peg$c139.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c140);
                }
            }
            if (s1 === peg$FAILED) {
                s1 = null;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseNumber();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c141(s1, s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseNumber() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 34 + 24;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseDigits();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c142;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c143);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseDigits();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c144();
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNonZeroDigits();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseDigits();
                if (s2 === peg$FAILED) {
                    s2 = null;
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c145();
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 48) {
                    s1 = peg$c146;
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c147);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c148();
                }
                s0 = s1;
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseValueInput() {
        var s0, s1, s2;
        var key = peg$currPos * 34 + 25;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseValueCharacters();
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseValueCharacters();
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c149(s1);
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseAnyInput() {
        var s0, s1, s2;
        var key = peg$currPos * 34 + 26;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseAnyCharacters();
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseAnyCharacters();
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c149(s1);
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseAnyCharacters() {
        var s0, s1;
        var key = peg$currPos * 34 + 27;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c150) {
            s1 = peg$c150;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c151);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c152();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c153) {
                s1 = peg$c153;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c154);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c155();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (peg$c156.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c157);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c158();
                }
                s0 = s1;
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseValueCharacters() {
        var s0, s1;
        var key = peg$currPos * 34 + 28;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (peg$c159.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c160);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c158();
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLettersAndDigits() {
        var s0, s1, s2, s3, s4, s5, s6;
        var key = peg$currPos * 34 + 29;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseLetters();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseDigits();
            if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseLetters();
                while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseLetters();
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseDigits();
                if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseLetters();
                    while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseLetters();
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c158();
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseDigits() {
        var s0, s1;
        var key = peg$currPos * 34 + 30;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = [];
        if (peg$c161.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c162);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c161.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c162);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseNonZeroDigits() {
        var s0, s1;
        var key = peg$currPos * 34 + 31;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = [];
        if (peg$c163.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c164);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c163.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c164);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLetters() {
        var s0, s1;
        var key = peg$currPos * 34 + 32;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = [];
        if (peg$c165.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c166);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c165.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c166);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parse_() {
        var s0, s1;
        var key = peg$currPos * 34 + 33;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        peg$silentFails++;
        s0 = [];
        if (peg$c168.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c169);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c168.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c169);
                }
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c167);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function buildBinaryOperand(head, tail, isArithmeticOp) {
        if (isArithmeticOp === void 0) { isArithmeticOp = false; }
        return tail.reduce(function (result, elements) {
            return new _expressions__WEBPACK_IMPORTED_MODULE_0__["BinaryOperand"](elements[1], result, elements[3], isArithmeticOp);
        }, head);
    }
    function flattenArray(array) {
        return [].concat.apply([], array);
    }
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
var parse = peg$parse;


/***/ }),

/***/ "./src/expressions/expressions.ts":
/*!****************************************!*\
  !*** ./src/expressions/expressions.ts ***!
  \****************************************/
/*! exports provided: Operand, BinaryOperand, UnaryOperand, ArrayOperand, Const, Variable, FunctionOperand, OperandMaker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Operand", function() { return Operand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinaryOperand", function() { return BinaryOperand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnaryOperand", function() { return UnaryOperand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayOperand", function() { return ArrayOperand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Const", function() { return Const; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return Variable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionOperand", function() { return FunctionOperand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OperandMaker", function() { return OperandMaker; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./src/helpers.ts");
/* harmony import */ var _functionsfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functionsfactory */ "./src/functionsfactory.ts");
/* harmony import */ var _conditionProcessValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conditionProcessValue */ "./src/conditionProcessValue.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var Operand = /** @class */ (function () {
    function Operand() {
    }
    Operand.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        return "";
    };
    Operand.prototype.hasFunction = function () {
        return false;
    };
    Operand.prototype.hasAsyncFunction = function () {
        return false;
    };
    Operand.prototype.addToAsyncList = function (list) { };
    Operand.prototype.isEqual = function (op) {
        return !!op && op.getType() === this.getType() && this.isContentEqual(op);
    };
    Operand.prototype.areOperatorsEquals = function (op1, op2) {
        return !op1 && !op2 || !!op1 && op1.isEqual(op2);
    };
    return Operand;
}());

var BinaryOperand = /** @class */ (function (_super) {
    __extends(BinaryOperand, _super);
    function BinaryOperand(operatorName, left, right, isArithmeticOp) {
        if (left === void 0) { left = null; }
        if (right === void 0) { right = null; }
        if (isArithmeticOp === void 0) { isArithmeticOp = false; }
        var _this = _super.call(this) || this;
        _this.operatorName = operatorName;
        _this.left = left;
        _this.right = right;
        _this.isArithmeticValue = isArithmeticOp;
        if (isArithmeticOp) {
            _this.consumer = OperandMaker.binaryFunctions["arithmeticOp"](operatorName);
        }
        else {
            _this.consumer = OperandMaker.binaryFunctions[operatorName];
        }
        if (_this.consumer == null) {
            OperandMaker.throwInvalidOperatorError(operatorName);
        }
        return _this;
    }
    BinaryOperand.prototype.getType = function () {
        return "binary";
    };
    Object.defineProperty(BinaryOperand.prototype, "isArithmetic", {
        get: function () {
            return this.isArithmeticValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperand.prototype, "isConjunction", {
        get: function () {
            return this.operatorName == "or" || this.operatorName == "and";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperand.prototype, "conjunction", {
        get: function () {
            return this.isConjunction ? this.operatorName : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperand.prototype, "operator", {
        get: function () {
            return this.operatorName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperand.prototype, "leftOperand", {
        get: function () {
            return this.left;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperand.prototype, "rightOperand", {
        get: function () {
            return this.right;
        },
        enumerable: false,
        configurable: true
    });
    BinaryOperand.prototype.isContentEqual = function (op) {
        var bOp = op;
        return bOp.operator === this.operator &&
            this.areOperatorsEquals(this.left, bOp.left) &&
            this.areOperatorsEquals(this.right, bOp.right);
    };
    BinaryOperand.prototype.evaluateParam = function (x, processValue) {
        return x == null ? null : x.evaluate(processValue);
    };
    BinaryOperand.prototype.evaluate = function (processValue) {
        return this.consumer.call(this, this.evaluateParam(this.left, processValue), this.evaluateParam(this.right, processValue));
    };
    BinaryOperand.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        if (!!func) {
            var res = func(this);
            if (!!res)
                return res;
        }
        return ("(" +
            OperandMaker.safeToString(this.left, func) +
            " " +
            OperandMaker.operatorToString(this.operatorName) +
            " " +
            OperandMaker.safeToString(this.right, func) +
            ")");
    };
    BinaryOperand.prototype.setVariables = function (variables) {
        if (this.left != null)
            this.left.setVariables(variables);
        if (this.right != null)
            this.right.setVariables(variables);
    };
    BinaryOperand.prototype.hasFunction = function () {
        return ((!!this.left && this.left.hasFunction()) ||
            (!!this.right && this.right.hasFunction()));
    };
    BinaryOperand.prototype.hasAsyncFunction = function () {
        return ((!!this.left && this.left.hasAsyncFunction()) ||
            (!!this.right && this.right.hasAsyncFunction()));
    };
    BinaryOperand.prototype.addToAsyncList = function (list) {
        if (!!this.left)
            this.left.addToAsyncList(list);
        if (!!this.right)
            this.right.addToAsyncList(list);
    };
    return BinaryOperand;
}(Operand));

var UnaryOperand = /** @class */ (function (_super) {
    __extends(UnaryOperand, _super);
    function UnaryOperand(expressionValue, operatorName) {
        var _this = _super.call(this) || this;
        _this.expressionValue = expressionValue;
        _this.operatorName = operatorName;
        _this.consumer = OperandMaker.unaryFunctions[operatorName];
        if (_this.consumer == null) {
            OperandMaker.throwInvalidOperatorError(operatorName);
        }
        return _this;
    }
    Object.defineProperty(UnaryOperand.prototype, "operator", {
        get: function () {
            return this.operatorName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnaryOperand.prototype, "expression", {
        get: function () {
            return this.expressionValue;
        },
        enumerable: false,
        configurable: true
    });
    UnaryOperand.prototype.getType = function () {
        return "unary";
    };
    UnaryOperand.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        if (!!func) {
            var res = func(this);
            if (!!res)
                return res;
        }
        return (OperandMaker.operatorToString(this.operatorName) +
            " " +
            this.expression.toString(func));
    };
    UnaryOperand.prototype.isContentEqual = function (op) {
        var uOp = op;
        return uOp.operator == this.operator && this.areOperatorsEquals(this.expression, uOp.expression);
    };
    UnaryOperand.prototype.evaluate = function (processValue) {
        var value = this.expression.evaluate(processValue);
        return this.consumer.call(this, value);
    };
    UnaryOperand.prototype.setVariables = function (variables) {
        this.expression.setVariables(variables);
    };
    return UnaryOperand;
}(Operand));

var ArrayOperand = /** @class */ (function (_super) {
    __extends(ArrayOperand, _super);
    function ArrayOperand(values) {
        var _this = _super.call(this) || this;
        _this.values = values;
        return _this;
    }
    ArrayOperand.prototype.getType = function () {
        return "array";
    };
    ArrayOperand.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        if (!!func) {
            var res = func(this);
            if (!!res)
                return res;
        }
        return ("[" +
            this.values
                .map(function (el) {
                return el.toString(func);
            })
                .join(", ") +
            "]");
    };
    ArrayOperand.prototype.evaluate = function (processValue) {
        return this.values.map(function (el) {
            return el.evaluate(processValue);
        });
    };
    ArrayOperand.prototype.setVariables = function (variables) {
        this.values.forEach(function (el) {
            el.setVariables(variables);
        });
    };
    ArrayOperand.prototype.hasFunction = function () {
        return this.values.some(function (operand) { return operand.hasFunction(); });
    };
    ArrayOperand.prototype.hasAsyncFunction = function () {
        return this.values.some(function (operand) { return operand.hasAsyncFunction(); });
    };
    ArrayOperand.prototype.addToAsyncList = function (list) {
        this.values.forEach(function (operand) { return operand.addToAsyncList(list); });
    };
    ArrayOperand.prototype.isContentEqual = function (op) {
        var aOp = op;
        if (aOp.values.length !== this.values.length)
            return false;
        for (var i = 0; i < this.values.length; i++) {
            if (!aOp.values[i].isEqual(this.values[i]))
                return false;
        }
        return true;
    };
    return ArrayOperand;
}(Operand));

var Const = /** @class */ (function (_super) {
    __extends(Const, _super);
    function Const(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Const.prototype.getType = function () {
        return "const";
    };
    Const.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        if (!!func) {
            var res = func(this);
            if (!!res)
                return res;
        }
        return this.value.toString();
    };
    Object.defineProperty(Const.prototype, "correctValue", {
        get: function () {
            return this.getCorrectValue(this.value);
        },
        enumerable: false,
        configurable: true
    });
    Const.prototype.evaluate = function () {
        return this.getCorrectValue(this.value);
    };
    Const.prototype.setVariables = function (variables) { };
    Const.prototype.getCorrectValue = function (value) {
        if (!value || typeof value != "string")
            return value;
        if (this.isBooleanValue(value))
            return value.toLowerCase() === "true";
        if (value.length > 1 &&
            this.isQuote(value[0]) &&
            this.isQuote(value[value.length - 1]))
            return value.substring(1, value.length - 1);
        if (OperandMaker.isNumeric(value)) {
            if (value.indexOf("0x") == 0)
                return parseInt(value);
            if (value.length > 1 && value[0] == "0")
                return value;
            return parseFloat(value);
        }
        return value;
    };
    Const.prototype.isContentEqual = function (op) {
        var cOp = op;
        return cOp.value == this.value;
    };
    Const.prototype.isQuote = function (ch) {
        return ch == "'" || ch == '"';
    };
    Const.prototype.isBooleanValue = function (value) {
        return (value &&
            (value.toLowerCase() === "true" || value.toLowerCase() === "false"));
    };
    return Const;
}(Operand));

var Variable = /** @class */ (function (_super) {
    __extends(Variable, _super);
    function Variable(variableName) {
        var _this = _super.call(this, variableName) || this;
        _this.variableName = variableName;
        _this.valueInfo = {};
        _this.useValueAsItIs = false;
        if (!!_this.variableName &&
            _this.variableName.length > 1 &&
            _this.variableName[0] === Variable.DisableConversionChar) {
            _this.variableName = _this.variableName.substring(1);
            _this.useValueAsItIs = true;
        }
        return _this;
    }
    Object.defineProperty(Variable, "DisableConversionChar", {
        get: function () { return _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].expressionDisableConversionChar; },
        set: function (val) { _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].expressionDisableConversionChar = val; },
        enumerable: false,
        configurable: true
    });
    Variable.prototype.getType = function () {
        return "variable";
    };
    Variable.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        if (!!func) {
            var res = func(this);
            if (!!res)
                return res;
        }
        var prefix = this.useValueAsItIs ? Variable.DisableConversionChar : "";
        return "{" + prefix + this.variableName + "}";
    };
    Object.defineProperty(Variable.prototype, "variable", {
        get: function () {
            return this.variableName;
        },
        enumerable: false,
        configurable: true
    });
    Variable.prototype.evaluate = function (processValue) {
        this.valueInfo.name = this.variableName;
        processValue.getValueInfo(this.valueInfo);
        return this.valueInfo.hasValue
            ? this.getCorrectValue(this.valueInfo.value)
            : null;
    };
    Variable.prototype.setVariables = function (variables) {
        variables.push(this.variableName);
    };
    Variable.prototype.getCorrectValue = function (value) {
        if (this.useValueAsItIs)
            return value;
        return _super.prototype.getCorrectValue.call(this, value);
    };
    Variable.prototype.isContentEqual = function (op) {
        var vOp = op;
        return vOp.variable == this.variable;
    };
    return Variable;
}(Const));

var FunctionOperand = /** @class */ (function (_super) {
    __extends(FunctionOperand, _super);
    function FunctionOperand(originalValue, parameters) {
        var _this = _super.call(this) || this;
        _this.originalValue = originalValue;
        _this.parameters = parameters;
        _this.isReadyValue = false;
        if (Array.isArray(parameters) && parameters.length === 0) {
            _this.parameters = new ArrayOperand([]);
        }
        return _this;
    }
    FunctionOperand.prototype.getType = function () {
        return "function";
    };
    FunctionOperand.prototype.evaluateAsync = function (processValue) {
        var _this = this;
        this.isReadyValue = false;
        var asyncProcessValue = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_2__["ProcessValue"]();
        asyncProcessValue.values = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].createCopy(processValue.values);
        asyncProcessValue.properties = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].createCopy(processValue.properties);
        asyncProcessValue.properties.returnResult = function (result) {
            _this.asynResult = result;
            _this.isReadyValue = true;
            _this.onAsyncReady();
        };
        this.evaluateCore(asyncProcessValue);
    };
    FunctionOperand.prototype.evaluate = function (processValue) {
        if (this.isReady)
            return this.asynResult;
        return this.evaluateCore(processValue);
    };
    FunctionOperand.prototype.evaluateCore = function (processValue) {
        return _functionsfactory__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.run(this.originalValue, this.parameters.evaluate(processValue), processValue.properties);
    };
    FunctionOperand.prototype.toString = function (func) {
        if (func === void 0) { func = undefined; }
        if (!!func) {
            var res = func(this);
            if (!!res)
                return res;
        }
        return this.originalValue + "(" + this.parameters.toString(func) + ")";
    };
    FunctionOperand.prototype.setVariables = function (variables) {
        this.parameters.setVariables(variables);
    };
    Object.defineProperty(FunctionOperand.prototype, "isReady", {
        get: function () {
            return this.isReadyValue;
        },
        enumerable: false,
        configurable: true
    });
    FunctionOperand.prototype.hasFunction = function () {
        return true;
    };
    FunctionOperand.prototype.hasAsyncFunction = function () {
        return _functionsfactory__WEBPACK_IMPORTED_MODULE_1__["FunctionFactory"].Instance.isAsyncFunction(this.originalValue);
    };
    FunctionOperand.prototype.addToAsyncList = function (list) {
        if (this.hasAsyncFunction()) {
            list.push(this);
        }
    };
    FunctionOperand.prototype.isContentEqual = function (op) {
        var fOp = op;
        return fOp.originalValue == this.originalValue && this.areOperatorsEquals(fOp.parameters, this.parameters);
    };
    return FunctionOperand;
}(Operand));

var OperandMaker = /** @class */ (function () {
    function OperandMaker() {
    }
    OperandMaker.throwInvalidOperatorError = function (op) {
        throw new Error("Invalid operator: '" + op + "'");
    };
    OperandMaker.safeToString = function (operand, func) {
        return operand == null ? "" : operand.toString(func);
    };
    OperandMaker.toOperandString = function (value) {
        if (!!value &&
            !OperandMaker.isNumeric(value) &&
            !OperandMaker.isBooleanValue(value))
            value = "'" + value + "'";
        return value;
    };
    OperandMaker.isSpaceString = function (str) {
        return !!str && !str.replace(" ", "");
    };
    OperandMaker.isNumeric = function (value) {
        if (!!value &&
            (value.indexOf("-") > -1 ||
                value.indexOf("+") > 1 ||
                value.indexOf("*") > -1 ||
                value.indexOf("^") > -1 ||
                value.indexOf("/") > -1 ||
                value.indexOf("%") > -1))
            return false;
        if (OperandMaker.isSpaceString(value))
            return false;
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(value);
    };
    OperandMaker.isBooleanValue = function (value) {
        return (!!value &&
            (value.toLowerCase() === "true" || value.toLowerCase() === "false"));
    };
    OperandMaker.countDecimals = function (value) {
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(value) && Math.floor(value) !== value) {
            var strs = value.toString().split(".");
            return strs.length > 1 && strs[1].length || 0;
        }
        return 0;
    };
    OperandMaker.plusMinus = function (a, b, res) {
        var digitsA = OperandMaker.countDecimals(a);
        var digitsB = OperandMaker.countDecimals(b);
        if (digitsA > 0 || digitsB > 0) {
            var digits = Math.max(digitsA, digitsB);
            res = parseFloat(res.toFixed(digits));
        }
        return res;
    };
    OperandMaker.isTwoValueEquals = function (x, y) {
        if (x === "undefined")
            x = undefined;
        if (y === "undefined")
            y = undefined;
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(x, y, true);
    };
    OperandMaker.operatorToString = function (operatorName) {
        var opStr = OperandMaker.signs[operatorName];
        return opStr == null ? operatorName : opStr;
    };
    OperandMaker.unaryFunctions = {
        empty: function (value) {
            return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(value);
        },
        notempty: function (value) {
            return !OperandMaker.unaryFunctions.empty(value);
        },
        negate: function (value) {
            return !value;
        },
    };
    OperandMaker.binaryFunctions = {
        arithmeticOp: function (operatorName) {
            var convertForArithmeticOp = function (val, second) {
                if (!_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(val))
                    return val;
                if (typeof second === "number")
                    return 0;
                if (typeof val === "string")
                    return val;
                if (typeof second === "string")
                    return "";
                if (Array.isArray(second))
                    return [];
                return 0;
            };
            return function (a, b) {
                a = convertForArithmeticOp(a, b);
                b = convertForArithmeticOp(b, a);
                var consumer = OperandMaker.binaryFunctions[operatorName];
                return consumer == null ? null : consumer.call(this, a, b);
            };
        },
        and: function (a, b) {
            return a && b;
        },
        or: function (a, b) {
            return a || b;
        },
        plus: function (a, b) {
            return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].sumAnyValues(a, b);
        },
        minus: function (a, b) {
            return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].correctAfterPlusMinis(a, b, a - b);
        },
        mul: function (a, b) {
            return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].correctAfterMultiple(a, b, a * b);
        },
        div: function (a, b) {
            if (!b)
                return null;
            return a / b;
        },
        mod: function (a, b) {
            if (!b)
                return null;
            return a % b;
        },
        power: function (a, b) {
            return Math.pow(a, b);
        },
        greater: function (left, right) {
            if (left == null || right == null)
                return false;
            return left > right;
        },
        less: function (left, right) {
            if (left == null || right == null)
                return false;
            return left < right;
        },
        greaterorequal: function (left, right) {
            if (OperandMaker.binaryFunctions.equal(left, right))
                return true;
            return OperandMaker.binaryFunctions.greater(left, right);
        },
        lessorequal: function (left, right) {
            if (OperandMaker.binaryFunctions.equal(left, right))
                return true;
            return OperandMaker.binaryFunctions.less(left, right);
        },
        equal: function (left, right) {
            return OperandMaker.isTwoValueEquals(left, right);
        },
        notequal: function (left, right) {
            return !OperandMaker.binaryFunctions.equal(left, right);
        },
        contains: function (left, right) {
            return OperandMaker.binaryFunctions.containsCore(left, right, true);
        },
        notcontains: function (left, right) {
            if (!left && !_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(right))
                return true;
            return OperandMaker.binaryFunctions.containsCore(left, right, false);
        },
        anyof: function (left, right) {
            if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(left) && _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(right))
                return true;
            if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(left) ||
                (!Array.isArray(left) && left.length === 0))
                return false;
            if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(right))
                return true;
            if (!Array.isArray(left))
                return OperandMaker.binaryFunctions.contains(right, left);
            if (!Array.isArray(right))
                return OperandMaker.binaryFunctions.contains(left, right);
            for (var i = 0; i < right.length; i++) {
                if (OperandMaker.binaryFunctions.contains(left, right[i]))
                    return true;
            }
            return false;
        },
        allof: function (left, right) {
            if (!left && !_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(right))
                return false;
            if (!Array.isArray(right))
                return OperandMaker.binaryFunctions.contains(left, right);
            for (var i = 0; i < right.length; i++) {
                if (!OperandMaker.binaryFunctions.contains(left, right[i]))
                    return false;
            }
            return true;
        },
        containsCore: function (left, right, isContains) {
            if (!left && left !== 0 && left !== false)
                return false;
            if (!left.length) {
                left = left.toString();
                if (typeof right === "string" || right instanceof String) {
                    left = left.toUpperCase();
                    right = right.toUpperCase();
                }
            }
            if (typeof left === "string" || left instanceof String) {
                if (!right)
                    return false;
                right = right.toString();
                var found = left.indexOf(right) > -1;
                return isContains ? found : !found;
            }
            var rightArray = Array.isArray(right) ? right : [right];
            for (var rIndex = 0; rIndex < rightArray.length; rIndex++) {
                var i = 0;
                right = rightArray[rIndex];
                for (; i < left.length; i++) {
                    if (OperandMaker.isTwoValueEquals(left[i], right))
                        break;
                }
                if (i == left.length)
                    return !isContains;
            }
            return isContains;
        },
    };
    OperandMaker.signs = {
        less: "<",
        lessorequal: "<=",
        greater: ">",
        greaterorequal: ">=",
        equal: "==",
        notequal: "!=",
        plus: "+",
        minus: "-",
        mul: "*",
        div: "/",
        and: "and",
        or: "or",
        power: "^",
        mod: "%",
        negate: "!",
    };
    return OperandMaker;
}());



/***/ }),

/***/ "./src/flowpanel.ts":
/*!**************************!*\
  !*** ./src/flowpanel.ts ***!
  \**************************/
/*! exports provided: FlowPanelModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlowPanelModel", function() { return FlowPanelModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _panel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panel */ "./src/panel.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * The flow panel object. It is a container with flow layout where you can mix questions with markdown text.
 *
 */
var FlowPanelModel = /** @class */ (function (_super) {
    __extends(FlowPanelModel, _super);
    function FlowPanelModel(name) {
        if (name === void 0) { name = ""; }
        var _this = _super.call(this, name) || this;
        _this.createLocalizableString("content", _this, true);
        _this.registerPropertyChangedHandlers(["content"], function () {
            _this.onContentChanged();
        });
        return _this;
    }
    FlowPanelModel.prototype.getType = function () {
        return "flowpanel";
    };
    FlowPanelModel.prototype.getChildrenLayoutType = function () {
        return "flow";
    };
    FlowPanelModel.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        this.onContentChanged();
    };
    Object.defineProperty(FlowPanelModel.prototype, "content", {
        get: function () {
            return this.getLocalizableStringText("content");
        },
        set: function (val) {
            this.setLocalizableStringText("content", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlowPanelModel.prototype, "locContent", {
        get: function () {
            return this.getLocalizableString("content");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlowPanelModel.prototype, "html", {
        get: function () {
            return this.getPropertyValue("html", "");
        },
        set: function (val) {
            this.setPropertyValue("html", val);
        },
        enumerable: false,
        configurable: true
    });
    FlowPanelModel.prototype.onContentChanged = function () {
        var html = "";
        if (!!this.onCustomHtmlProducing) {
            html = this.onCustomHtmlProducing();
        }
        else {
            html = this.produceHtml();
        }
        this.html = html;
        if (!!this.contentChangedCallback)
            this.contentChangedCallback();
    };
    FlowPanelModel.prototype.produceHtml = function () {
        var html = [];
        //contentElementNamePrefix
        var regEx = /{(.*?(element:)[^$].*?)}/g;
        var str = this.content;
        var startIndex = 0;
        var res = null;
        while ((res = regEx.exec(str)) !== null) {
            if (res.index > startIndex) {
                html.push(str.substring(startIndex, res.index));
                startIndex = res.index;
            }
            var question = this.getQuestionFromText(res[0]);
            if (!!question) {
                html.push(this.getHtmlForQuestion(question));
            }
            else {
                html.push(str.substring(startIndex, res.index + res[0].length));
            }
            startIndex = res.index + res[0].length;
        }
        if (startIndex < str.length) {
            html.push(str.substring(startIndex, str.length));
        }
        return html.join("").replace(new RegExp("<br>", "g"), "<br/>");
    };
    FlowPanelModel.prototype.getQuestionFromText = function (str) {
        str = str.substring(1, str.length - 1);
        str = str.replace(FlowPanelModel.contentElementNamePrefix, "").trim();
        return this.getQuestionByName(str);
    };
    FlowPanelModel.prototype.getHtmlForQuestion = function (question) {
        if (!!this.onGetHtmlForQuestion)
            return this.onGetHtmlForQuestion(question);
        return "";
    };
    FlowPanelModel.prototype.getQuestionHtmlId = function (question) {
        return this.name + "_" + question.id;
    };
    FlowPanelModel.prototype.onAddElement = function (element, index) {
        _super.prototype.onAddElement.call(this, element, index);
        this.addElementToContent(element);
        element.renderWidth = "";
    };
    FlowPanelModel.prototype.onRemoveElement = function (element) {
        var searchStr = this.getElementContentText(element);
        this.content = this.content.replace(searchStr, "");
        _super.prototype.onRemoveElement.call(this, element);
    };
    FlowPanelModel.prototype.dragDropMoveElement = function (src, target, targetIndex) { };
    FlowPanelModel.prototype.addElementToContent = function (element) {
        if (this.isLoadingFromJson)
            return;
        var text = this.getElementContentText(element);
        if (!this.insertTextAtCursor(text)) {
            this.content = this.content + text;
        }
    };
    FlowPanelModel.prototype.insertTextAtCursor = function (text, prevName) {
        if (prevName === void 0) { prevName = null; }
        if (!this.isDesignMode ||
            typeof document === "undefined" ||
            !window.getSelection)
            return false;
        var sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
            var range = sel.getRangeAt(0);
            range.deleteContents();
            range.insertNode(document.createTextNode(text));
            var self = this;
            if (self.getContent) {
                var str = self.getContent(prevName);
                this.content = str;
            }
            return true;
        }
        return false;
    };
    FlowPanelModel.prototype.getElementContentText = function (element) {
        return "{" + FlowPanelModel.contentElementNamePrefix + element.name + "}";
    };
    FlowPanelModel.contentElementNamePrefix = "element:";
    return FlowPanelModel;
}(_panel__WEBPACK_IMPORTED_MODULE_1__["PanelModel"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("flowpanel", [{ name: "content:html", serializationProperty: "locContent" }], function () {
    return new FlowPanelModel();
}, "panel");


/***/ }),

/***/ "./src/functionsfactory.ts":
/*!*********************************!*\
  !*** ./src/functionsfactory.ts ***!
  \*********************************/
/*! exports provided: FunctionFactory, registerFunction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionFactory", function() { return FunctionFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerFunction", function() { return registerFunction; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");


var FunctionFactory = /** @class */ (function () {
    function FunctionFactory() {
        this.functionHash = {};
        this.isAsyncHash = {};
    }
    FunctionFactory.prototype.register = function (name, func, isAsync) {
        if (isAsync === void 0) { isAsync = false; }
        this.functionHash[name] = func;
        if (isAsync)
            this.isAsyncHash[name] = true;
    };
    FunctionFactory.prototype.unregister = function (name) {
        delete this.functionHash[name];
        delete this.isAsyncHash[name];
    };
    FunctionFactory.prototype.hasFunction = function (name) {
        return !!this.functionHash[name];
    };
    FunctionFactory.prototype.isAsyncFunction = function (name) {
        return !!this.isAsyncHash[name];
    };
    FunctionFactory.prototype.clear = function () {
        this.functionHash = {};
    };
    FunctionFactory.prototype.getAll = function () {
        var result = [];
        for (var key in this.functionHash) {
            result.push(key);
        }
        return result.sort();
    };
    FunctionFactory.prototype.run = function (name, params, properties) {
        if (properties === void 0) { properties = null; }
        var func = this.functionHash[name];
        if (!func)
            return null;
        var classRunner = {
            func: func,
        };
        if (properties) {
            for (var key in properties) {
                classRunner[key] = properties[key];
            }
        }
        return classRunner.func(params);
    };
    FunctionFactory.Instance = new FunctionFactory();
    return FunctionFactory;
}());

var registerFunction = FunctionFactory.Instance.register;
function getParamsAsArray(value, arr) {
    if (value === undefined || value === null)
        return;
    if (Array.isArray(value)) {
        for (var i = 0; i < value.length; i++) {
            getParamsAsArray(value[i], arr);
        }
    }
    else {
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(value)) {
            value = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].getNumber(value);
        }
        arr.push(value);
    }
}
function sum(params) {
    var arr = [];
    getParamsAsArray(params, arr);
    var res = 0;
    for (var i = 0; i < arr.length; i++) {
        res = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].correctAfterPlusMinis(res, arr[i], res + arr[i]);
    }
    return res;
}
FunctionFactory.Instance.register("sum", sum);
function min_max(params, isMin) {
    var arr = [];
    getParamsAsArray(params, arr);
    var res = undefined;
    for (var i = 0; i < arr.length; i++) {
        if (res === undefined) {
            res = arr[i];
        }
        if (isMin) {
            if (res > arr[i])
                res = arr[i];
        }
        else {
            if (res < arr[i])
                res = arr[i];
        }
    }
    return res;
}
function min(params) {
    return min_max(params, true);
}
FunctionFactory.Instance.register("min", min);
function max(params) {
    return min_max(params, false);
}
FunctionFactory.Instance.register("max", max);
function count(params) {
    var arr = [];
    getParamsAsArray(params, arr);
    return arr.length;
}
FunctionFactory.Instance.register("count", count);
function avg(params) {
    var arr = [];
    getParamsAsArray(params, arr);
    var res = sum(params);
    return arr.length > 0 ? res / arr.length : 0;
}
FunctionFactory.Instance.register("avg", avg);
function getInArrayParams(params) {
    if (params.length != 2)
        return null;
    var arr = params[0];
    if (!arr)
        return null;
    if (!Array.isArray(arr) && !Array.isArray(Object.keys(arr)))
        return null;
    var name = params[1];
    if (typeof name !== "string" && !(name instanceof String))
        return null;
    return { data: arr, name: name };
}
function convertToNumber(val) {
    if (typeof val === "string")
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(val) ? _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].getNumber(val) : undefined;
    return val;
}
function processItemInArray(item, name, res, func, needToConvert) {
    if (!item || _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(item[name]))
        return res;
    var val = needToConvert ? convertToNumber(item[name]) : 1;
    return func(res, val);
}
function calcInArray(params, func, needToConvert) {
    if (needToConvert === void 0) { needToConvert = true; }
    var v = getInArrayParams(params);
    if (!v)
        return undefined;
    var res = undefined;
    if (Array.isArray(v.data)) {
        for (var i = 0; i < v.data.length; i++) {
            res = processItemInArray(v.data[i], v.name, res, func, needToConvert);
        }
    }
    else {
        for (var key in v.data) {
            res = processItemInArray(v.data[key], v.name, res, func, needToConvert);
        }
    }
    return res;
}
function sumInArray(params) {
    var res = calcInArray(params, function (res, val) {
        if (res == undefined)
            res = 0;
        if (val == undefined || val == null)
            return res;
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].correctAfterPlusMinis(res, val, res + val);
    });
    return res !== undefined ? res : 0;
}
FunctionFactory.Instance.register("sumInArray", sumInArray);
function minInArray(params) {
    return calcInArray(params, function (res, val) {
        if (res == undefined)
            return val;
        if (val == undefined || val == null)
            return res;
        return res < val ? res : val;
    });
}
FunctionFactory.Instance.register("minInArray", minInArray);
function maxInArray(params) {
    return calcInArray(params, function (res, val) {
        if (res == undefined)
            return val;
        if (val == undefined || val == null)
            return res;
        return res > val ? res : val;
    });
}
FunctionFactory.Instance.register("maxInArray", maxInArray);
function countInArray(params) {
    var res = calcInArray(params, function (res, val) {
        if (res == undefined)
            res = 0;
        if (val == undefined || val == null)
            return res;
        return res + 1;
    }, false);
    return res !== undefined ? res : 0;
}
FunctionFactory.Instance.register("countInArray", countInArray);
function avgInArray(params) {
    var count = countInArray(params);
    if (count == 0)
        return 0;
    return sumInArray(params) / count;
}
FunctionFactory.Instance.register("avgInArray", avgInArray);
function iif(params) {
    if (!params && params.length !== 3)
        return "";
    return params[0] ? params[1] : params[2];
}
FunctionFactory.Instance.register("iif", iif);
function getDate(params) {
    if (!params && params.length < 1)
        return null;
    if (!params[0])
        return null;
    return new Date(params[0]);
}
FunctionFactory.Instance.register("getDate", getDate);
function age(params) {
    if (!params && params.length < 1)
        return null;
    if (!params[0])
        return null;
    var birthDate = new Date(params[0]);
    var today = new Date();
    var age = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age -= age > 0 ? 1 : 0;
    }
    return age;
}
FunctionFactory.Instance.register("age", age);
function isContainerReadyCore(container) {
    if (!container)
        return false;
    var questions = container.questions;
    for (var i = 0; i < questions.length; i++) {
        if (!questions[i].validate(false))
            return false;
    }
    return true;
}
function isContainerReady(params) {
    if (!params && params.length < 1)
        return false;
    if (!params[0] || !this.survey)
        return false;
    var name = params[0];
    var container = this.survey.getPageByName(name);
    if (!container)
        container = this.survey.getPanelByName(name);
    if (!container) {
        var question = this.survey.getQuestionByName(name);
        if (!question || !Array.isArray(question.panels))
            return false;
        if (params.length > 1) {
            if (params[1] < question.panels.length) {
                container = question.panels[params[1]];
            }
        }
        else {
            for (var i = 0; i < question.panels.length; i++) {
                if (!isContainerReadyCore(question.panels[i]))
                    return false;
            }
            return true;
        }
    }
    return isContainerReadyCore(container);
}
FunctionFactory.Instance.register("isContainerReady", isContainerReady);
function isDisplayMode() {
    return this.survey && this.survey.isDisplayMode;
}
FunctionFactory.Instance.register("isDisplayMode", isDisplayMode);
function currentDate() {
    return new Date();
}
FunctionFactory.Instance.register("currentDate", currentDate);
function today(params) {
    var res = new Date();
    if (_settings__WEBPACK_IMPORTED_MODULE_1__["settings"].useLocalTimeZone) {
        res.setHours(0, 0, 0, 0);
    }
    else {
        res.setUTCHours(0, 0, 0, 0);
    }
    if (Array.isArray(params) && params.length == 1) {
        res.setDate(res.getDate() + params[0]);
    }
    return res;
}
FunctionFactory.Instance.register("today", today);
function getYear(params) {
    if (params.length !== 1 || !params[0])
        return undefined;
    return new Date(params[0]).getFullYear();
}
FunctionFactory.Instance.register("getYear", getYear);
function currentYear() {
    return new Date().getFullYear();
}
FunctionFactory.Instance.register("currentYear", currentYear);
function diffDays(params) {
    if (!Array.isArray(params) || params.length !== 2)
        return 0;
    if (!params[0] || !params[1])
        return 0;
    var date1 = new Date(params[0]);
    var date2 = new Date(params[1]);
    var diffTime = Math.abs(date2 - date1);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}
FunctionFactory.Instance.register("diffDays", diffDays);


/***/ }),

/***/ "./src/helpers.ts":
/*!************************!*\
  !*** ./src/helpers.ts ***!
  \************************/
/*! exports provided: Helpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Helpers", function() { return Helpers; });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");

var Helpers = /** @class */ (function () {
    function Helpers() {
    }
    /**
     * A static methods that returns true if a value undefined, null, empty string or empty array.
     * @param value
     */
    Helpers.isValueEmpty = function (value) {
        if (Array.isArray(value) && value.length === 0)
            return true;
        if (!!value && typeof value === "object" && value.constructor === Object) {
            for (var key in value) {
                if (!Helpers.isValueEmpty(value[key]))
                    return false;
            }
            return true;
        }
        return !value && value !== 0 && value !== false;
    };
    Helpers.isArrayContainsEqual = function (x, y) {
        if (!Array.isArray(x) || !Array.isArray(y))
            return false;
        if (x.length !== y.length)
            return false;
        for (var i = 0; i < x.length; i++) {
            var j = 0;
            for (; j < y.length; j++) {
                if (Helpers.isTwoValueEquals(x[i], y[j]))
                    break;
            }
            if (j === y.length)
                return false;
        }
        return true;
    };
    Helpers.isArraysEqual = function (x, y, ignoreOrder, caseSensitive, trimStrings) {
        if (ignoreOrder === void 0) { ignoreOrder = false; }
        if (!Array.isArray(x) || !Array.isArray(y))
            return false;
        if (x.length !== y.length)
            return false;
        if (ignoreOrder) {
            var xSorted = [];
            var ySorted = [];
            for (var i = 0; i < x.length; i++) {
                xSorted.push(x[i]);
                ySorted.push(y[i]);
            }
            xSorted.sort();
            ySorted.sort();
            x = xSorted;
            y = ySorted;
        }
        for (var i = 0; i < x.length; i++) {
            if (!Helpers.isTwoValueEquals(x[i], y[i], ignoreOrder, caseSensitive, trimStrings))
                return false;
        }
        return true;
    };
    Helpers.isTwoValueEquals = function (x, y, ignoreOrder, caseSensitive, trimStrings) {
        if (ignoreOrder === void 0) { ignoreOrder = false; }
        if (x === y)
            return true;
        if (Array.isArray(x) && x.length === 0 && typeof y === "undefined")
            return true;
        if (Array.isArray(y) && y.length === 0 && typeof x === "undefined")
            return true;
        if ((x === undefined || x === null) && y === "")
            return true;
        if ((y === undefined || y === null) && x === "")
            return true;
        if (trimStrings === undefined)
            trimStrings = _settings__WEBPACK_IMPORTED_MODULE_0__["settings"].comparator.trimStrings;
        if (caseSensitive === undefined)
            caseSensitive = _settings__WEBPACK_IMPORTED_MODULE_0__["settings"].comparator.caseSensitive;
        if (typeof x === "string" && typeof y === "string") {
            if (trimStrings) {
                x = x.trim();
                y = y.trim();
            }
            if (!caseSensitive) {
                x = x.toLowerCase();
                y = y.toLowerCase();
            }
            return x === y;
        }
        if (x instanceof Date && y instanceof Date)
            return x.getTime() == y.getTime();
        if (Helpers.isConvertibleToNumber(x) && Helpers.isConvertibleToNumber(y)) {
            if (parseInt(x) === parseInt(y) && parseFloat(x) === parseFloat(y)) {
                return true;
            }
        }
        if ((!Helpers.isValueEmpty(x) && Helpers.isValueEmpty(y)) ||
            (Helpers.isValueEmpty(x) && !Helpers.isValueEmpty(y)))
            return false;
        if ((x === true || x === false) && typeof y == "string") {
            return x.toString() === y.toLocaleLowerCase();
        }
        if ((y === true || y === false) && typeof x == "string") {
            return y.toString() === x.toLocaleLowerCase();
        }
        if (!(x instanceof Object) && !(y instanceof Object))
            return x == y;
        if (!(x instanceof Object) || !(y instanceof Object))
            return false;
        if (x["equals"])
            return x.equals(y);
        if (!!x.toJSON && !!y.toJSON && !!x.getType && !!y.getType) {
            if (x.isDiposed || y.isDiposed)
                return false;
            if (x.getType() !== y.getType())
                return false;
            if (!!x.name && x.name !== y.name)
                return false;
            return this.isTwoValueEquals(x.toJSON(), y.toJSON(), ignoreOrder, caseSensitive, trimStrings);
        }
        if (Array.isArray(x) && Array.isArray(y))
            return Helpers.isArraysEqual(x, y, ignoreOrder, caseSensitive, trimStrings);
        if (!!x.equalsTo && y.equalsTo)
            return x.equalsTo(y);
        for (var p in x) {
            if (!x.hasOwnProperty(p))
                continue;
            if (!y.hasOwnProperty(p))
                return false;
            if (!this.isTwoValueEquals(x[p], y[p], ignoreOrder, caseSensitive, trimStrings))
                return false;
        }
        for (p in y) {
            if (y.hasOwnProperty(p) && !x.hasOwnProperty(p))
                return false;
        }
        return true;
    };
    Helpers.randomizeArray = function (array) {
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    };
    Helpers.getUnbindValue = function (value) {
        if (!!value && value instanceof Object && !(value instanceof Date)) {
            //do not return the same object instance!!!
            return JSON.parse(JSON.stringify(value));
        }
        return value;
    };
    Helpers.createCopy = function (obj) {
        var res = {};
        if (!obj)
            return res;
        for (var key in obj) {
            res[key] = obj[key];
        }
        return res;
    };
    Helpers.isConvertibleToNumber = function (value) {
        return (value !== undefined &&
            value !== null &&
            !Array.isArray(value) &&
            !isNaN(value));
    };
    Helpers.isNumber = function (value) {
        return !isNaN(this.getNumber(value));
    };
    Helpers.getNumber = function (value) {
        if (typeof value == "string" &&
            !!value &&
            value.indexOf("0x") == 0 &&
            value.length > 32)
            return NaN;
        value = this.prepareStringToNumber(value);
        var res = parseFloat(value);
        if (isNaN(res) || !isFinite(value))
            return NaN;
        return res;
    };
    Helpers.prepareStringToNumber = function (val) {
        if (typeof val !== "string" || !val)
            return val;
        var i = val.indexOf(",");
        if (i > -1 && val.indexOf(",", i + 1) < 0) {
            return val.replace(",", ".");
        }
        return val;
    };
    Helpers.getMaxLength = function (maxLength, surveyLength) {
        if (maxLength < 0) {
            maxLength = surveyLength;
        }
        return maxLength > 0 ? maxLength : null;
    };
    Helpers.getRemainingCharacterCounterText = function (newValue, maxLength) {
        if (!maxLength || maxLength <= 0) {
            return "";
        }
        var value = newValue ? newValue.length : "0";
        return [value, maxLength].join("/");
    };
    Helpers.getNumberByIndex = function (index, startIndexStr) {
        if (index < 0)
            return "";
        var startIndex = 1;
        var prefix = "";
        var postfix = ".";
        var isNumeric = true;
        var strIndex = "A";
        var str = "";
        if (!!startIndexStr) {
            str = startIndexStr;
            var ind = str.length - 1;
            var hasDigit = false;
            for (var i = 0; i < str.length; i++) {
                if (Helpers.isCharDigit(str[i])) {
                    hasDigit = true;
                    break;
                }
            }
            var checkLetter = function () {
                return ((hasDigit && !Helpers.isCharDigit(str[ind])) ||
                    Helpers.isCharNotLetterAndDigit(str[ind]));
            };
            while (ind >= 0 && checkLetter())
                ind--;
            var newPostfix = "";
            if (ind < str.length - 1) {
                newPostfix = str.substring(ind + 1);
                str = str.substring(0, ind + 1);
            }
            ind = str.length - 1;
            while (ind >= 0) {
                if (checkLetter())
                    break;
                ind--;
                if (!hasDigit)
                    break;
            }
            strIndex = str.substring(ind + 1);
            prefix = str.substring(0, ind + 1);
            if (parseInt(strIndex))
                startIndex = parseInt(strIndex);
            else if (strIndex.length == 1)
                isNumeric = false;
            if (!!newPostfix || !!prefix) {
                postfix = newPostfix;
            }
        }
        if (isNumeric) {
            var val = (index + startIndex).toString();
            while (val.length < strIndex.length)
                val = "0" + val;
            return prefix + val + postfix;
        }
        return (prefix + String.fromCharCode(strIndex.charCodeAt(0) + index) + postfix);
    };
    Helpers.isCharNotLetterAndDigit = function (ch) {
        return ch.toUpperCase() == ch.toLowerCase() && !Helpers.isCharDigit(ch);
    };
    Helpers.isCharDigit = function (ch) {
        return ch >= "0" && ch <= "9";
    };
    Helpers.countDecimals = function (value) {
        if (Helpers.isNumber(value) && Math.floor(value) !== value) {
            var strs = value.toString().split(".");
            return strs.length > 1 && strs[1].length || 0;
        }
        return 0;
    };
    Helpers.correctAfterPlusMinis = function (a, b, res) {
        var digitsA = Helpers.countDecimals(a);
        var digitsB = Helpers.countDecimals(b);
        if (digitsA > 0 || digitsB > 0) {
            var digits = Math.max(digitsA, digitsB);
            res = parseFloat(res.toFixed(digits));
        }
        return res;
    };
    Helpers.sumAnyValues = function (a, b) {
        if (!Helpers.isNumber(a) || !Helpers.isNumber(b)) {
            if (Array.isArray(a) && Array.isArray(b))
                return [].concat(a).concat(b);
            if (Array.isArray(a) || Array.isArray(b)) {
                var arr = Array.isArray(a) ? a : b;
                var val = arr === a ? b : a;
                if (typeof val === "string") {
                    var str = arr.join(", ");
                    return arr === a ? str + val : val + str;
                }
                if (typeof val === "number") {
                    var res = 0;
                    for (var i = 0; i < arr.length; i++) {
                        if (typeof arr[i] === "number") {
                            res = Helpers.correctAfterPlusMinis(res, arr[i], res + arr[i]);
                        }
                    }
                    return Helpers.correctAfterPlusMinis(res, val, res + val);
                }
            }
            return a + b;
        }
        return Helpers.correctAfterPlusMinis(a, b, a + b);
    };
    Helpers.correctAfterMultiple = function (a, b, res) {
        var digits = Helpers.countDecimals(a) + Helpers.countDecimals(b);
        if (digits > 0) {
            res = parseFloat(res.toFixed(digits));
        }
        return res;
    };
    Helpers.convertArrayValueToObject = function (src, propName, dest) {
        if (dest === void 0) { dest = undefined; }
        var res = new Array();
        if (!src || !Array.isArray(src))
            return res;
        for (var i = 0; i < src.length; i++) {
            var item = void 0;
            if (Array.isArray(dest)) {
                item = Helpers.findObjByPropValue(dest, propName, src[i]);
            }
            if (!item) {
                item = {};
                item[propName] = src[i];
            }
            res.push(item);
        }
        return res;
    };
    Helpers.findObjByPropValue = function (arr, propName, val) {
        for (var i = 0; i < arr.length; i++) {
            if (Helpers.isTwoValueEquals(arr[i][propName], val))
                return arr[i];
        }
        return undefined;
    };
    Helpers.convertArrayObjectToValue = function (src, propName) {
        var res = new Array();
        if (!src || !Array.isArray(src))
            return res;
        for (var i = 0; i < src.length; i++) {
            var itemVal = !!src[i] ? src[i][propName] : undefined;
            if (!Helpers.isValueEmpty(itemVal))
                res.push(itemVal);
        }
        return res;
    };
    Helpers.convertDateToString = function (date) {
        var toStr = function (val) {
            if (val < 10)
                return "0" + val.toString();
            return val.toString();
        };
        return date.getFullYear() + "-" + toStr(date.getMonth() + 1) + "-" + toStr(date.getDate());
    };
    Helpers.convertDateTimeToString = function (date) {
        var toStr = function (val) {
            if (val < 10)
                return "0" + val.toString();
            return val.toString();
        };
        return this.convertDateToString(date) + " " + toStr(date.getHours()) + ":" + toStr(date.getMinutes());
    };
    Helpers.convertValToQuestionVal = function (val, inputType) {
        if (val instanceof Date) {
            if (inputType === "datetime")
                return Helpers.convertDateTimeToString(val);
            return Helpers.convertDateToString(val);
        }
        return val;
    };
    return Helpers;
}());

if (!String.prototype["format"]) {
    String.prototype["format"] = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != "undefined" ? args[number] : match;
        });
    };
}


/***/ }),

/***/ "./src/images sync \\.svg$":
/*!*********************************************!*\
  !*** ./src/images sync nonrecursive \.svg$ ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./ArrowDown_34x34.svg": "./src/images/ArrowDown_34x34.svg",
	"./ArrowLeft.svg": "./src/images/ArrowLeft.svg",
	"./ArrowRight.svg": "./src/images/ArrowRight.svg",
	"./Arrow_downGREY_10x10.svg": "./src/images/Arrow_downGREY_10x10.svg",
	"./ChooseFile.svg": "./src/images/ChooseFile.svg",
	"./Clear.svg": "./src/images/Clear.svg",
	"./DefaultFile.svg": "./src/images/DefaultFile.svg",
	"./Delete.svg": "./src/images/Delete.svg",
	"./Down_34x34.svg": "./src/images/Down_34x34.svg",
	"./Left.svg": "./src/images/Left.svg",
	"./ModernBooleanCheckChecked.svg": "./src/images/ModernBooleanCheckChecked.svg",
	"./ModernBooleanCheckInd.svg": "./src/images/ModernBooleanCheckInd.svg",
	"./ModernBooleanCheckUnchecked.svg": "./src/images/ModernBooleanCheckUnchecked.svg",
	"./ModernCheck.svg": "./src/images/ModernCheck.svg",
	"./ModernRadio.svg": "./src/images/ModernRadio.svg",
	"./More.svg": "./src/images/More.svg",
	"./ProgressButton.svg": "./src/images/ProgressButton.svg",
	"./ProgressButtonV2.svg": "./src/images/ProgressButtonV2.svg",
	"./RemoveFile.svg": "./src/images/RemoveFile.svg",
	"./Right.svg": "./src/images/Right.svg",
	"./SearchClear.svg": "./src/images/SearchClear.svg",
	"./TimerCircle.svg": "./src/images/TimerCircle.svg",
	"./V2Check.svg": "./src/images/V2Check.svg",
	"./V2Check_24x24.svg": "./src/images/V2Check_24x24.svg",
	"./V2DragElement_16x16.svg": "./src/images/V2DragElement_16x16.svg",
	"./clear_16x16.svg": "./src/images/clear_16x16.svg",
	"./collapseDetail.svg": "./src/images/collapseDetail.svg",
	"./expandDetail.svg": "./src/images/expandDetail.svg",
	"./no-image.svg": "./src/images/no-image.svg",
	"./rating-star-2.svg": "./src/images/rating-star-2.svg",
	"./rating-star.svg": "./src/images/rating-star.svg",
	"./search.svg": "./src/images/search.svg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/images sync \\.svg$";

/***/ }),

/***/ "./src/images/ArrowDown_34x34.svg":
/*!****************************************!*\
  !*** ./src/images/ArrowDown_34x34.svg ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 34 34\" xml:space=\"preserve\"><polygon class=\"st0\" points=\"12,16 14,14 17,17 20,14 22,16 17,21 \"></polygon></svg>"

/***/ }),

/***/ "./src/images/ArrowLeft.svg":
/*!**********************************!*\
  !*** ./src/images/ArrowLeft.svg ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15 8.99999H4.39998L8.69998 13.3L7.29998 14.7L0.599976 7.99999L7.29998 1.29999L8.69998 2.69999L4.39998 6.99999H15V8.99999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/ArrowRight.svg":
/*!***********************************!*\
  !*** ./src/images/ArrowRight.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1 6.99999H11.6L7.3 2.69999L8.7 1.29999L15.4 7.99999L8.7 14.7L7.3 13.3L11.6 8.99999H1V6.99999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/Arrow_downGREY_10x10.svg":
/*!*********************************************!*\
  !*** ./src/images/Arrow_downGREY_10x10.svg ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 10 10\" xml:space=\"preserve\"><polygon class=\"st0\" points=\"2,2 0,4 5,9 10,4 8,2 5,5 \"></polygon></svg>"

/***/ }),

/***/ "./src/images/ChooseFile.svg":
/*!***********************************!*\
  !*** ./src/images/ChooseFile.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22 9V7C22 5.9 21.1 5 20 5H12L10 3H4C2.9 3 2 3.9 2 5V9V10V21H22L24 9H22ZM4 5H9.2L10.6 6.4L11.2 7H12H20V9H4V5ZM20.3 19H4V11H21.6L20.3 19Z\"></path></svg>"

/***/ }),

/***/ "./src/images/Clear.svg":
/*!******************************!*\
  !*** ./src/images/Clear.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22.6 8.6L16.4 2.4C16 2 15.5 1.8 15 1.8C14.5 1.8 14 2 13.6 2.4L1.4 14.6C0.600003 15.4 0.600003 16.6 1.4 17.4L6 22H12L22.6 11.4C23.3 10.6 23.3 9.3 22.6 8.6ZM11.1 20H6.8L2.8 16L6.2 12.6L12.4 18.8L11.1 20ZM13.8 17.4L7.6 11.2L15 3.8L21.2 10L13.8 17.4ZM16 20H23V22H14L16 20Z\"></path></svg>"

/***/ }),

/***/ "./src/images/DefaultFile.svg":
/*!************************************!*\
  !*** ./src/images/DefaultFile.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 56 68\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_9011_41219)\"><path d=\"M54.83 10.83L45.17 1.17C44.7982 0.798664 44.357 0.504208 43.8714 0.303455C43.3858 0.102703 42.8654 -0.000411943 42.34 1.2368e-06H6C4.4087 1.2368e-06 2.88257 0.632142 1.75735 1.75736C0.632136 2.88258 0 4.4087 0 6V62C0 63.5913 0.632136 65.1174 1.75735 66.2426C2.88257 67.3679 4.4087 68 6 68H50C51.5913 68 53.1174 67.3679 54.2426 66.2426C55.3679 65.1174 56 63.5913 56 62V13.66C56.0004 13.1346 55.8973 12.6142 55.6965 12.1286C55.4958 11.643 55.2013 11.2018 54.83 10.83ZM44 2.83L53.17 12H48C46.9391 12 45.9217 11.5786 45.1716 10.8284C44.4214 10.0783 44 9.06087 44 8V2.83ZM54 62C54 63.0609 53.5786 64.0783 52.8284 64.8284C52.0783 65.5786 51.0609 66 50 66H6C4.93913 66 3.92172 65.5786 3.17157 64.8284C2.42142 64.0783 2 63.0609 2 62V6C2 4.93914 2.42142 3.92172 3.17157 3.17157C3.92172 2.42143 4.93913 2 6 2H42V8C42 9.5913 42.6321 11.1174 43.7574 12.2426C44.8826 13.3679 46.4087 14 48 14H54V62ZM14 24H42V26H14V24ZM14 30H42V32H14V30ZM14 36H42V38H14V36ZM14 42H42V44H14V42Z\" fill=\"#909090\"></path></g><defs><clipPath id=\"clip0_9011_41219\"><rect width=\"56\" height=\"68\" fill=\"white\"></rect></clipPath></defs></svg>"

/***/ }),

/***/ "./src/images/Delete.svg":
/*!*******************************!*\
  !*** ./src/images/Delete.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M22 4H20H16V2C16 0.9 15.1 0 14 0H10C8.9 0 8 0.9 8 2V4H4H2V6H4V20C4 21.1 4.9 22 6 22H18C19.1 22 20 21.1 20 20V6H22V4ZM10 2H14V4H10V2ZM18 20H6V6H8H16H18V20ZM14 8H16V18H14V8ZM11 8H13V18H11V8ZM8 8H10V18H8V8Z\"></path></svg>"

/***/ }),

/***/ "./src/images/Down_34x34.svg":
/*!***********************************!*\
  !*** ./src/images/Down_34x34.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 34 34\" xml:space=\"preserve\"><g><path class=\"st0\" d=\"M33,34H0V0h33c0.6,0,1,0.4,1,1v32C34,33.6,33.6,34,33,34z\"></path><polygon class=\"st1\" points=\"12,16 14,14 17,17 20,14 22,16 17,21 \"></polygon></g></svg>"

/***/ }),

/***/ "./src/images/Left.svg":
/*!*****************************!*\
  !*** ./src/images/Left.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 16 16\" xml:space=\"preserve\"><polygon points=\"11,12 9,14 3,8 9,2 11,4 7,8 \"></polygon></svg>"

/***/ }),

/***/ "./src/images/ModernBooleanCheckChecked.svg":
/*!**************************************************!*\
  !*** ./src/images/ModernBooleanCheckChecked.svg ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><polygon points=\"19,10 14,10 14,5 10,5 10,10 5,10 5,14 10,14 10,19 14,19 14,14 19,14 \"></polygon></svg>"

/***/ }),

/***/ "./src/images/ModernBooleanCheckInd.svg":
/*!**********************************************!*\
  !*** ./src/images/ModernBooleanCheckInd.svg ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><path d=\"M22,0H2C0.9,0,0,0.9,0,2v20c0,1.1,0.9,2,2,2h20c1.1,0,2-0.9,2-2V2C24,0.9,23.1,0,22,0z M21,18L6,3h15V18z M3,6l15,15H3V6z\"></path></svg>"

/***/ }),

/***/ "./src/images/ModernBooleanCheckUnchecked.svg":
/*!****************************************************!*\
  !*** ./src/images/ModernBooleanCheckUnchecked.svg ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 24 24\"><rect x=\"5\" y=\"10\" width=\"14\" height=\"4\"></rect></svg>"

/***/ }),

/***/ "./src/images/ModernCheck.svg":
/*!************************************!*\
  !*** ./src/images/ModernCheck.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\"><path d=\"M5,13l2-2l3,3l7-7l2,2l-9,9L5,13z\"></path></svg>"

/***/ }),

/***/ "./src/images/ModernRadio.svg":
/*!************************************!*\
  !*** ./src/images/ModernRadio.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"-12 -12 24 24\"><circle r=\"6\" cx=\"0\" cy=\"0\"></circle></svg>"

/***/ }),

/***/ "./src/images/More.svg":
/*!*****************************!*\
  !*** ./src/images/More.svg ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 12C6 13.1 5.1 14 4 14C2.9 14 2 13.1 2 12C2 10.9 2.9 10 4 10C5.1 10 6 10.9 6 12ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10ZM20 10C18.9 10 18 10.9 18 12C18 13.1 18.9 14 20 14C21.1 14 22 13.1 22 12C22 10.9 21.1 10 20 10Z\"></path></svg>"

/***/ }),

/***/ "./src/images/ProgressButton.svg":
/*!***************************************!*\
  !*** ./src/images/ProgressButton.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 10 10\"><polygon points=\"2,2 0,4 5,9 10,4 8,2 5,5 \"></polygon></svg>"

/***/ }),

/***/ "./src/images/ProgressButtonV2.svg":
/*!*****************************************!*\
  !*** ./src/images/ProgressButtonV2.svg ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\"><path d=\"M15 8.99999H4.39998L8.69998 13.3L7.29998 14.7L0.599976 7.99999L7.29998 1.29999L8.69998 2.69999L4.39998 6.99999H15V8.99999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/RemoveFile.svg":
/*!***********************************!*\
  !*** ./src/images/RemoveFile.svg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\"><path d=\"M8,2C4.7,2,2,4.7,2,8s2.7,6,6,6s6-2.7,6-6S11.3,2,8,2z M11,10l-1,1L8,9l-2,2l-1-1l2-2L5,6l1-1l2,2l2-2l1,1L9,8 L11,10z\"></path></svg>"

/***/ }),

/***/ "./src/images/Right.svg":
/*!******************************!*\
  !*** ./src/images/Right.svg ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 16 16\" xml:space=\"preserve\"><polygon points=\"5,4 7,2 13,8 7,14 5,12 9,8 \"></polygon></svg>"

/***/ }),

/***/ "./src/images/SearchClear.svg":
/*!************************************!*\
  !*** ./src/images/SearchClear.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.35 3.34999L12.65 2.64999L8.05002 7.24999L3.35002 2.64999L2.65002 3.34999L7.25002 8.04999L2.65002 12.65L3.35002 13.35L8.05002 8.74999L12.65 13.35L13.35 12.65L8.75002 8.04999L13.35 3.34999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/TimerCircle.svg":
/*!************************************!*\
  !*** ./src/images/TimerCircle.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 160 160\"><circle cx=\"80\" cy=\"80\" r=\"70\" style=\"stroke: var(--sd-timer-stroke-background-color); stroke-width: var(--sd-timer-stroke-background-width)\" stroke-dasharray=\"none\" stroke-dashoffset=\"none\"></circle><circle cx=\"80\" cy=\"80\" r=\"70\"></circle></svg>"

/***/ }),

/***/ "./src/images/V2Check.svg":
/*!********************************!*\
  !*** ./src/images/V2Check.svg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.00001 15.8L2.60001 10.4L4.00001 9L8.00001 13L16 5L17.4 6.4L8.00001 15.8Z\"></path></svg>"

/***/ }),

/***/ "./src/images/V2Check_24x24.svg":
/*!**************************************!*\
  !*** ./src/images/V2Check_24x24.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9 20.1L1 12L3.1 9.9L9 15.9L20.9 4L23 6.1L9 20.1Z\"></path></svg>"

/***/ }),

/***/ "./src/images/V2DragElement_16x16.svg":
/*!********************************************!*\
  !*** ./src/images/V2DragElement_16x16.svg ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2 4C2 3.73478 2.10536 3.48043 2.29289 3.29289C2.48043 3.10536 2.73478 3 3 3H13C13.2652 3 13.5196 3.10536 13.7071 3.29289C13.8946 3.48043 14 3.73478 14 4C14 4.26522 13.8946 4.51957 13.7071 4.70711C13.5196 4.89464 13.2652 5 13 5H3C2.73478 5 2.48043 4.89464 2.29289 4.70711C2.10536 4.51957 2 4.26522 2 4ZM13 7H3C2.73478 7 2.48043 7.10536 2.29289 7.29289C2.10536 7.48043 2 7.73478 2 8C2 8.26522 2.10536 8.51957 2.29289 8.70711C2.48043 8.89464 2.73478 9 3 9H13C13.2652 9 13.5196 8.89464 13.7071 8.70711C13.8946 8.51957 14 8.26522 14 8C14 7.73478 13.8946 7.48043 13.7071 7.29289C13.5196 7.10536 13.2652 7 13 7ZM13 11H3C2.73478 11 2.48043 11.1054 2.29289 11.2929C2.10536 11.4804 2 11.7348 2 12C2 12.2652 2.10536 12.5196 2.29289 12.7071C2.48043 12.8946 2.73478 13 3 13H13C13.2652 13 13.5196 12.8946 13.7071 12.7071C13.8946 12.5196 14 12.2652 14 12C14 11.7348 13.8946 11.4804 13.7071 11.2929C13.5196 11.1054 13.2652 11 13 11Z\"></path></svg>"

/***/ }),

/***/ "./src/images/clear_16x16.svg":
/*!************************************!*\
  !*** ./src/images/clear_16x16.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.35 3.34999L12.65 2.64999L8.05002 7.24999L3.35002 2.64999L2.65002 3.34999L7.25002 8.04999L2.65002 12.65L3.35002 13.35L8.05002 8.74999L12.65 13.35L13.35 12.65L8.75002 8.04999L13.35 3.34999Z\"></path></svg>"

/***/ }),

/***/ "./src/images/collapseDetail.svg":
/*!***************************************!*\
  !*** ./src/images/collapseDetail.svg ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 7H3V9H13V7Z\"></path></svg>"

/***/ }),

/***/ "./src/images/expandDetail.svg":
/*!*************************************!*\
  !*** ./src/images/expandDetail.svg ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 7H9V3H7V7H3V9H7V13H9V9H13V7Z\"></path></svg>"

/***/ }),

/***/ "./src/images/no-image.svg":
/*!*********************************!*\
  !*** ./src/images/no-image.svg ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 48 48\"><g opacity=\"0.5\"><path d=\"M14 17.01C14 16.4167 14.1759 15.8366 14.5056 15.3433C14.8352 14.8499 15.3038 14.4654 15.8519 14.2384C16.4001 14.0113 17.0033 13.9519 17.5853 14.0676C18.1672 14.1834 18.7018 14.4691 19.1213 14.8887C19.5409 15.3082 19.8266 15.8428 19.9424 16.4247C20.0581 17.0067 19.9987 17.6099 19.7716 18.1581C19.5446 18.7062 19.1601 19.1748 18.6667 19.5044C18.1734 19.8341 17.5933 20.01 17 20.01C16.2044 20.01 15.4413 19.6939 14.8787 19.1313C14.3161 18.5687 14 17.8056 14 17.01ZM27.09 24.14L20 36.01H36L27.09 24.14ZM36.72 8.14L35.57 10.01H36C36.5304 10.01 37.0391 10.2207 37.4142 10.5958C37.7893 10.9709 38 11.4796 38 12.01V36.01C38 36.5404 37.7893 37.0491 37.4142 37.4242C37.0391 37.7993 36.5304 38.01 36 38.01H18.77L17.57 40.01H36C37.0609 40.01 38.0783 39.5886 38.8284 38.8384C39.5786 38.0883 40 37.0709 40 36.01V12.01C39.9966 11.0765 39.6668 10.1737 39.0678 9.45778C38.4688 8.74188 37.6382 8.25802 36.72 8.09V8.14ZM36.86 4.5L12.86 44.5L11.14 43.5L13.23 40.01H12C10.9391 40.01 9.92172 39.5886 9.17157 38.8384C8.42143 38.0883 8 37.0709 8 36.01V12.01C8 10.9491 8.42143 9.93172 9.17157 9.18157C9.92172 8.43143 10.9391 8.01 12 8.01H32.43L35.14 3.5L36.86 4.5ZM14.43 38.01L15.63 36.01H12L19 27.01L20.56 27.8L31.23 10.01H12C11.4696 10.01 10.9609 10.2207 10.5858 10.5958C10.2107 10.9709 10 11.4796 10 12.01V36.01C10 36.5404 10.2107 37.0491 10.5858 37.4242C10.9609 37.7993 11.4696 38.01 12 38.01H14.43Z\"></path></g></svg>"

/***/ }),

/***/ "./src/images/rating-star-2.svg":
/*!**************************************!*\
  !*** ./src/images/rating-star-2.svg ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"M24 39.5057L11.7226 45.9839C10.4095 46.6739 8.87606 45.5622 9.12525 44.096L11.4734 30.373L1.54411 20.6556C0.480254 19.6207 1.06489 17.8095 2.53128 17.5986L16.2559 15.5957L22.3994 3.10891C23.0512 1.77685 24.9488 1.77685 25.6102 3.10891L31.7441 15.5957L45.4687 17.5986C46.9351 17.8095 47.5197 19.6207 46.4559 20.6556L36.5266 30.373L38.8748 44.096C39.1239 45.5622 37.5905 46.6835 36.2774 45.9839L24 39.5057Z\" fill=\"none\" stroke-width=\"2\"></path><path d=\"M24.4663 34.6154L24 34.3695L23.5336 34.6154L14.4788 39.389L16.2156 29.2691L16.3044 28.7517L15.9289 28.3848L8.57358 21.1966L18.7249 19.7094L19.245 19.6332L19.4772 19.1616L24 9.97413L28.5228 19.1616L28.755 19.6332L29.275 19.7094L39.4264 21.1966L32.0711 28.3848L31.6956 28.7517L31.7844 29.2691L33.5211 39.389L24.4663 34.6154Z\" stroke-width=\"2\"></path></g></svg>"

/***/ }),

/***/ "./src/images/rating-star.svg":
/*!************************************!*\
  !*** ./src/images/rating-star.svg ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"M24 39.5057L11.7226 45.9839C10.4095 46.6739 8.87606 45.5622 9.12525 44.096L11.4734 30.373L1.54411 20.6556C0.480254 19.6207 1.06489 17.8095 2.53128 17.5986L16.2559 15.5957L22.3994 3.10891C23.0512 1.77685 24.9488 1.77685 25.6102 3.10891L31.7441 15.5957L45.4687 17.5986C46.9351 17.8095 47.5197 19.6207 46.4559 20.6556L36.5266 30.373L38.8748 44.096C39.1239 45.5622 37.5905 46.6835 36.2774 45.9839L24 39.5057Z\" stroke-width=\"2\"></path></g></svg>"

/***/ }),

/***/ "./src/images/search.svg":
/*!*******************************!*\
  !*** ./src/images/search.svg ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 2C9.6 2 6 5.6 6 10C6 11.8 6.6 13.5 7.7 14.9L2.3 20.3C1.9 20.7 1.9 21.3 2.3 21.7C2.5 21.9 2.7 22 3 22C3.3 22 3.5 21.9 3.7 21.7L9.1 16.3C10.5 17.4 12.2 18 14 18C18.4 18 22 14.4 22 10C22 5.6 18.4 2 14 2ZM14 16C10.7 16 8 13.3 8 10C8 6.7 10.7 4 14 4C17.3 4 20 6.7 20 10C20 13.3 17.3 16 14 16Z\"></path></svg>"

/***/ }),

/***/ "./src/itemvalue.ts":
/*!**************************!*\
  !*** ./src/itemvalue.ts ***!
  \**************************/
/*! exports provided: ItemValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemValue", function() { return ItemValue; });
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./question_baseselect */ "./src/question_baseselect.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








/**
 * Array of ItemValue is used in checkox, dropdown and radiogroup choices, matrix columns and rows.
 * It has two main properties: value and text. If text is empty, value is used for displaying.
 * The text property is localizable and support markdown.
 */
var ItemValue = /** @class */ (function (_super) {
    __extends(ItemValue, _super);
    function ItemValue(value, text, typeName) {
        if (text === void 0) { text = null; }
        if (typeName === void 0) { typeName = "itemvalue"; }
        var _this = _super.call(this) || this;
        _this.typeName = typeName;
        _this.ownerPropertyName = "";
        _this.locTextValue = new _localizablestring__WEBPACK_IMPORTED_MODULE_0__["LocalizableString"](_this, true, "text");
        _this.locTextValue.onStrChanged = function (oldValue, newValue) {
            if (newValue == _this.value) {
                newValue = undefined;
            }
            _this.propertyValueChanged("text", oldValue, newValue);
        };
        _this.locTextValue.onGetTextCallback = function (txt) {
            return txt
                ? txt
                : !_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(_this.value)
                    ? _this.value.toString()
                    : null;
        };
        if (text)
            _this.locText.text = text;
        if (!!value && typeof value === "object") {
            _this.setData(value);
        }
        else {
            _this.value = value;
        }
        if (_this.getType() != "itemvalue") {
            _jsonobject__WEBPACK_IMPORTED_MODULE_1__["CustomPropertiesCollection"].createProperties(_this);
        }
        _this.data = _this;
        _this.onCreating();
        return _this;
    }
    ItemValue.prototype.getMarkdownHtml = function (text, name) {
        return !!this.locOwner ? this.locOwner.getMarkdownHtml(text, name) : undefined;
    };
    ItemValue.prototype.getRenderer = function (name) {
        return !!this.locOwner ? this.locOwner.getRenderer(name) : null;
    };
    ItemValue.prototype.getRendererContext = function (locStr) {
        return !!this.locOwner ? this.locOwner.getRendererContext(locStr) : locStr;
    };
    ItemValue.prototype.getProcessedText = function (text) {
        return this.locOwner ? this.locOwner.getProcessedText(text) : text;
    };
    Object.defineProperty(ItemValue, "Separator", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_5__["settings"].itemValueSeparator;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_5__["settings"].itemValueSeparator = val;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resets the input array and fills it with values from the values array
     */
    ItemValue.setData = function (items, values, type) {
        items.length = 0;
        for (var i = 0; i < values.length; i++) {
            var value = values[i];
            var itemType = !!value && typeof value.getType === "function" ? value.getType() : (type !== null && type !== void 0 ? type : "itemvalue");
            var item = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(itemType);
            item.setData(value);
            if (!!value.originalItem) {
                item.originalItem = value.originalItem;
            }
            items.push(item);
        }
    };
    ItemValue.getData = function (items) {
        var result = [];
        for (var i = 0; i < items.length; i++) {
            result.push(items[i].getData());
        }
        return result;
    };
    ItemValue.getItemByValue = function (items, val) {
        if (!Array.isArray(items))
            return null;
        var valIsEmpty = _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(val);
        for (var i = 0; i < items.length; i++) {
            if (valIsEmpty && _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(items[i].value))
                return items[i];
            if (_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(items[i].value, val, false, true, false))
                return items[i];
        }
        return null;
    };
    ItemValue.getTextOrHtmlByValue = function (items, val) {
        var item = ItemValue.getItemByValue(items, val);
        return item !== null ? item.locText.textOrHtml : "";
    };
    ItemValue.locStrsChanged = function (items) {
        for (var i = 0; i < items.length; i++) {
            items[i].locStrsChanged();
        }
    };
    ItemValue.runConditionsForItems = function (items, filteredItems, runner, values, properties, useItemExpression, onItemCallBack) {
        if (useItemExpression === void 0) { useItemExpression = true; }
        return ItemValue.runConditionsForItemsCore(items, filteredItems, runner, values, properties, true, useItemExpression, onItemCallBack);
    };
    ItemValue.runEnabledConditionsForItems = function (items, runner, values, properties, onItemCallBack) {
        return ItemValue.runConditionsForItemsCore(items, null, runner, values, properties, false, true, onItemCallBack);
    };
    ItemValue.runConditionsForItemsCore = function (items, filteredItems, runner, values, properties, isVisible, useItemExpression, onItemCallBack) {
        if (useItemExpression === void 0) { useItemExpression = true; }
        if (!values) {
            values = {};
        }
        var itemValue = values["item"];
        var choiceValue = values["choice"];
        var hasChanded = false;
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            values["item"] = item.value;
            values["choice"] = item.value;
            var itemRunner = useItemExpression && !!item.getConditionRunner
                ? item.getConditionRunner(isVisible)
                : false;
            if (!itemRunner) {
                itemRunner = runner;
            }
            var newValue = true;
            if (itemRunner) {
                newValue = itemRunner.run(values, properties);
            }
            if (!!onItemCallBack) {
                newValue = onItemCallBack(item, newValue);
            }
            if (!!filteredItems && newValue) {
                filteredItems.push(item);
            }
            var oldValue = isVisible ? item.isVisible : item.isEnabled;
            if (newValue != oldValue) {
                hasChanded = true;
                if (isVisible) {
                    if (!!item.setIsVisible)
                        item.setIsVisible(newValue);
                }
                else {
                    if (!!item.setIsEnabled)
                        item.setIsEnabled(newValue);
                }
            }
        }
        if (itemValue) {
            values["item"] = itemValue;
        }
        else {
            delete values["item"];
        }
        if (choiceValue) {
            values["choice"] = choiceValue;
        }
        else {
            delete values["choice"];
        }
        return hasChanded;
    };
    ItemValue.prototype.onCreating = function () { };
    ItemValue.prototype.getType = function () {
        return !!this.typeName ? this.typeName : "itemvalue";
    };
    ItemValue.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        return !!this.locOwner && !!this.locOwner["getSurvey"]
            ? this.locOwner.getSurvey()
            : null;
    };
    ItemValue.prototype.getLocale = function () {
        return !!this.locOwner && this.locOwner.getLocale ? this.locOwner.getLocale() : "";
    };
    Object.defineProperty(ItemValue.prototype, "locText", {
        get: function () {
            return this.locTextValue;
        },
        enumerable: false,
        configurable: true
    });
    ItemValue.prototype.setLocText = function (locText) {
        this.locTextValue = locText;
    };
    Object.defineProperty(ItemValue.prototype, "locOwner", {
        get: function () {
            return this._locOwner;
        },
        set: function (value) {
            this._locOwner = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "value", {
        get: function () {
            return this.getPropertyValue("value");
        },
        set: function (newValue) {
            var text = undefined;
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(newValue)) {
                var str = newValue.toString();
                var index = str.indexOf(_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].itemValueSeparator);
                if (index > -1) {
                    newValue = str.slice(0, index);
                    text = str.slice(index + 1);
                }
            }
            this.setPropertyValue("value", newValue);
            if (!!text) {
                this.text = text;
            }
            this.id = this.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "hasText", {
        get: function () {
            return this.locText.pureText ? true : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "pureText", {
        get: function () {
            return this.locText.pureText;
        },
        set: function (val) {
            this.text = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "text", {
        get: function () {
            return this.locText.calculatedText; //TODO: it will be correct to use this.locText.text, however it would require a lot of rewriting in Creator
        },
        set: function (newText) {
            this.locText.text = newText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "calculatedText", {
        get: function () {
            return this.locText.calculatedText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "shortcutText", {
        get: function () {
            return this.text;
        },
        enumerable: false,
        configurable: true
    });
    ItemValue.prototype.canSerializeValue = function () {
        var val = this.value;
        if (val === undefined || val === null)
            return false;
        return !Array.isArray(val) && typeof val !== "object";
    };
    ItemValue.prototype.getData = function () {
        var json = this.toJSON();
        if (!!json["value"] && !!json["value"]["pos"]) {
            delete json["value"]["pos"];
        }
        if (_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(json.value))
            return json;
        var canSerializeVal = this.canSerializeValue();
        var canSerializeAsContant = !canSerializeVal || !_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].itemValueAlwaysSerializeAsObject && !_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].itemValueAlwaysSerializeText;
        if (canSerializeAsContant && Object.keys(json).length == 1)
            return this.value;
        if (_settings__WEBPACK_IMPORTED_MODULE_5__["settings"].itemValueAlwaysSerializeText && json.text === undefined && canSerializeVal) {
            json.text = this.value.toString();
        }
        return json;
    };
    ItemValue.prototype.toJSON = function () {
        var res = {};
        var properties = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getProperties(this.getType());
        if (!properties || properties.length == 0) {
            properties = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getProperties("itemvalue");
        }
        var jsoObj = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]();
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            if (prop.name === "text" && !this.locText.hasNonDefaultText() &&
                _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(this.value, this.text, false, true, false))
                continue;
            jsoObj.valueToJson(this, res, prop);
        }
        return res;
    };
    ItemValue.prototype.setData = function (value) {
        if (_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(value))
            return;
        if (typeof value.value === "undefined" && typeof value.text !== "undefined" && Object.keys(value).length === 1) {
            value.value = value.text;
        }
        if (typeof value.value !== "undefined") {
            var json = void 0;
            if (typeof value.toJSON === "function") {
                json = value.toJSON();
            }
            else {
                json = value;
            }
            new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, this);
        }
        else {
            this.value = value;
        }
        this.locText.strChanged();
    };
    Object.defineProperty(ItemValue.prototype, "visibleIf", {
        get: function () {
            return this.getPropertyValue("visibleIf", "");
        },
        set: function (val) {
            this.setPropertyValue("visibleIf", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "enableIf", {
        get: function () {
            return this.getPropertyValue("enableIf", "");
        },
        set: function (val) {
            this.setPropertyValue("enableIf", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ItemValue.prototype, "isVisible", {
        get: function () {
            return this.getPropertyValue("isVisible", true);
        },
        enumerable: false,
        configurable: true
    });
    ItemValue.prototype.setIsVisible = function (val) {
        this.setPropertyValue("isVisible", val);
    };
    Object.defineProperty(ItemValue.prototype, "isEnabled", {
        get: function () {
            return this.getPropertyValue("isEnabled", true);
        },
        enumerable: false,
        configurable: true
    });
    ItemValue.prototype.setIsEnabled = function (val) {
        this.setPropertyValue("isEnabled", val);
    };
    ItemValue.prototype.addUsedLocales = function (locales) {
        this.AddLocStringToUsedLocales(this.locTextValue, locales);
    };
    ItemValue.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.locText.strChanged();
    };
    ItemValue.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        if (name === "value" && !this.hasText) {
            this.locText.strChanged();
        }
        var funcName = "itemValuePropertyChanged";
        if (!this.locOwner || !this.locOwner[funcName])
            return;
        this.locOwner[funcName](this, name, oldValue, newValue);
    };
    ItemValue.prototype.getConditionRunner = function (isVisible) {
        if (isVisible)
            return this.getVisibleConditionRunner();
        return this.getEnableConditionRunner();
    };
    ItemValue.prototype.getVisibleConditionRunner = function () {
        if (!this.visibleIf)
            return null;
        if (!this.visibleConditionRunner)
            this.visibleConditionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_3__["ConditionRunner"](this.visibleIf);
        this.visibleConditionRunner.expression = this.visibleIf;
        return this.visibleConditionRunner;
    };
    ItemValue.prototype.getEnableConditionRunner = function () {
        if (!this.enableIf)
            return null;
        if (!this.enableConditionRunner)
            this.enableConditionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_3__["ConditionRunner"](this.enableIf);
        this.enableConditionRunner.expression = this.enableIf;
        return this.enableConditionRunner;
    };
    Object.defineProperty(ItemValue.prototype, "selected", {
        get: function () {
            var _this = this;
            if (this._locOwner instanceof _question_baseselect__WEBPACK_IMPORTED_MODULE_7__["QuestionSelectBase"] && this.selectedValue === undefined) {
                this.selectedValue = (new _base__WEBPACK_IMPORTED_MODULE_4__["ComputedUpdater"](function () { return _this._locOwner.isItemSelected(_this); }));
            }
            return this.selectedValue;
        },
        enumerable: false,
        configurable: true
    });
    ItemValue.prototype.getComponent = function () {
        if (this._locOwner instanceof _question_baseselect__WEBPACK_IMPORTED_MODULE_7__["QuestionSelectBase"]) {
            return this.componentValue || this._locOwner.itemComponent;
        }
        return "";
    };
    ItemValue.prototype.setComponent = function (val) {
        this.componentValue = val;
    };
    ItemValue.prototype.getEnabled = function () {
        return this.isEnabled;
    };
    ItemValue.prototype.setEnabled = function (val) {
        this.setIsEnabled(val);
    };
    ItemValue.prototype.getVisible = function () {
        var isVisible = this.isVisible === undefined ? true : this.isVisible;
        var visible = this._visible === undefined ? true : this._visible;
        return isVisible && visible;
    };
    ItemValue.prototype.setVisible = function (val) {
        this._visible = val;
    };
    ItemValue.prototype.getLocTitle = function () {
        return this.locText;
    };
    ItemValue.prototype.getTitle = function () {
        return this.text;
    };
    ItemValue.prototype.setLocTitle = function (val) { };
    ItemValue.prototype.setTitle = function (val) { };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], ItemValue.prototype, "_visible", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], ItemValue.prototype, "selectedValue", void 0);
    return ItemValue;
}(_actions_action__WEBPACK_IMPORTED_MODULE_6__["BaseAction"]));

_base__WEBPACK_IMPORTED_MODULE_4__["Base"].createItemValue = function (source, type) {
    var item = null;
    if (!!type) {
        item = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"].metaData.createClass(type, {});
    }
    else if (typeof source.getType === "function") {
        item = new ItemValue(null, undefined, source.getType());
    }
    else {
        item = new ItemValue(null);
    }
    item.setData(source);
    return item;
};
_base__WEBPACK_IMPORTED_MODULE_4__["Base"].itemValueLocStrChanged = function (arr) {
    ItemValue.locStrsChanged(arr);
};
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObjectProperty"].getItemValuesDefaultValue = function (val, type) {
    var res = new Array();
    ItemValue.setData(res, Array.isArray(val) ? val : [], type);
    return res;
};
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("itemvalue", [
    "!value",
    {
        name: "text",
        serializationProperty: "locText",
    },
    { name: "visibleIf:condition", showMode: "form" },
    {
        name: "enableIf:condition",
        showMode: "form",
        visibleIf: function (obj) {
            return !obj || obj.ownerPropertyName !== "rateValues";
        },
    },
], function (value) { return new ItemValue(value); });


/***/ }),

/***/ "./src/jsonobject.ts":
/*!***************************!*\
  !*** ./src/jsonobject.ts ***!
  \***************************/
/*! exports provided: property, propertyArray, JsonObjectProperty, CustomPropertiesCollection, JsonMetadataClass, JsonMetadata, JsonError, JsonUnknownPropertyError, JsonMissingTypeErrorBase, JsonMissingTypeError, JsonIncorrectTypeError, JsonRequiredPropertyError, JsonObject, Serializer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "property", function() { return property; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "propertyArray", function() { return propertyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonObjectProperty", function() { return JsonObjectProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomPropertiesCollection", function() { return CustomPropertiesCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonMetadataClass", function() { return JsonMetadataClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonMetadata", function() { return JsonMetadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonError", function() { return JsonError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonUnknownPropertyError", function() { return JsonUnknownPropertyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeErrorBase", function() { return JsonMissingTypeErrorBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonMissingTypeError", function() { return JsonMissingTypeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonIncorrectTypeError", function() { return JsonIncorrectTypeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonRequiredPropertyError", function() { return JsonRequiredPropertyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonObject", function() { return JsonObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return Serializer; });
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};



function ensureLocString(target, options, key) {
    var locString = target.getLocalizableString(key);
    if (!locString) {
        locString = target.createLocalizableString(key, target, true);
        if (typeof options.localizable === "object" &&
            typeof options.localizable.onGetTextCallback === "function") {
            locString.onGetTextCallback = options.localizable.onGetTextCallback;
        }
    }
}
function getLocStringValue(target, options, key) {
    ensureLocString(target, options, key);
    var res = target.getLocalizableStringText(key);
    if (!!res)
        return res;
    if (typeof options.localizable === "object" && options.localizable.defaultStr) {
        var loc = !!target.getLocale ? target.getLocale() : "";
        return _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString(options.localizable.defaultStr, loc);
    }
    return "";
}
function property(options) {
    return function (target, key) {
        var processComputedUpdater = function (obj, val) {
            if (!!val && typeof val === "object" && val.type === _base__WEBPACK_IMPORTED_MODULE_1__["ComputedUpdater"].ComputedUpdaterType) {
                _base__WEBPACK_IMPORTED_MODULE_1__["Base"].startCollectDependencies(function () { return obj[key] = val.updater(); }, obj, key);
                var result = val.updater();
                var dependencies = _base__WEBPACK_IMPORTED_MODULE_1__["Base"].finishCollectDependencies();
                val.setDependencies(dependencies);
                return result;
            }
            return val;
        };
        if (!options || !options.localizable) {
            Object.defineProperty(target, key, {
                get: function () {
                    var defaultVal = null;
                    if (!!options) {
                        if (typeof options.getDefaultValue === "function") {
                            defaultVal = options.getDefaultValue(this);
                        }
                        if (options.defaultValue !== undefined) {
                            defaultVal = options.defaultValue;
                        }
                    }
                    return this.getPropertyValue(key, defaultVal);
                },
                set: function (val) {
                    var newValue = processComputedUpdater(this, val);
                    this.setPropertyValue(key, newValue);
                    if (!!options && options.onSet) {
                        options.onSet(newValue, this);
                    }
                },
            });
        }
        else {
            Object.defineProperty(target, key, {
                get: function () {
                    return getLocStringValue(this, options, key);
                },
                set: function (val) {
                    ensureLocString(this, options, key);
                    var newValue = processComputedUpdater(this, val);
                    this.setLocalizableStringText(key, newValue);
                    if (!!options && options.onSet) {
                        options.onSet(newValue, this);
                    }
                },
            });
            Object.defineProperty(target, typeof options.localizable === "object" && !!options.localizable.name ?
                options.localizable.name : "loc" + key.charAt(0).toUpperCase() + key.slice(1), {
                get: function () {
                    ensureLocString(this, options, key);
                    return this.getLocalizableString(key);
                },
            });
        }
    };
}
function ensureArray(target, options, key) {
    target.ensureArray(key, function (item, index) {
        var handler = !!options ? options.onPush : null;
        handler && handler(item, index, target);
    }, function (item, index) {
        var handler = !!options ? options.onRemove : null;
        handler && handler(item, index, target);
    });
}
function propertyArray(options) {
    return function (target, key) {
        Object.defineProperty(target, key, {
            get: function () {
                ensureArray(this, options, key);
                return this.getPropertyValue(key);
            },
            set: function (val) {
                ensureArray(this, options, key);
                var arr = this.getPropertyValue(key);
                if (val === arr) {
                    return;
                }
                if (arr) {
                    arr.splice.apply(arr, __spreadArray([0, arr.length], (val || [])));
                }
                else {
                    this.setPropertyValue(key, val);
                }
                if (!!options && options.onSet) {
                    options.onSet(val, this);
                }
            },
        });
    };
}
/**
 * Contains information about a property of a survey element (page, panel, questions, and etc).
 * @see addProperty
 * @see removeProperty
 * @see [Add Properties](https://surveyjs.io/Documentation/Survey-Creator#addproperties)
 * @see [Remove Properties](https://surveyjs.io/Documentation/Survey-Creator#removeproperties)
 */
var JsonObjectProperty = /** @class */ (function () {
    function JsonObjectProperty(classInfo, name, isRequired) {
        if (isRequired === void 0) { isRequired = false; }
        this.name = name;
        this.isRequiredValue = false;
        this.isUniqueValue = false;
        this.isSerializable = true;
        this.isLightSerializable = true;
        this.isCustom = false;
        this.isDynamicChoices = false; //TODO obsolete, use dependsOn attribute
        this.isBindable = false;
        this.category = "";
        this.categoryIndex = -1;
        this.visibleIndex = -1;
        this.maxLength = -1;
        this.isArray = false;
        this.classInfoValue = classInfo;
        this.isRequiredValue = isRequired;
        this.idValue = JsonObjectProperty.Index++;
    }
    Object.defineProperty(JsonObjectProperty.prototype, "id", {
        get: function () {
            return this.idValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "classInfo", {
        get: function () {
            return this.classInfoValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "type", {
        get: function () {
            return this.typeValue ? this.typeValue : "string";
        },
        set: function (value) {
            if (value === "itemvalues")
                value = "itemvalue[]";
            if (value === "textitems")
                value = "textitem[]";
            this.typeValue = value;
            if (this.typeValue.indexOf("[]") === this.typeValue.length - 2) {
                this.isArray = true;
                this.className = this.typeValue.substring(0, this.typeValue.length - 2);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "isRequired", {
        get: function () {
            return this.isRequiredValue;
        },
        set: function (val) {
            this.isRequiredValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "isUnique", {
        get: function () {
            return this.isUniqueValue;
        },
        set: function (val) {
            this.isUniqueValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "uniquePropertyName", {
        get: function () {
            return this.uniquePropertyValue;
        },
        set: function (val) {
            this.uniquePropertyValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "hasToUseGetValue", {
        get: function () {
            return this.onGetValue || this.serializationProperty;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "defaultValue", {
        get: function () {
            var result = !!this.defaultValueFunc ? this.defaultValueFunc() : this.defaultValueValue;
            if (!!JsonObjectProperty.getItemValuesDefaultValue &&
                JsonObject.metaData.isDescendantOf(this.className, "itemvalue")) {
                result = JsonObjectProperty.getItemValuesDefaultValue(this.defaultValueValue || [], this.className);
            }
            return result;
        },
        set: function (newValue) {
            this.defaultValueValue = newValue;
        },
        enumerable: false,
        configurable: true
    });
    JsonObjectProperty.prototype.isDefaultValue = function (value) {
        if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(this.defaultValue)) {
            return _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(value, this.defaultValue, false, true, false);
        }
        return ((value === false && (this.type == "boolean" || this.type == "switch")) ||
            value === "" ||
            _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(value));
    };
    JsonObjectProperty.prototype.getValue = function (obj) {
        if (this.onGetValue)
            return this.onGetValue(obj);
        if (this.serializationProperty && !!obj[this.serializationProperty])
            return obj[this.serializationProperty].getJson();
        return obj[this.name];
    };
    JsonObjectProperty.prototype.getPropertyValue = function (obj) {
        if (this.isLocalizable) {
            return !!obj[this.serializationProperty]
                ? obj[this.serializationProperty].text
                : null;
        }
        return this.getValue(obj);
    };
    Object.defineProperty(JsonObjectProperty.prototype, "hasToUseSetValue", {
        get: function () {
            return this.onSetValue || this.serializationProperty;
        },
        enumerable: false,
        configurable: true
    });
    JsonObjectProperty.prototype.settingValue = function (obj, value) {
        if (!this.onSettingValue || obj.isLoadingFromJson)
            return value;
        return this.onSettingValue(obj, value);
    };
    JsonObjectProperty.prototype.setValue = function (obj, value, jsonConv) {
        if (this.onSetValue) {
            this.onSetValue(obj, value, jsonConv);
        }
        else {
            if (this.serializationProperty && !!obj[this.serializationProperty])
                obj[this.serializationProperty].setJson(value);
            else {
                if (value && typeof value === "string") {
                    if (this.type == "number") {
                        value = parseInt(value);
                    }
                    if (this.type == "boolean" || this.type == "switch") {
                        value = value.toLowerCase() === "true";
                    }
                }
                obj[this.name] = value;
            }
        }
    };
    JsonObjectProperty.prototype.getObjType = function (objType) {
        if (!this.classNamePart)
            return objType;
        return objType.replace(this.classNamePart, "");
    };
    JsonObjectProperty.prototype.getClassName = function (className) {
        if (className)
            className = className.toLowerCase();
        return this.classNamePart && className.indexOf(this.classNamePart) < 0
            ? className + this.classNamePart
            : className;
    };
    Object.defineProperty(JsonObjectProperty.prototype, "choices", {
        /**
         * Depricated, please use getChoices
         */
        get: function () {
            return this.getChoices(null);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "hasChoices", {
        get: function () {
            return !!this.choicesValue || !!this.choicesfunc;
        },
        enumerable: false,
        configurable: true
    });
    JsonObjectProperty.prototype.getChoices = function (obj, choicesCallback) {
        if (choicesCallback === void 0) { choicesCallback = null; }
        if (this.choicesValue != null)
            return this.choicesValue;
        if (this.choicesfunc != null)
            return this.choicesfunc(obj, choicesCallback);
        return null;
    };
    JsonObjectProperty.prototype.setChoices = function (value, valueFunc) {
        if (valueFunc === void 0) { valueFunc = null; }
        this.choicesValue = value;
        this.choicesfunc = valueFunc;
    };
    JsonObjectProperty.prototype.getBaseValue = function () {
        if (!this.baseValue)
            return "";
        if (typeof this.baseValue == "function")
            return this.baseValue();
        return this.baseValue;
    };
    JsonObjectProperty.prototype.setBaseValue = function (val) {
        this.baseValue = val;
    };
    Object.defineProperty(JsonObjectProperty.prototype, "readOnly", {
        get: function () {
            return this.readOnlyValue != null ? this.readOnlyValue : false;
        },
        set: function (val) {
            this.readOnlyValue = val;
        },
        enumerable: false,
        configurable: true
    });
    JsonObjectProperty.prototype.isVisible = function (layout, obj) {
        if (obj === void 0) { obj = null; }
        var isLayout = !this.layout || this.layout == layout;
        if (!this.visible || !isLayout)
            return false;
        if (!!this.visibleIf && !!obj)
            return this.visibleIf(obj);
        return true;
    };
    Object.defineProperty(JsonObjectProperty.prototype, "visible", {
        get: function () {
            return this.visibleValue != null ? this.visibleValue : true;
        },
        set: function (val) {
            this.visibleValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "isLocalizable", {
        get: function () {
            return this.isLocalizableValue != null ? this.isLocalizableValue : false;
        },
        set: function (val) {
            this.isLocalizableValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(JsonObjectProperty.prototype, "dataList", {
        get: function () {
            return Array.isArray(this.dataListValue) ? this.dataListValue : [];
        },
        set: function (val) {
            this.dataListValue = val;
        },
        enumerable: false,
        configurable: true
    });
    JsonObjectProperty.prototype.mergeWith = function (prop) {
        var valuesNames = JsonObjectProperty.mergableValues;
        for (var i = 0; i < valuesNames.length; i++) {
            this.mergeValue(prop, valuesNames[i]);
        }
    };
    JsonObjectProperty.prototype.addDependedProperty = function (name) {
        if (!this.dependedProperties) {
            this.dependedProperties = [];
        }
        if (this.dependedProperties.indexOf(name) < 0) {
            this.dependedProperties.push(name);
        }
    };
    JsonObjectProperty.prototype.getDependedProperties = function () {
        return !!this.dependedProperties ? this.dependedProperties : [];
    };
    JsonObjectProperty.prototype.schemaType = function () {
        if (!!this.className)
            return "array";
        if (!!this.baseClassName)
            return "array";
        if (this.type == "boolean" || this.type == "number")
            return this.type;
        return "string";
    };
    JsonObjectProperty.prototype.mergeValue = function (prop, valueName) {
        if (this[valueName] == null && prop[valueName] != null) {
            this[valueName] = prop[valueName];
        }
    };
    JsonObjectProperty.Index = 1;
    JsonObjectProperty.mergableValues = [
        "typeValue",
        "choicesValue",
        "baseValue",
        "readOnlyValue",
        "visibleValue",
        "isSerializable",
        "isLightSerializable",
        "isCustom",
        "isBindable",
        "isUnique",
        "uniquePropertyName",
        "isDynamicChoices",
        "isLocalizableValue",
        "className",
        "alternativeName",
        "layout",
        "classNamePart",
        "baseClassName",
        "defaultValue",
        "defaultValueFunc",
        "serializationProperty",
        "onGetValue",
        "onSetValue",
        "onSettingValue",
        "displayName",
        "category",
        "categoryIndex",
        "visibleIndex",
        "nextToProperty",
        "showMode",
        "dependedProperties",
        "visibleIf",
        "onExecuteExpression",
        "onPropertyEditorUpdate",
        "maxLength",
        "maxValue",
        "minValue",
        "dataListValue",
    ];
    return JsonObjectProperty;
}());

var CustomPropertiesCollection = /** @class */ (function () {
    function CustomPropertiesCollection() {
    }
    CustomPropertiesCollection.addProperty = function (className, property) {
        className = className.toLowerCase();
        var props = CustomPropertiesCollection.properties;
        if (!props[className]) {
            props[className] = [];
        }
        props[className].push(property);
    };
    CustomPropertiesCollection.removeProperty = function (className, propertyName) {
        className = className.toLowerCase();
        var props = CustomPropertiesCollection.properties;
        if (!props[className])
            return;
        var properties = props[className];
        for (var i = 0; i < properties.length; i++) {
            if (properties[i].name == propertyName) {
                props[className].splice(i, 1);
                break;
            }
        }
    };
    CustomPropertiesCollection.removeAllProperties = function (className) {
        className = className.toLowerCase();
        delete CustomPropertiesCollection.properties[className];
    };
    CustomPropertiesCollection.addClass = function (className, parentClassName) {
        className = className.toLowerCase();
        if (parentClassName) {
            parentClassName = parentClassName.toLowerCase();
        }
        CustomPropertiesCollection.parentClasses[className] = parentClassName;
    };
    CustomPropertiesCollection.getProperties = function (className) {
        className = className.toLowerCase();
        var res = [];
        var props = CustomPropertiesCollection.properties;
        while (className) {
            var properties = props[className];
            if (properties) {
                for (var i = 0; i < properties.length; i++) {
                    res.push(properties[i]);
                }
            }
            className = CustomPropertiesCollection.parentClasses[className];
        }
        return res;
    };
    CustomPropertiesCollection.createProperties = function (obj) {
        if (!obj || !obj.getType)
            return;
        CustomPropertiesCollection.createPropertiesCore(obj, obj.getType());
    };
    CustomPropertiesCollection.createPropertiesCore = function (obj, className) {
        var props = CustomPropertiesCollection.properties;
        if (props[className]) {
            CustomPropertiesCollection.createPropertiesInObj(obj, props[className]);
        }
        var parentClass = CustomPropertiesCollection.parentClasses[className];
        if (parentClass) {
            CustomPropertiesCollection.createPropertiesCore(obj, parentClass);
        }
    };
    CustomPropertiesCollection.createPropertiesInObj = function (obj, properties) {
        for (var i = 0; i < properties.length; i++) {
            CustomPropertiesCollection.createPropertyInObj(obj, properties[i]);
        }
    };
    CustomPropertiesCollection.createPropertyInObj = function (obj, prop) {
        if (CustomPropertiesCollection.checkIsPropertyExists(obj, prop.name))
            return;
        if (!!prop.serializationProperty && CustomPropertiesCollection.checkIsPropertyExists(obj, prop.serializationProperty))
            return;
        if (prop.isLocalizable &&
            prop.serializationProperty &&
            obj.createCustomLocalizableObj) {
            obj.createCustomLocalizableObj(prop.name);
            var locDesc = {
                get: function () {
                    return obj.getLocalizableString(prop.name);
                },
            };
            Object.defineProperty(obj, prop.serializationProperty, locDesc);
            var desc = {
                get: function () {
                    return obj.getLocalizableStringText(prop.name, prop.defaultValue);
                },
                set: function (v) {
                    obj.setLocalizableStringText(prop.name, v);
                },
            };
            Object.defineProperty(obj, prop.name, desc);
        }
        else {
            var defaultValue = prop.defaultValue;
            var isArrayProp = prop.isArray || prop.type === "multiplevalues";
            if (typeof obj.createNewArray === "function") {
                if (JsonObject.metaData.isDescendantOf(prop.className, "itemvalue")) {
                    obj.createNewArray(prop.name, function (item) {
                        item.locOwner = obj;
                        item.ownerPropertyName = prop.name;
                    });
                    isArrayProp = true;
                }
                else {
                    //It is a simple array property
                    if (isArrayProp) {
                        obj.createNewArray(prop.name);
                    }
                }
                if (isArrayProp) {
                    if (Array.isArray(defaultValue)) {
                        obj.setPropertyValue(prop.name, defaultValue);
                    }
                    defaultValue = null;
                }
            }
            if (!!obj.getPropertyValue && !!obj.setPropertyValue) {
                var desc = {
                    get: function () {
                        if (!!prop.onGetValue) {
                            return prop.onGetValue(obj);
                        }
                        return obj.getPropertyValue(prop.name, defaultValue);
                    },
                    set: function (v) {
                        if (!!prop.onSetValue) {
                            prop.onSetValue(obj, v, null);
                        }
                        else {
                            obj.setPropertyValue(prop.name, v);
                        }
                    },
                };
                Object.defineProperty(obj, prop.name, desc);
            }
        }
        if (prop.type === "condition" || prop.type === "expression") {
            if (!!prop.onExecuteExpression) {
                obj.addExpressionProperty(prop.name, prop.onExecuteExpression);
            }
        }
    };
    CustomPropertiesCollection.checkIsPropertyExists = function (obj, name) {
        return obj.hasOwnProperty(name) || obj[name];
    };
    CustomPropertiesCollection.properties = {};
    CustomPropertiesCollection.parentClasses = {};
    return CustomPropertiesCollection;
}());

var JsonMetadataClass = /** @class */ (function () {
    function JsonMetadataClass(name, properties, creator, parentName) {
        if (creator === void 0) { creator = null; }
        if (parentName === void 0) { parentName = null; }
        this.name = name;
        this.creator = creator;
        this.parentName = parentName;
        name = name.toLowerCase();
        this.isCustomValue = !creator && name !== "survey";
        if (this.parentName) {
            this.parentName = this.parentName.toLowerCase();
            CustomPropertiesCollection.addClass(name, this.parentName);
            if (!!creator) {
                this.makeParentRegularClass();
            }
        }
        this.properties = new Array();
        for (var i = 0; i < properties.length; i++) {
            this.createProperty(properties[i], this.isCustom);
        }
    }
    //Obsolete
    JsonMetadataClass.prototype.find = function (name) {
        for (var i = 0; i < this.properties.length; i++) {
            if (this.properties[i].name == name)
                return this.properties[i];
        }
        return null;
    };
    JsonMetadataClass.prototype.findProperty = function (name) {
        this.fillAllProperties();
        return this.hashProperties[name];
    };
    JsonMetadataClass.prototype.getAllProperties = function () {
        this.fillAllProperties();
        return this.allProperties;
    };
    JsonMetadataClass.prototype.resetAllProperties = function () {
        this.allProperties = undefined;
        this.hashProperties = undefined;
        var childClasses = Serializer.getChildrenClasses(this.name);
        for (var i = 0; i < childClasses.length; i++) {
            childClasses[i].resetAllProperties();
        }
    };
    Object.defineProperty(JsonMetadataClass.prototype, "isCustom", {
        get: function () { return this.isCustomValue; },
        enumerable: false,
        configurable: true
    });
    JsonMetadataClass.prototype.fillAllProperties = function () {
        var _this = this;
        if (!!this.allProperties)
            return;
        this.allProperties = [];
        this.hashProperties = {};
        var localProperties = {};
        this.properties.forEach(function (prop) { return localProperties[prop.name] = prop; });
        var parentClass = !!this.parentName ? Serializer.findClass(this.parentName) : null;
        if (!!parentClass) {
            var parentProperties = parentClass.getAllProperties();
            parentProperties.forEach(function (prop) {
                var overridedProp = localProperties[prop.name];
                if (!!overridedProp) {
                    overridedProp.mergeWith(prop);
                    _this.addPropCore(overridedProp);
                }
                else {
                    _this.addPropCore(prop);
                }
            });
        }
        this.properties.forEach(function (prop) {
            if (!_this.hashProperties[prop.name]) {
                _this.addPropCore(prop);
            }
        });
    };
    JsonMetadataClass.prototype.addPropCore = function (prop) {
        this.allProperties.push(prop);
        this.hashProperties[prop.name] = prop;
        if (!!prop.alternativeName) {
            this.hashProperties[prop.alternativeName] = prop;
        }
    };
    JsonMetadataClass.prototype.isOverridedProp = function (propName) {
        return !!this.parentName && !!Serializer.findProperty(this.parentName, propName);
    };
    JsonMetadataClass.prototype.hasRegularChildClass = function () {
        if (!this.isCustom)
            return;
        this.isCustomValue = false;
        for (var i = 0; i < this.properties.length; i++) {
            this.properties[i].isCustom = false;
        }
        CustomPropertiesCollection.removeAllProperties(this.name);
        this.makeParentRegularClass();
    };
    JsonMetadataClass.prototype.makeParentRegularClass = function () {
        if (!this.parentName)
            return;
        var parent = Serializer.findClass(this.parentName);
        if (!!parent) {
            parent.hasRegularChildClass();
        }
    };
    JsonMetadataClass.prototype.createProperty = function (propInfo, isCustom) {
        if (isCustom === void 0) { isCustom = false; }
        var propertyName = typeof propInfo === "string" ? propInfo : propInfo.name;
        if (!propertyName)
            return;
        var propertyType = null;
        var typeIndex = propertyName.indexOf(JsonMetadataClass.typeSymbol);
        if (typeIndex > -1) {
            propertyType = propertyName.substring(typeIndex + 1);
            propertyName = propertyName.substring(0, typeIndex);
        }
        var isRequired = this.getIsPropertyNameRequired(propertyName) || !!propInfo.isRequired;
        propertyName = this.getPropertyName(propertyName);
        var prop = new JsonObjectProperty(this, propertyName, isRequired);
        if (propertyType) {
            prop.type = propertyType;
        }
        if (typeof propInfo === "object") {
            if (propInfo.type) {
                prop.type = propInfo.type;
            }
            if (propInfo.default !== undefined) {
                prop.defaultValue = propInfo.default;
            }
            if (propInfo.defaultFunc !== undefined) {
                prop.defaultValueFunc = propInfo.defaultFunc;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.isSerializable)) {
                prop.isSerializable = propInfo.isSerializable;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.isLightSerializable)) {
                prop.isLightSerializable = propInfo.isLightSerializable;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.maxLength)) {
                prop.maxLength = propInfo.maxLength;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.displayName)) {
                prop.displayName = propInfo.displayName;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.category)) {
                prop.category = propInfo.category;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.categoryIndex)) {
                prop.categoryIndex = propInfo.categoryIndex;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.nextToProperty)) {
                prop.nextToProperty = propInfo.nextToProperty;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.visibleIndex)) {
                prop.visibleIndex = propInfo.visibleIndex;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.showMode)) {
                prop.showMode = propInfo.showMode;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.maxValue)) {
                prop.maxValue = propInfo.maxValue;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.minValue)) {
                prop.minValue = propInfo.minValue;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.dataList)) {
                prop.dataList = propInfo.dataList;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.isDynamicChoices)) {
                prop.isDynamicChoices = propInfo.isDynamicChoices;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.isBindable)) {
                prop.isBindable = propInfo.isBindable;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.isUnique)) {
                prop.isUnique = propInfo.isUnique;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.uniqueProperty)) {
                prop.uniquePropertyName = propInfo.uniqueProperty;
            }
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(propInfo.isArray)) {
                prop.isArray = propInfo.isArray;
            }
            if (propInfo.visible === true || propInfo.visible === false) {
                prop.visible = propInfo.visible;
            }
            if (!!propInfo.visibleIf) {
                prop.visibleIf = propInfo.visibleIf;
            }
            if (!!propInfo.onExecuteExpression) {
                prop.onExecuteExpression = propInfo.onExecuteExpression;
            }
            if (!!propInfo.onPropertyEditorUpdate) {
                prop.onPropertyEditorUpdate = propInfo.onPropertyEditorUpdate;
            }
            if (propInfo.readOnly === true) {
                prop.readOnly = true;
            }
            if (propInfo.choices) {
                var choicesFunc = typeof propInfo.choices === "function" ? propInfo.choices : null;
                var choicesValue = typeof propInfo.choices !== "function" ? propInfo.choices : null;
                prop.setChoices(choicesValue, choicesFunc);
            }
            if (!!propInfo.baseValue) {
                prop.setBaseValue(propInfo.baseValue);
            }
            if (propInfo.onGetValue) {
                prop.onGetValue = propInfo.onGetValue;
            }
            if (propInfo.onSetValue) {
                prop.onSetValue = propInfo.onSetValue;
            }
            if (propInfo.onSettingValue) {
                prop.onSettingValue = propInfo.onSettingValue;
            }
            if (propInfo.isLocalizable) {
                propInfo.serializationProperty = "loc" + prop.name;
            }
            if (propInfo.serializationProperty) {
                prop.serializationProperty = propInfo.serializationProperty;
                var s;
                if (prop.serializationProperty &&
                    prop.serializationProperty.indexOf("loc") == 0) {
                    prop.isLocalizable = true;
                }
            }
            if (propInfo.isLocalizable) {
                prop.isLocalizable = propInfo.isLocalizable;
            }
            if (propInfo.className) {
                prop.className = propInfo.className;
            }
            if (propInfo.baseClassName) {
                prop.baseClassName = propInfo.baseClassName;
            }
            if (propInfo.classNamePart) {
                prop.classNamePart = propInfo.classNamePart;
            }
            if (propInfo.alternativeName) {
                prop.alternativeName = propInfo.alternativeName;
            }
            if (propInfo.layout) {
                prop.layout = propInfo.layout;
            }
            if (propInfo.dependsOn) {
                this.addDependsOnProperties(prop, propInfo.dependsOn);
            }
        }
        this.properties.push(prop);
        if (isCustom && !this.isOverridedProp(prop.name)) {
            prop.isCustom = true;
            CustomPropertiesCollection.addProperty(this.name, prop);
        }
        return prop;
    };
    JsonMetadataClass.prototype.addDependsOnProperties = function (prop, dependsOn) {
        if (Array.isArray(dependsOn)) {
            for (var i = 0; i < dependsOn.length; i++) {
                this.addDependsOnProperty(prop, dependsOn[i]);
            }
        }
        else {
            this.addDependsOnProperty(prop, dependsOn);
        }
    };
    JsonMetadataClass.prototype.addDependsOnProperty = function (prop, dependsOn) {
        var property = this.find(dependsOn);
        if (!property) {
            property = Serializer.findProperty(this.parentName, dependsOn);
        }
        if (!property)
            return;
        property.addDependedProperty(prop.name);
    };
    JsonMetadataClass.prototype.getIsPropertyNameRequired = function (propertyName) {
        return (propertyName.length > 0 &&
            propertyName[0] == JsonMetadataClass.requiredSymbol);
    };
    JsonMetadataClass.prototype.getPropertyName = function (propertyName) {
        if (!this.getIsPropertyNameRequired(propertyName))
            return propertyName;
        propertyName = propertyName.slice(1);
        return propertyName;
    };
    JsonMetadataClass.requiredSymbol = "!";
    JsonMetadataClass.typeSymbol = ":";
    return JsonMetadataClass;
}());

/**
 * The metadata object. It contains object properties' runtime information and allows you to modify it.
 */
var JsonMetadata = /** @class */ (function () {
    function JsonMetadata() {
        this.classes = {};
        this.alternativeNames = {};
        this.childrenClasses = {};
    }
    JsonMetadata.prototype.getObjPropertyValue = function (obj, name) {
        if (this.isObjWrapper(obj)) {
            var orignalObj = obj.getOriginalObj();
            var prop = Serializer.findProperty(orignalObj.getType(), name);
            if (!!prop)
                return this.getObjPropertyValueCore(orignalObj, prop);
        }
        var prop = Serializer.findProperty(obj.getType(), name);
        if (!prop)
            return obj[name];
        return this.getObjPropertyValueCore(obj, prop);
    };
    JsonMetadata.prototype.setObjPropertyValue = function (obj, name, val) {
        if (obj[name] === val)
            return;
        if (!!obj[name] && !!obj[name].setJson) {
            obj[name].setJson(val);
        }
        else {
            if (Array.isArray(val)) {
                var newVal = [];
                for (var i = 0; i < val.length; i++)
                    newVal.push(val[i]);
                val = newVal;
            }
            obj[name] = val;
        }
    };
    JsonMetadata.prototype.getObjPropertyValueCore = function (obj, prop) {
        if (!prop.isSerializable)
            return obj[prop.name];
        if (prop.isLocalizable) {
            if (prop.isArray)
                return obj[prop.name];
            if (!!prop.serializationProperty)
                return obj[prop.serializationProperty].text;
        }
        return obj.getPropertyValue(prop.name);
    };
    JsonMetadata.prototype.isObjWrapper = function (obj) {
        return !!obj.getOriginalObj && !!obj.getOriginalObj();
    };
    JsonMetadata.prototype.addClass = function (name, properties, creator, parentName) {
        if (creator === void 0) { creator = null; }
        if (parentName === void 0) { parentName = null; }
        name = name.toLowerCase();
        var metaDataClass = new JsonMetadataClass(name, properties, creator, parentName);
        this.classes[name] = metaDataClass;
        if (parentName) {
            parentName = parentName.toLowerCase();
            var children = this.childrenClasses[parentName];
            if (!children) {
                this.childrenClasses[parentName] = [];
            }
            this.childrenClasses[parentName].push(metaDataClass);
        }
        return metaDataClass;
    };
    JsonMetadata.prototype.removeClass = function (name) {
        var metaClass = this.findClass(name);
        if (!metaClass)
            return;
        delete this.classes[metaClass.name];
        if (!!metaClass.parentName) {
            var index = this.childrenClasses[metaClass.parentName].indexOf(metaClass);
            if (index > -1) {
                this.childrenClasses[metaClass.parentName].splice(index, 1);
            }
        }
    };
    JsonMetadata.prototype.overrideClassCreatore = function (name, creator) {
        this.overrideClassCreator(name, creator);
    };
    JsonMetadata.prototype.overrideClassCreator = function (name, creator) {
        name = name.toLowerCase();
        var metaDataClass = this.findClass(name);
        if (metaDataClass) {
            metaDataClass.creator = creator;
        }
    };
    JsonMetadata.prototype.getProperties = function (className) {
        var metaClass = this.findClass(className);
        if (!metaClass)
            return [];
        return metaClass.getAllProperties();
    };
    JsonMetadata.prototype.getPropertiesByObj = function (obj) {
        if (!obj || !obj.getType)
            return [];
        var res = {};
        var props = this.getProperties(obj.getType());
        for (var i = 0; i < props.length; i++) {
            res[props[i].name] = props[i];
        }
        var dynamicProps = !!obj.getDynamicType
            ? this.getProperties(obj.getDynamicType())
            : null;
        if (dynamicProps && dynamicProps.length > 0) {
            for (var i = 0; i < dynamicProps.length; i++) {
                var dProp = dynamicProps[i];
                if (!!res[dProp.name])
                    continue;
                res[dProp.name] = dProp;
            }
        }
        return Object.keys(res).map(function (key) { return res[key]; });
    };
    JsonMetadata.prototype.getDynamicPropertiesByObj = function (obj, dynamicType) {
        if (dynamicType === void 0) { dynamicType = null; }
        if (!obj || !obj.getType || (!obj.getDynamicType && !dynamicType))
            return [];
        var dType = !!dynamicType ? dynamicType : obj.getDynamicType();
        if (!dType)
            return [];
        var dynamicProps = this.getProperties(dType);
        if (!dynamicProps || dynamicProps.length == 0)
            return [];
        var hash = {};
        var props = this.getProperties(obj.getType());
        for (var i = 0; i < props.length; i++) {
            hash[props[i].name] = props[i];
        }
        var res = [];
        for (var i = 0; i < dynamicProps.length; i++) {
            var dProp = dynamicProps[i];
            if (!hash[dProp.name]) {
                res.push(dProp);
            }
        }
        return res;
    };
    JsonMetadata.prototype.hasOriginalProperty = function (obj, propName) {
        return !!this.getOriginalProperty(obj, propName);
    };
    JsonMetadata.prototype.getOriginalProperty = function (obj, propName) {
        var res = this.findProperty(obj.getType(), propName);
        if (!!res)
            return res;
        if (this.isObjWrapper(obj))
            return this.findProperty(obj.getOriginalObj().getType(), propName);
        return null;
    };
    JsonMetadata.prototype.getProperty = function (className, propertyName) {
        var prop = this.findProperty(className, propertyName);
        if (!prop)
            return prop;
        var classInfo = this.findClass(className);
        if (prop.classInfo === classInfo)
            return prop;
        var newProp = new JsonObjectProperty(classInfo, prop.name, prop.isRequired);
        newProp.mergeWith(prop);
        newProp.isArray = prop.isArray;
        classInfo.properties.push(newProp);
        classInfo.resetAllProperties();
        return newProp;
    };
    JsonMetadata.prototype.findProperty = function (className, propertyName) {
        var cl = this.findClass(className);
        return !!cl ? cl.findProperty(propertyName) : null;
    };
    JsonMetadata.prototype.findProperties = function (className, propertyNames) {
        var result = new Array();
        var cl = this.findClass(className);
        if (!cl)
            return result;
        for (var i = 0; i < propertyNames.length; i++) {
            var prop = cl.findProperty(propertyNames[i]);
            if (prop) {
                result.push(prop);
            }
        }
        return result;
    };
    JsonMetadata.prototype.getAllPropertiesByName = function (propertyName) {
        var res = new Array();
        var classes = this.getAllClasses();
        for (var i = 0; i < classes.length; i++) {
            var classInfo = this.findClass(classes[i]);
            for (var j = 0; j < classInfo.properties.length; j++) {
                if (classInfo.properties[j].name == propertyName) {
                    res.push(classInfo.properties[j]);
                    break;
                }
            }
        }
        return res;
    };
    JsonMetadata.prototype.getAllClasses = function () {
        var res = new Array();
        for (var name in this.classes) {
            res.push(name);
        }
        return res;
    };
    JsonMetadata.prototype.createClass = function (name, json) {
        if (json === void 0) { json = undefined; }
        name = name.toLowerCase();
        var metaDataClass = this.findClass(name);
        if (!metaDataClass)
            return null;
        if (metaDataClass.creator)
            return metaDataClass.creator(json);
        var parentName = metaDataClass.parentName;
        while (parentName) {
            metaDataClass = this.findClass(parentName);
            if (!metaDataClass)
                return null;
            parentName = metaDataClass.parentName;
            if (metaDataClass.creator)
                return this.createCustomType(name, metaDataClass.creator, json);
        }
        return null;
    };
    JsonMetadata.prototype.createCustomType = function (name, creator, json) {
        if (json === void 0) { json = undefined; }
        name = name.toLowerCase();
        var res = creator(json);
        var customTypeName = name;
        var customTemplateName = res.getTemplate
            ? res.getTemplate()
            : res.getType();
        res.getType = function () {
            return customTypeName;
        };
        res.getTemplate = function () {
            return customTemplateName;
        };
        CustomPropertiesCollection.createProperties(res);
        return res;
    };
    JsonMetadata.prototype.getChildrenClasses = function (name, canBeCreated) {
        if (canBeCreated === void 0) { canBeCreated = false; }
        name = name.toLowerCase();
        var result = [];
        this.fillChildrenClasses(name, canBeCreated, result);
        return result;
    };
    JsonMetadata.prototype.getRequiredProperties = function (name) {
        var properties = this.getProperties(name);
        var res = [];
        for (var i = 0; i < properties.length; i++) {
            if (properties[i].isRequired) {
                res.push(properties[i].name);
            }
        }
        return res;
    };
    JsonMetadata.prototype.addProperties = function (className, propertiesInfos) {
        className = className.toLowerCase();
        var metaDataClass = this.findClass(className);
        for (var i = 0; i < propertiesInfos.length; i++) {
            this.addCustomPropertyCore(metaDataClass, propertiesInfos[i]);
        }
    };
    JsonMetadata.prototype.addProperty = function (className, propertyInfo) {
        return this.addCustomPropertyCore(this.findClass(className), propertyInfo);
    };
    JsonMetadata.prototype.addCustomPropertyCore = function (metaDataClass, propertyInfo) {
        if (!metaDataClass)
            return null;
        var property = metaDataClass.createProperty(propertyInfo, true);
        if (property) {
            metaDataClass.resetAllProperties();
        }
        return property;
    };
    JsonMetadata.prototype.removeProperty = function (className, propertyName) {
        var metaDataClass = this.findClass(className);
        if (!metaDataClass)
            return false;
        var property = metaDataClass.find(propertyName);
        if (property) {
            this.removePropertyFromClass(metaDataClass, property);
            metaDataClass.resetAllProperties();
            CustomPropertiesCollection.removeProperty(metaDataClass.name, propertyName);
        }
    };
    JsonMetadata.prototype.removePropertyFromClass = function (metaDataClass, property) {
        var index = metaDataClass.properties.indexOf(property);
        if (index < 0)
            return;
        metaDataClass.properties.splice(index, 1);
    };
    JsonMetadata.prototype.fillChildrenClasses = function (name, canBeCreated, result) {
        var children = this.childrenClasses[name];
        if (!children)
            return;
        for (var i = 0; i < children.length; i++) {
            if (!canBeCreated || children[i].creator) {
                result.push(children[i]);
            }
            this.fillChildrenClasses(children[i].name, canBeCreated, result);
        }
    };
    JsonMetadata.prototype.findClass = function (name) {
        name = name.toLowerCase();
        var res = this.classes[name];
        if (!res) {
            var newName = this.alternativeNames[name];
            if (!!newName && newName != name)
                return this.findClass(newName);
        }
        return res;
    };
    JsonMetadata.prototype.isDescendantOf = function (className, ancestorClassName) {
        if (!className || !ancestorClassName) {
            return false;
        }
        className = className.toLowerCase();
        ancestorClassName = ancestorClassName.toLowerCase();
        var class_ = this.findClass(className);
        if (!class_) {
            return false;
        }
        var parentClass = class_;
        do {
            if (parentClass.name === ancestorClassName) {
                return true;
            }
            parentClass = this.classes[parentClass.parentName];
        } while (!!parentClass);
        return false;
    };
    JsonMetadata.prototype.addAlterNativeClassName = function (name, alternativeName) {
        this.alternativeNames[alternativeName.toLowerCase()] = name.toLowerCase();
    };
    JsonMetadata.prototype.generateSchema = function (className) {
        if (className === void 0) { className = undefined; }
        if (!className)
            className = "survey";
        var classInfo = this.findClass(className);
        if (!classInfo)
            return null;
        var res = {
            $schema: "http://json-schema.org/draft-07/schema#",
            title: "SurveyJS Library json schema",
            type: "object",
            properties: {},
            definitions: {},
        };
        this.generateSchemaProperties(classInfo, res.properties, res.definitions);
        return res;
    };
    JsonMetadata.prototype.generateSchemaProperties = function (classInfo, schemaProperties, schemaDef) {
        if (!classInfo)
            return;
        for (var i = 0; i < classInfo.properties.length; i++) {
            var prop = classInfo.properties[i];
            schemaProperties[prop.name] = this.generateSchemaProperty(prop, schemaDef);
        }
    };
    JsonMetadata.prototype.generateSchemaProperty = function (prop, schemaDef) {
        var res = { type: prop.schemaType() };
        if (prop.hasChoices) {
            res.enum = prop.getChoices(null);
        }
        if (!!prop.className) {
            res.items = { $ref: "#" + prop.className };
            this.generateChemaClass(prop.className, schemaDef);
        }
        if (!!prop.baseClassName) {
            var usedClasses = this.getChildrenClasses(prop.baseClassName, true);
            if (prop.baseClassName == "question") {
                usedClasses.push(this.findClass("panel"));
            }
            res.items = [];
            for (var i = 0; i < usedClasses.length; i++) {
                var className = usedClasses[i].name;
                res.items.push({ $ref: "#" + className });
                this.generateChemaClass(className, schemaDef);
            }
        }
        return res;
    };
    JsonMetadata.prototype.generateChemaClass = function (className, schemaDef) {
        if (!!schemaDef[className])
            return;
        var classInfo = this.findClass(className);
        if (!classInfo)
            return;
        var hasParent = !!classInfo.parentName && classInfo.parentName != "base";
        if (hasParent) {
            this.generateChemaClass(classInfo.parentName, schemaDef);
        }
        var res = { type: "object", $id: "#" + className };
        schemaDef[className] = res;
        var props = {};
        this.generateSchemaProperties(classInfo, props, schemaDef);
        if (hasParent) {
            res.allOff = [
                { $ref: "#" + classInfo.parentName },
                { properties: props },
            ];
        }
        else {
            res.properties = props;
        }
    };
    JsonMetadata.prototype.fillProperties = function (name, list, hash) {
        var metaDataClass = this.findClass(name);
        if (!metaDataClass)
            return;
        if (metaDataClass.parentName) {
            this.fillProperties(metaDataClass.parentName, list, hash);
        }
        for (var i = 0; i < metaDataClass.properties.length; i++) {
            var prop = metaDataClass.properties[i];
            this.addPropertyCore(prop, list, hash);
            hash[prop.name] = prop;
            if (prop.alternativeName)
                hash[prop.alternativeName] = prop;
        }
    };
    JsonMetadata.prototype.addPropertyCore = function (property, list, hash) {
        if (!hash[property.name]) {
            list.push(property);
            return;
        }
        var index = -1;
        for (var i = 0; i < list.length; i++) {
            if (list[i].name == property.name || list[i].alternativeName == property.name) {
                index = i;
                break;
            }
        }
        property.mergeWith(list[index]);
        list[index] = property;
    };
    return JsonMetadata;
}());

var JsonError = /** @class */ (function () {
    function JsonError(type, message) {
        this.type = type;
        this.message = message;
        this.description = "";
        this.at = -1;
    }
    JsonError.prototype.getFullDescription = function () {
        return this.message + (this.description ? "\n" + this.description : "");
    };
    return JsonError;
}());

var JsonUnknownPropertyError = /** @class */ (function (_super) {
    __extends(JsonUnknownPropertyError, _super);
    function JsonUnknownPropertyError(propertyName, className) {
        var _this = _super.call(this, "unknownproperty", "The property '" +
            propertyName +
            "' in class '" +
            className +
            "' is unknown.") || this;
        _this.propertyName = propertyName;
        _this.className = className;
        var properties = JsonObject.metaData.getProperties(className);
        if (properties) {
            _this.description = "The list of available properties are: ";
            for (var i = 0; i < properties.length; i++) {
                if (i > 0)
                    _this.description += ", ";
                _this.description += properties[i].name;
            }
            _this.description += ".";
        }
        return _this;
    }
    return JsonUnknownPropertyError;
}(JsonError));

var JsonMissingTypeErrorBase = /** @class */ (function (_super) {
    __extends(JsonMissingTypeErrorBase, _super);
    function JsonMissingTypeErrorBase(baseClassName, type, message) {
        var _this = _super.call(this, type, message) || this;
        _this.baseClassName = baseClassName;
        _this.type = type;
        _this.message = message;
        _this.description = "The following types are available: ";
        var types = JsonObject.metaData.getChildrenClasses(baseClassName, true);
        for (var i = 0; i < types.length; i++) {
            if (i > 0)
                _this.description += ", ";
            _this.description += "'" + types[i].name + "'";
        }
        _this.description += ".";
        return _this;
    }
    return JsonMissingTypeErrorBase;
}(JsonError));

var JsonMissingTypeError = /** @class */ (function (_super) {
    __extends(JsonMissingTypeError, _super);
    function JsonMissingTypeError(propertyName, baseClassName) {
        var _this = _super.call(this, baseClassName, "missingtypeproperty", "The property type is missing in the object. Please take a look at property: '" +
            propertyName +
            "'.") || this;
        _this.propertyName = propertyName;
        _this.baseClassName = baseClassName;
        return _this;
    }
    return JsonMissingTypeError;
}(JsonMissingTypeErrorBase));

var JsonIncorrectTypeError = /** @class */ (function (_super) {
    __extends(JsonIncorrectTypeError, _super);
    function JsonIncorrectTypeError(propertyName, baseClassName) {
        var _this = _super.call(this, baseClassName, "incorrecttypeproperty", "The property type is incorrect in the object. Please take a look at property: '" +
            propertyName +
            "'.") || this;
        _this.propertyName = propertyName;
        _this.baseClassName = baseClassName;
        return _this;
    }
    return JsonIncorrectTypeError;
}(JsonMissingTypeErrorBase));

var JsonRequiredPropertyError = /** @class */ (function (_super) {
    __extends(JsonRequiredPropertyError, _super);
    function JsonRequiredPropertyError(propertyName, className) {
        var _this = _super.call(this, "requiredproperty", "The property '" +
            propertyName +
            "' is required in class '" +
            className +
            "'.") || this;
        _this.propertyName = propertyName;
        _this.className = className;
        return _this;
    }
    return JsonRequiredPropertyError;
}(JsonError));

var JsonObject = /** @class */ (function () {
    function JsonObject() {
        this.errors = new Array();
        this.lightSerializing = false;
    }
    Object.defineProperty(JsonObject, "metaData", {
        get: function () {
            return JsonObject.metaDataValue;
        },
        enumerable: false,
        configurable: true
    });
    JsonObject.prototype.toJsonObject = function (obj, storeDefaults) {
        if (storeDefaults === void 0) { storeDefaults = false; }
        return this.toJsonObjectCore(obj, null, storeDefaults);
    };
    JsonObject.prototype.toObject = function (jsonObj, obj) {
        this.toObjectCore(jsonObj, obj);
        var error = this.getRequiredError(obj, jsonObj);
        if (!!error) {
            this.addNewError(error, jsonObj);
        }
    };
    JsonObject.prototype.toObjectCore = function (jsonObj, obj) {
        if (!jsonObj)
            return;
        var properties = null;
        var objType = undefined;
        var needAddErrors = true;
        if (obj.getType) {
            objType = obj.getType();
            properties = JsonObject.metaData.getProperties(objType);
            needAddErrors =
                !!objType && !JsonObject.metaData.isDescendantOf(objType, "itemvalue");
        }
        if (!properties)
            return;
        if (obj.startLoadingFromJson) {
            obj.startLoadingFromJson(jsonObj);
        }
        properties = this.addDynamicProperties(obj, jsonObj, properties);
        for (var key in jsonObj) {
            if (key === JsonObject.typePropertyName)
                continue;
            if (key === JsonObject.positionPropertyName) {
                obj[key] = jsonObj[key];
                continue;
            }
            var property = this.findProperty(properties, key);
            if (!property) {
                if (needAddErrors) {
                    this.addNewError(new JsonUnknownPropertyError(key.toString(), objType), jsonObj);
                }
                continue;
            }
            this.valueToObj(jsonObj[key], obj, property);
        }
        if (obj.endLoadingFromJson) {
            obj.endLoadingFromJson();
        }
    };
    JsonObject.prototype.toJsonObjectCore = function (obj, property, storeDefaults) {
        if (storeDefaults === void 0) { storeDefaults = false; }
        if (!obj || !obj.getType)
            return obj;
        if (typeof obj.getData === "function")
            return obj.getData();
        var result = {};
        if (property != null && !property.className) {
            result[JsonObject.typePropertyName] = property.getObjType(obj.getType());
        }
        this.propertiesToJson(obj, JsonObject.metaData.getProperties(obj.getType()), result, storeDefaults);
        this.propertiesToJson(obj, this.getDynamicProperties(obj), result, storeDefaults);
        return result;
    };
    JsonObject.prototype.getDynamicProperties = function (obj) {
        return Serializer.getDynamicPropertiesByObj(obj);
    };
    JsonObject.prototype.addDynamicProperties = function (obj, jsonObj, properties) {
        if (!obj.getDynamicPropertyName)
            return properties;
        var dynamicPropName = obj.getDynamicPropertyName();
        if (!dynamicPropName)
            return properties;
        if (jsonObj[dynamicPropName]) {
            obj[dynamicPropName] = jsonObj[dynamicPropName];
        }
        var dynamicProperties = this.getDynamicProperties(obj);
        var res = [];
        for (var i = 0; i < properties.length; i++) {
            res.push(properties[i]);
        }
        for (var i = 0; i < dynamicProperties.length; i++) {
            res.push(dynamicProperties[i]);
        }
        return res;
    };
    JsonObject.prototype.propertiesToJson = function (obj, properties, json, storeDefaults) {
        if (storeDefaults === void 0) { storeDefaults = false; }
        for (var i = 0; i < properties.length; i++) {
            this.valueToJson(obj, json, properties[i], storeDefaults);
        }
    };
    JsonObject.prototype.valueToJson = function (obj, result, property, storeDefaults) {
        if (storeDefaults === void 0) { storeDefaults = false; }
        if (property.isSerializable === false ||
            (property.isLightSerializable === false && this.lightSerializing))
            return;
        var value = property.getValue(obj);
        if (!storeDefaults && property.isDefaultValue(value))
            return;
        if (this.isValueArray(value)) {
            var arrValue = [];
            for (var i = 0; i < value.length; i++) {
                arrValue.push(this.toJsonObjectCore(value[i], property, storeDefaults));
            }
            value = arrValue.length > 0 ? arrValue : null;
        }
        else {
            value = this.toJsonObjectCore(value, property, storeDefaults);
        }
        var hasValue = typeof obj["getPropertyValue"] === "function" &&
            obj["getPropertyValue"](property.name, null) !== null;
        if ((storeDefaults && hasValue) || !property.isDefaultValue(value)) {
            if (!Serializer.onSerializingProperty || !Serializer.onSerializingProperty(obj, property, value, result)) {
                result[property.name] = value;
            }
        }
    };
    JsonObject.prototype.valueToObj = function (value, obj, property) {
        if (value == null)
            return;
        this.removePos(property, value);
        if (property != null && property.hasToUseSetValue) {
            property.setValue(obj, value, this);
            return;
        }
        if (this.isValueArray(value)) {
            this.valueToArray(value, obj, property.name, property);
            return;
        }
        var newObj = this.createNewObj(value, property);
        if (newObj.newObj) {
            this.toObjectCore(value, newObj.newObj);
            value = newObj.newObj;
        }
        if (!newObj.error) {
            if (property != null) {
                property.setValue(obj, value, this);
            }
            else {
                obj[property.name] = value;
            }
        }
    };
    JsonObject.prototype.removePos = function (property, value) {
        if (!property || !property.type || property.type.indexOf("value") < 0)
            return;
        this.removePosFromObj(value);
    };
    JsonObject.prototype.removePosFromObj = function (obj) {
        if (!obj)
            return;
        if (Array.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                this.removePosFromObj(obj[i]);
            }
        }
        if (!!obj[JsonObject.positionPropertyName]) {
            delete obj[JsonObject.positionPropertyName];
        }
    };
    JsonObject.prototype.isValueArray = function (value) {
        return value && Array.isArray(value);
    };
    JsonObject.prototype.createNewObj = function (value, property) {
        var result = { newObj: null, error: null };
        var className = value[JsonObject.typePropertyName];
        if (!className && property != null && property.className) {
            className = property.className;
        }
        className = property.getClassName(className);
        result.newObj = className
            ? JsonObject.metaData.createClass(className, value)
            : null;
        result.error = this.checkNewObjectOnErrors(result.newObj, value, property, className);
        return result;
    };
    JsonObject.prototype.checkNewObjectOnErrors = function (newObj, value, property, className) {
        var error = null;
        if (newObj) {
            error = this.getRequiredError(newObj, value);
        }
        else {
            if (property.baseClassName) {
                if (!className) {
                    error = new JsonMissingTypeError(property.name, property.baseClassName);
                }
                else {
                    error = new JsonIncorrectTypeError(property.name, property.baseClassName);
                }
            }
        }
        if (error) {
            this.addNewError(error, value);
        }
        return error;
    };
    JsonObject.prototype.getRequiredError = function (obj, jsonValue) {
        if (!obj.getType || typeof obj.getData === "function")
            return null;
        var className = obj.getType();
        var requiredProperties = JsonObject.metaData.getRequiredProperties(className);
        if (!Array.isArray(requiredProperties))
            return null;
        for (var i = 0; i < requiredProperties.length; i++) {
            var prop = Serializer.findProperty(className, requiredProperties[i]);
            if (!prop || !_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(prop.defaultValue))
                continue;
            if (!jsonValue[prop.name]) {
                return new JsonRequiredPropertyError(prop.name, className);
            }
        }
        return null;
    };
    JsonObject.prototype.addNewError = function (error, jsonObj) {
        if (jsonObj && jsonObj[JsonObject.positionPropertyName]) {
            error.at = jsonObj[JsonObject.positionPropertyName].start;
        }
        this.errors.push(error);
    };
    JsonObject.prototype.valueToArray = function (value, obj, key, property) {
        if (obj[key] && !this.isValueArray(obj[key]))
            return;
        if (obj[key] && value.length > 0)
            obj[key].splice(0, obj[key].length);
        var valueRes = obj[key] ? obj[key] : [];
        this.addValuesIntoArray(value, valueRes, property);
        if (!obj[key])
            obj[key] = valueRes;
    };
    JsonObject.prototype.addValuesIntoArray = function (value, result, property) {
        for (var i = 0; i < value.length; i++) {
            var newValue = this.createNewObj(value[i], property);
            if (newValue.newObj) {
                if (!!value[i].name) {
                    newValue.newObj.name = value[i].name;
                }
                result.push(newValue.newObj);
                this.toObjectCore(value[i], newValue.newObj);
            }
            else {
                if (!newValue.error) {
                    result.push(value[i]);
                }
            }
        }
    };
    JsonObject.prototype.findProperty = function (properties, key) {
        if (!properties)
            return null;
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            if (prop.name == key || prop.alternativeName == key)
                return prop;
        }
        return null;
    };
    JsonObject.typePropertyName = "type";
    JsonObject.positionPropertyName = "pos";
    JsonObject.metaDataValue = new JsonMetadata();
    return JsonObject;
}());

/**
 * An alias for the metadata object. It contains object properties' runtime information and allows you to modify it.
 * @see JsonMetadata
 */
var Serializer = JsonObject.metaData;


/***/ }),

/***/ "./src/list.ts":
/*!*********************!*\
  !*** ./src/list.ts ***!
  \*********************/
/*! exports provided: defaultListCss, ListModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultListCss", function() { return defaultListCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListModel", function() { return ListModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _element_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./element-helper */ "./src/element-helper.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var defaultListCss = {
    root: "sv-list__container",
    item: "sv-list__item",
    searchClearButtonIcon: "sv-list__filter-clear-button",
    loadingIndicator: "sv-list__loading-indicator",
    itemSelected: "sv-list__item--selected",
    itemWithIcon: "sv-list__item--with-icon",
    itemDisabled: "sv-list__item--disabled",
    itemFocused: "sv-list__item--focused",
    itemIcon: "sv-list__item-icon",
    itemSeparator: "sv-list__item-separator",
    itemBody: "sv-list__item-body",
    itemsContainer: "sv-list",
    filter: "sv-list__filter",
    filterIcon: "sv-list__filter-icon",
    filterInput: "sv-list__input",
    emptyContainer: "sv-list__empty-container",
    emptyText: "sv-list__empty-text"
};
var ListModel = /** @class */ (function (_super) {
    __extends(ListModel, _super);
    function ListModel(items, onSelectionChanged, allowSelection, selectedItem, onFilterStringChangedCallback) {
        var _this = _super.call(this) || this;
        _this.onSelectionChanged = onSelectionChanged;
        _this.allowSelection = allowSelection;
        _this.onFilterStringChangedCallback = onFilterStringChangedCallback;
        _this.onItemClick = function (itemValue) {
            if (_this.isItemDisabled(itemValue) || _this.isItemSelected(itemValue)) {
                return;
            }
            _this.isExpanded = false;
            if (_this.allowSelection) {
                _this.selectedItem = itemValue;
            }
            if (!!_this.onSelectionChanged) {
                _this.onSelectionChanged(itemValue);
            }
        };
        _this.isItemDisabled = function (itemValue) {
            return itemValue.enabled !== undefined && !itemValue.enabled;
        };
        _this.isItemSelected = function (itemValue) {
            return _this.areSameItems(_this.selectedItem, itemValue);
        };
        _this.isItemFocused = function (itemValue) {
            return _this.areSameItems(_this.focusedItem, itemValue);
        };
        _this.getItemClass = function (itemValue) {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
                .append(_this.cssClasses.item)
                .append(_this.cssClasses.itemWithIcon, !!itemValue.iconName)
                .append(_this.cssClasses.itemDisabled, _this.isItemDisabled(itemValue))
                .append(_this.cssClasses.itemFocused, _this.isItemFocused(itemValue))
                .append(_this.cssClasses.itemSelected, _this.isItemSelected(itemValue))
                .append(itemValue.css)
                .toString();
        };
        _this.getItemIndent = function (itemValue) {
            var level = itemValue.level || 0;
            return (level + 1) * ListModel.INDENT + "px";
        };
        _this.setItems(items);
        _this.selectedItem = selectedItem;
        return _this;
    }
    ListModel.prototype.hasText = function (item, filterStringInLow) {
        if (!filterStringInLow)
            return true;
        var textInLow = (item.title || "").toLocaleLowerCase();
        return textInLow.indexOf(filterStringInLow.toLocaleLowerCase()) > -1;
    };
    ListModel.prototype.isItemVisible = function (item) {
        return item.visible && (!this.shouldProcessFilter || this.hasText(item, this.filterString));
    };
    Object.defineProperty(ListModel.prototype, "visibleItems", {
        get: function () {
            var _this = this;
            return this.visibleActions.filter(function (item) { return _this.isItemVisible(item); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListModel.prototype, "shouldProcessFilter", {
        get: function () {
            return !this.onFilterStringChangedCallback;
        },
        enumerable: false,
        configurable: true
    });
    ListModel.prototype.onFilterStringChanged = function (text) {
        var _this = this;
        this.isEmpty = this.renderedActions.filter(function (action) { return _this.isItemVisible(action); }).length === 0;
        if (!!this.onFilterStringChangedCallback) {
            this.onFilterStringChangedCallback(text);
        }
    };
    ListModel.prototype.setItems = function (items, sortByVisibleIndex) {
        if (sortByVisibleIndex === void 0) { sortByVisibleIndex = true; }
        _super.prototype.setItems.call(this, items, sortByVisibleIndex);
        if (!this.isAllDataLoaded && !!this.actions.length) {
            this.actions.push(this.loadingIndicator);
        }
    };
    ListModel.prototype.onSet = function () {
        this.showFilter = this.searchEnabled && (this.actions || []).length > ListModel.MINELEMENTCOUNT;
        _super.prototype.onSet.call(this);
    };
    ListModel.prototype.getDefaultCssClasses = function () {
        return defaultListCss;
    };
    ListModel.prototype.areSameItems = function (item1, item2) {
        if (!!this.areSameItemsCallback)
            return this.areSameItemsCallback(item1, item2);
        return !!item1 && !!item2 && item1.id == item2.id;
    };
    Object.defineProperty(ListModel.prototype, "filterStringPlaceholder", {
        get: function () {
            return this.getLocalizationString("filterStringPlaceholder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListModel.prototype, "emptyMessage", {
        get: function () {
            return this.getLocalizationString("emptyMessage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListModel.prototype, "scrollableContainer", {
        get: function () {
            return this.listContainerHtmlElement.querySelector("." + this.getDefaultCssClasses().itemsContainer);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListModel.prototype, "loadingText", {
        get: function () {
            return this.getLocalizationString("loadingFile");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListModel.prototype, "loadingIndicator", {
        get: function () {
            if (!this.loadingIndicatorValue) {
                this.loadingIndicatorValue = (new _actions_action__WEBPACK_IMPORTED_MODULE_2__["Action"]({
                    id: "loadingIndicator",
                    title: this.loadingText,
                    action: function () { },
                    css: this.cssClasses.loadingIndicator
                }));
            }
            return this.loadingIndicatorValue;
        },
        enumerable: false,
        configurable: true
    });
    ListModel.prototype.goToItems = function (event) {
        if (event.key === "ArrowDown" || event.keyCode === 40) {
            var currentElement = event.target.parentElement;
            var listElement = currentElement.parentElement.querySelector("ul");
            if (!!listElement && !!listElement.firstElementChild) {
                _element_helper__WEBPACK_IMPORTED_MODULE_4__["ElementHelper"].focusElement(listElement.firstElementChild);
                event.preventDefault();
            }
        }
    };
    ListModel.prototype.onMouseMove = function (event) {
        this.resetFocusedItem();
    };
    ListModel.prototype.onKeyDown = function (event) {
        var currentElement = event.target;
        if (event.key === "ArrowDown" || event.keyCode === 40) {
            _element_helper__WEBPACK_IMPORTED_MODULE_4__["ElementHelper"].focusElement(_element_helper__WEBPACK_IMPORTED_MODULE_4__["ElementHelper"].getNextElementPreorder(currentElement));
            event.preventDefault();
        }
        else if (event.key === "ArrowUp" || event.keyCode === 38) {
            _element_helper__WEBPACK_IMPORTED_MODULE_4__["ElementHelper"].focusElement(_element_helper__WEBPACK_IMPORTED_MODULE_4__["ElementHelper"].getNextElementPostorder(currentElement));
            event.preventDefault();
        }
    };
    ListModel.prototype.onPointerDown = function (event, item) { };
    ListModel.prototype.refresh = function () {
        this.filterString = "";
        this.resetFocusedItem();
    };
    ListModel.prototype.onClickSearchClearButton = function (event) {
        event.currentTarget.parentElement.querySelector("input").focus();
        this.refresh();
    };
    ListModel.prototype.resetFocusedItem = function () {
        this.focusedItem = undefined;
    };
    ListModel.prototype.focusFirstVisibleItem = function () {
        this.focusedItem = this.visibleItems[0];
    };
    ListModel.prototype.focusLastVisibleItem = function () {
        this.focusedItem = this.visibleItems[this.visibleItems.length - 1];
    };
    ListModel.prototype.initFocusedItem = function () {
        var _this = this;
        this.focusedItem = this.visibleItems.filter(function (item) { return item.visible && _this.isItemSelected(item); })[0];
        if (!this.focusedItem) {
            this.focusFirstVisibleItem();
        }
    };
    ListModel.prototype.focusNextVisibleItem = function () {
        if (!this.focusedItem) {
            this.initFocusedItem();
        }
        else {
            var items = this.visibleItems;
            var currentFocusedItemIndex = items.indexOf(this.focusedItem);
            var nextItem = items[currentFocusedItemIndex + 1];
            if (nextItem) {
                this.focusedItem = nextItem;
            }
            else {
                this.focusFirstVisibleItem();
            }
        }
    };
    ListModel.prototype.focusPrevVisibleItem = function () {
        if (!this.focusedItem) {
            this.initFocusedItem();
        }
        else {
            var items = this.visibleItems;
            var currentFocusedItemIndex = items.indexOf(this.focusedItem);
            var prevItem = items[currentFocusedItemIndex - 1];
            if (prevItem) {
                this.focusedItem = prevItem;
            }
            else {
                this.focusLastVisibleItem();
            }
        }
    };
    ListModel.prototype.selectFocusedItem = function () {
        !!this.focusedItem && this.onItemClick(this.focusedItem);
    };
    ListModel.prototype.initListContainerHtmlElement = function (htmlElement) {
        this.listContainerHtmlElement = htmlElement;
    };
    ListModel.prototype.onLastItemRended = function (item) {
        if (this.isAllDataLoaded)
            return;
        if (item === this.actions[this.actions.length - 1] && !!this.listContainerHtmlElement) {
            this.hasVerticalScroller = _element_helper__WEBPACK_IMPORTED_MODULE_4__["ElementHelper"].hasVerticalScroller(this.scrollableContainer);
        }
    };
    ListModel.prototype.scrollToFocusedItem = function () {
        var _this = this;
        setTimeout(function () {
            if (!_this.listContainerHtmlElement)
                return;
            var item = _this.listContainerHtmlElement.querySelector("." + _this.getDefaultCssClasses().itemFocused);
            if (item) {
                item.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
            }
        }, 0);
    };
    ListModel.prototype.addScrollEventListener = function (handler) {
        if (!!handler) {
            this.scrollHandler = handler;
        }
        if (!!this.scrollHandler) {
            this.scrollableContainer.addEventListener("scroll", this.scrollHandler);
        }
    };
    ListModel.prototype.removeScrollEventListener = function () {
        if (!!this.scrollHandler) {
            this.scrollableContainer.removeEventListener("scroll", this.scrollHandler);
        }
    };
    ListModel.INDENT = 16;
    ListModel.MINELEMENTCOUNT = 10;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({
            defaultValue: true,
            onSet: function (newValue, target) {
                target.onSet();
            }
        })
    ], ListModel.prototype, "searchEnabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], ListModel.prototype, "showFilter", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], ListModel.prototype, "isExpanded", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], ListModel.prototype, "selectedItem", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], ListModel.prototype, "focusedItem", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({
            onSet: function (_, target) {
                target.onFilterStringChanged(target.filterString);
            }
        })
    ], ListModel.prototype, "filterString", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], ListModel.prototype, "hasVerticalScroller", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], ListModel.prototype, "isAllDataLoaded", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], ListModel.prototype, "showSearchClearButton", void 0);
    return ListModel;
}(_actions_container__WEBPACK_IMPORTED_MODULE_1__["ActionContainer"]));



/***/ }),

/***/ "./src/localizablestring.ts":
/*!**********************************!*\
  !*** ./src/localizablestring.ts ***!
  \**********************************/
/*! exports provided: LocalizableString, LocalizableStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalizableString", function() { return LocalizableString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalizableStrings", function() { return LocalizableStrings; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "./src/base.ts");




/**
 * The class represents the string that supports multi-languages and markdown.
 * It uses in all objects where support for multi-languages and markdown is required.
 */
var LocalizableString = /** @class */ (function () {
    function LocalizableString(owner, useMarkdown, name) {
        if (useMarkdown === void 0) { useMarkdown = false; }
        this.owner = owner;
        this.useMarkdown = useMarkdown;
        this.name = name;
        this.values = {};
        this.htmlValues = {};
        this.onStringChanged = new _base__WEBPACK_IMPORTED_MODULE_3__["EventBase"]();
        this.onCreating();
    }
    Object.defineProperty(LocalizableString, "defaultLocale", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName = val;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.prototype.getIsMultiple = function () { return false; };
    Object.defineProperty(LocalizableString.prototype, "locale", {
        get: function () {
            if (this.owner && this.owner.getLocale) {
                var res = this.owner.getLocale();
                if (!!res || !this.sharedData)
                    return res;
            }
            if (!!this.sharedData)
                return this.sharedData.locale;
            return "";
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.prototype.strChanged = function () {
        this.searchableText = undefined;
        if (this.renderedText === undefined)
            return;
        this.calculatedTextValue = this.calcText();
        if (this.renderedText !== this.calculatedTextValue) {
            this.renderedText = undefined;
            this.calculatedTextValue = undefined;
        }
        this.htmlValues = {};
        this.onChanged();
        this.onStringChanged.fire(this, {});
    };
    Object.defineProperty(LocalizableString.prototype, "text", {
        get: function () {
            return this.pureText;
        },
        set: function (value) {
            this.setLocaleText(this.locale, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableString.prototype, "calculatedText", {
        get: function () {
            this.renderedText =
                this.calculatedTextValue !== undefined
                    ? this.calculatedTextValue
                    : this.calcText();
            this.calculatedTextValue = undefined;
            return this.renderedText;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.prototype.calcText = function () {
        var res = this.pureText;
        if (res &&
            this.owner &&
            this.owner.getProcessedText &&
            res.indexOf("{") > -1) {
            res = this.owner.getProcessedText(res);
        }
        if (this.onGetTextCallback)
            res = this.onGetTextCallback(res);
        return res;
    };
    Object.defineProperty(LocalizableString.prototype, "pureText", {
        get: function () {
            var loc = this.locale;
            if (!loc)
                loc = this.defaultLoc;
            var res = this.getValue(loc);
            if (!res && loc === this.defaultLoc) {
                res = this.getValue(_surveyStrings__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].defaultLocale);
            }
            if (!res) {
                var dialect = this.getRootDialect(loc);
                if (!!dialect) {
                    res = this.getValue(dialect);
                }
            }
            if (!res && loc !== this.defaultLoc) {
                res = this.getValue(this.defaultLoc);
            }
            if (!res && !!this.getLocalizationName()) {
                res = this.getLocalizationStr();
                if (!!this.onGetLocalizationTextCallback) {
                    res = this.onGetLocalizationTextCallback(res);
                }
            }
            if (!res)
                res = "";
            return res;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.prototype.getRootDialect = function (loc) {
        if (!loc)
            return loc;
        var index = loc.indexOf("-");
        return index > -1 ? loc.substring(0, index) : "";
    };
    LocalizableString.prototype.getLocalizationName = function () {
        return !!this.sharedData ? this.sharedData.localizationName : this.localizationName;
    };
    LocalizableString.prototype.getLocalizationStr = function () {
        var name = this.getLocalizationName();
        return !!name ? _surveyStrings__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getString(name, this.locale) : "";
    };
    Object.defineProperty(LocalizableString.prototype, "hasHtml", {
        get: function () {
            return this.hasHtmlValue();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableString.prototype, "html", {
        get: function () {
            if (!this.hasHtml)
                return "";
            return this.getHtmlValue();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableString.prototype, "isEmpty", {
        get: function () {
            return this.getValuesKeys().length == 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableString.prototype, "textOrHtml", {
        get: function () {
            return this.hasHtml ? this.getHtmlValue() : this.calculatedText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableString.prototype, "renderedHtml", {
        get: function () {
            return this.textOrHtml;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.prototype.getLocaleText = function (loc) {
        if (!loc)
            loc = this.defaultLoc;
        var res = this.getValue(loc);
        return res ? res : "";
    };
    LocalizableString.prototype.getLocaleTextWithDefault = function (loc) {
        var res = this.getLocaleText(loc);
        if (!res && this.onGetDefaultTextCallback) {
            return this.onGetDefaultTextCallback();
        }
        return res;
    };
    LocalizableString.prototype.setLocaleText = function (loc, value) {
        if (!this.storeDefaultText && value == this.getLocaleTextWithDefault(loc)) {
            if (!!value || !!loc && loc !== this.defaultLoc)
                return;
            var dl = _surveyStrings__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].defaultLocale;
            var oldValue_1 = this.getValue(dl);
            if (!!dl && !!oldValue_1) {
                this.setValue(dl, value);
                this.fireStrChanged(oldValue_1, value);
            }
            return;
        }
        if (!_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].storeDuplicatedTranslations &&
            value &&
            loc &&
            loc != this.defaultLoc &&
            !this.getValue(loc) &&
            value == this.getLocaleText(this.defaultLoc))
            return;
        var curLoc = this.locale;
        if (!loc)
            loc = this.defaultLoc;
        if (!curLoc)
            curLoc = this.defaultLoc;
        var oldValue = this.onStrChanged && loc === curLoc ? this.pureText : undefined;
        delete this.htmlValues[loc];
        if (!value) {
            if (this.getValue(loc))
                this.deleteValue(loc);
        }
        else {
            if (typeof value === "string") {
                if (this.canRemoveLocValue(loc, value)) {
                    this.setLocaleText(loc, null);
                }
                else {
                    this.setValue(loc, value);
                    if (loc == this.defaultLoc) {
                        this.deleteValuesEqualsToDefault(value);
                    }
                }
            }
        }
        this.fireStrChanged(oldValue, value);
    };
    LocalizableString.prototype.canRemoveLocValue = function (loc, val) {
        if (_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].storeDuplicatedTranslations)
            return false;
        if (loc === this.defaultLoc)
            return false;
        var dialect = this.getRootDialect(loc);
        if (!!dialect) {
            var dialectVal = this.getLocaleText(dialect);
            if (!!dialectVal)
                return dialectVal == val;
            return this.canRemoveLocValue(dialect, val);
        }
        else {
            return val == this.getLocaleText(this.defaultLoc);
        }
    };
    LocalizableString.prototype.fireStrChanged = function (oldValue, value) {
        this.strChanged();
        if (!!this.onStrChanged && oldValue !== value) {
            this.onStrChanged(oldValue, value);
        }
    };
    LocalizableString.prototype.hasNonDefaultText = function () {
        var keys = this.getValuesKeys();
        if (keys.length == 0)
            return false;
        return keys.length > 1 || keys[0] != this.defaultLoc;
    };
    LocalizableString.prototype.getLocales = function () {
        var keys = this.getValuesKeys();
        if (keys.length == 0)
            return [];
        return keys;
    };
    LocalizableString.prototype.getJson = function () {
        if (!!this.sharedData)
            return this.sharedData.getJson();
        var keys = this.getValuesKeys();
        if (keys.length == 0)
            return null;
        if (keys.length == 1 &&
            keys[0] == _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName &&
            !_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].serializeLocalizableStringAsObject)
            return this.values[keys[0]];
        return this.values;
    };
    LocalizableString.prototype.setJson = function (value) {
        if (!!this.sharedData) {
            this.sharedData.setJson(value);
            return;
        }
        this.values = {};
        this.htmlValues = {};
        if (!value)
            return;
        if (typeof value === "string") {
            this.setLocaleText(null, value);
        }
        else {
            for (var key in value) {
                this.setLocaleText(key, value[key]);
            }
        }
        this.strChanged();
    };
    Object.defineProperty(LocalizableString.prototype, "renderAs", {
        get: function () {
            if (!this.owner || typeof this.owner.getRenderer !== "function") {
                return LocalizableString.defaultRenderer;
            }
            return this.owner.getRenderer(this.name) || LocalizableString.defaultRenderer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableString.prototype, "renderAsData", {
        get: function () {
            if (!this.owner || typeof this.owner.getRendererContext !== "function") {
                return this;
            }
            return this.owner.getRendererContext(this) || this;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.prototype.equals = function (obj) {
        if (!!this.sharedData)
            return this.sharedData.equals(obj);
        if (!obj || !obj.values)
            return false;
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(this.values, obj.values, false, true, false);
    };
    LocalizableString.prototype.setFindText = function (text) {
        if (this.searchText == text)
            return;
        this.searchText = text;
        if (!this.searchableText) {
            var textOrHtml = this.textOrHtml;
            this.searchableText = !!textOrHtml ? textOrHtml.toLowerCase() : "";
        }
        var str = this.searchableText;
        var index = !!str && !!text ? str.indexOf(text) : undefined;
        if (index < 0)
            index = undefined;
        if (index != undefined || this.searchIndex != index) {
            this.searchIndex = index;
            if (!!this.onSearchChanged) {
                this.onSearchChanged();
            }
        }
        return this.searchIndex != undefined;
    };
    LocalizableString.prototype.onChanged = function () { };
    LocalizableString.prototype.onCreating = function () { };
    LocalizableString.prototype.hasHtmlValue = function () {
        if (!this.owner || !this.useMarkdown)
            return false;
        var loc = this.locale;
        if (!loc)
            loc = this.defaultLoc;
        if (this.htmlValues[loc] !== undefined)
            return !!this.htmlValues[loc];
        var renderedText = this.calculatedText;
        if (!renderedText)
            return false;
        if (!!this.getLocalizationName() && renderedText === this.getLocalizationStr())
            return false;
        var res = this.owner.getMarkdownHtml(renderedText, this.name);
        this.htmlValues[loc] = res;
        return !!res;
    };
    LocalizableString.prototype.getHtmlValue = function () {
        var loc = this.locale;
        if (!loc)
            loc = this.defaultLoc;
        return this.htmlValues[loc];
    };
    LocalizableString.prototype.deleteValuesEqualsToDefault = function (defaultValue) {
        var keys = this.getValuesKeys();
        for (var i = 0; i < keys.length; i++) {
            if (keys[i] == this.defaultLoc)
                continue;
            if (this.getValue(keys[i]) == defaultValue) {
                this.deleteValue(keys[i]);
            }
        }
    };
    LocalizableString.prototype.getValue = function (loc) {
        if (!!this.sharedData)
            return this.sharedData.getValue(loc);
        return this.values[loc];
    };
    LocalizableString.prototype.setValue = function (loc, value) {
        if (!!this.sharedData)
            this.sharedData.setValue(loc, value);
        else
            this.values[loc] = value;
    };
    LocalizableString.prototype.deleteValue = function (loc) {
        if (!!this.sharedData)
            this.sharedData.deleteValue(loc);
        else
            delete this.values[loc];
    };
    LocalizableString.prototype.getValuesKeys = function () {
        if (!!this.sharedData)
            return this.sharedData.getValuesKeys();
        return Object.keys(this.values);
    };
    Object.defineProperty(LocalizableString.prototype, "defaultLoc", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableString.SerializeAsObject = false;
    LocalizableString.defaultRenderer = "sv-string-viewer";
    LocalizableString.editableRenderer = "sv-string-editor";
    return LocalizableString;
}());

/**
 * The class represents the list of strings that supports multi-languages.
 */
var LocalizableStrings = /** @class */ (function () {
    function LocalizableStrings(owner) {
        this.owner = owner;
        this.values = {};
    }
    LocalizableStrings.prototype.getIsMultiple = function () { return true; };
    Object.defineProperty(LocalizableStrings.prototype, "locale", {
        get: function () {
            return this.owner && this.owner.getLocale ? this.owner.getLocale() : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableStrings.prototype, "value", {
        get: function () {
            return this.getValue("");
        },
        set: function (val) {
            this.setValue("", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalizableStrings.prototype, "text", {
        get: function () {
            return Array.isArray(this.value) ? this.value.join("\n") : "";
        },
        set: function (val) {
            this.value = !!val ? val.split("\n") : [];
        },
        enumerable: false,
        configurable: true
    });
    LocalizableStrings.prototype.getLocaleText = function (loc) {
        var res = this.getValueCore(loc, !loc || loc === this.locale);
        if (!res || !Array.isArray(res) || res.length == 0)
            return "";
        return res.join("\n");
    };
    LocalizableStrings.prototype.setLocaleText = function (loc, newValue) {
        var val = !!newValue ? newValue.split("\n") : null;
        this.setValue(loc, val);
    };
    LocalizableStrings.prototype.getValue = function (loc) {
        return this.getValueCore(loc);
    };
    LocalizableStrings.prototype.getValueCore = function (loc, useDefault) {
        if (useDefault === void 0) { useDefault = true; }
        loc = this.getLocale(loc);
        if (this.values[loc])
            return this.values[loc];
        if (useDefault) {
            var defLoc = _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName;
            if (loc !== defLoc && this.values[defLoc])
                return this.values[defLoc];
        }
        return [];
    };
    LocalizableStrings.prototype.setValue = function (loc, val) {
        loc = this.getLocale(loc);
        var oldValue = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].createCopy(this.values);
        if (!val || val.length == 0) {
            delete this.values[loc];
        }
        else {
            this.values[loc] = val;
        }
        if (!!this.onValueChanged) {
            this.onValueChanged(oldValue, this.values);
        }
    };
    LocalizableStrings.prototype.hasValue = function (loc) {
        if (loc === void 0) { loc = ""; }
        return !this.isEmpty && this.getValue(loc).length > 0;
    };
    Object.defineProperty(LocalizableStrings.prototype, "isEmpty", {
        get: function () {
            return this.getValuesKeys().length == 0;
        },
        enumerable: false,
        configurable: true
    });
    LocalizableStrings.prototype.getLocale = function (loc) {
        if (!!loc)
            return loc;
        loc = this.locale;
        return !!loc ? loc : _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName;
    };
    LocalizableStrings.prototype.getLocales = function () {
        var keys = this.getValuesKeys();
        if (keys.length == 0)
            return [];
        return keys;
    };
    LocalizableStrings.prototype.getJson = function () {
        var keys = this.getValuesKeys();
        if (keys.length == 0)
            return null;
        if (keys.length == 1 &&
            keys[0] == _settings__WEBPACK_IMPORTED_MODULE_2__["settings"].defaultLocaleName &&
            !_settings__WEBPACK_IMPORTED_MODULE_2__["settings"].serializeLocalizableStringAsObject)
            return this.values[keys[0]];
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].createCopy(this.values);
    };
    LocalizableStrings.prototype.setJson = function (value) {
        this.values = {};
        if (!value)
            return;
        if (Array.isArray(value)) {
            this.setValue(null, value);
        }
        else {
            for (var key in value) {
                this.setValue(key, value[key]);
            }
        }
    };
    LocalizableStrings.prototype.getValuesKeys = function () {
        return Object.keys(this.values);
    };
    return LocalizableStrings;
}());



/***/ }),

/***/ "./src/localization/english.ts":
/*!*************************************!*\
  !*** ./src/localization/english.ts ***!
  \*************************************/
/*! exports provided: englishStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "englishStrings", function() { return englishStrings; });
// Uncomment the line below if you create a custom dictionary
// import { surveyLocalization } from "survey-core";
var englishStrings = {
    pagePrevText: "Previous",
    pageNextText: "Next",
    completeText: "Complete",
    previewText: "Preview",
    editText: "Edit",
    startSurveyText: "Start",
    otherItemText: "Other (describe)",
    noneItemText: "None",
    selectAllItemText: "Select All",
    progressText: "Page {0} of {1}",
    indexText: "{0} of {1}",
    panelDynamicProgressText: "{0} of {1}",
    questionsProgressText: "Answered {0}/{1} questions",
    emptySurvey: "The survey doesn't contain visible pages or questions.",
    completingSurvey: "Thank you for completing the survey",
    completingSurveyBefore: "Our records show that you have already completed this survey.",
    loadingSurvey: "Loading Survey...",
    placeholder: "Select...",
    ratingOptionsCaption: "Tap to rate here...",
    value: "value",
    requiredError: "Response required.",
    requiredErrorInPanel: "Response required: answer at least one question.",
    requiredInAllRowsError: "Response required: answer questions in all rows.",
    numericError: "The value should be numeric.",
    minError: "The value should not be less than {0}",
    maxError: "The value should not be greater than {0}",
    textMinLength: "Please enter at least {0} character(s).",
    textMaxLength: "Please enter no more than {0} character(s).",
    textMinMaxLength: "Please enter at least {0} and no more than {1} characters.",
    minRowCountError: "Please fill in at least {0} row(s).",
    minSelectError: "Please select at least {0} variant(s).",
    maxSelectError: "Please select no more than {0} variant(s).",
    numericMinMax: "The '{0}' should be at least {1} and at most {2}",
    numericMin: "The '{0}' should be at least {1}",
    numericMax: "The '{0}' should be at most {1}",
    invalidEmail: "Please enter a valid e-mail address.",
    invalidExpression: "The expression: {0} should return 'true'.",
    urlRequestError: "The request returned error '{0}'. {1}",
    urlGetChoicesError: "The request returned empty data or the 'path' property is incorrect",
    exceedMaxSize: "The file size should not exceed {0}.",
    otherRequiredError: "Response required: enter another value.",
    uploadingFile: "Your file is uploading. Please wait several seconds and try again.",
    loadingFile: "Loading...",
    chooseFile: "Choose file(s)...",
    noFileChosen: "No file chosen",
    fileDragAreaPlaceholder: "Drop a file here or click the button below to load the file.",
    confirmDelete: "Do you want to delete the record?",
    keyDuplicationError: "This value should be unique.",
    addColumn: "Add Column",
    addRow: "Add Row",
    removeRow: "Remove",
    emptyRowsText: "There are no rows.",
    addPanel: "Add new",
    removePanel: "Remove",
    choices_Item: "item",
    matrix_column: "Column",
    matrix_row: "Row",
    multipletext_itemname: "text",
    savingData: "The results are being saved on the server...",
    savingDataError: "An error occurred and we could not save the results.",
    savingDataSuccess: "The results were saved successfully!",
    saveAgainButton: "Try again",
    timerMin: "min",
    timerSec: "sec",
    timerSpentAll: "You have spent {0} on this page and {1} in total.",
    timerSpentPage: "You have spent {0} on this page.",
    timerSpentSurvey: "You have spent {0} in total.",
    timerLimitAll: "You have spent {0} of {1} on this page and {2} of {3} in total.",
    timerLimitPage: "You have spent {0} of {1} on this page.",
    timerLimitSurvey: "You have spent {0} of {1} in total.",
    clearCaption: "Clear",
    signaturePlaceHolder: "Sign here",
    chooseFileCaption: "Choose file",
    removeFileCaption: "Remove this file",
    booleanCheckedLabel: "Yes",
    booleanUncheckedLabel: "No",
    confirmRemoveFile: "Are you sure that you want to remove this file: {0}?",
    confirmRemoveAllFiles: "Are you sure that you want to remove all files?",
    questionTitlePatternText: "Question Title",
    modalCancelButtonText: "Cancel",
    modalApplyButtonText: "Apply",
    filterStringPlaceholder: "Type to search...",
    emptyMessage: "No data to display",
    noEntriesText: "There are no entries yet.\nClick the button below to add a new entry.",
    noEntriesReadonlyText: "There are no entries.",
    more: "More",
    tagboxDoneButtonCaption: "Done"
};
// Uncomment the lines below if you create a custom dictionary.
// Replace "en" with a custom locale code (for example, "fr" or "de"),
// Replace `englishStrings` with the name of the variable that contains the custom dictionary.
// surveyLocalization.locales["en"] = englishStrings;
// surveyLocalization.localeNames["en"] = "English";


/***/ }),

/***/ "./src/martixBase.ts":
/*!***************************!*\
  !*** ./src/martixBase.ts ***!
  \***************************/
/*! exports provided: QuestionMatrixBaseModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixBaseModel", function() { return QuestionMatrixBaseModel; });
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






/**
 * A base class for all matrix question types.
 */
var QuestionMatrixBaseModel = /** @class */ (function (_super) {
    __extends(QuestionMatrixBaseModel, _super);
    function QuestionMatrixBaseModel(name) {
        var _this = _super.call(this, name) || this;
        _this.generatedVisibleRows = null;
        _this.generatedTotalRow = null;
        _this.filteredRows = null;
        _this.filteredColumns = null;
        _this.columns = _this.createColumnValues();
        _this.rows = _this.createItemValues("rows");
        return _this;
    }
    QuestionMatrixBaseModel.prototype.createColumnValues = function () {
        return this.createItemValues("columns");
    };
    QuestionMatrixBaseModel.prototype.getType = function () {
        return "matrixbase";
    };
    QuestionMatrixBaseModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.updateVisibilityBasedOnRows();
    };
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "isCompositeQuestion", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "showHeader", {
        /**
         * Specifies whether to display the table header that contains column captions.
         *
         * Default value: `true`
         */
        get: function () {
            return this.getPropertyValue("showHeader");
        },
        set: function (val) {
            this.setPropertyValue("showHeader", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "columns", {
        /**
         * An array of matrix columns.
         *
         * This array can contain primitive values or objects with the `text` (display value) and `value` (value to be saved in survey results) properties.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/single-selection-matrix-table-question/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("columns");
        },
        set: function (newValue) {
            this.setPropertyValue("columns", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "visibleColumns", {
        get: function () {
            return !!this.filteredColumns ? this.filteredColumns : this.columns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "rows", {
        /**
         * An array of matrix rows.
         *
         * This array can contain primitive values or objects with the `text` (display value) and `value` (value to be saved in survey results) properties.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/single-selection-matrix-table-question/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("rows");
        },
        set: function (newValue) {
            var newRows = this.processRowsOnSet(newValue);
            this.setPropertyValue("rows", newRows);
            this.filterItems();
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixBaseModel.prototype.processRowsOnSet = function (newRows) {
        return newRows;
    };
    QuestionMatrixBaseModel.prototype.getVisibleRows = function () {
        return [];
    };
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "visibleRows", {
        /**
         * Returns an array of visible matrix rows.
         * @see rowsVisibleIf
         */
        get: function () {
            return this.getVisibleRows();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "rowsVisibleIf", {
        /**
         * A Boolean expression that is evaluated against each matrix row. If the expression evaluates to `false`, the row becomes hidden.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Use the `{item}` placeholder to reference the current row in the expression.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see visibleRows
         * @see columnsVisibleIf
         */
        get: function () {
            return this.getPropertyValue("rowsVisibleIf", "");
        },
        set: function (val) {
            this.setPropertyValue("rowsVisibleIf", val);
            this.filterItems();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "columnsVisibleIf", {
        /**
         * A Boolean expression that is evaluated against each matrix column. If the expression evaluates to `false`, the column becomes hidden.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Use the `{item}` placeholder to reference the current column in the expression.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see rowsVisibleIf
         */
        get: function () {
            return this.getPropertyValue("columnsVisibleIf", "");
        },
        set: function (val) {
            this.setPropertyValue("columnsVisibleIf", val);
            this.filterItems();
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixBaseModel.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        this.runItemsCondition(values, properties);
    };
    QuestionMatrixBaseModel.prototype.filterItems = function () {
        if (this.areInvisibleElementsShowing) {
            this.onRowsChanged();
            return false;
        }
        if (this.isLoadingFromJson || !this.data)
            return false;
        return this.runItemsCondition(this.getDataFilteredValues(), this.getDataFilteredProperties());
    };
    QuestionMatrixBaseModel.prototype.onColumnsChanged = function () { };
    QuestionMatrixBaseModel.prototype.onRowsChanged = function () {
        this.updateVisibilityBasedOnRows();
        this.fireCallback(this.visibleRowsChangedCallback);
    };
    QuestionMatrixBaseModel.prototype.updateVisibilityBasedOnRows = function () {
        if (this.hideIfRowsEmpty) {
            this.visible =
                this.rows.length > 0 &&
                    (!this.filteredRows || this.filteredRows.length > 0);
        }
    };
    QuestionMatrixBaseModel.prototype.shouldRunColumnExpression = function () {
        return !this.survey || !this.survey.areInvisibleElementsShowing;
    };
    QuestionMatrixBaseModel.prototype.hasRowsAsItems = function () {
        return true;
    };
    QuestionMatrixBaseModel.prototype.runItemsCondition = function (values, properties) {
        var oldVisibleRows = null;
        if (!!this.filteredRows && !_helpers__WEBPACK_IMPORTED_MODULE_4__["Helpers"].isValueEmpty(this.defaultValue)) {
            oldVisibleRows = [];
            for (var i = 0; i < this.filteredRows.length; i++) {
                oldVisibleRows.push(this.filteredRows[i]);
            }
        }
        var hasChanges = this.hasRowsAsItems() && this.runConditionsForRows(values, properties);
        var hasColumnsChanged = this.runConditionsForColumns(values, properties);
        hasChanges = hasColumnsChanged || hasChanges;
        if (hasChanges) {
            if (this.isClearValueOnHidden && (!!this.filteredColumns || !!this.filteredRows)) {
                this.clearIncorrectValues();
            }
            if (!!oldVisibleRows) {
                this.restoreNewVisibleRowsValues(oldVisibleRows);
            }
            this.clearGeneratedRows();
            if (hasColumnsChanged) {
                this.onColumnsChanged();
            }
            this.onRowsChanged();
        }
        return hasChanges;
    };
    QuestionMatrixBaseModel.prototype.clearGeneratedRows = function () {
        this.generatedVisibleRows = null;
    };
    QuestionMatrixBaseModel.prototype.runConditionsForRows = function (values, properties) {
        var showInvisibile = !!this.survey && this.survey.areInvisibleElementsShowing;
        var runner = !showInvisibile && !!this.rowsVisibleIf
            ? new _conditions__WEBPACK_IMPORTED_MODULE_3__["ConditionRunner"](this.rowsVisibleIf)
            : null;
        this.filteredRows = [];
        var hasChanged = _itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].runConditionsForItems(this.rows, this.filteredRows, runner, values, properties, !showInvisibile);
        if (this.filteredRows.length === this.rows.length) {
            this.filteredRows = null;
        }
        return hasChanged;
    };
    QuestionMatrixBaseModel.prototype.runConditionsForColumns = function (values, properties) {
        var useColumnsExpression = !!this.survey && !this.survey.areInvisibleElementsShowing;
        var runner = useColumnsExpression && !!this.columnsVisibleIf
            ? new _conditions__WEBPACK_IMPORTED_MODULE_3__["ConditionRunner"](this.columnsVisibleIf)
            : null;
        this.filteredColumns = [];
        var hasChanged = _itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].runConditionsForItems(this.columns, this.filteredColumns, runner, values, properties, this.shouldRunColumnExpression());
        if (this.filteredColumns.length === this.columns.length) {
            this.filteredColumns = null;
        }
        return hasChanged;
    };
    QuestionMatrixBaseModel.prototype.clearIncorrectValues = function () {
        var val = this.value;
        if (!val)
            return;
        var newVal = null;
        var isChanged = false;
        var rows = !!this.filteredRows ? this.filteredRows : this.rows;
        var columns = !!this.filteredColumns ? this.filteredColumns : this.columns;
        for (var key in val) {
            if (_itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].getItemByValue(rows, key) &&
                _itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].getItemByValue(columns, val[key])) {
                if (newVal == null)
                    newVal = {};
                newVal[key] = val[key];
            }
            else {
                isChanged = true;
            }
        }
        if (isChanged) {
            this.value = newVal;
        }
        _super.prototype.clearIncorrectValues.call(this);
    };
    QuestionMatrixBaseModel.prototype.clearInvisibleValuesInRows = function () {
        if (this.isEmpty())
            return;
        var newData = this.getUnbindValue(this.value);
        var rows = this.rows;
        for (var i = 0; i < rows.length; i++) {
            var key = rows[i].value;
            if (!!newData[key] && !rows[i].isVisible) {
                delete newData[key];
            }
        }
        if (this.isTwoValueEquals(newData, this.value))
            return;
        this.value = newData;
    };
    QuestionMatrixBaseModel.prototype.restoreNewVisibleRowsValues = function (oldVisibleRows) {
        var rows = !!this.filteredRows ? this.filteredRows : this.rows;
        var val = this.defaultValue;
        var newValue = this.getUnbindValue(this.value);
        var isChanged = false;
        for (var key in val) {
            if (_itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].getItemByValue(rows, key) &&
                !_itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].getItemByValue(oldVisibleRows, key)) {
                if (newValue == null)
                    newValue = {};
                newValue[key] = val[key];
                isChanged = true;
            }
        }
        if (isChanged) {
            this.value = newValue;
        }
    };
    QuestionMatrixBaseModel.prototype.needResponsiveWidth = function () {
        //TODO: make it mor intelligent
        return true;
    };
    QuestionMatrixBaseModel.prototype.getTableCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(this.cssClasses.root)
            .append(this.cssClasses.rootAlternateRows, this.alternateRows)
            .append(this.cssClasses.rootVerticalAlignTop, (this.verticalAlign === "top"))
            .append(this.cssClasses.rootVerticalAlignMiddle, (this.verticalAlign === "middle")).toString();
    };
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "columnMinWidth", {
        /**
         * Minimum column width in CSS values.
         *
         * @see width
         */
        get: function () {
            return this.getPropertyValue("columnMinWidth", "");
        },
        set: function (val) {
            this.setPropertyValue("columnMinWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixBaseModel.prototype, "rowTitleWidth", {
        /**
         * A width for the column that displays row titles (first column). Accepts CSS values.
         */
        get: function () {
            return this.getPropertyValue("rowTitleWidth", "");
        },
        set: function (val) {
            this.setPropertyValue("rowTitleWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "middle" })
    ], QuestionMatrixBaseModel.prototype, "verticalAlign", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: false })
    ], QuestionMatrixBaseModel.prototype, "alternateRows", void 0);
    return QuestionMatrixBaseModel;
}(_question__WEBPACK_IMPORTED_MODULE_1__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("matrixbase", [
    { name: "showCommentArea:switch", layout: "row", visible: true, category: "general" },
    "columnsVisibleIf:condition",
    "rowsVisibleIf:condition",
    "columnMinWidth",
    { name: "showHeader:boolean", default: true },
    {
        name: "verticalAlign",
        choices: ["top", "middle"],
        default: "middle",
    },
    { name: "alternateRows:boolean", default: false }
], undefined, "question");


/***/ }),

/***/ "./src/multiSelectListModel.ts":
/*!*************************************!*\
  !*** ./src/multiSelectListModel.ts ***!
  \*************************************/
/*! exports provided: MultiSelectListModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiSelectListModel", function() { return MultiSelectListModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./list */ "./src/list.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var MultiSelectListModel = /** @class */ (function (_super) {
    __extends(MultiSelectListModel, _super);
    function MultiSelectListModel(items, onSelectionChanged, allowSelection, selectedItems, onFilterStringChangedCallback) {
        var _this = _super.call(this, items, onSelectionChanged, allowSelection, undefined, onFilterStringChangedCallback) || this;
        _this.onItemClick = function (item) {
            _this.isExpanded = false;
            if (_this.isItemSelected(item)) {
                _this.selectedItems.splice(_this.selectedItems.indexOf(item), 1)[0];
                !!_this.onSelectionChanged && (_this.onSelectionChanged(item, "removed"));
            }
            else {
                _this.selectedItems.push(item);
                !!_this.onSelectionChanged && (_this.onSelectionChanged(item, "added"));
            }
        };
        _this.isItemDisabled = function (itemValue) {
            return itemValue.enabled !== undefined && !itemValue.enabled;
        };
        _this.isItemSelected = function (itemValue) {
            return !!_this.allowSelection && _this.selectedItems.filter(function (item) { return _this.areSameItems(item, itemValue); }).length > 0;
        };
        _this.setSelectedItems(selectedItems || []);
        return _this;
    }
    MultiSelectListModel.prototype.updateItemState = function () {
        var _this = this;
        this.actions.forEach(function (action) {
            var isSelected = _this.isItemSelected(action);
            action.visible = _this.hideSelectedItems ? !isSelected : true;
        });
    };
    MultiSelectListModel.prototype.updateState = function () {
        var _this = this;
        this.updateItemState();
        this.isEmpty = this.renderedActions.filter(function (action) { return _this.isItemVisible(action); }).length === 0;
    };
    MultiSelectListModel.prototype.setSelectedItems = function (newItems) {
        this.selectedItems = newItems;
        this.updateState();
    };
    MultiSelectListModel.prototype.selectFocusedItem = function () {
        _super.prototype.selectFocusedItem.call(this);
        if (this.hideSelectedItems) {
            this.focusNextVisibleItem();
        }
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], MultiSelectListModel.prototype, "hideSelectedItems", void 0);
    return MultiSelectListModel;
}(_list__WEBPACK_IMPORTED_MODULE_1__["ListModel"]));



/***/ }),

/***/ "./src/notifier.ts":
/*!*************************!*\
  !*** ./src/notifier.ts ***!
  \*************************/
/*! exports provided: Notifier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notifier", function() { return Notifier; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var Notifier = /** @class */ (function (_super) {
    __extends(Notifier, _super);
    function Notifier(cssClasses) {
        var _this = _super.call(this) || this;
        _this.cssClasses = cssClasses;
        _this.timeout = _settings__WEBPACK_IMPORTED_MODULE_1__["settings"].notifications.lifetime;
        _this.timer = undefined;
        _this.actionsVisibility = {};
        _this.actionBar = new _actions_container__WEBPACK_IMPORTED_MODULE_4__["ActionContainer"]();
        _this.actionBar.updateCallback = function (isResetInitialized) {
            _this.actionBar.actions.forEach(function (action) { return action.cssClasses = {}; });
        };
        return _this;
    }
    Notifier.prototype.getCssClass = function (type) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
            .append(this.cssClasses.root)
            .append(this.cssClasses.info, type !== "error" && type !== "success")
            .append(this.cssClasses.error, type === "error")
            .append(this.cssClasses.success, type === "success")
            .toString();
    };
    Notifier.prototype.updateActionsVisibility = function (type) {
        var _this = this;
        this.actionBar.actions.forEach(function (action) { return action.visible = (_this.actionsVisibility[action.id] === type); });
    };
    Notifier.prototype.notify = function (message, type) {
        var _this = this;
        if (type === void 0) { type = "info"; }
        this.updateActionsVisibility(type);
        this.message = message;
        this.active = true;
        this.css = this.getCssClass(type);
        if (!!this.timer) {
            clearTimeout(this.timer);
            this.timer = undefined;
        }
        this.timer = setTimeout(function () {
            _this.timer = undefined;
            _this.active = false;
        }, this.timeout);
    };
    Notifier.prototype.addAction = function (action, notificationType) {
        action.visible = false;
        action.innerCss = this.cssClasses.button;
        var res = this.actionBar.addAction(action);
        this.actionsVisibility[res.id] = notificationType;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: false })
    ], Notifier.prototype, "active", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Notifier.prototype, "message", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], Notifier.prototype, "css", void 0);
    return Notifier;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));



/***/ }),

/***/ "./src/page.ts":
/*!*********************!*\
  !*** ./src/page.ts ***!
  \*********************/
/*! exports provided: PageModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageModel", function() { return PageModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _panel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./panel */ "./src/panel.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * The `PageModel` object describes a survey page and contains properties and methods that allow you to control the page and access its elements (panels and questions).
 *
 * [View Demo](https://surveyjs.io/form-library/examples/nps-question/ (linkStyle))
 */
var PageModel = /** @class */ (function (_super) {
    __extends(PageModel, _super);
    function PageModel(name) {
        if (name === void 0) { name = ""; }
        var _this = _super.call(this, name) || this;
        _this.hasShownValue = false;
        /**
         * A time period that a respondent spent on this page; measured in seconds. Applies only to [quiz surveys](https://surveyjs.io/form-library/documentation/design-survey-create-a-quiz).
         * @see maxTimeToFinish
         */
        _this.timeSpent = 0;
        _this.locTitle.onGetTextCallback = function (text) {
            if (_this.canShowPageNumber() && text)
                return _this.num + ". " + text;
            return text;
        };
        _this.createLocalizableString("navigationTitle", _this, true);
        _this.createLocalizableString("navigationDescription", _this, true);
        return _this;
    }
    PageModel.prototype.getType = function () {
        return "page";
    };
    PageModel.prototype.toString = function () {
        return this.name;
    };
    Object.defineProperty(PageModel.prototype, "isPage", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.canShowPageNumber = function () {
        return this.survey && this.survey.showPageNumbers;
    };
    PageModel.prototype.canShowTitle = function () {
        return this.survey && this.survey.showPageTitles;
    };
    Object.defineProperty(PageModel.prototype, "navigationTitle", {
        /**
         * A caption displayed on a navigation button in the progress bar. Applies only when [`showProgressBar`](https://surveyjs.io/form-library/documentation/surveymodel#showProgressBar) is `true` and [`progressBarType`](https://surveyjs.io/form-library/documentation/surveymodel#progressBarType) is `"buttons"`.
         *
         * If this property is undefined, the navigation button displays the page's [`name`](https://surveyjs.io/form-library/documentation/pagemodel#name).
         */
        get: function () {
            return this.getLocalizableStringText("navigationTitle");
        },
        set: function (val) {
            this.setLocalizableStringText("navigationTitle", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "locNavigationTitle", {
        get: function () {
            return this.getLocalizableString("navigationTitle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "navigationDescription", {
        get: function () {
            return this.getLocalizableStringText("navigationDescription");
        },
        set: function (val) {
            this.setLocalizableStringText("navigationDescription", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "locNavigationDescription", {
        get: function () {
            return this.getLocalizableString("navigationDescription");
        },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.navigationLocStrChanged = function () {
        this.locNavigationTitle.strChanged();
        this.locNavigationDescription.strChanged();
    };
    Object.defineProperty(PageModel.prototype, "passed", {
        get: function () {
            return this.getPropertyValue("passed", false);
        },
        set: function (val) {
            this.setPropertyValue("passed", val);
        },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.delete = function () {
        if (!!this.survey) {
            this.removeSelfFromList(this.survey.pages);
        }
    };
    PageModel.prototype.onFirstRendering = function () {
        if (this.wasShown)
            return;
        _super.prototype.onFirstRendering.call(this);
    };
    Object.defineProperty(PageModel.prototype, "visibleIndex", {
        /**
         * The visible index of the page. It has values from 0 to visible page count - 1.
         * @see SurveyModel.visiblePages
         * @see SurveyModel.pages
         */
        get: function () {
            return this.getPropertyValue("visibleIndex", -1);
        },
        set: function (val) {
            this.setPropertyValue("visibleIndex", val);
        },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.canRenderFirstRows = function () {
        return !this.isDesignMode || this.visibleIndex == 0;
    };
    Object.defineProperty(PageModel.prototype, "isStartPage", {
        /**
         * Returns `true` if this page is a start page.
         *
         * Refer to the following help topic for more information on how to configure a start page: [Start Page](https://surveyjs.io/form-library/documentation/design-survey-create-a-multi-page-survey#start-page).
         */
        get: function () {
            return this.survey && this.survey.isPageStarted(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "isStarted", {
        get: function () { return this.isStartPage; },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.calcCssClasses = function (css) {
        var classes = { page: {}, pageTitle: "", pageDescription: "", row: "", rowMultiple: "", pageRow: "" };
        this.copyCssClasses(classes.page, css.page);
        if (!!css.pageTitle) {
            classes.pageTitle = css.pageTitle;
        }
        if (!!css.pageDescription) {
            classes.pageDescription = css.pageDescription;
        }
        if (!!css.row) {
            classes.row = css.row;
        }
        if (!!css.pageRow) {
            classes.pageRow = css.pageRow;
        }
        if (!!css.rowMultiple) {
            classes.rowMultiple = css.rowMultiple;
        }
        if (this.survey) {
            this.survey.updatePageCssClasses(this, classes);
        }
        return classes;
    };
    Object.defineProperty(PageModel.prototype, "cssTitle", {
        get: function () {
            if (!this.cssClasses.page)
                return "";
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__["CssClassBuilder"]()
                .append(this.cssClasses.page.title)
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "cssRoot", {
        get: function () {
            if (!this.cssClasses.page || !this.survey)
                return "";
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__["CssClassBuilder"]()
                .append(this.cssClasses.page.root)
                .append(this.cssClasses.page.emptyHeaderRoot, !this.survey.renderedHasHeader &&
                !(this.survey.isShowProgressBarOnTop && !this.survey.isStaring))
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "navigationButtonsVisibility", {
        /**
         * Set this property to "hide" to make "Prev", "Next" and "Complete" buttons are invisible for this page. Set this property to "show" to make these buttons visible, even if survey showNavigationButtons property is false.
         * @see SurveyMode.showNavigationButtons
         */
        get: function () {
            return this.getPropertyValue("navigationButtonsVisibility");
        },
        set: function (val) {
            this.setPropertyValue("navigationButtonsVisibility", val.toLowerCase());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "isActive", {
        /**
         * Returns `true` if this is the current page.
         * @see SurveyModel.currentPage
         */
        get: function () {
            return !!this.survey && this.survey.currentPage === this;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "wasShown", {
        /**
         * Returns `true` if the respondent has already seen this page during the current session.
         */
        get: function () {
            return this.hasShownValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PageModel.prototype, "hasShown", {
        get: function () {
            return this.wasShown;
        },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.setWasShown = function (val) {
        if (val == this.hasShownValue)
            return;
        this.hasShownValue = val;
        if (this.isDesignMode || val !== true)
            return;
        var els = this.elements;
        for (var i = 0; i < els.length; i++) {
            if (els[i].isPanel) {
                els[i].randomizeElements(this.areQuestionsRandomized);
            }
        }
        this.randomizeElements(this.areQuestionsRandomized);
    };
    /**
     * Scrolls this page to the top.
     */
    PageModel.prototype.scrollToTop = function () {
        if (!!this.survey) {
            this.survey.scrollElementToTop(this, null, this, this.id);
        }
    };
    // public get timeSpent(): number {
    //   return this.getPropertyValue("timeSpent", 0);
    // }
    // public set timeSpent(val: number) {
    //   this.setPropertyValue("timeSpent", val);
    // }
    /**
     * Returns a list of all panels on this page.
     * @param visibleOnly A Boolean value that specifies whether to include only visible panels.
     * @param includingDesignTime For internal use.
     */
    PageModel.prototype.getAllPanels = function (visibleOnly, includingDesignTime) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        if (includingDesignTime === void 0) { includingDesignTime = false; }
        var result = new Array();
        this.addPanelsIntoList(result, visibleOnly, includingDesignTime);
        return result;
    };
    PageModel.prototype.getPanels = function (visibleOnly, includingDesignTime) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        if (includingDesignTime === void 0) { includingDesignTime = false; }
        return this.getAllPanels(visibleOnly, includingDesignTime);
    };
    Object.defineProperty(PageModel.prototype, "maxTimeToFinish", {
        /**
         * A time period that a respondent has to complete this page; measured in seconds. Applies only to [quiz surveys](https://surveyjs.io/form-library/documentation/design-survey-create-a-quiz).
         *
         * A negative value or 0 sets an unlimited time period.
         *
         * Alternatively, you can use the `SurveyModel`'s [`maxTimeToFinishPage`](https://surveyjs.io/form-library/documentation/surveymodel#maxTimeToFinishPage) property to specify identical time periods for all survey pages.
         * @see timeSpent
         */
        get: function () {
            return this.getPropertyValue("maxTimeToFinish", 0);
        },
        set: function (val) {
            this.setPropertyValue("maxTimeToFinish", val);
        },
        enumerable: false,
        configurable: true
    });
    PageModel.prototype.onNumChanged = function (value) { };
    PageModel.prototype.onVisibleChanged = function () {
        if (this.isRandomizing)
            return;
        _super.prototype.onVisibleChanged.call(this);
        if (this.survey != null) {
            this.survey.pageVisibilityChanged(this, this.isVisible);
        }
    };
    PageModel.prototype.getDragDropInfo = function () { return this.dragDropInfo; };
    PageModel.prototype.dragDropStart = function (src, target, nestedPanelDepth) {
        if (nestedPanelDepth === void 0) { nestedPanelDepth = -1; }
        this.dragDropInfo = new _panel__WEBPACK_IMPORTED_MODULE_1__["DragDropInfo"](src, target, nestedPanelDepth);
    };
    PageModel.prototype.dragDropMoveTo = function (destination, isBottom, isEdge) {
        if (isBottom === void 0) { isBottom = false; }
        if (isEdge === void 0) { isEdge = false; }
        if (!this.dragDropInfo)
            return false;
        this.dragDropInfo.destination = destination;
        this.dragDropInfo.isBottom = isBottom;
        this.dragDropInfo.isEdge = isEdge;
        this.correctDragDropInfo(this.dragDropInfo);
        if (!this.dragDropCanDropTagert())
            return false;
        if (!this.dragDropCanDropSource() || !this.dragDropAllowFromSurvey()) {
            if (!!this.dragDropInfo.source) {
                var row = this.dragDropFindRow(this.dragDropInfo.target);
                this.updateRowsRemoveElementFromRow(this.dragDropInfo.target, row);
            }
            return false;
        }
        this.dragDropAddTarget(this.dragDropInfo);
        return true;
    };
    PageModel.prototype.correctDragDropInfo = function (dragDropInfo) {
        if (!dragDropInfo.destination)
            return;
        var panel = dragDropInfo.destination.isPanel
            ? dragDropInfo.destination
            : null;
        if (!panel)
            return;
        if (!dragDropInfo.target.isLayoutTypeSupported(panel.getChildrenLayoutType())) {
            dragDropInfo.isEdge = true;
        }
    };
    PageModel.prototype.dragDropAllowFromSurvey = function () {
        var dest = this.dragDropInfo.destination;
        if (!dest || !this.survey)
            return true;
        var insertBefore = null;
        var insertAfter = null;
        var parent = dest.isPage || (!this.dragDropInfo.isEdge && dest.isPanel)
            ? dest
            : dest.parent;
        if (!dest.isPage) {
            var container = dest.parent;
            if (!!container) {
                var elements = container.elements;
                var index = elements.indexOf(dest);
                if (index > -1) {
                    insertBefore = dest;
                    insertAfter = dest;
                    if (this.dragDropInfo.isBottom) {
                        insertBefore =
                            index < elements.length - 1 ? elements[index + 1] : null;
                    }
                    else {
                        insertAfter = index > 0 ? elements[index - 1] : null;
                    }
                }
            }
        }
        var options = {
            target: this.dragDropInfo.target,
            source: this.dragDropInfo.source,
            parent: parent,
            insertAfter: insertAfter,
            insertBefore: insertBefore,
        };
        return this.survey.dragAndDropAllow(options);
    };
    PageModel.prototype.dragDropFinish = function (isCancel) {
        if (isCancel === void 0) { isCancel = false; }
        if (!this.dragDropInfo)
            return;
        var target = this.dragDropInfo.target;
        var src = this.dragDropInfo.source;
        var dest = this.dragDropInfo.destination;
        var row = this.dragDropFindRow(target);
        var targetIndex = this.dragDropGetElementIndex(target, row);
        this.updateRowsRemoveElementFromRow(target, row);
        var elementsToSetSWNL = [];
        var elementsToResetSWNL = [];
        if (!isCancel && !!row) {
            var isSamePanel = false;
            if (this.isDesignMode && _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].supportCreatorV2) {
                var srcRow = src && src.parent && src.parent.dragDropFindRow(src);
                if (row.panel.elements[targetIndex] && row.panel.elements[targetIndex].startWithNewLine && row.elements.length > 1 && row.panel.elements[targetIndex] === dest) {
                    elementsToSetSWNL.push(target);
                    elementsToResetSWNL.push(row.panel.elements[targetIndex]);
                }
                if (target.startWithNewLine && row.elements.length > 1 && (!row.panel.elements[targetIndex] || !row.panel.elements[targetIndex].startWithNewLine)) {
                    elementsToResetSWNL.push(target);
                }
                if (srcRow && srcRow.elements[0] === src && srcRow.elements[1]) {
                    elementsToSetSWNL.push(srcRow.elements[1]);
                }
                if (row.elements.length <= 1) {
                    elementsToSetSWNL.push(target);
                }
                if (target.startWithNewLine && row.elements.length > 1 && row.elements[0] !== dest) {
                    elementsToResetSWNL.push(target);
                }
            }
            if (!!src && !!src.parent) {
                this.survey.startMovingQuestion();
                isSamePanel = row.panel == src.parent;
                if (isSamePanel) {
                    row.panel.dragDropMoveElement(src, target, targetIndex);
                    targetIndex = -1;
                }
                else {
                    src.parent.removeElement(src);
                }
            }
            if (targetIndex > -1) {
                row.panel.addElement(target, targetIndex);
            }
            this.survey.stopMovingQuestion();
        }
        elementsToSetSWNL.map(function (e) { e.startWithNewLine = true; });
        elementsToResetSWNL.map(function (e) { e.startWithNewLine = false; });
        this.dragDropInfo = null;
        return !isCancel ? target : null;
    };
    PageModel.prototype.dragDropGetElementIndex = function (target, row) {
        if (!row)
            return -1;
        var index = row.elements.indexOf(target);
        if (row.index == 0)
            return index;
        var prevRow = row.panel.rows[row.index - 1];
        var prevElement = prevRow.elements[prevRow.elements.length - 1];
        return index + row.panel.elements.indexOf(prevElement) + 1;
    };
    PageModel.prototype.dragDropCanDropTagert = function () {
        var destination = this.dragDropInfo.destination;
        if (!destination || destination.isPage)
            return true;
        return this.dragDropCanDropCore(this.dragDropInfo.target, destination);
    };
    PageModel.prototype.dragDropCanDropSource = function () {
        var source = this.dragDropInfo.source;
        if (!source)
            return true;
        var destination = this.dragDropInfo.destination;
        if (!this.dragDropCanDropCore(source, destination))
            return false;
        if (this.isDesignMode && _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].supportCreatorV2) {
            var rowSource = this.dragDropFindRow(source);
            var rowDestination = this.dragDropFindRow(destination);
            if (rowSource !== rowDestination) {
                if (!source.startWithNewLine && destination.startWithNewLine)
                    return true;
                if (source.startWithNewLine && !destination.startWithNewLine) {
                    return true;
                }
            }
            var row = this.dragDropFindRow(destination);
            if (row && row.elements.length == 1)
                return true;
        }
        return this.dragDropCanDropNotNext(source, destination, this.dragDropInfo.isEdge, this.dragDropInfo.isBottom);
    };
    PageModel.prototype.dragDropCanDropCore = function (target, destination) {
        if (!destination)
            return true;
        if (this.dragDropIsSameElement(destination, target))
            return false;
        if (target.isPanel) {
            var pnl = target;
            if (pnl.containsElement(destination) ||
                !!pnl.getElementByName(destination.name))
                return false;
        }
        return true;
    };
    PageModel.prototype.dragDropCanDropNotNext = function (source, destination, isEdge, isBottom) {
        if (!destination || (destination.isPanel && !isEdge))
            return true;
        if (typeof source.parent === "undefined" || source.parent !== destination.parent)
            return true;
        var pnl = source.parent;
        var srcIndex = pnl.elements.indexOf(source);
        var destIndex = pnl.elements.indexOf(destination);
        if (destIndex < srcIndex && !isBottom)
            destIndex--;
        if (isBottom)
            destIndex++;
        return srcIndex < destIndex
            ? destIndex - srcIndex > 1
            : srcIndex - destIndex > 0;
    };
    PageModel.prototype.dragDropIsSameElement = function (el1, el2) {
        return el1 == el2 || el1.name == el2.name;
    };
    PageModel.prototype.ensureRowsVisibility = function () {
        _super.prototype.ensureRowsVisibility.call(this);
        this.getPanels().forEach(function (panel) { return panel.ensureRowsVisibility(); });
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: -1, onSet: function (val, target) { return target.onNumChanged(val); } })
    ], PageModel.prototype, "num", void 0);
    return PageModel;
}(_panel__WEBPACK_IMPORTED_MODULE_1__["PanelModelBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("page", [
    {
        name: "navigationButtonsVisibility",
        default: "inherit",
        choices: ["inherit", "show", "hide"],
    },
    { name: "maxTimeToFinish:number", default: 0, minValue: 0 },
    {
        name: "navigationTitle",
        visibleIf: function (obj) {
            return !!obj.survey && obj.survey.progressBarType === "buttons";
        },
        serializationProperty: "locNavigationTitle",
    },
    {
        name: "navigationDescription",
        visibleIf: function (obj) {
            return !!obj.survey && obj.survey.progressBarType === "buttons";
        },
        serializationProperty: "locNavigationDescription",
    },
    { name: "title:text", serializationProperty: "locTitle" },
    { name: "description:text", serializationProperty: "locDescription" },
], function () {
    return new PageModel();
}, "panelbase");


/***/ }),

/***/ "./src/panel.ts":
/*!**********************!*\
  !*** ./src/panel.ts ***!
  \**********************/
/*! exports provided: DragDropInfo, QuestionRowModel, PanelModelBase, PanelModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropInfo", function() { return DragDropInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionRowModel", function() { return QuestionRowModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelModelBase", function() { return PanelModelBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PanelModel", function() { return PanelModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










var DragDropInfo = /** @class */ (function () {
    function DragDropInfo(source, target, nestedPanelDepth) {
        if (nestedPanelDepth === void 0) { nestedPanelDepth = -1; }
        this.source = source;
        this.target = target;
        this.nestedPanelDepth = nestedPanelDepth;
    }
    return DragDropInfo;
}());

var QuestionRowModel = /** @class */ (function (_super) {
    __extends(QuestionRowModel, _super);
    function QuestionRowModel(panel) {
        var _this = _super.call(this) || this;
        _this.panel = panel;
        _this._scrollableParent = undefined;
        _this._updateVisibility = undefined;
        _this.idValue = QuestionRowModel.getRowId();
        _this.visible = panel.areInvisibleElementsShowing;
        _this.createNewArray("elements");
        _this.createNewArray("visibleElements");
        return _this;
    }
    QuestionRowModel.getRowId = function () {
        return "pr_" + QuestionRowModel.rowCounter++;
    };
    QuestionRowModel.prototype.startLazyRendering = function (rowContainerDiv, findScrollableContainer) {
        var _this = this;
        if (findScrollableContainer === void 0) { findScrollableContainer = _utils_utils__WEBPACK_IMPORTED_MODULE_8__["findScrollableParent"]; }
        this._scrollableParent = findScrollableContainer(rowContainerDiv);
        // if  this._scrollableParent is html the scroll event isn't fired, so we should use window
        if (this._scrollableParent === document.documentElement) {
            this._scrollableParent = window;
        }
        var hasScroll = this._scrollableParent.scrollHeight > this._scrollableParent.clientHeight;
        this.isNeedRender = !hasScroll;
        if (hasScroll) {
            this._updateVisibility = function () {
                var isRowContainerDivVisible = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["isElementVisible"])(rowContainerDiv, 50);
                if (!_this.isNeedRender && isRowContainerDivVisible) {
                    _this.isNeedRender = true;
                    _this.stopLazyRendering();
                }
            };
            setTimeout(function () {
                if (!!_this._scrollableParent &&
                    !!_this._scrollableParent.addEventListener) {
                    _this._scrollableParent.addEventListener("scroll", _this._updateVisibility);
                }
                _this.ensureVisibility();
            }, 10);
        }
    };
    QuestionRowModel.prototype.ensureVisibility = function () {
        if (!!this._updateVisibility) {
            this._updateVisibility();
        }
    };
    QuestionRowModel.prototype.stopLazyRendering = function () {
        if (!!this._scrollableParent &&
            !!this._updateVisibility &&
            !!this._scrollableParent.removeEventListener) {
            this._scrollableParent.removeEventListener("scroll", this._updateVisibility);
        }
        this._scrollableParent = undefined;
        this._updateVisibility = undefined;
    };
    QuestionRowModel.prototype.setIsLazyRendering = function (val) {
        this.isLazyRenderingValue = val;
        this.isNeedRender = !val;
    };
    QuestionRowModel.prototype.isLazyRendering = function () {
        return this.isLazyRenderingValue === true;
    };
    Object.defineProperty(QuestionRowModel.prototype, "id", {
        get: function () {
            return this.idValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRowModel.prototype, "elements", {
        get: function () {
            return this.getPropertyValue("elements");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRowModel.prototype, "visibleElements", {
        get: function () {
            return this.getPropertyValue("visibleElements");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRowModel.prototype, "visible", {
        get: function () {
            return this.getPropertyValue("visible", true);
        },
        set: function (val) {
            this.setPropertyValue("visible", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRowModel.prototype, "isNeedRender", {
        get: function () {
            return this.getPropertyValue("isneedrender", true);
        },
        set: function (val) {
            this.setPropertyValue("isneedrender", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionRowModel.prototype.updateVisible = function () {
        var isVisible = this.calcVisible();
        this.setWidth();
        this.visible = isVisible;
    };
    QuestionRowModel.prototype.addElement = function (q) {
        this.elements.push(q);
        this.updateVisible();
    };
    Object.defineProperty(QuestionRowModel.prototype, "index", {
        get: function () {
            return this.panel.rows.indexOf(this);
        },
        enumerable: false,
        configurable: true
    });
    QuestionRowModel.prototype.setWidth = function () {
        var _a;
        var visCount = this.visibleElements.length;
        if (visCount == 0)
            return;
        var isSingleInRow = this.visibleElements.length === 1;
        var counter = 0;
        var preSetWidthElements = [];
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            this.setElementMaxMinWidth(el);
            if (el.isVisible) {
                el.isSingleInRow = isSingleInRow;
                var width = this.getElementWidth(el);
                if (!!width) {
                    el.renderWidth = this.getRenderedWidthFromWidth(width);
                    preSetWidthElements.push(el);
                }
                if (!(this.panel.isDefaultV2Theme || ((_a = this.panel.parentQuestion) === null || _a === void 0 ? void 0 : _a.isDefaultV2Theme))) {
                    el.rightIndent = counter < visCount - 1 ? 1 : 0;
                }
                counter++;
            }
            else {
                el.renderWidth = "";
            }
        }
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            if (!el.isVisible || preSetWidthElements.indexOf(el) > -1)
                continue;
            if (preSetWidthElements.length == 0) {
                el.renderWidth = (100 / visCount).toFixed(6) + "%";
            }
            else {
                el.renderWidth = this.getRenderedCalcWidth(el, preSetWidthElements, visCount);
            }
        }
    };
    QuestionRowModel.prototype.setElementMaxMinWidth = function (el) {
        if (el.width &&
            typeof el.width === "string" &&
            el.width.indexOf("%") === -1) {
            el.minWidth = el.width;
            el.maxWidth = el.width;
        }
    };
    QuestionRowModel.prototype.getRenderedCalcWidth = function (el, preSetWidthElements, visCount) {
        var expression = "100%";
        for (var i = 0; i < preSetWidthElements.length; i++) {
            expression += " - " + preSetWidthElements[i].renderWidth;
        }
        var calcWidthEl = visCount - preSetWidthElements.length;
        if (calcWidthEl > 1) {
            expression = "(" + expression + ")/" + calcWidthEl.toString();
        }
        return "calc(" + expression + ")";
    };
    QuestionRowModel.prototype.getElementWidth = function (el) {
        var width = el.width;
        if (!width || typeof width !== "string")
            return "";
        return width.trim();
    };
    QuestionRowModel.prototype.getRenderedWidthFromWidth = function (width) {
        return _helpers__WEBPACK_IMPORTED_MODULE_1__["Helpers"].isNumber(width) ? width + "px" : width;
    };
    QuestionRowModel.prototype.calcVisible = function () {
        var visElements = [];
        for (var i = 0; i < this.elements.length; i++) {
            if (this.elements[i].isVisible) {
                visElements.push(this.elements[i]);
            }
        }
        if (this.needToUpdateVisibleElements(visElements)) {
            this.setPropertyValue("visibleElements", visElements);
        }
        return visElements.length > 0;
    };
    QuestionRowModel.prototype.needToUpdateVisibleElements = function (visElements) {
        if (visElements.length !== this.visibleElements.length)
            return true;
        for (var i = 0; i < visElements.length; i++) {
            if (visElements[i] !== this.visibleElements[i])
                return true;
        }
        return false;
    };
    QuestionRowModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.stopLazyRendering();
    };
    QuestionRowModel.prototype.getRowCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
            .append(this.panel.cssClasses.row)
            .append(this.panel.cssClasses.pageRow, this.panel.isPage)
            .append(this.panel.cssClasses.rowMultiple, this.visibleElements.length > 1)
            .toString();
    };
    QuestionRowModel.rowCounter = 100;
    return QuestionRowModel;
}(_base__WEBPACK_IMPORTED_MODULE_2__["Base"]));

/**
 * A base class for the [PanelModel](https://surveyjs.io/form-library/documentation/panelmodel) and [PageModel](https://surveyjs.io/form-library/documentation/pagemodel) classes.
 */
var PanelModelBase = /** @class */ (function (_super) {
    __extends(PanelModelBase, _super);
    function PanelModelBase(name) {
        if (name === void 0) { name = ""; }
        var _this = _super.call(this, name) || this;
        _this.isQuestionsReady = false;
        _this.questionsValue = new Array();
        _this.isRandomizing = false;
        _this.createNewArray("rows");
        _this.elementsValue = _this.createNewArray("elements", _this.onAddElement.bind(_this), _this.onRemoveElement.bind(_this));
        _this.id = PanelModelBase.getPanelId();
        _this.addExpressionProperty("visibleIf", function (obj, res) { _this.visible = res === true; }, function (obj) { return !_this.areInvisibleElementsShowing; });
        _this.addExpressionProperty("enableIf", function (obj, res) { _this.readOnly = res === false; });
        _this.addExpressionProperty("requiredIf", function (obj, res) { _this.isRequired = res === true; });
        _this.createLocalizableString("requiredErrorText", _this);
        _this.registerPropertyChangedHandlers(["questionTitleLocation"], function () {
            _this.onVisibleChanged.bind(_this);
            _this.updateElementCss(true);
        });
        _this.registerPropertyChangedHandlers(["questionStartIndex", "showQuestionNumbers"], function () {
            _this.updateVisibleIndexes();
        });
        return _this;
    }
    PanelModelBase.getPanelId = function () {
        return "sp_" + PanelModelBase.panelCounter++;
    };
    PanelModelBase.prototype.getType = function () {
        return "panelbase";
    };
    PanelModelBase.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        if (this.isDesignMode)
            this.onVisibleChanged();
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].setSurveyImpl(value, isLight);
        }
    };
    PanelModelBase.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.updateDescriptionVisibility(this.description);
        this.markQuestionListDirty();
        this.onRowsChanged();
    };
    Object.defineProperty(PanelModelBase.prototype, "hasTitle", {
        get: function () {
            return ((this.canShowTitle() && this.title.length > 0) ||
                (this.showTitle && this.isDesignMode && _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].allowShowEmptyTitleInDesignMode));
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.canShowTitle = function () { return true; };
    Object.defineProperty(PanelModelBase.prototype, "_showDescription", {
        get: function () {
            return this.survey && this.survey.showPageTitles && this.hasDescription ||
                (this.showDescription && this.isDesignMode &&
                    _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].allowShowEmptyTitleInDesignMode &&
                    _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].allowShowEmptyDescriptionInDesignMode);
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].localeChanged();
        }
    };
    PanelModelBase.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].locStrsChanged();
        }
    };
    Object.defineProperty(PanelModelBase.prototype, "requiredText", {
        /**
         * Returns a character or text string that indicates a required panel/page.
         * @see SurveyModel.requiredText
         * @see isRequired
         */
        get: function () {
            return !!this.survey && this.isRequired
                ? this.survey.requiredText
                : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "titlePattern", {
        get: function () {
            return !!this.survey ? this.survey.questionTitlePattern : "numTitleRequire";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "isRequireTextOnStart", {
        get: function () {
            return this.isRequired && this.titlePattern == "requireNumTitle";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "isRequireTextBeforeTitle", {
        get: function () {
            return this.isRequired && this.titlePattern == "numRequireTitle";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "isRequireTextAfterTitle", {
        get: function () {
            return this.isRequired && this.titlePattern == "numTitleRequire";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "requiredErrorText", {
        /**
         * Specifies a custom error message for a required panel/page.
         * @see isRequired
         * @see requiredIf
         */
        get: function () {
            return this.getLocalizableStringText("requiredErrorText");
        },
        set: function (val) {
            this.setLocalizableStringText("requiredErrorText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "locRequiredErrorText", {
        get: function () {
            return this.getLocalizableString("requiredErrorText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "questionsOrder", {
        /**
         * Specifies the sort order of questions in the panel/page.
         *
         * Possible values:
         *
         * - `"initial"` - Preserves the original order of questions.
         * - `"random"` - Displays questions in random order.
         * - `"default"` (default) - Inherits the setting from the Survey's `questionsOrder` property.
         * @see SurveyModel.questionsOrder
         * @see areQuestionsRandomized
         */
        get: function () {
            return this.getPropertyValue("questionsOrder");
        },
        set: function (val) {
            this.setPropertyValue("questionsOrder", val);
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.canRandomize = function (isRandom) {
        return isRandom && (this.questionsOrder !== "initial") || this.questionsOrder === "random";
    };
    PanelModelBase.prototype.randomizeElements = function (isRandom) {
        if (!this.canRandomize(isRandom) || this.isRandomizing)
            return;
        this.isRandomizing = true;
        var oldElements = [];
        var elements = this.elements;
        for (var i = 0; i < elements.length; i++) {
            oldElements.push(elements[i]);
        }
        var newElements = _helpers__WEBPACK_IMPORTED_MODULE_1__["Helpers"].randomizeArray(oldElements);
        this.setArrayPropertyDirectly("elements", newElements, false);
        this.updateRows();
        this.updateVisibleIndexes();
        this.isRandomizing = false;
    };
    Object.defineProperty(PanelModelBase.prototype, "areQuestionsRandomized", {
        /**
         * Returns `true` if elements in this panel/page are arranged in random order.
         * @see questionsOrder
         */
        get: function () {
            var order = this.questionsOrder == "default" && this.survey
                ? this.survey.questionsOrder
                : this.questionsOrder;
            return order == "random";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "parent", {
        /**
         * Returns a survey element (panel or page) that contains this panel and allows you to move this question to a different survey element.
         *
         * This property is always `null` for the `PageModel` object.
         */
        get: function () {
            return this.getPropertyValue("parent", null);
        },
        set: function (val) {
            this.setPropertyValue("parent", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "depth", {
        get: function () {
            if (this.parent == null)
                return 0;
            return this.parent.depth + 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "visibleIf", {
        /**
         * A Boolean expression. If it evaluates to `false`, this panel/page becomes hidden.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility)
         * @see visible
         * @see isVisible
         */
        get: function () {
            return this.getPropertyValue("visibleIf", "");
        },
        set: function (val) {
            this.setPropertyValue("visibleIf", val);
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.calcCssClasses = function (css) {
        var classes = { panel: {}, error: {}, row: "", rowMultiple: "" };
        this.copyCssClasses(classes.panel, css.panel);
        this.copyCssClasses(classes.error, css.error);
        if (!!css.row) {
            classes.row = css.row;
        }
        if (!!css.rowMultiple) {
            classes.rowMultiple = css.rowMultiple;
        }
        if (this.survey) {
            this.survey.updatePanelCssClasses(this, classes);
        }
        return classes;
    };
    Object.defineProperty(PanelModelBase.prototype, "id", {
        /**
         * An auto-generated unique element identifier.
         */
        get: function () {
            return this.getPropertyValue("id");
        },
        set: function (val) {
            this.setPropertyValue("id", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "isPanel", {
        /**
         * Returns `true` if the survey element is a panel.
         * @see Base.getType
         */
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.getPanel = function () {
        return this;
    };
    PanelModelBase.prototype.getLayoutType = function () {
        return "row";
    };
    PanelModelBase.prototype.isLayoutTypeSupported = function (layoutType) {
        return layoutType !== "flow";
    };
    Object.defineProperty(PanelModelBase.prototype, "questions", {
        /**
         * An array of all questions within this panel/page. Includes questions within nested panels.
         * @see elements
         */
        get: function () {
            if (!this.isQuestionsReady) {
                this.questionsValue = [];
                for (var i = 0; i < this.elements.length; i++) {
                    var el = this.elements[i];
                    if (el.isPanel) {
                        var qs = el.questions;
                        for (var j = 0; j < qs.length; j++) {
                            this.questionsValue.push(qs[j]);
                        }
                    }
                    else {
                        this.questionsValue.push(el);
                    }
                }
                this.isQuestionsReady = true;
            }
            return this.questionsValue;
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.getValidName = function (name) {
        if (!!name)
            return name.trim();
        return name;
    };
    /**
     * Returns a question with a specified `name`. This method does not find questions within nested panels.
     * @param name A question name.
     */
    PanelModelBase.prototype.getQuestionByName = function (name) {
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].name == name)
                return questions[i];
        }
        return null;
    };
    /**
     * Returns a survey element with a specified `name`. This method can find survey elements within nested elements.
     * @param name An element name.
     */
    PanelModelBase.prototype.getElementByName = function (name) {
        var elements = this.elements;
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            if (el.name == name)
                return el;
            var pnl = el.getPanel();
            if (!!pnl) {
                var res = pnl.getElementByName(name);
                if (!!res)
                    return res;
            }
        }
        return null;
    };
    PanelModelBase.prototype.getQuestionByValueName = function (valueName) {
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].getValueName() == valueName)
                return questions[i];
        }
        return null;
    };
    /**
     * Returns a JSON object with question values nested in the panel/page.
     * @see getDisplayValue
     */
    PanelModelBase.prototype.getValue = function () {
        var data = {};
        this.collectValues(data, 0);
        return data;
    };
    PanelModelBase.prototype.collectValues = function (data, level) {
        var elements = this.elements;
        if (level === 0) {
            elements = this.questions;
        }
        var hasValue = false;
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            if (el.isPanel || el.isPage) {
                var panelData = {};
                if (el.collectValues(panelData, level - 1)) {
                    data[el.name] = panelData;
                    hasValue = true;
                }
            }
            else {
                var q = el;
                if (!q.isEmpty()) {
                    var valueName = q.getValueName();
                    data[valueName] = q.value;
                    if (!!this.data) {
                        var comment = this.data.getComment(valueName);
                        if (!!comment) {
                            data[valueName + _base__WEBPACK_IMPORTED_MODULE_2__["Base"].commentSuffix] = comment;
                        }
                    }
                }
                hasValue = true;
            }
        }
        return true;
    };
    /**
     * Returns a JSON object with display texts that correspond to question values nested in the panel/page.
     * @param keysAsText Pass `true` if not only values in the object should be display texts, but also keys. Default value: `false`.
     * @see getValue
     */
    PanelModelBase.prototype.getDisplayValue = function (keysAsText) {
        var data = {};
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            if (q.isEmpty())
                continue;
            var valueName = keysAsText ? q.title : q.getValueName();
            data[valueName] = q.getDisplayValue(keysAsText);
        }
        return data;
    };
    /**
     * Returns a JSON object with comments left to questions within this panel/page. Question names are used as keys.
     */
    PanelModelBase.prototype.getComments = function () {
        var comments = {};
        if (!this.data)
            return comments;
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            var comment = this.data.getComment(q.getValueName());
            if (!!comment) {
                comments[q.getValueName()] = comment;
            }
        }
        return comments;
    };
    /**
     * Removes values that cannot be assigned to nested questions, for example, choices unlisted in the `choices` array.
     *
     * Call this method after you assign new question values in code to ensure that they are acceptable.
     *
     * > This method does not remove values for invisible questions and values that fail validation. Call the `validate()` method to validate newly assigned values.
     *
     * @see validate
     */
    PanelModelBase.prototype.clearIncorrectValues = function () {
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].clearIncorrectValues();
        }
    };
    /**
     * Empties the `errors` array for this panel/page and all its child elements (panels and questions).
     * @see errors
     */
    PanelModelBase.prototype.clearErrors = function () {
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].clearErrors();
        }
        this.errors = [];
    };
    PanelModelBase.prototype.markQuestionListDirty = function () {
        this.isQuestionsReady = false;
        if (this.parent)
            this.parent.markQuestionListDirty();
    };
    Object.defineProperty(PanelModelBase.prototype, "elements", {
        /**
         * An array of all survey elements (questions or panels) within this panel/page. Does not include questions within nested panels.
         * @see questions
         */
        get: function () {
            return this.elementsValue;
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.getElementsInDesign = function (includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        return this.elements;
    };
    /**
     * Checks whether a given element belongs to this panel/page or nested panels.
     * @param element A survey element to check.
     */
    PanelModelBase.prototype.containsElement = function (element) {
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            if (el == element)
                return true;
            var pnl = el.getPanel();
            if (!!pnl) {
                if (pnl.containsElement(element))
                    return true;
            }
        }
        return false;
    };
    Object.defineProperty(PanelModelBase.prototype, "isRequired", {
        /**
         * Makes the panel/page require an answer at least in one nested question. If a respondent leaves the panel/page without any answers, the survey displays a validation error.
         * @see requiredIf
         * @see [Data Validation](https://surveyjs.io/form-library/documentation/data-validation)
         */
        get: function () {
            return this.getPropertyValue("isRequired", false);
        },
        set: function (val) {
            this.setPropertyValue("isRequired", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "requiredIf", {
        /**
         * A Boolean expression. If it evaluates to `true`, this panel/page becomes required (at least one question in the panel/page should have an answer).
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility)
         * @see isRequired
         */
        get: function () {
            return this.getPropertyValue("requiredIf", "");
        },
        set: function (val) {
            this.setPropertyValue("requiredIf", val);
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.searchText = function (text, founded) {
        _super.prototype.searchText.call(this, text, founded);
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].searchText(text, founded);
        }
    };
    PanelModelBase.prototype.hasErrors = function (fireCallback, focusOnFirstError, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (focusOnFirstError === void 0) { focusOnFirstError = false; }
        if (rec === void 0) { rec = null; }
        return !this.validate(fireCallback, focusOnFirstError, rec);
    };
    /**
     * Validates questions within this panel or page and returns `false` if the validation fails.
     * @param fireCallback *Optional.* Pass `false` if you do not want to show validation errors in the UI.
     * @param focusOnFirstError *Optional.* Pass `true` if you want to focus the first question with a validation error.
     * @see [Data Validation](https://surveyjs.io/form-library/documentation/data-validation)
     */
    PanelModelBase.prototype.validate = function (fireCallback, focusOnFirstError, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (focusOnFirstError === void 0) { focusOnFirstError = false; }
        if (rec === void 0) { rec = null; }
        rec = !!rec
            ? rec
            : {
                fireCallback: fireCallback,
                focuseOnFirstError: focusOnFirstError,
                firstErrorQuestion: null,
                result: false,
            };
        if (rec.result !== true)
            rec.result = false;
        this.hasErrorsCore(rec);
        if (rec.firstErrorQuestion) {
            rec.firstErrorQuestion.focus(true);
        }
        return !rec.result;
    };
    PanelModelBase.prototype.hasErrorsInPanels = function (rec) {
        var errors = [];
        this.hasRequiredError(rec, errors);
        if (this.survey) {
            var customError = this.survey.validatePanel(this);
            if (customError) {
                errors.push(customError);
                rec.result = true;
            }
        }
        if (!!rec.fireCallback) {
            if (!!this.survey) {
                this.survey.beforeSettingPanelErrors(this, errors);
            }
            this.errors = errors;
        }
    };
    //ISurveyErrorOwner
    PanelModelBase.prototype.getErrorCustomText = function (text, error) {
        if (!!this.survey)
            return this.survey.getSurveyErrorCustomText(this, text, error);
        return text;
    };
    PanelModelBase.prototype.hasRequiredError = function (rec, errors) {
        if (!this.isRequired)
            return;
        var visQuestions = [];
        this.addQuestionsToList(visQuestions, true);
        if (visQuestions.length == 0)
            return;
        for (var i = 0; i < visQuestions.length; i++) {
            if (!visQuestions[i].isEmpty())
                return;
        }
        rec.result = true;
        errors.push(new _error__WEBPACK_IMPORTED_MODULE_6__["OneAnswerRequiredError"](this.requiredErrorText, this));
        if (rec.focuseOnFirstError && !rec.firstErrorQuestion) {
            rec.firstErrorQuestion = visQuestions[0];
        }
    };
    PanelModelBase.prototype.hasErrorsCore = function (rec) {
        var elements = this.elements;
        var element = null;
        for (var i = 0; i < elements.length; i++) {
            element = elements[i];
            if (!element.isVisible)
                continue;
            if (element.isPanel) {
                element.hasErrorsCore(rec);
            }
            else {
                var question = element;
                if (question.isReadOnly)
                    continue;
                if (!question.validate(rec.fireCallback, rec)) {
                    if (rec.focuseOnFirstError && rec.firstErrorQuestion == null) {
                        rec.firstErrorQuestion = question;
                    }
                    rec.result = true;
                }
            }
        }
        this.hasErrorsInPanels(rec);
        this.updateContainsErrors();
    };
    PanelModelBase.prototype.getContainsErrors = function () {
        var res = _super.prototype.getContainsErrors.call(this);
        if (res)
            return res;
        var elements = this.elements;
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].containsErrors)
                return true;
        }
        return false;
    };
    PanelModelBase.prototype.updateElementVisibility = function () {
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            el.setPropertyValue("isVisible", el.isVisible);
            if (el.isPanel) {
                el.updateElementVisibility();
            }
        }
    };
    PanelModelBase.prototype.getFirstQuestionToFocus = function (withError, ignoreCollapseState) {
        if (withError === void 0) { withError = false; }
        if (ignoreCollapseState === void 0) { ignoreCollapseState = false; }
        if (!withError && !ignoreCollapseState && this.isCollapsed)
            return null;
        var elements = this.elements;
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            if (!el.isVisible || !ignoreCollapseState && el.isCollapsed)
                continue;
            if (el.isPanel) {
                var res = el.getFirstQuestionToFocus(withError, ignoreCollapseState);
                if (!!res)
                    return res;
            }
            else {
                var q = el.getFirstQuestionToFocus(withError);
                if (!!q)
                    return q;
            }
        }
        return null;
    };
    /**
     * Sets focus on the input of the first question in this panel/page.
     */
    PanelModelBase.prototype.focusFirstQuestion = function () {
        var q = this.getFirstQuestionToFocus();
        if (!!q) {
            q.focus();
        }
    };
    /**
     * Sets focus on the input of the first question in this panel/page that has an error.
     * @see validate
     */
    PanelModelBase.prototype.focusFirstErrorQuestion = function () {
        var q = this.getFirstQuestionToFocus(true);
        if (!!q) {
            q.focus();
        }
    };
    PanelModelBase.prototype.addQuestionsToList = function (list, visibleOnly, includingDesignTime) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        if (includingDesignTime === void 0) { includingDesignTime = false; }
        this.addElementsToList(list, visibleOnly, includingDesignTime, false);
    };
    PanelModelBase.prototype.addPanelsIntoList = function (list, visibleOnly, includingDesignTime) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        if (includingDesignTime === void 0) { includingDesignTime = false; }
        this.addElementsToList(list, visibleOnly, includingDesignTime, true);
    };
    PanelModelBase.prototype.addElementsToList = function (list, visibleOnly, includingDesignTime, isPanel) {
        if (visibleOnly && !this.visible)
            return;
        this.addElementsToListCore(list, this.elements, visibleOnly, includingDesignTime, isPanel);
    };
    PanelModelBase.prototype.addElementsToListCore = function (list, elements, visibleOnly, includingDesignTime, isPanel) {
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            if (visibleOnly && !el.visible)
                continue;
            if ((isPanel && el.isPanel) || (!isPanel && !el.isPanel)) {
                list.push(el);
            }
            if (el.isPanel) {
                el.addElementsToListCore(list, el.elements, visibleOnly, includingDesignTime, isPanel);
            }
            else {
                if (includingDesignTime) {
                    this.addElementsToListCore(list, el.getElementsInDesign(false), visibleOnly, includingDesignTime, isPanel);
                }
            }
        }
    };
    PanelModelBase.prototype.updateCustomWidgets = function () {
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].updateCustomWidgets();
        }
    };
    Object.defineProperty(PanelModelBase.prototype, "questionTitleLocation", {
        /**
         * Sets a title location relative to the input field for questions that belong to this panel/page.
         *
         * Use this property to override the `questionTitleLocation` property specified for the survey. You can also set the `titleLocation` property for individual questions.
         *
         * Possible values:
         *
         * - `"default"` (default) - Inherits the setting from the `questionTitleLocation` property specified for the survey.
         * - `"top"` - Displays the title above the input field.
         * - `"bottom"` - Displays the title below the input field.
         * - `"left"` - Displays the title to the left of the input field.
         * - `"hidden"` - Hides the question title.
         *
         * > Certain question types (Matrix, Multiple Text) do not support the `"left"` value. For them, the `"top"` value is used.
         * @see SurveyModel.questionTitleLocation
         */
        get: function () {
            return this.getPropertyValue("questionTitleLocation");
        },
        set: function (value) {
            this.setPropertyValue("questionTitleLocation", value.toLowerCase());
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.getQuestionTitleLocation = function () {
        if (this.onGetQuestionTitleLocation)
            return this.onGetQuestionTitleLocation();
        if (this.questionTitleLocation != "default")
            return this.questionTitleLocation;
        if (this.parent)
            return this.parent.getQuestionTitleLocation();
        return this.survey ? this.survey.questionTitleLocation : "top";
    };
    PanelModelBase.prototype.getStartIndex = function () {
        if (!!this.parent)
            return this.parent.getQuestionStartIndex();
        if (!!this.survey)
            return this.survey.questionStartIndex;
        return "";
    };
    PanelModelBase.prototype.getQuestionStartIndex = function () {
        return this.getStartIndex();
    };
    PanelModelBase.prototype.getChildrenLayoutType = function () {
        return "row";
    };
    PanelModelBase.prototype.getProgressInfo = function () {
        return _survey_element__WEBPACK_IMPORTED_MODULE_3__["SurveyElement"].getProgressInfoByElements(this.elements, this.isRequired);
    };
    Object.defineProperty(PanelModelBase.prototype, "root", {
        get: function () {
            var res = this;
            while (res.parent)
                res = res.parent;
            return res;
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.childVisibilityChanged = function () {
        var newIsVisibleValue = this.getIsPageVisible(null);
        var oldIsVisibleValue = this.getPropertyValue("isVisible", true);
        if (newIsVisibleValue !== oldIsVisibleValue) {
            this.onVisibleChanged();
        }
    };
    PanelModelBase.prototype.createRowAndSetLazy = function (index) {
        var row = this.createRow();
        row.setIsLazyRendering(this.isLazyRenderInRow(index));
        return row;
    };
    PanelModelBase.prototype.createRow = function () {
        return new QuestionRowModel(this);
    };
    PanelModelBase.prototype.onSurveyLoad = function () {
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].onSurveyLoad();
        }
        this.onElementVisibilityChanged(this);
    };
    PanelModelBase.prototype.onFirstRendering = function () {
        _super.prototype.onFirstRendering.call(this);
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].onFirstRendering();
        }
        this.onRowsChanged();
    };
    PanelModelBase.prototype.updateRows = function () {
        if (this.isLoadingFromJson)
            return;
        for (var i = 0; i < this.elements.length; i++) {
            if (this.elements[i].isPanel) {
                this.elements[i].updateRows();
            }
        }
        this.onRowsChanged();
    };
    Object.defineProperty(PanelModelBase.prototype, "rows", {
        get: function () {
            return this.getPropertyValue("rows");
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.ensureRowsVisibility = function () {
        this.rows.forEach(function (row) {
            row.ensureVisibility();
        });
    };
    PanelModelBase.prototype.onRowsChanged = function () {
        if (this.isLoadingFromJson)
            return;
        this.setArrayPropertyDirectly("rows", this.buildRows());
    };
    PanelModelBase.prototype.onAddElement = function (element, index) {
        var _this = this;
        element.setSurveyImpl(this.surveyImpl);
        element.parent = this;
        this.markQuestionListDirty();
        this.updateRowsOnElementAdded(element, index);
        if (element.isPanel) {
            var p = element;
            if (this.survey) {
                this.survey.panelAdded(p, index, this, this.root);
            }
        }
        else {
            if (this.survey) {
                var q = element;
                this.survey.questionAdded(q, index, this, this.root);
            }
        }
        if (!!this.addElementCallback)
            this.addElementCallback(element);
        var self = this;
        element.registerPropertyChangedHandlers(["visible", "isVisible"], function () {
            _this.onElementVisibilityChanged(element);
        }, this.id);
        element.registerPropertyChangedHandlers(["startWithNewLine"], function () {
            _this.onElementStartWithNewLineChanged(element);
        }, this.id);
        this.onElementVisibilityChanged(this);
    };
    PanelModelBase.prototype.onRemoveElement = function (element) {
        element.parent = null;
        this.markQuestionListDirty();
        element.unregisterPropertyChangedHandlers(["visible", "isVisible", "startWithNewLine"], this.id);
        this.updateRowsOnElementRemoved(element);
        if (this.isRandomizing)
            return;
        if (!element.isPanel) {
            if (this.survey)
                this.survey.questionRemoved(element);
        }
        else {
            if (this.survey)
                this.survey.panelRemoved(element);
        }
        if (!!this.removeElementCallback)
            this.removeElementCallback(element);
        this.onElementVisibilityChanged(this);
    };
    PanelModelBase.prototype.onElementVisibilityChanged = function (element) {
        if (this.isLoadingFromJson || this.isRandomizing)
            return;
        this.updateRowsVisibility(element);
        this.childVisibilityChanged();
        if (!!this.parent) {
            this.parent.onElementVisibilityChanged(this);
        }
    };
    PanelModelBase.prototype.onElementStartWithNewLineChanged = function (element) {
        this.onRowsChanged();
    };
    PanelModelBase.prototype.updateRowsVisibility = function (element) {
        var rows = this.rows;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (row.elements.indexOf(element) > -1) {
                row.updateVisible();
                if (row.visible && !row.isNeedRender) {
                    row.isNeedRender = true;
                }
                break;
            }
        }
    };
    PanelModelBase.prototype.canBuildRows = function () {
        return !this.isLoadingFromJson && this.getChildrenLayoutType() == "row";
    };
    PanelModelBase.prototype.buildRows = function () {
        if (!this.canBuildRows())
            return [];
        var result = new Array();
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            var isNewRow = i == 0 || el.startWithNewLine;
            var row = isNewRow ? this.createRowAndSetLazy(result.length) : result[result.length - 1];
            if (isNewRow)
                result.push(row);
            row.addElement(el);
        }
        for (var i = 0; i < result.length; i++) {
            result[i].updateVisible();
        }
        return result;
    };
    PanelModelBase.prototype.isLazyRenderInRow = function (rowIndex) {
        if (!this.survey || !this.survey.isLazyRendering)
            return false;
        return (rowIndex >= _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].lazyRowsRenderingStartRow ||
            !this.canRenderFirstRows());
    };
    PanelModelBase.prototype.canRenderFirstRows = function () {
        return this.isPage;
    };
    PanelModelBase.prototype.getDragDropInfo = function () {
        var page = this.getPage(this.parent);
        return !!page ? page.getDragDropInfo() : undefined;
    };
    PanelModelBase.prototype.updateRowsOnElementAdded = function (element, index) {
        if (!this.canBuildRows())
            return;
        var dragDropInfo = _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].supportCreatorV2 ? this.getDragDropInfo() : undefined;
        if (!dragDropInfo) {
            dragDropInfo = new DragDropInfo(null, element);
            dragDropInfo.target = element;
            dragDropInfo.isEdge = this.elements.length > 1;
            if (this.elements.length < 2) {
                dragDropInfo.destination = this;
            }
            else {
                dragDropInfo.isBottom = index > 0;
                if (index == 0) {
                    dragDropInfo.destination = this.elements[1];
                }
                else {
                    dragDropInfo.destination = this.elements[index - 1];
                }
            }
        }
        this.dragDropAddTargetToRow(dragDropInfo, null);
    };
    PanelModelBase.prototype.updateRowsOnElementRemoved = function (element) {
        if (!this.canBuildRows())
            return;
        this.updateRowsRemoveElementFromRow(element, this.findRowByElement(element));
    };
    PanelModelBase.prototype.updateRowsRemoveElementFromRow = function (element, row) {
        if (!row || !row.panel)
            return;
        var elIndex = row.elements.indexOf(element);
        if (elIndex < 0)
            return;
        row.elements.splice(elIndex, 1);
        if (row.elements.length > 0) {
            row.elements[0].startWithNewLine = true;
            row.updateVisible();
        }
        else {
            if (row.index >= 0) {
                row.panel.rows.splice(row.index, 1);
            }
        }
    };
    PanelModelBase.prototype.findRowByElement = function (el) {
        var rows = this.rows;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].elements.indexOf(el) > -1)
                return rows[i];
        }
        return null;
    };
    PanelModelBase.prototype.elementWidthChanged = function (el) {
        if (this.isLoadingFromJson)
            return;
        var row = this.findRowByElement(el);
        if (!!row) {
            row.updateVisible();
        }
    };
    Object.defineProperty(PanelModelBase.prototype, "processedTitle", {
        get: function () {
            return this.getRenderedTitle(this.locTitle.textOrHtml);
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.getRenderedTitle = function (str) {
        return this.textProcessor != null
            ? this.textProcessor.processText(str, true)
            : str;
    };
    Object.defineProperty(PanelModelBase.prototype, "visible", {
        /**
         * Gets or sets panel/page visibility.
         *
         * If you want to display or hide a survey element based on a condition, specify the `visibleIf` property. Refer to the following help topic for information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see visibleIf
         * @see isVisible
         */
        get: function () {
            return this.getPropertyValue("visible", true);
        },
        set: function (value) {
            if (value === this.visible)
                return;
            this.setPropertyValue("visible", value);
            this.setPropertyValue("isVisible", this.isVisible);
            if (!this.isLoadingFromJson)
                this.onVisibleChanged();
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.onVisibleChanged = function () {
        if (this.isRandomizing)
            return;
        this.setPropertyValue("isVisible", this.isVisible);
        if (!!this.survey &&
            this.survey.isClearValueOnHiddenContainer &&
            !this.isLoadingFromJson) {
            var questions = this.questions;
            for (var i = 0; i < questions.length; i++) {
                if (!this.isVisible) {
                    questions[i].clearValueIfInvisible();
                }
                else {
                    questions[i].updateValueWithDefaults();
                }
            }
        }
    };
    Object.defineProperty(PanelModelBase.prototype, "isVisible", {
        /**
         * Returns `true` if the panel/page is visible or the survey is currently in design mode.
         *
         * If you want to display or hide a question based on a condition, specify the `visibleIf` property. Refer to the following help topic for information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see visibleIf
         * @see visible
         */
        get: function () {
            return this.areInvisibleElementsShowing || this.getIsPageVisible(null);
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.getIsPageVisible = function (exceptionQuestion) {
        if (!this.visible)
            return false;
        for (var i = 0; i < this.elements.length; i++) {
            if (this.elements[i] == exceptionQuestion)
                continue;
            if (this.elements[i].isVisible)
                return true;
        }
        return false;
    };
    PanelModelBase.prototype.setVisibleIndex = function (index) {
        if (!this.isVisible || index < 0) {
            this.resetVisibleIndexes();
            return 0;
        }
        this.lastVisibleIndex = index;
        var startIndex = index;
        index += this.beforeSetVisibleIndex(index);
        var panelStartIndex = this.getPanelStartIndex(index);
        var panelIndex = panelStartIndex;
        for (var i = 0; i < this.elements.length; i++) {
            panelIndex += this.elements[i].setVisibleIndex(panelIndex);
        }
        if (this.isContinueNumbering()) {
            index += panelIndex - panelStartIndex;
        }
        return index - startIndex;
    };
    PanelModelBase.prototype.updateVisibleIndexes = function () {
        if (this.lastVisibleIndex === undefined)
            return;
        this.resetVisibleIndexes();
        this.setVisibleIndex(this.lastVisibleIndex);
    };
    PanelModelBase.prototype.resetVisibleIndexes = function () {
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].setVisibleIndex(-1);
        }
    };
    PanelModelBase.prototype.beforeSetVisibleIndex = function (index) {
        return 0;
    };
    PanelModelBase.prototype.getPanelStartIndex = function (index) {
        return index;
    };
    PanelModelBase.prototype.isContinueNumbering = function () {
        return true;
    };
    Object.defineProperty(PanelModelBase.prototype, "isReadOnly", {
        get: function () {
            var isParentReadOnly = !!this.parent && this.parent.isReadOnly;
            var isSurveyReadOnly = !!this.survey && this.survey.isDisplayMode;
            return this.readOnly || isParentReadOnly || isSurveyReadOnly;
        },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.onReadOnlyChanged = function () {
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            el.setPropertyValue("isReadOnly", el.isReadOnly);
        }
        _super.prototype.onReadOnlyChanged.call(this);
    };
    PanelModelBase.prototype.updateElementCss = function (reNew) {
        _super.prototype.updateElementCss.call(this, reNew);
        for (var i = 0; i < this.elements.length; i++) {
            var el = this.elements[i];
            el.updateElementCss(reNew);
        }
    };
    Object.defineProperty(PanelModelBase.prototype, "enableIf", {
        /**
         * A Boolean expression. If it evaluates to `false`, this panel/page becomes read-only.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility)
         * @see readOnly
         * @see isReadOnly
         */
        get: function () {
            return this.getPropertyValue("enableIf", "");
        },
        set: function (val) {
            this.setPropertyValue("enableIf", val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds a survey element (question or panel) to this panel/page. Returns `true` if the element was added successfully; `false` otherwise.
     * @param element A survey element to add.
     * @param index A desired index of this element in the `elements` array.
     * @see addNewQuestion
     * @see addNewPanel
     */
    PanelModelBase.prototype.addElement = function (element, index) {
        if (index === void 0) { index = -1; }
        if (!this.canAddElement(element))
            return false;
        if (index < 0 || index >= this.elements.length) {
            this.elements.push(element);
        }
        else {
            this.elements.splice(index, 0, element);
        }
        return true;
    };
    PanelModelBase.prototype.insertElementAfter = function (element, after) {
        var index = this.elements.indexOf(after);
        if (index >= 0)
            this.addElement(element, index + 1);
    };
    PanelModelBase.prototype.insertElementBefore = function (element, before) {
        var index = this.elements.indexOf(before);
        if (index >= 0)
            this.addElement(element, index);
    };
    PanelModelBase.prototype.canAddElement = function (element) {
        return (!!element && element.isLayoutTypeSupported(this.getChildrenLayoutType()));
    };
    PanelModelBase.prototype.addQuestion = function (question, index) {
        if (index === void 0) { index = -1; }
        return this.addElement(question, index);
    };
    PanelModelBase.prototype.addPanel = function (panel, index) {
        if (index === void 0) { index = -1; }
        return this.addElement(panel, index);
    };
    /**
     * Creates a new question of a given type and adds it to the `elements` array at a specified index.
     *
     * This method returns `null` if the question cannot be created or added to this panel/page; otherwise, the method returns the created question.
     *
     * @param questionType A [question type](https://surveyjs.io/form-library/documentation/question#getType).
     * @param name A question name.
     * @param index A desired index of the new question in the `elements` array.
     * @see elements
     * @see addElement
     */
    PanelModelBase.prototype.addNewQuestion = function (questionType, name, index) {
        if (name === void 0) { name = null; }
        if (index === void 0) { index = -1; }
        var question = _questionfactory__WEBPACK_IMPORTED_MODULE_5__["QuestionFactory"].Instance.createQuestion(questionType, name);
        if (!this.addQuestion(question, index))
            return null;
        return question;
    };
    /**
     * Creates a new panel and adds it to the end of the `elements` array.
     *
     * This method returns `null` if the panel cannot be created or added to this panel/page; otherwise, the method returns the created panel.
     * @param name A panel name.
     * @see elements
     * @see addElement
     */
    PanelModelBase.prototype.addNewPanel = function (name) {
        if (name === void 0) { name = null; }
        var panel = this.createNewPanel(name);
        if (!this.addPanel(panel))
            return null;
        return panel;
    };
    PanelModelBase.prototype.indexOf = function (element) {
        return this.elements.indexOf(element);
    };
    PanelModelBase.prototype.createNewPanel = function (name) {
        var res = _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass("panel");
        res.name = name;
        return res;
    };
    /**
     * Deletes a survey element (question or panel) from this panel/page. Returns `true` if the element was deleted successfully; `false` otherwise.
     * @param element A survey element to delete.
     * @see elements
     */
    PanelModelBase.prototype.removeElement = function (element) {
        var index = this.elements.indexOf(element);
        if (index < 0) {
            for (var i = 0; i < this.elements.length; i++) {
                if (this.elements[i].removeElement(element))
                    return true;
            }
            return false;
        }
        this.elements.splice(index, 1);
        return true;
    };
    PanelModelBase.prototype.removeQuestion = function (question) {
        this.removeElement(question);
    };
    PanelModelBase.prototype.runCondition = function (values, properties) {
        if (this.isDesignMode || this.isLoadingFromJson)
            return;
        var elements = this.elements.slice();
        for (var i = 0; i < elements.length; i++) {
            elements[i].runCondition(values, properties);
        }
        this.runConditionCore(values, properties);
    };
    PanelModelBase.prototype.onAnyValueChanged = function (name) {
        var els = this.elements;
        for (var i = 0; i < els.length; i++) {
            els[i].onAnyValueChanged(name);
        }
    };
    PanelModelBase.prototype.checkBindings = function (valueName, value) {
        var els = this.elements;
        for (var i = 0; i < els.length; i++) {
            els[i].checkBindings(valueName, value);
        }
    };
    PanelModelBase.prototype.dragDropAddTarget = function (dragDropInfo) {
        var prevRow = this.dragDropFindRow(dragDropInfo.target);
        if (this.dragDropAddTargetToRow(dragDropInfo, prevRow)) {
            this.updateRowsRemoveElementFromRow(dragDropInfo.target, prevRow);
        }
    };
    PanelModelBase.prototype.dragDropFindRow = function (findElement) {
        if (!findElement || findElement.isPage)
            return null;
        var element = findElement;
        var rows = this.rows;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].elements.indexOf(element) > -1)
                return rows[i];
        }
        for (var i = 0; i < this.elements.length; i++) {
            var pnl = this.elements[i].getPanel();
            if (!pnl)
                continue;
            var row = pnl.dragDropFindRow(element);
            if (!!row)
                return row;
        }
        return null;
    };
    PanelModelBase.prototype.dragDropAddTargetToRow = function (dragDropInfo, prevRow) {
        if (!dragDropInfo.destination)
            return true;
        if (this.dragDropAddTargetToEmptyPanel(dragDropInfo))
            return true;
        var dest = dragDropInfo.destination;
        var destRow = this.dragDropFindRow(dest);
        if (!destRow)
            return true;
        if (_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].supportCreatorV2 && this.isDesignMode) {
            if (destRow.elements.length > 1)
                return this.dragDropAddTargetToExistingRow(dragDropInfo, destRow, prevRow);
            else
                return this.dragDropAddTargetToNewRow(dragDropInfo, destRow, prevRow);
        }
        if (!dragDropInfo.target.startWithNewLine)
            return this.dragDropAddTargetToExistingRow(dragDropInfo, destRow, prevRow);
        return this.dragDropAddTargetToNewRow(dragDropInfo, destRow, prevRow);
    };
    PanelModelBase.prototype.dragDropAddTargetToEmptyPanel = function (dragDropInfo) {
        if (dragDropInfo.destination.isPage) {
            this.dragDropAddTargetToEmptyPanelCore(this.root, dragDropInfo.target, dragDropInfo.isBottom);
            return true;
        }
        var dest = dragDropInfo.destination;
        if (dest.isPanel && !dragDropInfo.isEdge) {
            var panel = dest;
            if (dragDropInfo.target["template"] === dest) {
                return false;
            }
            if (dragDropInfo.nestedPanelDepth < 0 ||
                dragDropInfo.nestedPanelDepth >= panel.depth) {
                this.dragDropAddTargetToEmptyPanelCore(dest, dragDropInfo.target, dragDropInfo.isBottom);
                return true;
            }
        }
        return false;
    };
    PanelModelBase.prototype.dragDropAddTargetToExistingRow = function (dragDropInfo, destRow, prevRow) {
        var index = destRow.elements.indexOf(dragDropInfo.destination);
        if (index == 0 &&
            !dragDropInfo.isBottom) {
            if (this.isDesignMode && _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].supportCreatorV2) {
            }
            else if (destRow.elements[0].startWithNewLine) {
                if (destRow.index > 0) {
                    dragDropInfo.isBottom = true;
                    destRow = destRow.panel.rows[destRow.index - 1];
                    dragDropInfo.destination =
                        destRow.elements[destRow.elements.length - 1];
                    return this.dragDropAddTargetToExistingRow(dragDropInfo, destRow, prevRow);
                }
                else {
                    return this.dragDropAddTargetToNewRow(dragDropInfo, destRow, prevRow);
                }
            }
        }
        var prevRowIndex = -1;
        if (prevRow == destRow) {
            prevRowIndex = destRow.elements.indexOf(dragDropInfo.target);
        }
        if (dragDropInfo.isBottom)
            index++;
        var srcRow = this.findRowByElement(dragDropInfo.source);
        if (srcRow == destRow &&
            srcRow.elements.indexOf(dragDropInfo.source) == index)
            return false;
        if (index == prevRowIndex)
            return false;
        if (prevRowIndex > -1) {
            destRow.elements.splice(prevRowIndex, 1);
            if (prevRowIndex < index)
                index--;
        }
        destRow.elements.splice(index, 0, dragDropInfo.target);
        destRow.updateVisible();
        return prevRowIndex < 0;
    };
    PanelModelBase.prototype.dragDropAddTargetToNewRow = function (dragDropInfo, destRow, prevRow) {
        var targetRow = destRow.panel.createRowAndSetLazy(destRow.panel.rows.length);
        if (this.isDesignMode && _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].supportCreatorV2) {
            targetRow.setIsLazyRendering(false);
        }
        targetRow.addElement(dragDropInfo.target);
        var index = destRow.index;
        if (dragDropInfo.isBottom) {
            index++;
        }
        //same row
        if (!!prevRow && prevRow.panel == targetRow.panel && prevRow.index == index)
            return false;
        var srcRow = this.findRowByElement(dragDropInfo.source);
        if (!!srcRow &&
            srcRow.panel == targetRow.panel &&
            srcRow.elements.length == 1 &&
            srcRow.index == index)
            return false;
        destRow.panel.rows.splice(index, 0, targetRow);
        return true;
    };
    PanelModelBase.prototype.dragDropAddTargetToEmptyPanelCore = function (panel, target, isBottom) {
        var targetRow = panel.createRow();
        targetRow.addElement(target);
        if (panel.elements.length == 0 || isBottom) {
            panel.rows.push(targetRow);
        }
        else {
            panel.rows.splice(0, 0, targetRow);
        }
    };
    PanelModelBase.prototype.dragDropMoveElement = function (src, target, targetIndex) {
        var srcIndex = src.parent.elements.indexOf(src);
        if (targetIndex > srcIndex) {
            targetIndex--;
        }
        this.removeElement(src);
        this.addElement(target, targetIndex);
    };
    PanelModelBase.prototype.needResponsiveWidth = function () {
        var result = false;
        this.elements.forEach(function (e) {
            if (e.needResponsiveWidth())
                result = true;
        });
        this.rows.forEach(function (r) {
            if (r.elements.length > 1)
                result = true;
        });
        return result;
    };
    Object.defineProperty(PanelModelBase.prototype, "hasDescriptionUnderTitle", {
        get: function () {
            return this.hasDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "cssHeader", {
        get: function () {
            return this.cssClasses.panel.header;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "cssDescription", {
        get: function () {
            return this.cssClasses.panel.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModelBase.prototype, "no", {
        //ITitleOwner
        get: function () { return ""; },
        enumerable: false,
        configurable: true
    });
    PanelModelBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this.rows) {
            for (var i = 0; i < this.rows.length; i++) {
                this.rows[i].dispose();
            }
            this.rows.splice(0, this.rows.length);
        }
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].dispose();
        }
        this.elements.splice(0, this.elements.length);
    };
    PanelModelBase.panelCounter = 100;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], PanelModelBase.prototype, "showTitle", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], PanelModelBase.prototype, "showDescription", void 0);
    return PanelModelBase;
}(_survey_element__WEBPACK_IMPORTED_MODULE_3__["SurveyElement"]));

/**
 * A class that describes the Panel container element.
 *
 * A panel can contain questions and other panels. Refer to the following help topic for an illustration: [Survey Structure](https://surveyjs.io/form-library/documentation/design-survey-create-a-simple-survey#survey-structure).
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-panel/ (linkStyle))
 */
var PanelModel = /** @class */ (function (_super) {
    __extends(PanelModel, _super);
    function PanelModel(name) {
        if (name === void 0) { name = ""; }
        var _this = _super.call(this, name) || this;
        _this.createNewArray("footerActions");
        _this.registerPropertyChangedHandlers(["width"], function () {
            if (!!_this.parent) {
                _this.parent.elementWidthChanged(_this);
            }
        });
        _this.registerPropertyChangedHandlers(["indent", "innerIndent", "rightIndent"], function () { _this.onIndentChanged(); });
        return _this;
    }
    PanelModel.prototype.getType = function () {
        return "panel";
    };
    Object.defineProperty(PanelModel.prototype, "contentId", {
        get: function () {
            return this.id + "_content";
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        if (live) {
            return !!this.parent ? this.parent.getSurvey(live) : null;
        }
        return _super.prototype.getSurvey.call(this, live);
    };
    PanelModel.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        this.onIndentChanged();
    };
    PanelModel.prototype.onSetData = function () {
        _super.prototype.onSetData.call(this);
        this.onIndentChanged();
    };
    Object.defineProperty(PanelModel.prototype, "isPanel", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "page", {
        /**
         * Returns a page to which the panel belongs and allows you to move this panel to a different page.
         * @see PanelModelBase.parent
         */
        get: function () {
            return this.getPage(this.parent);
        },
        set: function (val) {
            this.setPage(this.parent, val);
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.delete = function () {
        if (!!this.parent) {
            this.removeSelfFromList(this.parent.elements);
        }
    };
    PanelModel.prototype.moveTo = function (container, insertBefore) {
        if (insertBefore === void 0) { insertBefore = null; }
        return this.moveToBase(this.parent, container, insertBefore);
    };
    Object.defineProperty(PanelModel.prototype, "visibleIndex", {
        /**
         * Returns the visible index of the panel in the survey. Commonly it is -1 and it doesn't show.
         * You have to set showNumber to true to show index/numbering for the Panel
         * @see showNumber
         */
        get: function () {
            return this.getPropertyValue("visibleIndex", -1);
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.getTitleOwner = function () { return this; };
    Object.defineProperty(PanelModel.prototype, "showNumber", {
        /**
         * Specifies whether to show the panel number in the title.
         *
         * Default value: `false`
         * @see SurveyModel.showQuestionNumbers
         * @see SurveyModel.questionTitlePattern
         */
        get: function () {
            return this.getPropertyValue("showNumber", false);
        },
        set: function (val) {
            this.setPropertyValue("showNumber", val);
            this.notifySurveyOnVisibilityChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "showQuestionNumbers", {
        /**
         * Gets or sets a value that specifies how the elements numbers inside panel are displayed.
         *
         * The following options are available:
         *
         * - `default` - display questions numbers as defined in parent panel or survey
         * - `onpanel` - display questions numbers, start numbering from beginning of this page
         * - `off` - turn off the numbering for questions titles
         * @see showNumber
         */
        get: function () {
            return this.getPropertyValue("showQuestionNumbers");
        },
        set: function (value) {
            this.setPropertyValue("showQuestionNumbers", value);
            this.notifySurveyOnVisibilityChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "questionStartIndex", {
        /**
         * Specifies a number or letter used to start numbering of elements inside the panel.
         *
         * You can include desired prefixes and postfixes alongside the number or letter:
         *
         * ```js
         * "questionStartIndex": "a.", // a., b., c., ...
         * "questionStartIndex": "#3", // #3, #4, #5, ...
         * "questionStartIndex": "(B)." // (B)., (C)., (D)., ...
         * ```
         * Default value: `"1."` (inherited from `SurveyModel`'s `questionStartIndex` property)
         * @see SurveyModel.questionStartIndex
         * @see showQuestionNumbers
         */
        get: function () {
            return this.getPropertyValue("questionStartIndex", "");
        },
        set: function (val) {
            this.setPropertyValue("questionStartIndex", val);
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.getQuestionStartIndex = function () {
        if (!!this.questionStartIndex)
            return this.questionStartIndex;
        return _super.prototype.getQuestionStartIndex.call(this);
    };
    Object.defineProperty(PanelModel.prototype, "no", {
        /**
         * A question number or letter (depends on the `questionStartIndex` property).
         *
         * When the question number, title, or the entire question is invisible, this property returns an empty string.
         * @see questionStartIndex
         * @see showNumber
         * @see visibleIf
         */
        get: function () {
            return this.getPropertyValue("no", "");
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.setNo = function (visibleIndex) {
        this.setPropertyValue("no", _helpers__WEBPACK_IMPORTED_MODULE_1__["Helpers"].getNumberByIndex(this.visibleIndex, this.getStartIndex()));
    };
    PanelModel.prototype.beforeSetVisibleIndex = function (index) {
        var visibleIndex = -1;
        if (this.showNumber && (this.isDesignMode || !this.locTitle.isEmpty)) {
            visibleIndex = index;
        }
        this.setPropertyValue("visibleIndex", visibleIndex);
        this.setNo(visibleIndex);
        return visibleIndex < 0 ? 0 : 1;
    };
    PanelModel.prototype.getPanelStartIndex = function (index) {
        if (this.showQuestionNumbers == "off")
            return -1;
        if (this.showQuestionNumbers == "onpanel")
            return 0;
        return index;
    };
    PanelModel.prototype.isContinueNumbering = function () {
        return (this.showQuestionNumbers != "off" && this.showQuestionNumbers != "onpanel");
    };
    PanelModel.prototype.notifySurveyOnVisibilityChanged = function () {
        if (this.survey != null && !this.isLoadingFromJson) {
            this.survey.panelVisibilityChanged(this, this.isVisible);
        }
    };
    PanelModel.prototype.hasErrorsCore = function (rec) {
        _super.prototype.hasErrorsCore.call(this, rec);
        if (this.isCollapsed && rec.result && rec.fireCallback) {
            this.expand();
        }
    };
    PanelModel.prototype.getRenderedTitle = function (str) {
        if (!str) {
            if (this.isCollapsed || this.isExpanded)
                return this.name;
            if (this.isDesignMode)
                return "[" + this.name + "]";
        }
        return _super.prototype.getRenderedTitle.call(this, str);
    };
    Object.defineProperty(PanelModel.prototype, "innerIndent", {
        /**
         * Increases or decreases an indent of panel content from the left edge. Accepts positive integer values and 0.
         */
        get: function () {
            return this.getPropertyValue("innerIndent");
        },
        set: function (val) {
            this.setPropertyValue("innerIndent", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "startWithNewLine", {
        /**
         * Disable this property if you want to render the current panel on the same line or row with the previous question or panel.
         */
        get: function () {
            return this.getPropertyValue("startWithNewLine");
        },
        set: function (value) {
            this.setPropertyValue("startWithNewLine", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "allowAdaptiveActions", {
        get: function () {
            return this.getPropertyValue("allowAdaptiveActions");
        },
        set: function (val) {
            this.setPropertyValue("allowAdaptiveActions", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "innerPaddingLeft", {
        get: function () {
            return this.getPropertyValue("innerPaddingLeft", "");
        },
        set: function (val) {
            this.setPropertyValue("innerPaddingLeft", val);
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.onIndentChanged = function () {
        if (!this.getSurvey())
            return;
        this.innerPaddingLeft = this.getIndentSize(this.innerIndent);
        this.paddingLeft = this.getIndentSize(this.indent);
        this.paddingRight = this.getIndentSize(this.rightIndent);
    };
    PanelModel.prototype.getIndentSize = function (indent) {
        if (indent < 1)
            return "";
        var css = this.survey["css"];
        if (!css || !css.question.indent)
            return "";
        return indent * css.question.indent + "px";
    };
    PanelModel.prototype.clearOnDeletingContainer = function () {
        this.elements.forEach(function (element) {
            if (element instanceof _question__WEBPACK_IMPORTED_MODULE_4__["Question"] || element instanceof PanelModel) {
                element.clearOnDeletingContainer();
            }
        });
    };
    Object.defineProperty(PanelModel.prototype, "footerActions", {
        get: function () {
            return this.getPropertyValue("footerActions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "footerToolbarCss", {
        get: function () {
            var _a;
            return this.footerToolbarCssValue || ((_a = this.cssClasses.panel) === null || _a === void 0 ? void 0 : _a.footer);
        },
        set: function (val) {
            this.footerToolbarCssValue = val;
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.getFooterToolbar = function () {
        var _this = this;
        var _a;
        if (!this.footerToolbarValue) {
            var actions = this.footerActions;
            if (this.hasEditButton) {
                actions.push({
                    id: "cancel-preview",
                    title: this.survey.editText,
                    innerCss: this.survey.cssNavigationEdit,
                    action: function () { _this.cancelPreview(); }
                });
            }
            if (!!this.onGetFooterActionsCallback) {
                actions = this.onGetFooterActionsCallback();
            }
            else {
                actions = (_a = this.survey) === null || _a === void 0 ? void 0 : _a.getUpdatedPanelFooterActions(this, actions);
            }
            this.footerToolbarValue = this.createActionContainer(this.allowAdaptiveActions);
            // if (!!this.cssClasses.panel) {
            this.footerToolbarValue.containerCss = this.footerToolbarCss;
            // }
            this.footerToolbarValue.setItems(actions);
        }
        return this.footerToolbarValue;
    };
    Object.defineProperty(PanelModel.prototype, "hasEditButton", {
        get: function () {
            if (this.survey && this.survey.state === "preview")
                return this.depth === 1;
            return false;
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.cancelPreview = function () {
        if (!this.hasEditButton)
            return;
        this.survey.cancelPreviewByPage(this);
    };
    Object.defineProperty(PanelModel.prototype, "cssTitle", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
                .append(this.cssClasses.panel.title)
                .append(this.cssClasses.panel.titleExpandable, this.state !== "default")
                .append(this.cssClasses.panel.titleExpanded, this.isExpanded)
                .append(this.cssClasses.panel.titleCollapsed, this.isCollapsed)
                .append(this.cssClasses.panel.titleDisabled, this.isReadOnly)
                .append(this.cssClasses.panel.titleOnError, this.containsErrors)
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PanelModel.prototype, "cssError", {
        get: function () {
            return this.getCssError(this.cssClasses);
        },
        enumerable: false,
        configurable: true
    });
    PanelModel.prototype.getCssError = function (cssClasses) {
        var builder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]().append(this.cssClasses.error.root);
        return builder.append("panel-error-root", builder.isEmpty()).toString();
    };
    PanelModel.prototype.onVisibleChanged = function () {
        _super.prototype.onVisibleChanged.call(this);
        this.notifySurveyOnVisibilityChanged();
    };
    PanelModel.prototype.needResponsiveWidth = function () {
        if (!this.startWithNewLine) {
            return true;
        }
        else {
            return _super.prototype.needResponsiveWidth.call(this);
        }
    };
    PanelModel.prototype.focusIn = function () {
        if (!this.survey)
            return;
        this.survey.whenPanelFocusIn(this);
    };
    PanelModel.prototype.getContainerCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]().append(this.cssClasses.panel.container)
            .append(this.cssClasses.panel.withFrame, this.hasFrameV2)
            .append(this.cssClasses.panel.nested, !!((this.parent && this.parent.isPanel || !this.isSingleInRow) && !this.isDesignMode))
            .append(this.cssClasses.panel.collapsed, !!this.isCollapsed)
            .append(this.cssClasses.panel.expanded, !!this.isExpanded)
            .append(this.cssClasses.panel.invisible, !this.isDesignMode && this.areInvisibleElementsShowing && !this.visible)
            .toString();
    };
    return PanelModel;
}(PanelModelBase));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("panelbase", [
    "name",
    {
        name: "elements",
        alternativeName: "questions",
        baseClassName: "question",
        visible: false,
        isLightSerializable: false,
    },
    { name: "visible:switch", default: true },
    "visibleIf:condition",
    "enableIf:condition",
    "requiredIf:condition",
    "readOnly:boolean",
    {
        name: "questionTitleLocation",
        default: "default",
        choices: ["default", "top", "bottom", "left", "hidden"],
    },
    { name: "title:text", serializationProperty: "locTitle" },
    { name: "description:text", serializationProperty: "locDescription" },
    {
        name: "questionsOrder",
        default: "default",
        choices: ["default", "initial", "random"],
    },
], function () {
    return new PanelModelBase();
});
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("panel", [
    {
        name: "state",
        default: "default",
        choices: ["default", "collapsed", "expanded"],
    },
    "isRequired:switch",
    {
        name: "requiredErrorText:text",
        serializationProperty: "locRequiredErrorText",
    },
    { name: "startWithNewLine:boolean", default: true },
    "width",
    { name: "minWidth", defaultFunc: function () { return "auto"; } },
    { name: "maxWidth", defaultFunc: function () { return _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].maxWidth; } },
    { name: "innerIndent:number", default: 0, choices: [0, 1, 2, 3] },
    { name: "indent:number", default: 0, choices: [0, 1, 2, 3] },
    {
        name: "page",
        isSerializable: false,
        visibleIf: function (obj) {
            var survey = obj ? obj.survey : null;
            return !survey || !survey.pages || survey.pages.length > 1;
        },
        choices: function (obj) {
            var survey = obj ? obj.survey : null;
            return survey
                ? survey.pages.map(function (p) {
                    return { value: p.name, text: p.title };
                })
                : [];
        },
    },
    "showNumber:boolean",
    {
        name: "showQuestionNumbers",
        default: "default",
        choices: ["default", "onpanel", "off"],
    },
    "questionStartIndex",
    { name: "allowAdaptiveActions:boolean", default: true, visible: false },
], function () {
    return new PanelModel();
}, "panelbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_5__["ElementFactory"].Instance.registerElement("panel", function (name) {
    return new PanelModel(name);
});


/***/ }),

/***/ "./src/popup-dropdown-view-model.ts":
/*!******************************************!*\
  !*** ./src/popup-dropdown-view-model.ts ***!
  \******************************************/
/*! exports provided: PopupDropdownViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupDropdownViewModel", function() { return PopupDropdownViewModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _utils_popup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/popup */ "./src/utils/popup.ts");
/* harmony import */ var _popup_view_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./popup-view-model */ "./src/popup-view-model.ts");
/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/devices */ "./src/utils/devices.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var PopupDropdownViewModel = /** @class */ (function (_super) {
    __extends(PopupDropdownViewModel, _super);
    function PopupDropdownViewModel(model, targetElement) {
        var _this = _super.call(this, model) || this;
        _this.targetElement = targetElement;
        _this.scrollEventCallBack = function (event) {
            if (_this.isOverlay && _utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"]) {
                event.stopPropagation();
                event.preventDefault();
                return;
            }
            _this.hidePopup();
        };
        _this.resizeEventCallback = function () {
            var visualViewport = window.visualViewport;
            document.documentElement.style.setProperty("--sv-popup-overlay-height", visualViewport.height * visualViewport.scale + "px");
        };
        _this.clientY = 0;
        _this.isTablet = false;
        _this.touchStartEventCallback = function (event) {
            _this.clientY = event.touches[0].clientY;
        };
        _this.touchMoveEventCallback = function (event) {
            var currentElement = event.target;
            while (currentElement !== _this.container) {
                if (window.getComputedStyle(currentElement).overflowY === "auto" && currentElement.scrollHeight !== currentElement.offsetHeight) {
                    var scrollHeight = currentElement.scrollHeight, scrollTop = currentElement.scrollTop, clientHeight = currentElement.clientHeight;
                    var deltaY = _this.clientY - event.changedTouches[0].clientY;
                    if (!(deltaY > 0 && Math.abs(scrollHeight - clientHeight - scrollTop) < 1) && !(deltaY < 0 && scrollTop <= 0)) {
                        return;
                    }
                }
                currentElement = currentElement.parentElement;
            }
            event.preventDefault();
        };
        _this.model.onRecalculatePosition.add(function (_, options) {
            if (!_this.isOverlay) {
                _this.updatePosition(options.isResetHeight);
            }
        });
        return _this;
    }
    PopupDropdownViewModel.prototype.calculateIsTablet = function (windowWidth, windowHeight) {
        var width = Math.min(windowWidth, windowHeight);
        this.isTablet = width >= PopupDropdownViewModel.tabletSizeBreakpoint;
    };
    PopupDropdownViewModel.prototype._updatePosition = function () {
        if (!this.targetElement)
            return;
        var targetElementRect = this.targetElement.getBoundingClientRect();
        var background = this.container.children[0];
        if (!background)
            return;
        var popupContainer = background.children[0];
        if (!popupContainer)
            return;
        var scrollContent = popupContainer.querySelector(".sv-popup__scrolling-content");
        var popupComputedStyle = window.getComputedStyle(popupContainer);
        var marginLeft = (parseFloat(popupComputedStyle.marginLeft) || 0);
        var marginRight = (parseFloat(popupComputedStyle.marginRight) || 0);
        var height = popupContainer.offsetHeight - scrollContent.offsetHeight + scrollContent.scrollHeight;
        var width = popupContainer.getBoundingClientRect().width;
        this.model.setWidthByTarget && (this.minWidth = targetElementRect.width + "px");
        var verticalPosition = this.model.verticalPosition;
        var actualHorizontalPosition = this.getActualHorizontalPosition();
        if (!!window) {
            height = Math.ceil(Math.min(height, window.innerHeight * 0.9, window.visualViewport.height));
            verticalPosition = _utils_popup__WEBPACK_IMPORTED_MODULE_1__["PopupUtils"].updateVerticalPosition(targetElementRect, height, this.model.verticalPosition, this.model.showPointer, window.innerHeight);
        }
        this.popupDirection = _utils_popup__WEBPACK_IMPORTED_MODULE_1__["PopupUtils"].calculatePopupDirection(verticalPosition, actualHorizontalPosition);
        var pos = _utils_popup__WEBPACK_IMPORTED_MODULE_1__["PopupUtils"].calculatePosition(targetElementRect, height, width + marginLeft + marginRight, verticalPosition, actualHorizontalPosition, this.showHeader, this.model.positionMode);
        if (!!window) {
            var newVerticalDimensions = _utils_popup__WEBPACK_IMPORTED_MODULE_1__["PopupUtils"].updateVerticalDimensions(pos.top, height, window.innerHeight);
            if (!!newVerticalDimensions) {
                this.height = newVerticalDimensions.height + "px";
                pos.top = newVerticalDimensions.top;
            }
            var newHorizontalDimensions = _utils_popup__WEBPACK_IMPORTED_MODULE_1__["PopupUtils"].updateHorizontalDimensions(pos.left, width, window.innerWidth, actualHorizontalPosition, this.model.positionMode, { left: marginLeft, right: marginRight });
            if (!!newHorizontalDimensions) {
                this.width = newHorizontalDimensions.width ? newHorizontalDimensions.width + "px" : undefined;
                pos.left = newHorizontalDimensions.left;
            }
        }
        this.left = pos.left + "px";
        this.top = pos.top + "px";
        if (this.showHeader) {
            this.pointerTarget = _utils_popup__WEBPACK_IMPORTED_MODULE_1__["PopupUtils"].calculatePointerTarget(targetElementRect, pos.top, pos.left, verticalPosition, actualHorizontalPosition, marginLeft, marginRight);
        }
        this.pointerTarget.top += "px";
        this.pointerTarget.left += "px";
    };
    PopupDropdownViewModel.prototype.getActualHorizontalPosition = function () {
        var actualHorizontalPosition = this.model.horizontalPosition;
        var isRtl = !!document && document.defaultView.getComputedStyle(document.body).direction == "rtl";
        if (isRtl) {
            if (this.model.horizontalPosition === "left") {
                actualHorizontalPosition = "right";
            }
            else if (this.model.horizontalPosition === "right") {
                actualHorizontalPosition = "left";
            }
        }
        return actualHorizontalPosition;
    };
    PopupDropdownViewModel.prototype.getStyleClass = function () {
        return _super.prototype.getStyleClass.call(this)
            .append("sv-popup--dropdown", !this.isOverlay)
            .append("sv-popup--tablet", this.isTablet && this.isOverlay)
            .append("sv-popup--show-pointer", !this.isOverlay && this.showHeader)
            .append("sv-popup--" + this.popupDirection, !this.isOverlay && this.showHeader);
    };
    PopupDropdownViewModel.prototype.getShowHeader = function () {
        return this.model.showPointer && !this.isOverlay;
    };
    PopupDropdownViewModel.prototype.getPopupHeaderTemplate = function () {
        return "popup-pointer";
    };
    PopupDropdownViewModel.prototype.updateOnShowing = function () {
        this.prevActiveElement = document.activeElement;
        if (this.isOverlay) {
            this.resetDimensionsAndPositionStyleProperties();
        }
        else {
            this.updatePosition(true, false);
        }
        this.switchFocus();
        if (this.shouldCreateResizeCallback) {
            window.visualViewport.addEventListener("resize", this.resizeEventCallback);
            if (this.container) {
                this.container.addEventListener("touchstart", this.touchStartEventCallback);
                this.container.addEventListener("touchmove", this.touchMoveEventCallback);
            }
            this.calculateIsTablet(window.innerWidth, window.innerHeight);
            this.resizeEventCallback();
        }
        window.addEventListener("scroll", this.scrollEventCallBack);
    };
    Object.defineProperty(PopupDropdownViewModel.prototype, "shouldCreateResizeCallback", {
        get: function () {
            return !!window.visualViewport && this.isOverlay && _utils_devices__WEBPACK_IMPORTED_MODULE_3__["IsTouch"];
        },
        enumerable: false,
        configurable: true
    });
    PopupDropdownViewModel.prototype.updatePosition = function (isResetHeight, isDelayUpdating) {
        var _this = this;
        if (isDelayUpdating === void 0) { isDelayUpdating = true; }
        if (isResetHeight) {
            this.height = "auto";
        }
        if (isDelayUpdating) {
            setTimeout(function () {
                _this._updatePosition();
            }, 1);
        }
        else {
            this._updatePosition();
        }
    };
    PopupDropdownViewModel.prototype.updateOnHiding = function () {
        _super.prototype.updateOnHiding.call(this);
        if (this.shouldCreateResizeCallback) {
            window.visualViewport.removeEventListener("resize", this.resizeEventCallback);
            if (this.container) {
                this.container.removeEventListener("touchstart", this.touchStartEventCallback);
                this.container.removeEventListener("touchmove", this.touchMoveEventCallback);
            }
        }
        window.removeEventListener("scroll", this.scrollEventCallBack);
        if (!this.isDisposed) {
            this.top = undefined;
            this.left = undefined;
            this.height = undefined;
            this.width = undefined;
            this.minWidth = undefined;
        }
    };
    PopupDropdownViewModel.tabletSizeBreakpoint = 600;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], PopupDropdownViewModel.prototype, "isTablet", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: "left" })
    ], PopupDropdownViewModel.prototype, "popupDirection", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: { left: "0px", top: "0px" } })
    ], PopupDropdownViewModel.prototype, "pointerTarget", void 0);
    return PopupDropdownViewModel;
}(_popup_view_model__WEBPACK_IMPORTED_MODULE_2__["PopupBaseViewModel"]));



/***/ }),

/***/ "./src/popup-modal-view-model.ts":
/*!***************************************!*\
  !*** ./src/popup-modal-view-model.ts ***!
  \***************************************/
/*! exports provided: PopupModalViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupModalViewModel", function() { return PopupModalViewModel; });
/* harmony import */ var _popup_view_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./popup-view-model */ "./src/popup-view-model.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var PopupModalViewModel = /** @class */ (function (_super) {
    __extends(PopupModalViewModel, _super);
    function PopupModalViewModel(model) {
        return _super.call(this, model) || this;
    }
    PopupModalViewModel.prototype.getStyleClass = function () {
        return _super.prototype.getStyleClass.call(this)
            .append("sv-popup--modal", !this.isOverlay);
    };
    PopupModalViewModel.prototype.getShowFooter = function () {
        return true;
    };
    PopupModalViewModel.prototype.createFooterActionBar = function () {
        var _this = this;
        _super.prototype.createFooterActionBar.call(this);
        this.footerToolbarValue.addAction({
            id: "apply",
            visibleIndex: 20,
            title: this.applyButtonText,
            innerCss: "sv-popup__body-footer-item sv-popup__button sv-popup__button--apply",
            action: function () { _this.apply(); }
        });
    };
    Object.defineProperty(PopupModalViewModel.prototype, "applyButtonText", {
        get: function () {
            return this.getLocalizationString("modalApplyButtonText");
        },
        enumerable: false,
        configurable: true
    });
    PopupModalViewModel.prototype.apply = function () {
        if (!!this.model.onApply && !this.model.onApply())
            return;
        this.hidePopup();
    };
    PopupModalViewModel.prototype.clickOutside = function () {
        return;
    };
    PopupModalViewModel.prototype.onKeyDown = function (event) {
        if (event.key === "Escape" || event.keyCode === 27) {
            this.model.onCancel();
        }
        _super.prototype.onKeyDown.call(this, event);
    };
    return PopupModalViewModel;
}(_popup_view_model__WEBPACK_IMPORTED_MODULE_0__["PopupBaseViewModel"]));



/***/ }),

/***/ "./src/popup-survey.ts":
/*!*****************************!*\
  !*** ./src/popup-survey.ts ***!
  \*****************************/
/*! exports provided: PopupSurveyModel, SurveyWindowModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupSurveyModel", function() { return PopupSurveyModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyWindowModel", function() { return SurveyWindowModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _survey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./survey */ "./src/survey.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/**
 * A Model for a survey running in the Popup Window.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/popup-survey/ (linkStyle))
 */
var PopupSurveyModel = /** @class */ (function (_super) {
    __extends(PopupSurveyModel, _super);
    function PopupSurveyModel(jsonObj, initialModel) {
        if (initialModel === void 0) { initialModel = null; }
        var _this = _super.call(this) || this;
        /**
         * Set this value to negative value, for example -1, to avoid closing the popup window on completing the survey. Leave it equals to 0 (default value) to close the popup window immediately, or set it to 3, 5, 10, ... to close the popup window in 3, 5, 10 seconds.
         */
        _this.closeOnCompleteTimeout = 0;
        if (initialModel) {
            _this.surveyValue = initialModel;
        }
        else {
            _this.surveyValue = _this.createSurvey(jsonObj);
        }
        _this.surveyValue.showTitle = false;
        if ("undefined" !== typeof document) {
            _this.windowElement = document.createElement("div");
        }
        _this.survey.onComplete.add(function (survey, options) {
            _this.onSurveyComplete();
        });
        _this.registerPropertyChangedHandlers(["isShowing"], function () {
            if (!!_this.showingChangedCallback)
                _this.showingChangedCallback();
        });
        _this.registerPropertyChangedHandlers(["isExpanded"], function () {
            _this.onExpandedChanged();
        });
        _this.width = new _base__WEBPACK_IMPORTED_MODULE_0__["ComputedUpdater"](function () { return _this.survey.width; });
        _this.width = _this.survey.width;
        _this.updateCss();
        _this.onCreating();
        return _this;
    }
    PopupSurveyModel.prototype.onCreating = function () { };
    PopupSurveyModel.prototype.getType = function () {
        return "popupsurvey";
    };
    Object.defineProperty(PopupSurveyModel.prototype, "survey", {
        /**
         * A survey object.
         * @see SurveyModel
         */
        get: function () {
            return this.surveyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "isShowing", {
        /**
         * Returns true if the popup window is currently showing. Set it to true to show the popup window and false to hide it.
         * @see show
         * @see hide
         */
        get: function () {
            return this.getPropertyValue("isShowing", false);
        },
        set: function (val) {
            this.setPropertyValue("isShowing", val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Show the popup window
     * @see hide
     * @see isShowing
     */
    PopupSurveyModel.prototype.show = function () {
        this.isShowing = true;
    };
    /**
     * Hide the popup window
     * @see show
     * @see isShowing
     */
    PopupSurveyModel.prototype.hide = function () {
        this.isShowing = false;
    };
    Object.defineProperty(PopupSurveyModel.prototype, "isExpanded", {
        /**
         * Returns true if the popup window is expanded. Set it to true to expand the popup window or false to collapse it.
         * @see expand
         * @see collapse
         */
        get: function () {
            return this.getPropertyValue("isExpanded", false);
        },
        set: function (val) {
            this.setPropertyValue("isExpanded", val);
        },
        enumerable: false,
        configurable: true
    });
    PopupSurveyModel.prototype.onExpandedChanged = function () {
        if (!!this.expandedChangedCallback) {
            this.expandedChangedCallback();
        }
        this.updateCssButton();
    };
    Object.defineProperty(PopupSurveyModel.prototype, "title", {
        /**
         * The popup window and survey title.
         */
        get: function () {
            return this.survey.title;
        },
        set: function (value) {
            this.survey.title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "locTitle", {
        get: function () {
            return this.survey.locTitle;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Expand the popup window to show the survey.
     */
    PopupSurveyModel.prototype.expand = function () {
        this.isExpanded = true;
    };
    /**
     * Collapse the popup window and show survey title only.
     */
    PopupSurveyModel.prototype.collapse = function () {
        this.isExpanded = false;
    };
    PopupSurveyModel.prototype.changeExpandCollapse = function () {
        this.isExpanded = !this.isExpanded;
    };
    Object.defineProperty(PopupSurveyModel.prototype, "css", {
        get: function () {
            return this.survey.css;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "cssButton", {
        get: function () {
            return this.getPropertyValue("cssButton", "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "cssRoot", {
        get: function () {
            return this.getPropertyValue("cssRoot", "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "cssBody", {
        get: function () {
            return this.getPropertyValue("cssBody", "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "cssHeaderRoot", {
        get: function () {
            return this.getPropertyValue("cssHeaderRoot", "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "cssHeaderTitle", {
        get: function () {
            return this.getPropertyValue("cssHeaderTitle", "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupSurveyModel.prototype, "renderedWidth", {
        get: function () {
            var width = this.getPropertyValue("width", "60%");
            if (width && !isNaN(width))
                width = width + "px";
            return width;
        },
        enumerable: false,
        configurable: true
    });
    PopupSurveyModel.prototype.updateCss = function () {
        if (!this.css || !this.css.window)
            return;
        var cssWindow = this.css.window;
        this.setPropertyValue("cssRoot", cssWindow.root);
        this.setPropertyValue("cssBody", cssWindow.body);
        var cssHeader = cssWindow.header;
        if (!cssHeader)
            return;
        this.setPropertyValue("cssHeaderRoot", cssHeader.root);
        this.setPropertyValue("cssHeaderTitle", cssHeader.title);
        this.updateCssButton();
    };
    PopupSurveyModel.prototype.updateCssButton = function () {
        var cssHeader = !!this.css.window ? this.css.window.header : null;
        if (!cssHeader)
            return;
        this.setCssButton(this.isExpanded ? cssHeader.buttonExpanded : cssHeader.buttonCollapsed);
    };
    PopupSurveyModel.prototype.setCssButton = function (val) {
        if (!val)
            return;
        this.setPropertyValue("cssButton", val);
    };
    PopupSurveyModel.prototype.createSurvey = function (jsonObj) {
        return new _survey__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"](jsonObj);
    };
    PopupSurveyModel.prototype.onSurveyComplete = function () {
        if (this.closeOnCompleteTimeout < 0)
            return;
        if (this.closeOnCompleteTimeout == 0) {
            this.hide();
        }
        else {
            var self = this;
            var timerId = null;
            var func = function () {
                self.hide();
                if (typeof window !== "undefined") {
                    window.clearInterval(timerId);
                }
            };
            timerId =
                typeof window !== "undefined"
                    ? window.setInterval(func, this.closeOnCompleteTimeout * 1000)
                    : 0;
        }
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], PopupSurveyModel.prototype, "width", void 0);
    return PopupSurveyModel;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));

/**
 * Obsolete. Please use PopupSurvey
 */
var SurveyWindowModel = /** @class */ (function (_super) {
    __extends(SurveyWindowModel, _super);
    function SurveyWindowModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SurveyWindowModel;
}(PopupSurveyModel));



/***/ }),

/***/ "./src/popup-utils.ts":
/*!****************************!*\
  !*** ./src/popup-utils.ts ***!
  \****************************/
/*! exports provided: createPopupModalViewModel, createPopupViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopupModalViewModel", function() { return createPopupModalViewModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopupViewModel", function() { return createPopupViewModel; });
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./popup */ "./src/popup.ts");
/* harmony import */ var _popup_dropdown_view_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./popup-dropdown-view-model */ "./src/popup-dropdown-view-model.ts");
/* harmony import */ var _popup_modal_view_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./popup-modal-view-model */ "./src/popup-modal-view-model.ts");



function createPopupModalViewModel(options) {
    var popupModel = new _popup__WEBPACK_IMPORTED_MODULE_0__["PopupModel"](options.componentName, options.data, "top", "left", false, true, options.onCancel, options.onApply, options.onHide, options.onShow, options.cssClass, options.title);
    popupModel.displayMode = options.displayMode || "popup";
    var popupViewModel = new _popup_modal_view_model__WEBPACK_IMPORTED_MODULE_2__["PopupModalViewModel"](popupModel);
    popupViewModel.initializePopupContainer();
    return popupViewModel;
}
function createPopupViewModel(model, targetElement) {
    if (model.isModal) {
        return new _popup_modal_view_model__WEBPACK_IMPORTED_MODULE_2__["PopupModalViewModel"](model);
    }
    else {
        return new _popup_dropdown_view_model__WEBPACK_IMPORTED_MODULE_1__["PopupDropdownViewModel"](model, targetElement);
    }
}


/***/ }),

/***/ "./src/popup-view-model.ts":
/*!*********************************!*\
  !*** ./src/popup-view-model.ts ***!
  \*********************************/
/*! exports provided: FOCUS_INPUT_SELECTOR, PopupBaseViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS_INPUT_SELECTOR", function() { return FOCUS_INPUT_SELECTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupBaseViewModel", function() { return PopupBaseViewModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var FOCUS_INPUT_SELECTOR = "input:not(:disabled):not([readonly]):not([type=hidden]),select:not(:disabled):not([readonly]),textarea:not(:disabled):not([readonly]), button:not(:disabled):not([readonly]), [tabindex]:not([tabindex^=\"-\"])";
var PopupBaseViewModel = /** @class */ (function (_super) {
    __extends(PopupBaseViewModel, _super);
    function PopupBaseViewModel(model) {
        var _this = _super.call(this) || this;
        _this.model = model;
        return _this;
    }
    PopupBaseViewModel.prototype.getLocale = function () {
        if (!!this.locale)
            return this.locale;
        return _super.prototype.getLocale.call(this);
    };
    PopupBaseViewModel.prototype.hidePopup = function () {
        this.model.isVisible = false;
    };
    PopupBaseViewModel.prototype.getStyleClass = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__["CssClassBuilder"]()
            .append(this.model.cssClass)
            .append("sv-popup--" + this.model.displayMode, this.isOverlay);
    };
    PopupBaseViewModel.prototype.getShowFooter = function () {
        return this.isOverlay;
    };
    PopupBaseViewModel.prototype.getShowHeader = function () {
        return false;
    };
    PopupBaseViewModel.prototype.getPopupHeaderTemplate = function () {
        return undefined;
    };
    PopupBaseViewModel.prototype.createFooterActionBar = function () {
        var _this = this;
        this.footerToolbarValue = new _actions_container__WEBPACK_IMPORTED_MODULE_3__["ActionContainer"]();
        this.footerToolbar.updateCallback = function (isResetInitialized) {
            _this.footerToolbarValue.actions.forEach(function (action) { return action.cssClasses = {
                item: "sv-popup__body-footer-item sv-popup__button"
            }; });
        };
        var footerActions = [{
                id: "cancel",
                visibleIndex: 10,
                title: this.cancelButtonText,
                innerCss: "sv-popup__button--cancel",
                action: function () { _this.cancel(); }
            }];
        footerActions = this.model.updateFooterActions(footerActions);
        this.footerToolbarValue.setItems(footerActions);
    };
    PopupBaseViewModel.prototype.resetDimensionsAndPositionStyleProperties = function () {
        var nullableValue = "inherit";
        this.top = nullableValue;
        this.left = nullableValue;
        this.height = nullableValue;
        this.width = nullableValue;
        this.minWidth = nullableValue;
    };
    PopupBaseViewModel.prototype.setupModel = function (model) {
        var _this = this;
        if (!!this.model) {
            this.model.unregisterPropertyChangedHandlers(["isVisible"], "PopupBaseViewModel");
        }
        this._model = model;
        var onIsVisibleChangedHandler = function () {
            if (!model.isVisible) {
                _this.updateOnHiding();
            }
            _this.isVisible = model.isVisible;
        };
        model.registerPropertyChangedHandlers(["isVisible"], onIsVisibleChangedHandler, "PopupBaseViewModel");
        onIsVisibleChangedHandler();
    };
    Object.defineProperty(PopupBaseViewModel.prototype, "model", {
        get: function () {
            return this._model;
        },
        set: function (model) {
            this.setupModel(model);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "title", {
        get: function () {
            return this.model.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "contentComponentName", {
        get: function () {
            return this.model.contentComponentName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "contentComponentData", {
        get: function () {
            return this.model.contentComponentData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "isModal", {
        get: function () {
            return this.model.isModal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "isFocusedContent", {
        get: function () {
            return this.model.isFocusedContent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "showFooter", {
        get: function () {
            return this.getShowFooter();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "showHeader", {
        get: function () {
            return this.getShowHeader();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "popupHeaderTemplate", {
        get: function () {
            return this.getPopupHeaderTemplate();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "isOverlay", {
        get: function () {
            return this.model.displayMode === "overlay";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "styleClass", {
        get: function () {
            return this.getStyleClass().toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "cancelButtonText", {
        get: function () {
            return this.getLocalizationString("modalCancelButtonText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PopupBaseViewModel.prototype, "footerToolbar", {
        get: function () {
            if (!this.footerToolbarValue) {
                this.createFooterActionBar();
            }
            return this.footerToolbarValue;
        },
        enumerable: false,
        configurable: true
    });
    PopupBaseViewModel.prototype.onKeyDown = function (event) {
        if (event.key === "Tab" || event.keyCode === 9) {
            this.trapFocus(event);
        }
        else if (event.key === "Escape" || event.keyCode === 27) {
            this.hidePopup();
        }
    };
    PopupBaseViewModel.prototype.trapFocus = function (event) {
        var focusableElements = this.container.querySelectorAll(FOCUS_INPUT_SELECTOR);
        var firstFocusableElement = focusableElements[0];
        var lastFocusableElement = focusableElements[focusableElements.length - 1];
        if (event.shiftKey) {
            if (document.activeElement === firstFocusableElement) {
                lastFocusableElement.focus();
                event.preventDefault();
            }
        }
        else {
            if (document.activeElement === lastFocusableElement) {
                firstFocusableElement.focus();
                event.preventDefault();
            }
        }
    };
    PopupBaseViewModel.prototype.switchFocus = function () {
        if (this.isFocusedContent) {
            this.focusFirstInput();
        }
    };
    PopupBaseViewModel.prototype.updateOnShowing = function () {
        this.prevActiveElement = document.activeElement;
        if (this.isOverlay) {
            this.resetDimensionsAndPositionStyleProperties();
        }
        this.switchFocus();
    };
    PopupBaseViewModel.prototype.updateOnHiding = function () {
        this.prevActiveElement && this.prevActiveElement.focus();
    };
    PopupBaseViewModel.prototype.focusFirstInput = function () {
        var _this = this;
        setTimeout(function () {
            if (!_this.container)
                return;
            var el = _this.container.querySelector(_this.model.focusFirstInputSelector || FOCUS_INPUT_SELECTOR);
            if (!!el)
                el.focus();
            else
                _this.container.children[0].focus();
        }, 100);
    };
    PopupBaseViewModel.prototype.clickOutside = function () {
        this.hidePopup();
    };
    PopupBaseViewModel.prototype.cancel = function () {
        this.model.onCancel();
        this.hidePopup();
    };
    PopupBaseViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.unmountPopupContainer();
        this.container = undefined;
        this.model.onVisibilityChanged.clear();
        this.model.onRecalculatePosition.clear();
    };
    PopupBaseViewModel.prototype.initializePopupContainer = function () {
        if (!this.createdContainer) {
            var container = document.createElement("div");
            this.container = this.createdContainer = container;
        }
        var mountContainer = document.body.querySelector(".sv-popup-mount");
        if (mountContainer) {
            mountContainer.appendChild(this.container);
        }
        else {
            document.body.appendChild(this.container);
        }
    };
    PopupBaseViewModel.prototype.unmountPopupContainer = function () {
        this.createdContainer.remove();
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "0px" })
    ], PopupBaseViewModel.prototype, "top", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "0px" })
    ], PopupBaseViewModel.prototype, "left", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "auto" })
    ], PopupBaseViewModel.prototype, "height", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "auto" })
    ], PopupBaseViewModel.prototype, "width", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "auto" })
    ], PopupBaseViewModel.prototype, "minWidth", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], PopupBaseViewModel.prototype, "isVisible", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PopupBaseViewModel.prototype, "locale", void 0);
    return PopupBaseViewModel;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));



/***/ }),

/***/ "./src/popup.ts":
/*!**********************!*\
  !*** ./src/popup.ts ***!
  \**********************/
/*! exports provided: PopupModel, createDialogOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupModel", function() { return PopupModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDialogOptions", function() { return createDialogOptions; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var PopupModel = /** @class */ (function (_super) {
    __extends(PopupModel, _super);
    function PopupModel(contentComponentName, contentComponentData, verticalPosition, horizontalPosition, showPointer, isModal, onCancel, onApply, onHide, onShow, cssClass, title) {
        if (verticalPosition === void 0) { verticalPosition = "bottom"; }
        if (horizontalPosition === void 0) { horizontalPosition = "left"; }
        if (showPointer === void 0) { showPointer = true; }
        if (isModal === void 0) { isModal = false; }
        if (onCancel === void 0) { onCancel = function () { }; }
        if (onApply === void 0) { onApply = function () { return true; }; }
        if (onHide === void 0) { onHide = function () { }; }
        if (onShow === void 0) { onShow = function () { }; }
        if (cssClass === void 0) { cssClass = ""; }
        if (title === void 0) { title = ""; }
        var _this = _super.call(this) || this;
        _this.focusFirstInputSelector = "";
        _this.onVisibilityChanged = _this.addEvent();
        _this.onFooterActionsCreated = _this.addEvent();
        _this.onRecalculatePosition = _this.addEvent();
        _this.contentComponentName = contentComponentName;
        _this.contentComponentData = contentComponentData;
        _this.verticalPosition = verticalPosition;
        _this.horizontalPosition = horizontalPosition;
        _this.showPointer = showPointer;
        _this.isModal = isModal;
        _this.onCancel = onCancel;
        _this.onApply = onApply;
        _this.onHide = onHide;
        _this.onShow = onShow;
        _this.cssClass = cssClass;
        _this.title = title;
        return _this;
    }
    Object.defineProperty(PopupModel.prototype, "isVisible", {
        get: function () {
            return this.getPropertyValue("isVisible", false);
        },
        set: function (value) {
            if (this.isVisible === value) {
                return;
            }
            this.setPropertyValue("isVisible", value);
            this.onVisibilityChanged.fire(this, { model: this, isVisible: value });
            if (this.isVisible) {
                var innerModel = this.contentComponentData["model"];
                innerModel && innerModel.refresh && innerModel.refresh();
                this.onShow();
            }
            else {
                this.onHide();
            }
        },
        enumerable: false,
        configurable: true
    });
    PopupModel.prototype.toggleVisibility = function () {
        this.isVisible = !this.isVisible;
    };
    PopupModel.prototype.recalculatePosition = function (isResetHeight) {
        this.onRecalculatePosition.fire(this, { isResetHeight: isResetHeight });
    };
    PopupModel.prototype.updateFooterActions = function (footerActions) {
        var options = { actions: footerActions };
        this.onFooterActionsCreated.fire(this, options);
        return options.actions;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PopupModel.prototype, "contentComponentName", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], PopupModel.prototype, "contentComponentData", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "bottom" })
    ], PopupModel.prototype, "verticalPosition", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "left" })
    ], PopupModel.prototype, "horizontalPosition", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], PopupModel.prototype, "showPointer", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], PopupModel.prototype, "isModal", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: true })
    ], PopupModel.prototype, "isFocusedContent", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: function () { } })
    ], PopupModel.prototype, "onCancel", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: function () { return true; } })
    ], PopupModel.prototype, "onApply", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: function () { } })
    ], PopupModel.prototype, "onHide", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: function () { } })
    ], PopupModel.prototype, "onShow", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "" })
    ], PopupModel.prototype, "cssClass", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "" })
    ], PopupModel.prototype, "title", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "popup" })
    ], PopupModel.prototype, "displayMode", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "flex" })
    ], PopupModel.prototype, "positionMode", void 0);
    return PopupModel;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));

function createDialogOptions(componentName, data, onApply, onCancel, onHide, onShow, cssClass, title, displayMode) {
    if (onHide === void 0) { onHide = function () { }; }
    if (onShow === void 0) { onShow = function () { }; }
    if (displayMode === void 0) { displayMode = "popup"; }
    return {
        componentName: componentName,
        data: data,
        onApply: onApply,
        onCancel: onCancel,
        onHide: onHide,
        onShow: onShow,
        cssClass: cssClass,
        title: title,
        displayMode: displayMode
    };
}


/***/ }),

/***/ "./src/question.ts":
/*!*************************!*\
  !*** ./src/question.ts ***!
  \*************************/
/*! exports provided: Question */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Question", function() { return Question; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validator */ "./src/validator.ts");
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _questionCustomWidgets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./questionCustomWidgets */ "./src/questionCustomWidgets.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _rendererFactory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rendererFactory */ "./src/rendererFactory.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












/**
 * A base class for all questions.
 */
var Question = /** @class */ (function (_super) {
    __extends(Question, _super);
    function Question(name) {
        var _this = _super.call(this, name) || this;
        _this.customWidgetData = { isNeedRender: true };
        _this.isReadyValue = true;
        /**
         * An event that is raised when the question's ready state has changed (expressions are evaluated, choices are loaded from a web resource specified by the `choicesByUrl` property, etc.).
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that contains the question whose ready state has changed.
         * - `options.isReady`: `Boolean`\
         * Indicates whether the question is ready.
         * - `options.oldIsReady`: `Boolean`\
         * Indicates the previous ready state.
         */
        _this.onReadyChanged = _this.addEvent();
        _this.isRunningValidatorsValue = false;
        _this.isValueChangedInSurvey = false;
        _this.allowNotifyValueChanged = true;
        _this.id = Question.getQuestionId();
        _this.onCreating();
        _this.createNewArray("validators", function (validator) {
            validator.errorOwner = _this;
        });
        _this.addExpressionProperty("visibleIf", function (obj, res) { _this.visible = res === true; }, function (obj) { return !_this.areInvisibleElementsShowing; });
        _this.addExpressionProperty("enableIf", function (obj, res) { _this.readOnly = res === false; });
        _this.addExpressionProperty("requiredIf", function (obj, res) { _this.isRequired = res === true; });
        _this.createLocalizableString("commentText", _this, true, "otherItemText");
        _this.locTitle.onGetDefaultTextCallback = function () {
            return _this.name;
        };
        _this.locTitle.storeDefaultText = true;
        _this.createLocalizableString("requiredErrorText", _this);
        _this.registerPropertyChangedHandlers(["width"], function () {
            _this.updateQuestionCss();
            if (!!_this.parent) {
                _this.parent.elementWidthChanged(_this);
            }
        });
        _this.registerPropertyChangedHandlers(["isRequired"], function () {
            if (!_this.isRequired && _this.errors.length > 0) {
                _this.validate();
            }
            _this.locTitle.strChanged();
            _this.clearCssClasses();
        });
        _this.registerPropertyChangedHandlers(["indent", "rightIndent"], function () {
            _this.onIndentChanged();
        });
        _this.registerPropertyChangedHandlers(["showCommentArea", "showOtherItem"], function () {
            _this.initCommentFromSurvey();
        });
        _this.registerPropertyChangedHandlers(["isMobile"], function () { _this.onMobileChanged(); });
        return _this;
    }
    Question.getQuestionId = function () {
        return "sq_" + Question.questionCounter++;
    };
    Question.prototype.isReadOnlyRenderDiv = function () {
        return this.isReadOnly && _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].readOnlyCommentRenderMode === "div";
    };
    Question.prototype.createLocTitleProperty = function () {
        var _this = this;
        var locTitleValue = _super.prototype.createLocTitleProperty.call(this);
        locTitleValue.onGetTextCallback = function (text) {
            if (!text) {
                text = _this.name;
            }
            if (!_this.survey)
                return text;
            return _this.survey.getUpdatedQuestionTitle(_this, text);
        };
        this.locProcessedTitle = new _localizablestring__WEBPACK_IMPORTED_MODULE_5__["LocalizableString"](this, true);
        this.locProcessedTitle.sharedData = locTitleValue;
        return locTitleValue;
    };
    Question.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        if (live) {
            return !!this.parent ? this.parent.getSurvey(live) : null;
        }
        if (!!this.onGetSurvey)
            return this.onGetSurvey();
        return _super.prototype.getSurvey.call(this);
    };
    Question.prototype.getValueName = function () {
        if (!!this.valueName)
            return this.valueName.toString();
        return this.name;
    };
    Object.defineProperty(Question.prototype, "valueName", {
        /**
         * Specifies an object property that should store the question value.
         *
         * Refer to the [Merge Question Values](https://surveyjs.io/form-library/documentation/design-survey-merge-question-values) help topic for more information.
         */
        get: function () {
            return this.getPropertyValue("valueName", "");
        },
        set: function (val) {
            var oldValueName = this.getValueName();
            this.setPropertyValue("valueName", val);
            this.onValueNameChanged(oldValueName);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.onValueNameChanged = function (oldValue) {
        if (!this.survey)
            return;
        this.survey.questionRenamed(this, this.name, !!oldValue ? oldValue : this.name);
        this.initDataFromSurvey();
    };
    Question.prototype.onNameChanged = function (oldValue) {
        this.locTitle.strChanged();
        if (!this.survey)
            return;
        this.survey.questionRenamed(this, oldValue, this.valueName ? this.valueName : oldValue);
    };
    Object.defineProperty(Question.prototype, "isReady", {
        get: function () {
            return this.isReadyValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "ariaRequired", {
        get: function () {
            return this.isRequired ? "true" : "false";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "ariaInvalid", {
        get: function () {
            return this.errors.length > 0 ? "true" : "false";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "ariaLabelledBy", {
        get: function () {
            if (this.hasTitle) {
                return this.ariaTitleId;
            }
            else {
                return null;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "ariaDescribedBy", {
        get: function () {
            return this.errors.length > 0 ? this.id + "_errors" : null;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.choicesLoaded = function () { };
    Object.defineProperty(Question.prototype, "page", {
        /**
         * Returns a page to which the question belongs and allows you to move this question to a different page.
         */
        get: function () {
            return this.getPage(this.parent);
        },
        set: function (val) {
            this.setPage(this.parent, val);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getPanel = function () {
        return null;
    };
    Question.prototype.delete = function () {
        if (!!this.parent) {
            this.removeSelfFromList(this.parent.elements);
        }
    };
    Object.defineProperty(Question.prototype, "isFlowLayout", {
        get: function () {
            return this.getLayoutType() === "flow";
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getLayoutType = function () {
        if (!!this.parent)
            return this.parent.getChildrenLayoutType();
        return "row";
    };
    Question.prototype.isLayoutTypeSupported = function (layoutType) {
        return layoutType !== "flow";
    };
    Object.defineProperty(Question.prototype, "visible", {
        /**
         * Gets or sets question visibility.
         *
         * If you want to display or hide a question based on a condition, specify the [`visibleIf`](https://surveyjs.io/form-library/documentation/question#visibleIf) property. Refer to the following help topic for information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see isVisible
         * @see visibleIf
         */
        get: function () {
            return this.getPropertyValue("visible", true);
        },
        set: function (val) {
            if (val == this.visible)
                return;
            this.setPropertyValue("visible", val);
            this.onVisibleChanged();
            this.notifySurveyVisibilityChanged();
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.onVisibleChanged = function () {
        this.setPropertyValue("isVisible", this.isVisible);
        if (!this.isVisible && this.errors && this.errors.length > 0) {
            this.errors = [];
        }
    };
    Object.defineProperty(Question.prototype, "useDisplayValuesInDynamicTexts", {
        /**
         * Specifies whether to use display names for question values in placeholders.
         *
         * Default value: `true`
         *
         * This property applies to questions whose values are defined as objects with the `value` and `text` properties (for example, [choice items](https://surveyjs.io/form-library/documentation/questionradiogroupmodel#choices) in Radiogroup, Checkbox, and Dropdown questions).
         *
         * You can use question values as placeholders in the following places:
         *
         * - Survey element titles and descriptions
         * - The [`expression`](https://surveyjs.io/form-library/documentation/questionexpressionmodel#expression) property of the [Expression](https://surveyjs.io/form-library/documentation/questionexpressionmodel) question
         * - The [`html`](https://surveyjs.io/form-library/documentation/questionhtmlmodel#html) property of the [HTML](https://surveyjs.io/form-library/documentation/questionhtmlmodel) question
         *
         * To use a question value as a placeholder, specify the question `name` in curly brackets: `{questionName}`. Refer to the following help topic for more information: [Dynamic Texts - Question Values](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#question-values).
         */
        get: function () {
            return this.getPropertyValue("useDisplayValuesInDynamicTexts");
        },
        set: function (val) {
            this.setPropertyValue("useDisplayValuesInDynamicTexts", val);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getUseDisplayValuesInDynamicTexts = function () { return this.useDisplayValuesInDynamicTexts; };
    Object.defineProperty(Question.prototype, "visibleIf", {
        /**
         * A Boolean expression. If it evaluates to `false`, this question becomes hidden.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility)
         * @see visible
         * @see isVisible
         */
        get: function () {
            return this.getPropertyValue("visibleIf", "");
        },
        set: function (val) {
            this.setPropertyValue("visibleIf", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isVisible", {
        /**
         * Returns `true` if the question is visible or the survey is currently in design mode.
         *
         * If you want to display or hide a question based on a condition, specify the [`visibleIf`](https://surveyjs.io/form-library/documentation/question#visibleIf) property. Refer to the following help topic for information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see visibleIf
         * @see visible
         * @see isParentVisible
         */
        get: function () {
            if (this.survey && this.survey.areEmptyElementsHidden && this.isEmpty())
                return false;
            return this.visible || this.areInvisibleElementsShowing;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "visibleIndex", {
        /**
         * Returns the visible index of the question in the survey. It can be from 0 to all visible questions count - 1
         * The visibleIndex is -1 if the title is 'hidden' or hideNumber is true
         * @see titleLocation
         * @see hideNumber
         */
        get: function () {
            return this.getPropertyValue("visibleIndex", -1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hideNumber", {
        /**
         * Hides the question number from the title and excludes the question from numbering.
         *
         * If you want to disable question numbering in the entire survey, set SurveyModel's `showQuestionNumbers` property to `false`.
         * @see SurveyModel.showQuestionNumbers
         */
        get: function () {
            return this.getPropertyValue("hideNumber");
        },
        set: function (val) {
            this.setPropertyValue("hideNumber", val);
            this.notifySurveyVisibilityChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isAllowTitleLeft", {
        /**
         * Returns `true` if the question can display its title to the left of the input field.
         * @see titleLocation
         * @see getTitleLocation
         * @see hasTitle
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the question type.
     * Possible values:
     * - [*"boolean"*](https://surveyjs.io/Documentation/Library?id=questionbooleanmodel)
     * - [*"checkbox"*](https://surveyjs.io/Documentation/Library?id=questioncheckboxmodel)
     * - [*"comment"*](https://surveyjs.io/Documentation/Library?id=questioncommentmodel)
     * - [*"dropdown"*](https://surveyjs.io/Documentation/Library?id=questiondropdownmodel)
     * - [*"tagbox"*](https://surveyjs.io/form-library/documentation/questiontagboxmodel)
     * - [*"expression"*](https://surveyjs.io/Documentation/Library?id=questionexpressionmodel)
     * - [*"file"*](https://surveyjs.io/Documentation/Library?id=questionfilemodel)
     * - [*"html"*](https://surveyjs.io/Documentation/Library?id=questionhtmlmodel)
     * - [*"image"*](https://surveyjs.io/Documentation/Library?id=questionimagemodel)
     * - [*"imagepicker"*](https://surveyjs.io/Documentation/Library?id=questionimagepickermodel)
     * - [*"matrix"*](https://surveyjs.io/Documentation/Library?id=questionmatrixmodel)
     * - [*"matrixdropdown"*](https://surveyjs.io/Documentation/Library?id=questionmatrixdropdownmodel)
     * - [*"matrixdynamic"*](https://surveyjs.io/Documentation/Library?id=questionmatrixdynamicmodel)
     * - [*"multipletext"*](https://surveyjs.io/Documentation/Library?id=questionmultipletextmodel)
     * - [*"panel"*](https://surveyjs.io/Documentation/Library?id=panelmodel)
     * - [*"paneldynamic"*](https://surveyjs.io/Documentation/Library?id=questionpaneldynamicmodel)
     * - [*"radiogroup"*](https://surveyjs.io/Documentation/Library?id=questionradiogroupmodel)
     * - [*"rating"*](https://surveyjs.io/Documentation/Library?id=questionratingmodel)
     * - [*"ranking"*](https://surveyjs.io/Documentation/Library?id=questionrankingmodel)
     * - [*"signaturepad"*](https://surveyjs.io/Documentation/Library?id=questionsignaturepadmodel)
     * - [*"text"*](https://surveyjs.io/Documentation/Library?id=questiontextmodel)
     */
    Question.prototype.getType = function () {
        return "question";
    };
    Object.defineProperty(Question.prototype, "isQuestion", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.moveTo = function (container, insertBefore) {
        if (insertBefore === void 0) { insertBefore = null; }
        return this.moveToBase(this.parent, container, insertBefore);
    };
    Question.prototype.getProgressInfo = function () {
        if (!this.hasInput)
            return _super.prototype.getProgressInfo.call(this);
        return {
            questionCount: 1,
            answeredQuestionCount: !this.isEmpty() ? 1 : 0,
            requiredQuestionCount: this.isRequired ? 1 : 0,
            requiredAnsweredQuestionCount: !this.isEmpty() && this.isRequired ? 1 : 0,
        };
    };
    Question.prototype.runConditions = function () {
        if (this.data && !this.isLoadingFromJson) {
            if (!this.isDesignMode) {
                this.runCondition(this.getDataFilteredValues(), this.getDataFilteredProperties());
            }
            this.locStrsChanged();
        }
    };
    Question.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value);
        if (!this.survey)
            return;
        this.survey.questionCreated(this);
        if (isLight !== true) {
            this.runConditions();
        }
    };
    Object.defineProperty(Question.prototype, "parent", {
        /**
         * Returns a survey element (panel or page) that contains the question and allows you to move this question to a different survey element.
         */
        get: function () {
            return this.getPropertyValue("parent", null);
        },
        set: function (val) {
            if (this.parent === val)
                return;
            this.delete();
            this.setPropertyValue("parent", val);
            this.updateQuestionCss();
            this.onParentChanged();
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.onParentChanged = function () { };
    Object.defineProperty(Question.prototype, "hasTitle", {
        /**
         * Returns `false` if the `titleLocation` property is set to `"hidden"` or if the question cannot have a title (for example, an [HTML](https://surveyjs.io/form-library/documentation/questionhtmlmodel) question).
         *
         * If the `title` property is `undefined` or set to an empty string, the `hasTitle` property returns `true`, because the question uses its `name` as a title in this case.
         * @see title
         * @see titleLocation
         */
        get: function () {
            return this.getTitleLocation() !== "hidden";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "titleLocation", {
        /**
         * Sets question title location relative to the input field. Overrides the `questionTitleLocation` property specified for the question's container (survey, page, or panel).
         *
         * Possible values:
         *
         * - `"default"` (default) - Inherits the setting from the `questionTitleLocation` property specified for the question's container.
         * - `"top"` - Displays the title above the input field.
         * - `"bottom"` - Displays the title below the input field.
         * - `"left"` - Displays the title to the left of the input field.
         * - `"hidden"` - Hides the question title.
         *
         * > Certain question types (Matrix, Multiple Text) do not support the `"left"` value. For them, the `"top"` value is used.
         * @see SurveyModel.questionTitleLocation
         * @see getTitleLocation
         * @see isAllowTitleLeft
         */
        get: function () {
            return this.getPropertyValue("titleLocation");
        },
        set: function (value) {
            var isVisibilityChanged = this.titleLocation == "hidden" || value == "hidden";
            this.setPropertyValue("titleLocation", value.toLowerCase());
            this.updateQuestionCss();
            if (isVisibilityChanged) {
                this.notifySurveyVisibilityChanged();
            }
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getTitleOwner = function () { return this; };
    Question.prototype.getIsTitleRenderedAsString = function () { return this.titleLocation === "hidden"; };
    Question.prototype.notifySurveyVisibilityChanged = function () {
        if (!this.survey || this.isLoadingFromJson)
            return;
        this.survey.questionVisibilityChanged(this, this.isVisible);
        if (this.isClearValueOnHidden) {
            if (!this.visible) {
                this.clearValueIfInvisible();
            }
            if (this.isVisible) {
                this.updateValueWithDefaults();
            }
        }
    };
    /**
     * Returns title location calculated based on the question's `titleLocation` property and the `questionTitleLocation` property of the question's containers (survey, page, or panel).
     * @see titleLocation
     * @see SurveyModel.questionTitleLocation
     */
    Question.prototype.getTitleLocation = function () {
        if (this.isFlowLayout)
            return "hidden";
        var location = this.getTitleLocationCore();
        if (location === "left" && !this.isAllowTitleLeft)
            location = "top";
        return location;
    };
    Question.prototype.getTitleLocationCore = function () {
        if (this.titleLocation !== "default")
            return this.titleLocation;
        if (!!this.parent)
            return this.parent.getQuestionTitleLocation();
        if (!!this.survey)
            return this.survey.questionTitleLocation;
        return "top";
    };
    Object.defineProperty(Question.prototype, "hasTitleOnLeft", {
        get: function () {
            return this.hasTitle && this.getTitleLocation() === "left";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasTitleOnTop", {
        get: function () {
            return this.hasTitle && this.getTitleLocation() === "top";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasTitleOnBottom", {
        get: function () {
            return this.hasTitle && this.getTitleLocation() === "bottom";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasTitleOnLeftTop", {
        get: function () {
            if (!this.hasTitle)
                return false;
            var location = this.getTitleLocation();
            return location === "left" || location === "top";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "errorLocation", {
        get: function () {
            return this.survey ? this.survey.questionErrorLocation : "top";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasInput", {
        /**
         * Returns `false` if the question has no input fields ([HTML](https://surveyjs.io/form-library/documentation/questionhtmlmodel), [Image](https://surveyjs.io/form-library/documentation/questionimagemodel), and similar question types).
         * @see hasSingleInput
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasSingleInput", {
        /**
         * Returns `false` if the question has no input fields ([HTML](https://surveyjs.io/form-library/documentation/questionhtmlmodel), [Image](https://surveyjs.io/form-library/documentation/questionimagemodel)) or has multiple input fields ([Matrix](https://surveyjs.io/form-library/documentation/questionmatrixmodel), [Multiple Text](https://surveyjs.io/form-library/documentation/questionmultipletextmodel)).
         * @see hasInput
         */
        get: function () {
            return this.hasInput;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "inputId", {
        get: function () {
            return this.id + "i";
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getDefaultTitleValue = function () { return this.name; };
    Question.prototype.getDefaultTitleTagName = function () {
        return _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].titleTags.question;
    };
    Object.defineProperty(Question.prototype, "descriptionLocation", {
        /**
         * Specifies where to display a question description.
         *
         * Possible values:
         *
         * - `"default"` (default) - Inherits the setting from the Survey's [`questionDescriptionLocation`](https://surveyjs.io/form-library/documentation/surveymodel#questionDescriptionLocation) property.
         * - `"underTitle"` - Displays the description under the question title.
         * - `"underInput"` - Displays the description under the interactive area.
         * @see description
         * @see hasDescription
         */
        get: function () {
            return this.getPropertyValue("descriptionLocation");
        },
        set: function (val) {
            this.setPropertyValue("descriptionLocation", val);
            this.updateQuestionCss();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasDescriptionUnderTitle", {
        get: function () {
            return this.getDescriptionLocation() == "underTitle";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasDescriptionUnderInput", {
        get: function () {
            return this.getDescriptionLocation() == "underInput";
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getDescriptionLocation = function () {
        if (this.descriptionLocation !== "default")
            return this.descriptionLocation;
        return !!this.survey
            ? this.survey.questionDescriptionLocation
            : "underTitle";
    };
    Question.prototype.needClickTitleFunction = function () {
        return _super.prototype.needClickTitleFunction.call(this) || this.hasInput;
    };
    Question.prototype.processTitleClick = function () {
        var _this = this;
        _super.prototype.processTitleClick.call(this);
        if (this.isCollapsed)
            return;
        setTimeout(function () {
            _this.focus();
        }, 1);
        return true;
    };
    Object.defineProperty(Question.prototype, "requiredErrorText", {
        /**
         * Specifies a custom error message for a required form field.
         * @see isRequired
         */
        get: function () {
            return this.getLocalizableStringText("requiredErrorText");
        },
        set: function (val) {
            this.setLocalizableStringText("requiredErrorText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "locRequiredErrorText", {
        get: function () {
            return this.getLocalizableString("requiredErrorText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "commentText", {
        /**
         * Specifies a caption displayed above the comment area. Applies when the `showCommentArea` property is `true`.
         * @see showCommentArea
         * @see comment
         */
        get: function () {
            return this.getLocalizableStringText("commentText");
        },
        set: function (val) {
            this.setLocalizableStringText("commentText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "locCommentText", {
        get: function () {
            return this.getLocalizableString("commentText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "commentPlaceHolder", {
        get: function () {
            return this.commentPlaceholder;
        },
        set: function (newValue) {
            this.commentPlaceholder = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getAllErrors = function () {
        return this.errors.slice();
    };
    Question.prototype.getErrorByType = function (errorType) {
        for (var i = 0; i < this.errors.length; i++) {
            if (this.errors[i].getErrorType() === errorType)
                return this.errors[i];
        }
        return null;
    };
    Object.defineProperty(Question.prototype, "customWidget", {
        get: function () {
            if (!this.isCustomWidgetRequested && !this.customWidgetValue) {
                this.isCustomWidgetRequested = true;
                this.updateCustomWidget();
            }
            return this.customWidgetValue;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.updateCustomWidget = function () {
        this.customWidgetValue = _questionCustomWidgets__WEBPACK_IMPORTED_MODULE_7__["CustomWidgetCollection"].Instance.getCustomWidget(this);
    };
    Question.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        if (!!this.localeChangedCallback) {
            this.localeChangedCallback();
        }
    };
    Object.defineProperty(Question.prototype, "isCompositeQuestion", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.updateCommentElements = function () {
        if (!this.autoGrowComment || !Array.isArray(this.commentElements))
            return;
        for (var i = 0; i < this.commentElements.length; i++) {
            var el = this.commentElements[i];
            if (el)
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_11__["increaseHeightByContent"])(el);
        }
    };
    Question.prototype.onCommentInput = function (event) {
        if (this.isInputTextUpdate) {
            if (event.target) {
                this.comment = event.target.value;
            }
        }
        else {
            this.updateCommentElements();
        }
    };
    Question.prototype.onCommentChange = function (event) {
        this.comment = event.target.value;
        if (this.comment !== event.target.value) {
            event.target.value = this.comment;
        }
    };
    Question.prototype.afterRenderQuestionElement = function (el) {
        if (!this.survey || !this.hasSingleInput)
            return;
        this.survey.afterRenderQuestionInput(this, el);
    };
    Question.prototype.afterRender = function (el) {
        var _this = this;
        if (!this.survey)
            return;
        this.survey.afterRenderQuestion(this, el);
        if (!!this.afterRenderQuestionCallback) {
            this.afterRenderQuestionCallback(this, el);
        }
        if (this.supportComment() || this.supportOther()) {
            this.commentElements = [];
            this.getCommentElementsId().forEach(function (id) {
                var el = document.getElementById(id);
                if (el)
                    _this.commentElements.push(el);
            });
            this.updateCommentElements();
        }
        this.checkForResponsiveness(el);
    };
    Question.prototype.getCommentElementsId = function () {
        return [this.commentId];
    };
    Question.prototype.beforeDestroyQuestionElement = function (el) {
        this.commentElements = undefined;
    };
    Object.defineProperty(Question.prototype, "processedTitle", {
        get: function () {
            var res = this.locProcessedTitle.textOrHtml;
            return res ? res : this.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "fullTitle", {
        get: function () {
            return this.locTitle.renderedHtml;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "titlePattern", {
        get: function () {
            return !!this.survey ? this.survey.questionTitlePattern : "numTitleRequire";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isRequireTextOnStart", {
        get: function () {
            return this.isRequired && this.titlePattern == "requireNumTitle";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isRequireTextBeforeTitle", {
        get: function () {
            return this.isRequired && this.titlePattern == "numRequireTitle" && this.requiredText !== "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isRequireTextAfterTitle", {
        get: function () {
            return this.isRequired && this.titlePattern == "numTitleRequire" && this.requiredText !== "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "startWithNewLine", {
        /**
         * Disable this property if you want to render the current question on the same line or row with the previous question or panel.
         */
        get: function () {
            return this.getPropertyValue("startWithNewLine");
        },
        set: function (val) {
            if (this.startWithNewLine == val)
                return;
            this.setPropertyValue("startWithNewLine", val);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.calcCssClasses = function (css) {
        var classes = { error: {} };
        this.copyCssClasses(classes, css.question);
        this.copyCssClasses(classes.error, css.error);
        this.updateCssClasses(classes, css);
        if (this.survey) {
            this.survey.updateQuestionCssClasses(this, classes);
        }
        if (this.onUpdateCssClassesCallback) {
            this.onUpdateCssClassesCallback(classes);
        }
        return classes;
    };
    Object.defineProperty(Question.prototype, "cssRoot", {
        get: function () {
            this.ensureElementCss();
            return this.getPropertyValue("cssRoot", "");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setCssRoot = function (val) {
        this.setPropertyValue("cssRoot", val);
    };
    Question.prototype.getCssRoot = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.isFlowLayout && !this.isDesignMode
            ? cssClasses.flowRoot
            : cssClasses.mainRoot)
            .append(cssClasses.titleLeftRoot, !this.isFlowLayout && this.hasTitleOnLeft)
            .append(cssClasses.hasError, this.errors.length > 0)
            .append(cssClasses.small, !this.width)
            .append(cssClasses.answered, this.isAnswered)
            .append(cssClasses.expanded, !!this.isExpanded)
            .append(cssClasses.collapsed, !!this.isCollapsed)
            .append(cssClasses.withFrame, this.hasFrameV2)
            .append(cssClasses.nested, (this.hasParent || !this.isSingleInRow) && this.isDefaultV2Theme)
            .toString();
    };
    Object.defineProperty(Question.prototype, "cssHeader", {
        get: function () {
            this.ensureElementCss();
            return this.getPropertyValue("cssHeader", "");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setCssHeader = function (val) {
        this.setPropertyValue("cssHeader", val);
    };
    Question.prototype.getCssHeader = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(cssClasses.header)
            .append(cssClasses.headerTop, this.hasTitleOnTop)
            .append(cssClasses.headerLeft, this.hasTitleOnLeft)
            .append(cssClasses.headerBottom, this.hasTitleOnBottom)
            .toString();
    };
    Object.defineProperty(Question.prototype, "cssContent", {
        get: function () {
            this.ensureElementCss();
            return this.getPropertyValue("cssContent", "");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setCssContent = function (val) {
        this.setPropertyValue("cssContent", val);
    };
    Question.prototype.getCssContent = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(cssClasses.content)
            .append(cssClasses.contentLeft, this.hasTitleOnLeft)
            .toString();
    };
    Object.defineProperty(Question.prototype, "cssTitle", {
        get: function () {
            this.ensureElementCss();
            return this.getPropertyValue("cssTitle", "");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setCssTitle = function (val) {
        this.setPropertyValue("cssTitle", val);
    };
    Question.prototype.getCssTitle = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(cssClasses.title)
            .append(cssClasses.titleExpandable, this.state !== "default")
            .append(cssClasses.titleExpanded, this.isExpanded)
            .append(cssClasses.titleCollapsed, this.isCollapsed)
            .append(cssClasses.titleDisabled, this.isReadOnly)
            .append(cssClasses.titleOnError, this.containsErrors)
            .append(cssClasses.titleOnAnswer, !this.containsErrors && this.isAnswered)
            .toString();
    };
    Object.defineProperty(Question.prototype, "cssDescription", {
        get: function () {
            this.ensureElementCss();
            return this.getPropertyValue("cssDescription", "");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setCssDescription = function (val) {
        this.setPropertyValue("cssDescription", val);
    };
    Question.prototype.getCssDescription = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(cssClasses.description, this.hasDescriptionUnderTitle)
            .append(cssClasses.descriptionUnderInput, this.hasDescriptionUnderInput)
            .toString();
    };
    Question.prototype.getIsErrorsModeTooltip = function () {
        return _super.prototype.getIsErrorsModeTooltip.call(this) && !this.customWidget;
    };
    Question.prototype.showErrorOnCore = function (location) {
        return !this.isErrorsModeTooltip && !this.showErrorsAboveQuestion && !this.showErrorsBelowQuestion && this.errorLocation === location;
    };
    Object.defineProperty(Question.prototype, "showErrorOnTop", {
        get: function () {
            return this.showErrorOnCore("top");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "showErrorOnBottom", {
        get: function () {
            return this.showErrorOnCore("bottom");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getIsTooltipErrorSupportedByParent = function () {
        if (this.parentQuestion) {
            return this.parentQuestion.getIsTooltipErrorInsideSupported();
        }
        else {
            return _super.prototype.getIsTooltipErrorSupportedByParent.call(this);
        }
    };
    Object.defineProperty(Question.prototype, "showErrorsOutsideQuestion", {
        get: function () {
            return this.isDefaultV2Theme && !(this.hasParent && this.getIsTooltipErrorSupportedByParent());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "showErrorsAboveQuestion", {
        get: function () {
            return this.showErrorsOutsideQuestion && this.errorLocation === "top";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "showErrorsBelowQuestion", {
        get: function () {
            return this.showErrorsOutsideQuestion && this.errorLocation === "bottom";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "cssError", {
        get: function () {
            this.ensureElementCss();
            return this.getPropertyValue("cssError", "");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setCssError = function (val) {
        this.setPropertyValue("cssError", val);
    };
    Question.prototype.getCssError = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(cssClasses.error.root)
            .append(cssClasses.error.outsideQuestion, this.showErrorsBelowQuestion || this.showErrorsAboveQuestion)
            .append(cssClasses.error.belowQuestion, this.showErrorsBelowQuestion)
            .append(cssClasses.error.aboveQuestion, this.showErrorsAboveQuestion)
            .append(cssClasses.error.tooltip, this.isErrorsModeTooltip)
            .append(cssClasses.error.locationTop, this.showErrorOnTop)
            .append(cssClasses.error.locationBottom, this.showErrorOnBottom)
            .toString();
    };
    Question.prototype.getRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.cssRoot)
            .append(this.cssClasses.disabled, this.isReadOnly)
            .append(this.cssClasses.invisible, !this.isDesignMode && this.areInvisibleElementsShowing && !this.visible)
            .toString();
    };
    Question.prototype.updateElementCss = function (reNew) {
        _super.prototype.updateElementCss.call(this, reNew);
        if (reNew) {
            this.updateQuestionCss(true);
        }
        this.onIndentChanged();
    };
    Question.prototype.updateQuestionCss = function (reNew) {
        if (this.isLoadingFromJson ||
            !this.survey ||
            (reNew !== true && !this.cssClassesValue))
            return;
        this.updateElementCssCore(this.cssClasses);
    };
    Question.prototype.ensureElementCss = function () {
        if (!this.cssClassesValue) {
            this.updateQuestionCss(true);
        }
    };
    Question.prototype.updateElementCssCore = function (cssClasses) {
        this.setCssRoot(this.getCssRoot(cssClasses));
        this.setCssHeader(this.getCssHeader(cssClasses));
        this.setCssContent(this.getCssContent(cssClasses));
        this.setCssTitle(this.getCssTitle(cssClasses));
        this.setCssDescription(this.getCssDescription(cssClasses));
        this.setCssError(this.getCssError(cssClasses));
    };
    Question.prototype.updateCssClasses = function (res, css) {
        if (!css.question)
            return;
        var objCss = css[this.getCssType()];
        var titleBuilder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]().append(res.title)
            .append(css.question.titleRequired, this.isRequired);
        res.title = titleBuilder.toString();
        var rootBuilder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]().append(res.root)
            .append(objCss, this.isRequired && !!css.question.required);
        if (objCss === undefined || objCss === null) {
            res.root = rootBuilder.toString();
        }
        else if (typeof objCss === "string" || objCss instanceof String) {
            res.root = rootBuilder.append(objCss.toString()).toString();
        }
        else {
            res.root = rootBuilder.toString();
            for (var key in objCss) {
                res[key] = objCss[key];
            }
        }
    };
    Question.prototype.getCssType = function () {
        return this.getType();
    };
    Object.defineProperty(Question.prototype, "renderCssRoot", {
        get: function () {
            return this.cssClasses.root || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.onIndentChanged = function () {
        this.paddingLeft = this.getIndentSize(this.indent);
        this.paddingRight = this.getIndentSize(this.rightIndent);
    };
    Question.prototype.getIndentSize = function (indent) {
        if (indent < 1 || !this.getSurvey() || !this.cssClasses || !this.cssClasses.indent)
            return "";
        return indent * this.cssClasses.indent + "px";
    };
    /**
     * Moves focus to the input field of this question.
     * @param onError Pass `true` if you want to focus an input field with the first validation error. Default value: `false` (focuses the first input field). Applies to question types with multiple input fields.
     */
    Question.prototype.focus = function (onError) {
        if (onError === void 0) { onError = false; }
        if (this.isDesignMode)
            return;
        if (!!this.survey) {
            this.expandAllParents(this);
            this.survey.scrollElementToTop(this, this, null, this.id);
        }
        var id = !onError
            ? this.getFirstInputElementId()
            : this.getFirstErrorInputElementId();
        if (_survey_element__WEBPACK_IMPORTED_MODULE_2__["SurveyElement"].FocusElement(id)) {
            this.fireCallback(this.focusCallback);
        }
    };
    Question.prototype.expandAllParents = function (element) {
        if (!element)
            return;
        if (element.isCollapsed) {
            element.expand();
        }
        this.expandAllParents(element.parent);
        this.expandAllParents(element.parentQuestion);
    };
    Question.prototype.focusIn = function () {
        if (!this.survey)
            return;
        this.survey.whenQuestionFocusIn(this);
    };
    Question.prototype.fireCallback = function (callback) {
        if (callback)
            callback();
    };
    Question.prototype.getOthersMaxLength = function () {
        if (!this.survey)
            return null;
        return this.survey.maxOthersLength > 0 ? this.survey.maxOthersLength : null;
    };
    Question.prototype.onCreating = function () { };
    Question.prototype.getFirstQuestionToFocus = function (withError) {
        return this.hasInput && (!withError || this.currentErrorCount > 0) ? this : null;
    };
    Question.prototype.getFirstInputElementId = function () {
        return this.inputId;
    };
    Question.prototype.getFirstErrorInputElementId = function () {
        return this.getFirstInputElementId();
    };
    Question.prototype.getProcessedTextValue = function (textValue) {
        var name = textValue.name.toLocaleLowerCase();
        textValue.isExists =
            Object.keys(Question.TextPreprocessorValuesMap).indexOf(name) !== -1 ||
                this[textValue.name] !== undefined;
        textValue.value = this[Question.TextPreprocessorValuesMap[name] || textValue.name];
    };
    Question.prototype.supportComment = function () {
        var prop = this.getPropertyByName("showCommentArea");
        return !prop || prop.visible;
    };
    Question.prototype.supportOther = function () {
        return false;
    };
    Object.defineProperty(Question.prototype, "isRequired", {
        /**
         * Makes the question required. If a respondent skips a required question, the survey displays a validation error.
         * @see requiredIf
         * @see [Data Validation](https://surveyjs.io/form-library/documentation/data-validation)
         */
        get: function () {
            return this.getPropertyValue("isRequired");
        },
        set: function (val) {
            this.setPropertyValue("isRequired", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "requiredIf", {
        /**
         * A Boolean expression. If it evaluates to `true`, this question becomes required.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility)
         * @see isRequired
         */
        get: function () {
            return this.getPropertyValue("requiredIf", "");
        },
        set: function (val) {
            this.setPropertyValue("requiredIf", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "showCommentArea", {
        /**
         * Specifies whether to display a comment area. Incompatible with the `showOtherItem` property.
         * @see comment
         * @see commentText
         * @see showOtherItem
         */
        get: function () {
            return this.getPropertyValue("showCommentArea", false);
        },
        set: function (val) {
            if (!this.supportComment())
                return;
            this.setPropertyValue("showCommentArea", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasComment", {
        get: function () {
            return this.showCommentArea;
        },
        set: function (val) {
            this.showCommentArea = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "id", {
        /**
         * A value to assign to the `id` attribute of the rendered HTML element. A default `id` is generated automatically.
         */
        get: function () {
            return this.getPropertyValue("id");
        },
        set: function (val) {
            this.setPropertyValue("id", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "ariaTitleId", {
        get: function () {
            return this.id + "_ariaTitle";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "commentId", {
        get: function () {
            return this.id + "_comment";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "ariaRole", {
        get: function () {
            return "textbox";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "showOtherItem", {
        /**
         * Specifies whether to display the "Other" choice item. Incompatible with the `showCommentArea` property.
         *
         * @see otherText
         * @see otherItem
         * @see otherErrorText
         * @see showCommentArea
         */
        get: function () {
            return this.getPropertyValue("showOtherItem", false);
        },
        set: function (val) {
            if (!this.supportOther() || this.showOtherItem == val)
                return;
            this.setPropertyValue("showOtherItem", val);
            this.hasOtherChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "hasOther", {
        get: function () {
            return this.showOtherItem;
        },
        set: function (val) {
            this.showOtherItem = val;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.hasOtherChanged = function () { };
    Object.defineProperty(Question.prototype, "requireUpdateCommentValue", {
        get: function () {
            return this.hasComment || this.hasOther;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isReadOnly", {
        get: function () {
            var isParentReadOnly = !!this.parent && this.parent.isReadOnly;
            var isPareQuestionReadOnly = !!this.parentQuestion && this.parentQuestion.isReadOnly;
            var isSurveyReadOnly = !!this.survey && this.survey.isDisplayMode;
            return this.readOnly || isParentReadOnly || isSurveyReadOnly || isPareQuestionReadOnly;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "isInputReadOnly", {
        get: function () {
            var isDesignModeV2 = _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].supportCreatorV2 && this.isDesignMode;
            return this.isReadOnly || isDesignModeV2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "renderedInputReadOnly", {
        get: function () {
            return this.isInputReadOnly ? "" : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "renderedInputDisabled", {
        get: function () {
            return this.isInputReadOnly ? "" : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.onReadOnlyChanged = function () {
        this.setPropertyValue("isInputReadOnly", this.isInputReadOnly);
        _super.prototype.onReadOnlyChanged.call(this);
    };
    Object.defineProperty(Question.prototype, "enableIf", {
        /**
         * A Boolean expression. If it evaluates to `false`, this question becomes read-only.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility)
         * @see readOnly
         * @see isReadOnly
         */
        get: function () {
            return this.getPropertyValue("enableIf", "");
        },
        set: function (val) {
            this.setPropertyValue("enableIf", val);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.surveyChoiceItemVisibilityChange = function () { };
    Question.prototype.runCondition = function (values, properties) {
        if (this.isDesignMode)
            return;
        if (!properties)
            properties = {};
        properties["question"] = this;
        this.runConditionCore(values, properties);
        if (!this.isValueChangedDirectly) {
            this.defaultValueRunner = this.getDefaultRunner(this.defaultValueRunner, this.defaultValueExpression);
            this.runDefaultValueExpression(this.defaultValueRunner, values, properties);
        }
    };
    Object.defineProperty(Question.prototype, "no", {
        /**
         * A question number or letter (depends on the `questionStartIndex` property of the question container (panel, page, or survey)).
         *
         * When the question number, title, or the entire question is invisible, this property returns an empty string.
         * @see SurveyModel.questionStartIndex
         * @see hideNumber
         * @see titleLocation
         * @see visibleIf
         */
        get: function () {
            return this.getPropertyValue("no");
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.calcNo = function () {
        if (!this.hasTitle || this.hideNumber)
            return "";
        var no = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].getNumberByIndex(this.visibleIndex, this.getStartIndex());
        if (!!this.survey) {
            no = this.survey.getUpdatedQuestionNo(this, no);
        }
        return no;
    };
    Question.prototype.getStartIndex = function () {
        if (!!this.parent)
            return this.parent.getQuestionStartIndex();
        if (!!this.survey)
            return this.survey.questionStartIndex;
        return "";
    };
    Question.prototype.onSurveyLoad = function () {
        this.isCustomWidgetRequested = false;
        this.fireCallback(this.surveyLoadCallback);
        this.updateValueWithDefaults();
        if (this.isEmpty()) {
            this.initDataFromSurvey();
        }
        this.onIndentChanged();
    };
    Question.prototype.onSetData = function () {
        _super.prototype.onSetData.call(this);
        if (!this.survey)
            return;
        this.initDataFromSurvey();
        this.onSurveyValueChanged(this.value);
        this.updateValueWithDefaults();
        this.onIndentChanged();
        this.updateQuestionCss();
        this.updateIsAnswered();
    };
    Question.prototype.initDataFromSurvey = function () {
        if (!!this.data) {
            var val = this.data.getValue(this.getValueName());
            if (!_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(val) || !this.isLoadingFromJson) {
                this.updateValueFromSurvey(val);
            }
            this.initCommentFromSurvey();
        }
    };
    Question.prototype.initCommentFromSurvey = function () {
        if (!!this.data && this.requireUpdateCommentValue) {
            this.updateCommentFromSurvey(this.data.getComment(this.getValueName()));
        }
        else {
            this.updateCommentFromSurvey("");
        }
    };
    Question.prototype.runExpression = function (expression) {
        if (!this.survey || !expression)
            return undefined;
        return this.survey.runExpression(expression);
    };
    Object.defineProperty(Question.prototype, "autoGrowComment", {
        get: function () {
            return this.survey && this.survey.autoGrowComment;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "questionValue", {
        get: function () {
            return this.getPropertyValue("value");
        },
        set: function (val) {
            this.setPropertyValue("value", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "questionComment", {
        get: function () {
            return this.getPropertyValue("comment");
        },
        set: function (val) {
            this.setPropertyValue("comment", val);
            this.fireCallback(this.commentChangedCallback);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "value", {
        /**
         * Gets or sets the question value.
         * @see SurveyModel.setValue
         * @see SurveyModel.getValue
         */
        get: function () {
            return this.getValueCore();
        },
        set: function (newValue) {
            this.setNewValue(newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "valueForSurvey", {
        get: function () {
            if (!!this.valueToDataCallback) {
                return this.valueToDataCallback(this.value);
            }
            return this.value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the question's `value` and `comment` properties to `undefined`.
     * @see value
     * @see comment
     */
    Question.prototype.clearValue = function () {
        if (this.value !== undefined) {
            this.value = undefined;
        }
        if (!!this.comment) {
            this.comment = undefined;
        }
    };
    Question.prototype.unbindValue = function () {
        this.clearValue();
    };
    Question.prototype.createValueCopy = function () {
        return this.getUnbindValue(this.value);
    };
    Question.prototype.getUnbindValue = function (value) {
        if (this.isValueSurveyElement(value))
            return value;
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].getUnbindValue(value);
    };
    Question.prototype.isValueSurveyElement = function (val) {
        if (!val)
            return false;
        if (Array.isArray(val))
            return val.length > 0 ? this.isValueSurveyElement(val[0]) : false;
        return !!val.getType && !!val.onPropertyChanged;
    };
    Question.prototype.canClearValueAsInvisible = function () {
        if (this.isVisible && this.isParentVisible)
            return false;
        if (!!this.page && this.page.isStartPage)
            return false;
        if (!this.survey || !this.valueName)
            return true;
        return !this.survey.hasVisibleQuestionByValueName(this.valueName);
    };
    Object.defineProperty(Question.prototype, "isParentVisible", {
        /**
         * Returns `true` if a parent element (page or panel) is visible.
         */
        get: function () {
            var parent = this.parent;
            while (parent) {
                if (!parent.isVisible)
                    return false;
                parent = parent.parent;
            }
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.clearValueIfInvisible = function (reason) {
        if (reason === void 0) { reason = "onHidden"; }
        if (this.clearIfInvisible === "none")
            return;
        if (reason === "onHidden" && this.clearIfInvisible === "onComplete")
            return;
        if (reason === "none" && (this.clearIfInvisible === "default" || this.clearIfInvisible === "none"))
            return;
        this.clearValueIfInvisibleCore();
    };
    Question.prototype.clearValueIfInvisibleCore = function () {
        if (this.canClearValueAsInvisible()) {
            this.clearValue();
        }
    };
    Object.defineProperty(Question.prototype, "clearIfInvisible", {
        /**
         * Specifies when to clear the question value if the question becomes invisible.
         *
         * Possible values:
         *
         * - `"default"` (default) - Inherits the setting from the Survey's [`clearInvisibleValues`](https://surveyjs.io/form-library/documentation/surveymodel#clearInvisibleValues) property.
         * - `"onHidden"` - Clears the value when the question becomes invisible. If a question is invisible on startup and has an initial value, this value will be cleared when the survey is complete.
         * - `"onComplete"` - Clears the value when the survey is complete.
         * - `"none"` - Never clears the value of an invisible question.
         * @see SurveyModel.clearInvisibleValues
         * @see visible
         * @see SurveyModel.onComplete
         */
        get: function () {
            return this.getPropertyValue("clearIfInvisible");
        },
        set: function (val) {
            this.setPropertyValue("clearIfInvisible", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "displayValue", {
        get: function () {
            if (this.isLoadingFromJson)
                return "";
            return this.getDisplayValue(true);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a display text that corresponds to the question value. For example, if you call this method for a Dropdown question, it returns an item text instead of an item value.
     * @param keysAsText Applies when the question value is an object (in Matrix, Multiple Text, and similar questions). Pass `true` if not only values in the object should be display texts, but also keys. Default value: `false`.
     * @param value Specify this parameter to get a display text for a specific value, not for the current question value. If the question value is an object, this parameter should be a similar object.
     */
    Question.prototype.getDisplayValue = function (keysAsText, value) {
        if (value === void 0) { value = undefined; }
        var res = this.calcDisplayValue(keysAsText, value);
        if (this.survey) {
            res = this.survey.getQuestionDisplayValue(this, res);
        }
        return !!this.displayValueCallback ? this.displayValueCallback(res) : res;
    };
    Question.prototype.calcDisplayValue = function (keysAsText, value) {
        if (value === void 0) { value = undefined; }
        if (this.customWidget) {
            var res = this.customWidget.getDisplayValue(this, value);
            if (res)
                return res;
        }
        value = value == undefined ? this.createValueCopy() : value;
        if (this.isValueEmpty(value))
            return this.getDisplayValueEmpty();
        return this.getDisplayValueCore(keysAsText, value);
    };
    Question.prototype.getDisplayValueCore = function (keyAsText, value) {
        return value;
    };
    Question.prototype.getDisplayValueEmpty = function () {
        return "";
    };
    Object.defineProperty(Question.prototype, "defaultValue", {
        /**
         * A default value for the question. Ignored for question types that cannot have a [value](https://surveyjs.io/form-library/documentation/question#value) (for example, HTML).
         *
         * The default value is used as a question value in the following cases:
         *
         * - While the survey is being loaded from JSON.
         * - The question is just added to the survey and does not yet have an answer.
         * - The respondent left the answer empty.
         * @see defaultValueExpression
         */
        get: function () {
            return this.getPropertyValue("defaultValue");
        },
        set: function (val) {
            if (this.isValueExpression(val)) {
                this.defaultValueExpression = val.substring(1);
                return;
            }
            this.setPropertyValue("defaultValue", this.convertDefaultValue(val));
            this.updateValueWithDefaults();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "defaultValueExpression", {
        /**
         * An expression used to calculate the [defaultValue](https://surveyjs.io/form-library/documentation/question#defaultValue).
         *
         * This expression applies until the question [value](https://surveyjs.io/form-library/documentation/question#value) is specified by an end user or programmatically.
         *
         * An expression can reference other questions as follows:
         *
         * - `{other_question_name}`
         * - `{panel.other_question_name}` (to access questions inside the same dynamic panel)
         * - `{row.other_question_name}` (to access questions inside the same dynamic matrix or multi-column dropdown)
         *
         * An expression can also include built-in and custom functions for advanced calculations. For example, if the `defaultValue` should be today's date, set the `defaultValueExpression` to `"today()"`, and the corresponding built-in function will be executed each time the survey is loaded. Refer to the following help topic for more information: [Built-In Functions](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#built-in-functions).
         * @see defaultValue
         */
        get: function () {
            return this.getPropertyValue("defaultValueExpression");
        },
        set: function (val) {
            this.setPropertyValue("defaultValueExpression", val);
            this.defaultValueRunner = undefined;
            this.updateValueWithDefaults();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "resizeStyle", {
        get: function () {
            return this.autoGrowComment ? "none" : "both";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the question value as an object in which the question name, title, value, and other parameters are stored as individual properties.
     *
     * If the question can have more than one value (Matrix, Multiple Text), the object enables the `isNode` flag and stores information about these values in the `data` property. Refer to the following help topic for more information: [Access Full Survey Results](https://surveyjs.io/form-library/documentation/handle-survey-results-access#access-full-survey-results).
     *
     * Pass an object with the `includeEmpty` property set to `false` if you want to skip empty answers.
     */
    Question.prototype.getPlainData = function (options) {
        var _this = this;
        if (!options) {
            options = { includeEmpty: true, includeQuestionTypes: false };
        }
        if (options.includeEmpty || !this.isEmpty()) {
            var questionPlainData = {
                name: this.name,
                title: this.locTitle.renderedHtml,
                value: this.value,
                displayValue: this.displayValue,
                isNode: false,
                getString: function (val) {
                    return typeof val === "object" ? JSON.stringify(val) : val;
                },
            };
            if (options.includeQuestionTypes === true) {
                questionPlainData.questionType = this.getType();
            }
            (options.calculations || []).forEach(function (calculation) {
                questionPlainData[calculation.propertyName] = _this[calculation.propertyName];
            });
            if (this.hasComment) {
                questionPlainData.isNode = true;
                questionPlainData.data = [
                    {
                        name: 0,
                        isComment: true,
                        title: "Comment",
                        value: _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].commentSuffix,
                        displayValue: this.comment,
                        getString: function (val) {
                            return typeof val === "object" ? JSON.stringify(val) : val;
                        },
                        isNode: false,
                    },
                ];
            }
            return questionPlainData;
        }
        return undefined;
    };
    Object.defineProperty(Question.prototype, "correctAnswer", {
        /**
         * A correct answer to this question. Specify this property if you want to [create a quiz](https://surveyjs.io/form-library/documentation/design-survey-create-a-quiz).
         * @see SurveyModel.getCorrectAnswerCount
         * @see SurveyModel.getInCorrectAnswerCount
         */
        get: function () {
            return this.getPropertyValue("correctAnswer");
        },
        set: function (val) {
            this.setPropertyValue("correctAnswer", this.convertDefaultValue(val));
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.convertDefaultValue = function (val) {
        return val;
    };
    Object.defineProperty(Question.prototype, "quizQuestionCount", {
        /**
         * The number of quiz questions. A question counts if it is visible, has an input field, and specifies `correctAnswer`.
         * @see [Create a Quiz](https://surveyjs.io/form-library/documentation/design-survey-create-a-quiz)
         * @see correctAnswer
         * @see SurveyModel.getQuizQuestions
         */
        get: function () {
            if (this.isVisible &&
                this.hasInput &&
                !this.isValueEmpty(this.correctAnswer))
                return this.getQuizQuestionCount();
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "correctAnswerCount", {
        get: function () {
            if (!this.isEmpty() && !this.isValueEmpty(this.correctAnswer))
                return this.getCorrectAnswerCount();
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getQuizQuestionCount = function () {
        return 1;
    };
    Question.prototype.getCorrectAnswerCount = function () {
        return this.isTwoValueEquals(this.value, this.correctAnswer, !_settings__WEBPACK_IMPORTED_MODULE_8__["settings"].comparator.caseSensitive, true)
            ? 1
            : 0;
    };
    /**
    * Returns `true` if a question answer matches the `correctAnswer` property value.
    *
    * [View Demo](https://surveyjs.io/form-library/examples/create-a-scored-quiz (linkStyle))
    * @see correctAnswer
    * @see SurveyModel.getQuizQuestions
    */
    Question.prototype.isAnswerCorrect = function () {
        return this.correctAnswerCount == this.quizQuestionCount;
    };
    Question.prototype.updateValueWithDefaults = function () {
        if (this.isLoadingFromJson || (!this.isDesignMode && this.isDefaultValueEmpty()))
            return;
        if (!this.isDesignMode && !this.isEmpty())
            return;
        if (this.isEmpty() && this.isDefaultValueEmpty())
            return;
        if (this.isClearValueOnHidden && !this.isVisible)
            return;
        if (this.isDesignMode && this.isContentElement && this.isDefaultValueEmpty())
            return;
        this.setDefaultValue();
    };
    Object.defineProperty(Question.prototype, "isClearValueOnHidden", {
        get: function () {
            if (this.clearIfInvisible === "none" || this.clearIfInvisible === "onComplete")
                return false;
            if (this.clearIfInvisible === "onHidden")
                return true;
            return !!this.survey && this.survey.isClearValueOnHidden;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getQuestionFromArray = function (name, index) {
        return null;
    };
    Question.prototype.getDefaultValue = function () {
        return this.defaultValue;
    };
    Question.prototype.isDefaultValueEmpty = function () {
        return !this.defaultValueExpression && this.isValueEmpty(this.defaultValue);
    };
    Question.prototype.getDefaultRunner = function (runner, expression) {
        if (!runner && !!expression) {
            runner = new _conditions__WEBPACK_IMPORTED_MODULE_6__["ExpressionRunner"](expression);
        }
        if (!!runner) {
            runner.expression = expression;
        }
        return runner;
    };
    Question.prototype.setDefaultValue = function () {
        var _this = this;
        this.defaultValueRunner = this.getDefaultRunner(this.defaultValueRunner, this.defaultValueExpression);
        this.setValueAndRunExpression(this.defaultValueRunner, this.getUnbindValue(this.defaultValue), function (val) {
            _this.value = val;
        });
    };
    Question.prototype.isValueExpression = function (val) {
        return !!val && typeof val == "string" && val.length > 0 && val[0] == "=";
    };
    Question.prototype.setValueAndRunExpression = function (runner, defaultValue, setFunc, values, properties) {
        var _this = this;
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        var func = function (val) {
            _this.runExpressionSetValue(val, setFunc);
        };
        if (!this.runDefaultValueExpression(runner, values, properties, func)) {
            func(defaultValue);
        }
    };
    Question.prototype.convertFuncValuetoQuestionValue = function (val) {
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].convertValToQuestionVal(val);
    };
    Question.prototype.runExpressionSetValue = function (val, setFunc) {
        setFunc(this.convertFuncValuetoQuestionValue(val));
    };
    Question.prototype.runDefaultValueExpression = function (runner, values, properties, setFunc) {
        var _this = this;
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (!runner || !this.data)
            return false;
        if (!setFunc) {
            setFunc = function (val) {
                _this.runExpressionSetValue(val, function (val) { _this.value = val; });
            };
        }
        if (!values)
            values = this.data.getFilteredValues();
        if (!properties)
            properties = this.data.getFilteredProperties();
        if (!!runner && runner.canRun) {
            runner.onRunComplete = function (res) {
                if (res == undefined)
                    res = _this.defaultValue;
                _this.isChangingViaDefaultValue = true;
                setFunc(res);
                _this.isChangingViaDefaultValue = false;
            };
            runner.run(values, properties);
        }
        return true;
    };
    Object.defineProperty(Question.prototype, "comment", {
        /**
         * A comment to the selected question value. Enable the `showCommentArea` property to allow users to leave comments.
         * @see showCommentArea
         * @see commentText
         */
        get: function () {
            return this.getQuestionComment();
        },
        set: function (newValue) {
            if (!!newValue) {
                var trimmedValue = newValue.toString().trim();
                if (trimmedValue !== newValue) {
                    newValue = trimmedValue;
                    if (newValue === this.comment) {
                        this.setPropertyValueDirectly("comment", newValue);
                    }
                }
            }
            if (this.comment == newValue)
                return;
            this.setQuestionComment(newValue);
            this.updateCommentElements();
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getCommentAreaCss = function (isOther) {
        if (isOther === void 0) { isOther = false; }
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append("form-group", isOther)
            .append(this.cssClasses.formGroup, !isOther)
            .append(this.cssClasses.commentArea)
            .toString();
    };
    Question.prototype.getQuestionComment = function () {
        return this.questionComment;
    };
    Question.prototype.setQuestionComment = function (newValue) {
        this.setNewComment(newValue);
    };
    /**
     * Returns `true` if the question value is an empty string, array, or object or if it equals `undefined` or `null`.
     */
    Question.prototype.isEmpty = function () {
        return this.isValueEmpty(this.value);
    };
    Object.defineProperty(Question.prototype, "isAnswered", {
        get: function () {
            return this.getPropertyValue("isAnswered");
        },
        set: function (val) {
            this.setPropertyValue("isAnswered", val);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.updateIsAnswered = function () {
        var oldVal = this.isAnswered;
        this.setPropertyValue("isAnswered", this.getIsAnswered());
        if (oldVal !== this.isAnswered) {
            this.updateQuestionCss();
        }
    };
    Question.prototype.getIsAnswered = function () {
        return !this.isEmpty();
    };
    Object.defineProperty(Question.prototype, "validators", {
        /**
         * Question validators.
         * @see [Data Validation](https://surveyjs.io/form-library/documentation/data-validation)
         */
        get: function () {
            return this.getPropertyValue("validators");
        },
        set: function (val) {
            this.setPropertyValue("validators", val);
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getValidators = function () {
        return this.validators;
    };
    Question.prototype.getSupportedValidators = function () {
        var res = [];
        var className = this.getType();
        while (!!className) {
            var classValidators = _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].supportedValidators[className];
            if (!!classValidators) {
                for (var i = classValidators.length - 1; i >= 0; i--) {
                    res.splice(0, 0, classValidators[i]);
                }
            }
            var classInfo = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(className);
            className = classInfo.parentName;
        }
        return res;
    };
    Question.prototype.addSupportedValidators = function (supportedValidators, classValidators) { };
    Question.prototype.addConditionObjectsByContext = function (objects, context) {
        objects.push({
            name: this.getValueName(),
            text: this.processedTitle,
            question: this,
        });
    };
    Question.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(this);
        json["type"] = this.getType();
        return json;
    };
    Question.prototype.hasErrors = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        var oldHasErrors = this.errors.length > 0;
        var errors = this.checkForErrors(!!rec && rec.isOnValueChanged === true);
        if (fireCallback) {
            if (!!this.survey) {
                this.survey.beforeSettingQuestionErrors(this, errors);
            }
            this.errors = errors;
        }
        this.updateContainsErrors();
        if (oldHasErrors != errors.length > 0) {
            this.updateQuestionCss();
        }
        if (this.isCollapsed && rec && fireCallback && errors.length > 0) {
            this.expand();
        }
        return errors.length > 0;
    };
    /**
     * Validates this question and returns `false` if the validation fails.
     * @param fireCallback *Optional.* Pass `false` if you do not want to show validation errors in the UI.
     * @see [Data Validation](https://surveyjs.io/form-library/documentation/data-validation)
     */
    Question.prototype.validate = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        return !this.hasErrors(fireCallback, rec);
    };
    Object.defineProperty(Question.prototype, "currentErrorCount", {
        get: function () {
            return this.errors.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Question.prototype, "requiredText", {
        /**
         * Returns a character or text string that indicates a required question.
         * @see SurveyModel.requiredText
         * @see isRequired
         */
        get: function () {
            return this.survey != null && this.isRequired
                ? this.survey.requiredText
                : "";
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.addError = function (error) {
        if (!error)
            return;
        var newError = null;
        if (typeof error === "string" || error instanceof String) {
            newError = new _error__WEBPACK_IMPORTED_MODULE_3__["CustomError"](error, this.survey);
        }
        else {
            newError = error;
        }
        this.errors.push(newError);
    };
    Question.prototype.removeError = function (error) {
        var errors = this.errors;
        var index = errors.indexOf(error);
        if (index !== -1)
            errors.splice(index, 1);
    };
    Question.prototype.checkForErrors = function (isOnValueChanged) {
        var qErrors = new Array();
        if (this.isVisible && this.canCollectErrors()) {
            this.collectErrors(qErrors, isOnValueChanged);
        }
        return qErrors;
    };
    Question.prototype.canCollectErrors = function () {
        return !this.isReadOnly;
    };
    Question.prototype.collectErrors = function (qErrors, isOnValueChanged) {
        this.onCheckForErrors(qErrors, isOnValueChanged);
        if (qErrors.length > 0 || !this.canRunValidators(isOnValueChanged))
            return;
        var errors = this.runValidators();
        if (errors.length > 0) {
            //validators may change the question value.
            qErrors.length = 0;
            for (var i = 0; i < errors.length; i++) {
                qErrors.push(errors[i]);
            }
        }
        if (this.survey && qErrors.length == 0) {
            var error = this.fireSurveyValidation();
            if (error) {
                qErrors.push(error);
            }
        }
    };
    Question.prototype.canRunValidators = function (isOnValueChanged) {
        return true;
    };
    Question.prototype.fireSurveyValidation = function () {
        if (this.validateValueCallback)
            return this.validateValueCallback();
        return this.survey ? this.survey.validateQuestion(this) : null;
    };
    Question.prototype.onCheckForErrors = function (errors, isOnValueChanged) {
        var _this = this;
        if (!isOnValueChanged && this.hasRequiredError()) {
            var err = new _error__WEBPACK_IMPORTED_MODULE_3__["AnswerRequiredError"](this.requiredErrorText, this);
            err.onUpdateErrorTextCallback = function (err) { err.text = _this.requiredErrorText; };
            errors.push(err);
        }
    };
    Question.prototype.hasRequiredError = function () {
        return this.isRequired && this.isEmpty();
    };
    Object.defineProperty(Question.prototype, "isRunningValidators", {
        get: function () {
            return this.getIsRunningValidators();
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getIsRunningValidators = function () {
        return this.isRunningValidatorsValue;
    };
    Question.prototype.runValidators = function () {
        var _this = this;
        if (!!this.validatorRunner) {
            this.validatorRunner.onAsyncCompleted = null;
        }
        this.validatorRunner = new _validator__WEBPACK_IMPORTED_MODULE_4__["ValidatorRunner"]();
        this.isRunningValidatorsValue = true;
        this.validatorRunner.onAsyncCompleted = function (errors) {
            _this.doOnAsyncCompleted(errors);
        };
        return this.validatorRunner.run(this);
    };
    Question.prototype.doOnAsyncCompleted = function (errors) {
        for (var i = 0; i < errors.length; i++) {
            this.errors.push(errors[i]);
        }
        this.isRunningValidatorsValue = false;
        this.raiseOnCompletedAsyncValidators();
    };
    Question.prototype.raiseOnCompletedAsyncValidators = function () {
        if (!!this.onCompletedAsyncValidators && !this.isRunningValidators) {
            this.onCompletedAsyncValidators(this.getAllErrors().length > 0);
            this.onCompletedAsyncValidators = null;
        }
    };
    Question.prototype.setNewValue = function (newValue) {
        var oldAnswered = this.isAnswered;
        this.setNewValueInData(newValue);
        this.allowNotifyValueChanged && this.onValueChanged();
        if (this.isAnswered != oldAnswered) {
            this.updateQuestionCss();
        }
    };
    Question.prototype.isTextValue = function () {
        return false;
    };
    Object.defineProperty(Question.prototype, "isSurveyInputTextUpdate", {
        get: function () {
            return !!this.survey ? this.survey.isUpdateValueTextOnTyping : false;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getDataLocNotification = function () {
        return this.isInputTextUpdate ? "text" : false;
    };
    Object.defineProperty(Question.prototype, "isInputTextUpdate", {
        get: function () {
            return this.isSurveyInputTextUpdate && this.isTextValue();
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.setNewValueInData = function (newValue) {
        newValue = this.valueToData(newValue);
        if (!this.isValueChangedInSurvey) {
            this.setValueCore(newValue);
        }
    };
    Question.prototype.getValueCore = function () {
        return this.questionValue;
    };
    Question.prototype.setValueCore = function (newValue) {
        this.setQuestionValue(newValue);
        if (this.data != null && this.canSetValueToSurvey()) {
            newValue = this.valueForSurvey;
            this.data.setValue(this.getValueName(), newValue, this.getDataLocNotification(), this.allowNotifyValueChanged);
        }
    };
    Question.prototype.canSetValueToSurvey = function () {
        return true;
    };
    Question.prototype.valueFromData = function (val) {
        return val;
    };
    Question.prototype.valueToData = function (val) {
        return val;
    };
    Question.prototype.onValueChanged = function () { };
    Question.prototype.setNewComment = function (newValue) {
        if (this.questionComment === newValue)
            return;
        this.questionComment = newValue;
        if (this.data != null) {
            this.data.setComment(this.getValueName(), newValue, this.isSurveyInputTextUpdate ? "text" : false);
        }
    };
    Question.prototype.getValidName = function (name) {
        if (!name)
            return name;
        return name.trim().replace(/[\{\}]+/g, "");
    };
    //IQuestion
    Question.prototype.updateValueFromSurvey = function (newValue) {
        newValue = this.getUnbindValue(newValue);
        if (!!this.valueFromDataCallback) {
            newValue = this.valueFromDataCallback(newValue);
        }
        this.setQuestionValue(this.valueFromData(newValue));
        this.updateIsAnswered();
    };
    Question.prototype.updateCommentFromSurvey = function (newValue) {
        this.questionComment = newValue;
    };
    Question.prototype.onChangeQuestionValue = function (newValue) { };
    Question.prototype.setValueChangedDirectly = function () {
        this.isValueChangedDirectly = true;
    };
    Question.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        var isEqual = this.isTwoValueEquals(this.questionValue, newValue);
        if (!isEqual && !this.isChangingViaDefaultValue) {
            this.setValueChangedDirectly();
        }
        this.questionValue = newValue;
        if (!isEqual) {
            this.onChangeQuestionValue(newValue);
        }
        !isEqual && this.allowNotifyValueChanged &&
            this.fireCallback(this.valueChangedCallback);
        if (updateIsAnswered)
            this.updateIsAnswered();
    };
    Question.prototype.onSurveyValueChanged = function (newValue) { };
    Question.prototype.setVisibleIndex = function (val) {
        if (!this.isVisible ||
            (!this.hasTitle && !_settings__WEBPACK_IMPORTED_MODULE_8__["settings"].setQuestionVisibleIndexForHiddenTitle) ||
            (this.hideNumber && !_settings__WEBPACK_IMPORTED_MODULE_8__["settings"].setQuestionVisibleIndexForHiddenNumber)) {
            val = -1;
        }
        this.setPropertyValue("visibleIndex", val);
        this.setPropertyValue("no", this.calcNo());
        return val < 0 ? 0 : 1;
    };
    Question.prototype.removeElement = function (element) {
        return false;
    };
    Question.prototype.supportGoNextPageAutomatic = function () {
        return false;
    };
    Question.prototype.supportGoNextPageError = function () {
        return true;
    };
    /**
     * Removes values that cannot be assigned to this question, for example, choices unlisted in the `choices` array.
     *
     * Call this method after you assign new question values in code to ensure that they are acceptable.
     *
     * > This method does not remove values that do not pass validation. Call the `validate()` method to validate newly assigned values.
     *
     * @see validate
     */
    Question.prototype.clearIncorrectValues = function () { };
    Question.prototype.clearOnDeletingContainer = function () { };
    /**
     * Empties the `errors` array.
     * @see errors
     */
    Question.prototype.clearErrors = function () {
        this.errors = [];
    };
    Question.prototype.clearUnusedValues = function () { };
    Question.prototype.onAnyValueChanged = function (name) { };
    Question.prototype.checkBindings = function (valueName, value) {
        if (this.bindings.isEmpty() || !this.data)
            return;
        var props = this.bindings.getPropertiesByValueName(valueName);
        for (var i = 0; i < props.length; i++) {
            var propName = props[i];
            if (this.isValueEmpty(value) && _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(this[propName])) {
                value = 0;
            }
            this[propName] = value;
        }
    };
    Question.prototype.getComponentName = function () {
        return _rendererFactory__WEBPACK_IMPORTED_MODULE_9__["RendererFactory"].Instance.getRendererByQuestion(this);
    };
    Question.prototype.isDefaultRendering = function () {
        return (!!this.customWidget ||
            this.renderAs === "default" ||
            this.getComponentName() === "default");
    };
    //ISurveyErrorOwner
    Question.prototype.getErrorCustomText = function (text, error) {
        if (!!this.survey)
            return this.survey.getSurveyErrorCustomText(this, text, error);
        return text;
    };
    //IValidatorOwner
    Question.prototype.getValidatorTitle = function () {
        return null;
    };
    Object.defineProperty(Question.prototype, "validatedValue", {
        get: function () {
            return this.value;
        },
        set: function (val) {
            this.value = val;
        },
        enumerable: false,
        configurable: true
    });
    Question.prototype.getAllValues = function () {
        return !!this.data ? this.data.getAllValues() : null;
    };
    Question.prototype.transformToMobileView = function () { };
    Question.prototype.transformToDesktopView = function () { };
    Question.prototype.needResponsiveWidth = function () {
        return false;
    };
    //responsiveness methods
    Question.prototype.supportResponsiveness = function () {
        return false;
    };
    Question.prototype.needResponsiveness = function () {
        return this.supportResponsiveness() && this.isDefaultV2Theme && !this.isDesignMode;
    };
    Question.prototype.checkForResponsiveness = function (el) {
        var _this = this;
        if (this.needResponsiveness()) {
            if (this.isCollapsed) {
                var onStateChanged = function () {
                    if (_this.isExpanded) {
                        _this.initResponsiveness(el);
                        _this.unregisterPropertyChangedHandlers(["state"], "for-responsiveness");
                    }
                };
                this.registerPropertyChangedHandlers(["state"], onStateChanged, "for-responsiveness");
            }
            else {
                this.initResponsiveness(el);
            }
        }
    };
    Question.prototype.getObservedElementSelector = function () {
        return ".sd-scrollable-container";
    };
    Question.prototype.onMobileChanged = function () {
        this.onMobileChangedCallback && this.onMobileChangedCallback();
    };
    Question.prototype.initResponsiveness = function (el) {
        var _this = this;
        this.destroyResizeObserver();
        if (!!el && this.isDefaultRendering()) {
            var scrollableSelector_1 = this.getObservedElementSelector();
            if (!scrollableSelector_1)
                return;
            var defaultRootEl = el.querySelector(scrollableSelector_1);
            if (!defaultRootEl)
                return;
            var isProcessed_1 = false;
            var requiredWidth_1 = undefined;
            this.resizeObserver = new ResizeObserver(function () {
                var rootEl = el.querySelector(scrollableSelector_1);
                if (!requiredWidth_1 && _this.isDefaultRendering()) {
                    requiredWidth_1 = rootEl.scrollWidth;
                }
                if (isProcessed_1 || !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_11__["isContainerVisible"])(rootEl)) {
                    isProcessed_1 = false;
                }
                else {
                    isProcessed_1 = _this.processResponsiveness(requiredWidth_1, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_11__["getElementWidth"])(rootEl));
                }
            });
            this.onMobileChangedCallback = function () {
                setTimeout(function () {
                    var rootEl = el.querySelector(scrollableSelector_1);
                    _this.processResponsiveness(requiredWidth_1, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_11__["getElementWidth"])(rootEl));
                }, 0);
            };
            this.resizeObserver.observe(el);
        }
    };
    Question.prototype.getCompactRenderAs = function () {
        return "default";
    };
    Question.prototype.getDesktopRenderAs = function () {
        return "default";
    };
    Question.prototype.processResponsiveness = function (requiredWidth, availableWidth) {
        availableWidth = Math.round(availableWidth);
        if (Math.abs(requiredWidth - availableWidth) > 2) {
            var oldRenderAs = this.renderAs;
            if (requiredWidth > availableWidth) {
                this.renderAs = this.getCompactRenderAs();
            }
            else {
                this.renderAs = this.getDesktopRenderAs();
            }
            return oldRenderAs !== this.renderAs;
        }
        return false;
    };
    Question.prototype.destroyResizeObserver = function () {
        if (!!this.resizeObserver) {
            this.resizeObserver.disconnect();
            this.resizeObserver = undefined;
            this.onMobileChangedCallback = undefined;
            this.renderAs = this.getDesktopRenderAs();
        }
    };
    Question.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.destroyResizeObserver();
    };
    Question.TextPreprocessorValuesMap = {
        title: "processedTitle",
        require: "requiredText",
    };
    Question.questionCounter = 100;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], Question.prototype, "isMobile", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: true })
    ], Question.prototype, "commentPlaceholder", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], Question.prototype, "renderAs", void 0);
    return Question;
}(_survey_element__WEBPACK_IMPORTED_MODULE_2__["SurveyElement"]));

function removeConverChar(str) {
    if (!!str && str[0] === _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].expressionDisableConversionChar)
        return str.substring(1);
    return str;
}
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("question", [
    { name: "!name", onSettingValue: function (obj, val) { return removeConverChar(val); } },
    {
        name: "state",
        default: "default",
        choices: ["default", "collapsed", "expanded"],
    },
    { name: "visible:switch", default: true },
    { name: "useDisplayValuesInDynamicTexts:boolean", alternativeName: "useDisplayValuesInTitle", default: true, layout: "row" },
    "visibleIf:condition",
    { name: "width" },
    { name: "minWidth", defaultFunc: function () { return _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].minWidth; } },
    { name: "maxWidth", defaultFunc: function () { return _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].maxWidth; } },
    { name: "startWithNewLine:boolean", default: true, layout: "row" },
    { name: "indent:number", default: 0, choices: [0, 1, 2, 3], layout: "row" },
    {
        name: "page",
        isSerializable: false,
        visibleIf: function (obj) {
            var survey = obj ? obj.survey : null;
            return !survey || !survey.pages || survey.pages.length > 1;
        },
        choices: function (obj) {
            var survey = obj ? obj.survey : null;
            return survey
                ? survey.pages.map(function (p) {
                    return { value: p.name, text: p.title };
                })
                : [];
        },
    },
    {
        name: "title:text", serializationProperty: "locTitle", layout: "row", dependsOn: "name",
        onPropertyEditorUpdate: function (obj, editor) {
            if (!!obj && !!editor) {
                editor.placeholder = obj.name;
            }
        }
    },
    {
        name: "titleLocation",
        default: "default",
        choices: ["default", "top", "bottom", "left", "hidden"],
        layout: "row",
    },
    {
        name: "description:text",
        serializationProperty: "locDescription",
        layout: "row",
    },
    {
        name: "descriptionLocation",
        default: "default",
        choices: ["default", "underInput", "underTitle"],
    },
    {
        name: "hideNumber:boolean",
        dependsOn: "titleLocation",
        visibleIf: function (obj) {
            if (!obj) {
                return true;
            }
            if (obj.titleLocation === "hidden") {
                return false;
            }
            var parent = obj ? obj.parent : null;
            var numberingAllowedByParent = !parent || parent.showQuestionNumbers !== "off";
            if (!numberingAllowedByParent) {
                return false;
            }
            var survey = obj ? obj.survey : null;
            return (!survey ||
                survey.showQuestionNumbers !== "off" ||
                (!!parent && parent.showQuestionNumbers === "onpanel"));
        },
    },
    { name: "valueName", onSettingValue: function (obj, val) { return removeConverChar(val); } },
    "enableIf:condition",
    "defaultValue:value",
    {
        name: "defaultValueExpression:expression",
        category: "logic",
    },
    "correctAnswer:value",
    {
        name: "clearIfInvisible",
        default: "default",
        choices: ["default", "none", "onComplete", "onHidden"],
    },
    "isRequired:switch",
    "requiredIf:condition",
    {
        name: "requiredErrorText:text",
        serializationProperty: "locRequiredErrorText",
    },
    "readOnly:switch",
    {
        name: "validators:validators",
        baseClassName: "surveyvalidator",
        classNamePart: "validator",
    },
    {
        name: "bindings:bindings",
        serializationProperty: "bindings",
        visibleIf: function (obj) {
            return obj.bindings.getNames().length > 0;
        },
    },
    { name: "renderAs", default: "default", visible: false },
    { name: "showCommentArea", visible: false, default: false, alternativeName: "hasComment", category: "general" },
    {
        name: "commentText",
        dependsOn: "showCommentArea",
        visibleIf: function (obj) {
            return obj.showCommentArea;
        },
        serializationProperty: "locCommentText",
        layout: "row",
    },
    {
        name: "commentPlaceholder",
        alternativeName: "commentPlaceHolder",
        serializationProperty: "locCommentPlaceholder",
        dependsOn: "showCommentArea",
        visibleIf: function (obj) {
            return obj.hasComment;
        }
    }
]);
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addAlterNativeClassName("question", "questionbase");


/***/ }),

/***/ "./src/questionCustomWidgets.ts":
/*!**************************************!*\
  !*** ./src/questionCustomWidgets.ts ***!
  \**************************************/
/*! exports provided: QuestionCustomWidget, CustomWidgetCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomWidget", function() { return QuestionCustomWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomWidgetCollection", function() { return CustomWidgetCollection; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");

var QuestionCustomWidget = /** @class */ (function () {
    function QuestionCustomWidget(name, widgetJson) {
        this.name = name;
        this.widgetJson = widgetJson;
        this.htmlTemplate = widgetJson.htmlTemplate ? widgetJson.htmlTemplate : "";
    }
    QuestionCustomWidget.prototype.afterRender = function (question, el) {
        var _this = this;
        if (!this.widgetJson.afterRender)
            return;
        question.localeChangedCallback = function () {
            if (_this.widgetJson.willUnmount) {
                _this.widgetJson.willUnmount(question, el);
            }
            _this.widgetJson.afterRender(question, el);
        };
        this.widgetJson.afterRender(question, el);
    };
    QuestionCustomWidget.prototype.willUnmount = function (question, el) {
        if (this.widgetJson.willUnmount)
            this.widgetJson.willUnmount(question, el);
    };
    QuestionCustomWidget.prototype.getDisplayValue = function (question, value) {
        if (value === void 0) { value = undefined; }
        if (this.widgetJson.getDisplayValue)
            return this.widgetJson.getDisplayValue(question, value);
        return null;
    };
    QuestionCustomWidget.prototype.isFit = function (question) {
        if (this.isLibraryLoaded() && this.widgetJson.isFit)
            return this.widgetJson.isFit(question);
        return false;
    };
    Object.defineProperty(QuestionCustomWidget.prototype, "canShowInToolbox", {
        get: function () {
            if (this.widgetJson.showInToolbox === false)
                return false;
            if (CustomWidgetCollection.Instance.getActivatedBy(this.name) != "customtype")
                return false;
            return !this.widgetJson.widgetIsLoaded || this.widgetJson.widgetIsLoaded();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCustomWidget.prototype, "showInToolbox", {
        get: function () {
            return this.widgetJson.showInToolbox !== false;
        },
        set: function (val) {
            this.widgetJson.showInToolbox = val;
        },
        enumerable: false,
        configurable: true
    });
    QuestionCustomWidget.prototype.init = function () {
        if (this.widgetJson.init) {
            this.widgetJson.init();
        }
    };
    QuestionCustomWidget.prototype.activatedByChanged = function (activatedBy) {
        if (this.isLibraryLoaded() && this.widgetJson.activatedByChanged) {
            this.widgetJson.activatedByChanged(activatedBy);
        }
    };
    QuestionCustomWidget.prototype.isLibraryLoaded = function () {
        if (this.widgetJson.widgetIsLoaded)
            return this.widgetJson.widgetIsLoaded() == true;
        return true;
    };
    Object.defineProperty(QuestionCustomWidget.prototype, "isDefaultRender", {
        get: function () {
            return this.widgetJson.isDefaultRender;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCustomWidget.prototype, "pdfQuestionType", {
        get: function () {
            return this.widgetJson.pdfQuestionType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCustomWidget.prototype, "pdfRender", {
        get: function () {
            return this.widgetJson.pdfRender;
        },
        enumerable: false,
        configurable: true
    });
    return QuestionCustomWidget;
}());

var CustomWidgetCollection = /** @class */ (function () {
    function CustomWidgetCollection() {
        this.widgetsValues = [];
        this.widgetsActivatedBy = {};
        this.onCustomWidgetAdded = new _base__WEBPACK_IMPORTED_MODULE_0__["Event"]();
    }
    Object.defineProperty(CustomWidgetCollection.prototype, "widgets", {
        get: function () {
            return this.widgetsValues;
        },
        enumerable: false,
        configurable: true
    });
    CustomWidgetCollection.prototype.add = function (widgetJson, activatedBy) {
        if (activatedBy === void 0) { activatedBy = "property"; }
        this.addCustomWidget(widgetJson, activatedBy);
    };
    CustomWidgetCollection.prototype.addCustomWidget = function (widgetJson, activatedBy) {
        if (activatedBy === void 0) { activatedBy = "property"; }
        var name = widgetJson.name;
        if (!name) {
            name = "widget_" + this.widgets.length + 1;
        }
        var customWidget = new QuestionCustomWidget(name, widgetJson);
        this.widgetsValues.push(customWidget);
        customWidget.init();
        this.widgetsActivatedBy[name] = activatedBy;
        customWidget.activatedByChanged(activatedBy);
        this.onCustomWidgetAdded.fire(customWidget, null);
        return customWidget;
    };
    /**
     * Returns the way the custom wiget is activated. It can be activated by a property ("property"), question type ("type") or by new/custom question type ("customtype").
     * @param widgetName the custom widget name
     * @see setActivatedBy
     */
    CustomWidgetCollection.prototype.getActivatedBy = function (widgetName) {
        var res = this.widgetsActivatedBy[widgetName];
        return res ? res : "property";
    };
    /**
     * Sets the way the custom wiget is activated. The activation types are: property ("property"), question type ("type") or new/custom question type ("customtype"). A custom wiget may support all or only some of this activation types.
     * @param widgetName
     * @param activatedBy there are three possible variants: "property", "type" and "customtype"
     */
    CustomWidgetCollection.prototype.setActivatedBy = function (widgetName, activatedBy) {
        if (!widgetName || !activatedBy)
            return;
        var widget = this.getCustomWidgetByName(widgetName);
        if (!widget)
            return;
        this.widgetsActivatedBy[widgetName] = activatedBy;
        widget.activatedByChanged(activatedBy);
    };
    CustomWidgetCollection.prototype.clear = function () {
        this.widgetsValues = [];
    };
    CustomWidgetCollection.prototype.getCustomWidgetByName = function (name) {
        for (var i = 0; i < this.widgets.length; i++) {
            if (this.widgets[i].name == name)
                return this.widgets[i];
        }
        return null;
    };
    CustomWidgetCollection.prototype.getCustomWidget = function (question) {
        for (var i = 0; i < this.widgetsValues.length; i++) {
            if (this.widgetsValues[i].isFit(question))
                return this.widgetsValues[i];
        }
        return null;
    };
    CustomWidgetCollection.Instance = new CustomWidgetCollection();
    return CustomWidgetCollection;
}());



/***/ }),

/***/ "./src/question_baseselect.ts":
/*!************************************!*\
  !*** ./src/question_baseselect.ts ***!
  \************************************/
/*! exports provided: QuestionSelectBase, QuestionCheckboxBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionSelectBase", function() { return QuestionSelectBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxBase", function() { return QuestionCheckboxBase; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _survey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./survey */ "./src/survey.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _choicesRestful__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./choicesRestful */ "./src/choicesRestful.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};












/**
 * A base class for multiple-choice question types ([Checkbox](https://surveyjs.io/form-library/documentation/questioncheckboxmodel), [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel), [Radiogroup](https://surveyjs.io/form-library/documentation/questionradiogroupmodel), etc.).
 */
var QuestionSelectBase = /** @class */ (function (_super) {
    __extends(QuestionSelectBase, _super);
    function QuestionSelectBase(name) {
        var _this = _super.call(this, name) || this;
        _this.otherItemValue = new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"]("other");
        _this.dependedQuestions = [];
        _this.noneItemValue = new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](_settings__WEBPACK_IMPORTED_MODULE_9__["settings"].noneItemValue);
        _this.isSettingDefaultValue = false;
        _this.isSettingComment = false;
        _this.isRunningChoices = false;
        _this.isFirstLoadChoicesFromUrl = true;
        _this.isUpdatingChoicesDependedQuestions = false;
        _this.prevIsOtherSelected = false;
        var noneItemText = _this.createLocalizableString("noneText", _this.noneItemValue, true, "noneItemText");
        _this.noneItemValue.locOwner = _this;
        _this.noneItemValue.setLocText(noneItemText);
        _this.createItemValues("choices");
        _this.registerPropertyChangedHandlers(["choices"], function () {
            if (!_this.filterItems()) {
                _this.onVisibleChoicesChanged();
            }
        });
        _this.registerPropertyChangedHandlers(["choicesFromQuestion", "choicesFromQuestionMode", "showNoneItem"], function () {
            _this.onVisibleChoicesChanged();
        });
        _this.registerPropertyChangedHandlers(["hideIfChoicesEmpty"], function () {
            _this.updateVisibilityBasedOnChoices();
        });
        _this.createNewArray("visibleChoices");
        _this.setNewRestfulProperty();
        var locOtherText = _this.createLocalizableString("otherText", _this.otherItemValue, true, "otherItemText");
        _this.createLocalizableString("otherErrorText", _this, true, "otherRequiredError");
        _this.otherItemValue.locOwner = _this;
        _this.otherItemValue.setLocText(locOtherText);
        _this.choicesByUrl.createItemValue = function (value) {
            return _this.createItemValue(value);
        };
        _this.choicesByUrl.beforeSendRequestCallback = function () {
            _this.onBeforeSendRequest();
        };
        _this.choicesByUrl.getResultCallback = function (items) {
            _this.onLoadChoicesFromUrl(items);
        };
        _this.choicesByUrl.updateResultCallback = function (items, serverResult) {
            if (_this.survey) {
                return _this.survey.updateChoicesFromServer(_this, items, serverResult);
            }
            return items;
        };
        return _this;
    }
    QuestionSelectBase.prototype.getType = function () {
        return "selectbase";
    };
    QuestionSelectBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        for (var i = 0; i < this.dependedQuestions.length; i++) {
            this.dependedQuestions[i].choicesFromQuestion = "";
        }
        this.removeFromDependedQuestion(this.getQuestionWithChoices());
    };
    Object.defineProperty(QuestionSelectBase.prototype, "otherId", {
        get: function () {
            return this.id + "_other";
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.getCommentElementsId = function () {
        return [this.commentId, this.otherId];
    };
    QuestionSelectBase.prototype.getItemValueType = function () {
        return "itemvalue";
    };
    QuestionSelectBase.prototype.createItemValue = function (value) {
        return _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(this.getItemValueType(), value);
    };
    QuestionSelectBase.prototype.supportGoNextPageError = function () {
        return !this.isOtherSelected || !!this.otherValue;
    };
    QuestionSelectBase.prototype.isLayoutTypeSupported = function (layoutType) {
        return true;
    };
    QuestionSelectBase.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        if (this.choicesOrder !== "none") {
            this.updateVisibleChoices();
        }
    };
    QuestionSelectBase.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        if (!!this.choicesFromUrl) {
            _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].locStrsChanged(this.choicesFromUrl);
            _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].locStrsChanged(this.visibleChoices);
        }
    };
    Object.defineProperty(QuestionSelectBase.prototype, "otherValue", {
        get: function () {
            if (!this.showCommentArea)
                return this.comment;
            return this.otherValueCore;
        },
        set: function (val) {
            if (!this.showCommentArea) {
                this.comment = val;
            }
            else {
                this.setOtherValueInternally(val);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "otherValueCore", {
        get: function () {
            return this.getPropertyValue("otherValue");
        },
        set: function (val) {
            this.setPropertyValue("otherValue", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "otherItem", {
        /**
         * Returns the "Other" choice item. Use this property to change the item's `value` or `text`.
         * @see showOtherItem
         */
        get: function () {
            return this.otherItemValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "isOtherSelected", {
        /**
         * Returns `true` if the "Other" choice item is selected.
         * @see showOtherItem
         */
        get: function () {
            return this.hasOther && this.getHasOther(this.renderedValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "isNoneSelected", {
        get: function () {
            return this.hasNone && this.getIsItemValue(this.renderedValue, this.noneItem);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "showNoneItem", {
        /**
         * Specifies whether to display the "None" choice item.
         *
         * When users select the "None" item in multi-select questions, all other items become unselected.
         * @see noneItem
         * @see noneText
         */
        get: function () {
            return this.getPropertyValue("showNoneItem", false);
        },
        set: function (val) {
            this.setPropertyValue("showNoneItem", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "hasNone", {
        get: function () {
            return this.showNoneItem;
        },
        set: function (val) {
            this.showNoneItem = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "noneItem", {
        /**
         * Returns the "None" choice item. Use this property to change the item's `value` or `text`.
         * @see showNoneItem
         */
        get: function () {
            return this.noneItemValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "noneText", {
        /**
         * Gets or sets a caption for the "None" choice item.
         * @see showNoneItem
         */
        get: function () {
            return this.getLocalizableStringText("noneText");
        },
        set: function (val) {
            this.setLocalizableStringText("noneText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "locNoneText", {
        get: function () {
            return this.getLocalizableString("noneText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "choicesVisibleIf", {
        /**
         * A Boolean expression that is evaluated against each choice item. If the expression evaluates to `false`, the choice item becomes hidden.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Use the `{item}` placeholder to reference the current choice item in the expression.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see visibleIf
         * @see choicesEnableIf
         */
        get: function () {
            return this.getPropertyValue("choicesVisibleIf", "");
        },
        set: function (val) {
            this.setPropertyValue("choicesVisibleIf", val);
            this.filterItems();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "choicesEnableIf", {
        /**
         * A Boolean expression that is evaluated against each choice item. If the expression evaluates to `false`, the choice item becomes read-only.
         *
         * A survey parses and runs all expressions on startup. If any values used in the expression change, the survey re-evaluates it.
         *
         * Use the `{item}` placeholder to reference the current choice item in the expression.
         *
         * Refer to the following help topic for more information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see enableIf
         * @see choicesVisibleIf
         */
        get: function () {
            return this.getPropertyValue("choicesEnableIf", "");
        },
        set: function (val) {
            this.setPropertyValue("choicesEnableIf", val);
            this.filterItems();
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.surveyChoiceItemVisibilityChange = function () {
        this.filterItems();
    };
    QuestionSelectBase.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        if (this.isUsingCarrayForward)
            return;
        this.runItemsEnableCondition(values, properties);
        this.runItemsCondition(values, properties);
    };
    QuestionSelectBase.prototype.isTextValue = function () {
        return true; //for comments and others
    };
    QuestionSelectBase.prototype.setDefaultValue = function () {
        this.isSettingDefaultValue =
            !this.isValueEmpty(this.defaultValue) &&
                this.hasUnknownValue(this.defaultValue);
        this.prevOtherValue = undefined;
        _super.prototype.setDefaultValue.call(this);
        this.isSettingDefaultValue = false;
    };
    QuestionSelectBase.prototype.getIsMultipleValue = function () {
        return false;
    };
    QuestionSelectBase.prototype.convertDefaultValue = function (val) {
        if (val == null || val == undefined)
            return val;
        if (this.getIsMultipleValue()) {
            if (!Array.isArray(val))
                return [val];
        }
        else {
            if (Array.isArray(val) && val.length > 0)
                return val[0];
        }
        return val;
    };
    QuestionSelectBase.prototype.filterItems = function () {
        if (this.isLoadingFromJson ||
            !this.data ||
            this.areInvisibleElementsShowing)
            return false;
        var values = this.getDataFilteredValues();
        var properties = this.getDataFilteredProperties();
        this.runItemsEnableCondition(values, properties);
        return this.runItemsCondition(values, properties);
    };
    QuestionSelectBase.prototype.runItemsCondition = function (values, properties) {
        this.setConditionalChoicesRunner();
        var hasChanges = this.runConditionsForItems(values, properties);
        if (!!this.filteredChoicesValue &&
            this.filteredChoicesValue.length === this.activeChoices.length) {
            this.filteredChoicesValue = undefined;
        }
        if (hasChanges) {
            this.onVisibleChoicesChanged();
            this.clearIncorrectValues();
        }
        return hasChanges;
    };
    QuestionSelectBase.prototype.runItemsEnableCondition = function (values, properties) {
        var _this = this;
        this.setConditionalEnableChoicesRunner();
        var hasChanged = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].runEnabledConditionsForItems(this.activeChoices, this.conditionChoicesEnableIfRunner, values, properties, function (item, val) {
            return val && _this.onEnableItemCallBack(item);
        });
        if (hasChanged) {
            this.clearDisabledValues();
        }
        this.onAfterRunItemsEnableCondition();
    };
    QuestionSelectBase.prototype.onAfterRunItemsEnableCondition = function () { };
    QuestionSelectBase.prototype.onEnableItemCallBack = function (item) {
        return true;
    };
    QuestionSelectBase.prototype.setConditionalChoicesRunner = function () {
        if (this.choicesVisibleIf) {
            if (!this.conditionChoicesVisibleIfRunner) {
                this.conditionChoicesVisibleIfRunner = new _conditions__WEBPACK_IMPORTED_MODULE_7__["ConditionRunner"](this.choicesVisibleIf);
            }
            this.conditionChoicesVisibleIfRunner.expression = this.choicesVisibleIf;
        }
        else {
            this.conditionChoicesVisibleIfRunner = null;
        }
    };
    QuestionSelectBase.prototype.setConditionalEnableChoicesRunner = function () {
        if (this.choicesEnableIf) {
            if (!this.conditionChoicesEnableIfRunner) {
                this.conditionChoicesEnableIfRunner = new _conditions__WEBPACK_IMPORTED_MODULE_7__["ConditionRunner"](this.choicesEnableIf);
            }
            this.conditionChoicesEnableIfRunner.expression = this.choicesEnableIf;
        }
        else {
            this.conditionChoicesEnableIfRunner = null;
        }
    };
    QuestionSelectBase.prototype.canSurveyChangeItemVisibility = function () {
        return !!this.survey && this.survey.canChangeChoiceItemsVisibility();
    };
    QuestionSelectBase.prototype.changeItemVisisbility = function () {
        var _this = this;
        return this.canSurveyChangeItemVisibility() ?
            function (item, val) { return _this.survey.getChoiceItemVisibility(_this, item, val); }
            : null;
    };
    QuestionSelectBase.prototype.runConditionsForItems = function (values, properties) {
        this.filteredChoicesValue = [];
        var calcVisibility = this.changeItemVisisbility();
        return _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].runConditionsForItems(this.activeChoices, this.getFilteredChoices(), this.areInvisibleElementsShowing
            ? null
            : this.conditionChoicesVisibleIfRunner, values, properties, !this.survey || !this.survey.areInvisibleElementsShowing, function (item, val) {
            return !!calcVisibility ? calcVisibility(item, val) : val;
        });
    };
    QuestionSelectBase.prototype.getHasOther = function (val) {
        return this.getIsItemValue(val, this.otherItem);
    };
    QuestionSelectBase.prototype.getIsItemValue = function (val, item) {
        return val === item.value;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "validatedValue", {
        get: function () {
            return this.rendredValueToDataCore(this.value);
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.createRestful = function () {
        return new _choicesRestful__WEBPACK_IMPORTED_MODULE_6__["ChoicesRestful"]();
    };
    QuestionSelectBase.prototype.setNewRestfulProperty = function () {
        this.setPropertyValue("choicesByUrl", this.createRestful());
        this.choicesByUrl.owner = this;
        this.choicesByUrl.loadingOwner = this;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "autoOtherMode", {
        get: function () {
            return this.getPropertyValue("autoOtherMode");
        },
        set: function (val) {
            this.setPropertyValue("autoOtherMode", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.getQuestionComment = function () {
        if (this.showCommentArea)
            return _super.prototype.getQuestionComment.call(this);
        if (!!this.otherValueCore)
            return this.otherValueCore;
        if (this.hasComment || this.getStoreOthersAsComment())
            return _super.prototype.getQuestionComment.call(this);
        return this.otherValueCore;
    };
    QuestionSelectBase.prototype.selectOtherValueFromComment = function (val) {
        this.value = val ? this.otherItem.value : undefined;
    };
    QuestionSelectBase.prototype.setQuestionComment = function (newValue) {
        if (this.showCommentArea) {
            _super.prototype.setQuestionComment.call(this, newValue);
            return;
        }
        this.onUpdateCommentOnAutoOtherMode(newValue);
        if (this.getStoreOthersAsComment())
            _super.prototype.setQuestionComment.call(this, newValue);
        else {
            this.setOtherValueInternally(newValue);
        }
        this.updateChoicesDependedQuestions();
    };
    QuestionSelectBase.prototype.onUpdateCommentOnAutoOtherMode = function (newValue) {
        if (!this.autoOtherMode)
            return;
        this.prevOtherValue = undefined;
        var isSelected = this.isOtherSelected;
        if (!isSelected && !!newValue || isSelected && !newValue) {
            this.selectOtherValueFromComment(!!newValue);
        }
    };
    QuestionSelectBase.prototype.setOtherValueInternally = function (newValue) {
        if (!this.isSettingComment && newValue != this.otherValueCore) {
            this.isSettingComment = true;
            this.otherValueCore = newValue;
            if (this.isOtherSelected && !this.isRenderedValueSetting) {
                this.value = this.rendredValueToData(this.renderedValue);
            }
            this.isSettingComment = false;
        }
    };
    QuestionSelectBase.prototype.clearValue = function () {
        _super.prototype.clearValue.call(this);
        this.prevOtherValue = undefined;
    };
    QuestionSelectBase.prototype.updateCommentFromSurvey = function (newValue) {
        _super.prototype.updateCommentFromSurvey.call(this, newValue);
        this.prevOtherValue = undefined;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "renderedValue", {
        get: function () {
            return this.getPropertyValue("renderedValue", null);
        },
        set: function (val) {
            this.setPropertyValue("renderedValue", val);
            var val = this.rendredValueToData(val);
            if (!this.isTwoValueEquals(val, this.value)) {
                this.value = val;
            }
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.setQuestionValue = function (newValue, updateIsAnswered, updateComment) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        if (updateComment === void 0) { updateComment = true; }
        if (this.isLoadingFromJson ||
            this.isTwoValueEquals(this.value, newValue))
            return;
        _super.prototype.setQuestionValue.call(this, newValue, updateIsAnswered);
        this.setPropertyValue("renderedValue", this.rendredValueFromData(newValue));
        this.updateChoicesDependedQuestions();
        if (this.hasComment || !updateComment)
            return;
        var isOtherSel = this.isOtherSelected;
        if (isOtherSel && !!this.prevOtherValue) {
            var oldOtherValue = this.prevOtherValue;
            this.prevOtherValue = undefined;
            this.otherValue = oldOtherValue;
        }
        if (!isOtherSel && !!this.otherValue) {
            if (this.getStoreOthersAsComment() && !this.autoOtherMode) {
                this.prevOtherValue = this.otherValue;
            }
            this.otherValue = "";
        }
    };
    QuestionSelectBase.prototype.setNewValue = function (newValue) {
        this.resetSelectedItemValues();
        newValue = this.valueFromData(newValue);
        if ((!this.choicesByUrl.isRunning &&
            !this.choicesByUrl.isWaitingForParameters) ||
            !this.isValueEmpty(newValue)) {
            this.cachedValueForUrlRequests = newValue;
        }
        _super.prototype.setNewValue.call(this, newValue);
    };
    QuestionSelectBase.prototype.valueFromData = function (val) {
        var choiceitem = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(this.activeChoices, val);
        if (!!choiceitem) {
            return choiceitem.value;
        }
        return _super.prototype.valueFromData.call(this, val);
    };
    QuestionSelectBase.prototype.rendredValueFromData = function (val) {
        if (this.getStoreOthersAsComment())
            return val;
        return this.renderedValueFromDataCore(val);
    };
    QuestionSelectBase.prototype.rendredValueToData = function (val) {
        if (this.getStoreOthersAsComment())
            return val;
        return this.rendredValueToDataCore(val);
    };
    QuestionSelectBase.prototype.renderedValueFromDataCore = function (val) {
        if (!this.hasUnknownValue(val, true, false))
            return this.valueFromData(val);
        this.otherValue = val;
        return this.otherItem.value;
    };
    QuestionSelectBase.prototype.rendredValueToDataCore = function (val) {
        if (val == this.otherItem.value && this.needConvertRenderedOtherToDataValue()) {
            val = this.otherValue;
        }
        return val;
    };
    QuestionSelectBase.prototype.needConvertRenderedOtherToDataValue = function () {
        var val = this.otherValue;
        if (!val)
            return false;
        val = val.trim();
        if (!val)
            return false;
        return this.hasUnknownValue(val, true, false);
    };
    QuestionSelectBase.prototype.updateSelectedItemValues = function () {
        var _this = this;
        if (!!this.survey && !this.isEmpty() && this.choices.length === 0) {
            var IsMultipleValue_1 = this.getIsMultipleValue();
            this.survey.getChoiceDisplayValue({
                question: this,
                values: IsMultipleValue_1 ? this.value : [this.value],
                setItems: function (displayValues) {
                    if (!displayValues || !displayValues.length)
                        return;
                    if (IsMultipleValue_1) {
                        _this.selectedItemValues = displayValues.map(function (displayValue, index) { return new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](_this.value[index], displayValue); });
                    }
                    else {
                        _this.selectedItemValues = new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](_this.value, displayValues[0]);
                    }
                }
            });
        }
    };
    QuestionSelectBase.prototype.resetSelectedItemValues = function () {
        this.selectedItemValues = null;
    };
    QuestionSelectBase.prototype.hasUnknownValue = function (val, includeOther, isFilteredChoices, checkEmptyValue) {
        if (includeOther === void 0) { includeOther = false; }
        if (isFilteredChoices === void 0) { isFilteredChoices = true; }
        if (checkEmptyValue === void 0) { checkEmptyValue = false; }
        if (!checkEmptyValue && this.isValueEmpty(val))
            return false;
        if (includeOther && val == this.otherItem.value)
            return false;
        if (this.hasNone && val == this.noneItem.value)
            return false;
        var choices = isFilteredChoices
            ? this.getFilteredChoices()
            : this.activeChoices;
        return _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(choices, val) == null;
    };
    QuestionSelectBase.prototype.isValueDisabled = function (val) {
        var itemValue = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(this.getFilteredChoices(), val);
        return !!itemValue && !itemValue.isEnabled;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "choicesByUrl", {
        /**
         * Configures access to a RESTful service that returns choice items. Refer to the [ChoicesRestful](https://surveyjs.io/form-library/documentation/choicesrestful) class description for more information.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/questiontype-dropdownrestfull/ (linkStyle))
         * @see choices
         */
        get: function () {
            return this.getPropertyValue("choicesByUrl");
        },
        set: function (val) {
            if (!val)
                return;
            this.setNewRestfulProperty();
            this.choicesByUrl.fromJSON(val.toJSON());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "choices", {
        /**
         * Gets or sets choice items. This property accepts an array of objects with the following structure:
         *
         * ```js
         * {
         *   "value": any, // A unique value to be saved in the survey results.
         *   "text": String, // A display text. This property supports Markdown. When `text` is undefined, `value` is used.
         *   "imageLink": String // A link to the image or video that represents this choice value. Applies only to Image Picker questions.
         *   "customProperty": any // Any property that you find useful.
         * }
         * ```
         *
         * To enable Markdown support for the `text` property, implement Markdown-to-HTML conversion in the [onTextMarkdown](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onTextMarkdown) event handler. For an example, refer to the following demo: [Convert Markdown to HTML with Showdown](https://surveyjs.io/form-library/examples/edit-survey-questions-markdown/).
         *
         * If you add custom properties, refer to the following help topic to learn how to serialize them into JSON: [Add Custom Properties to Property Grid](https://surveyjs.io/survey-creator/documentation/property-grid#add-custom-properties-to-the-property-grid).
         *
         * If you need to specify only the `value` property, you can set the `choices` property to an array of primitive values, for example, `[ "item1", "item2", "item3" ]`. These values are both saved in survey results and used as display text.
         * @see choicesByUrl
         * @see choicesFromQuestion
         */
        get: function () {
            return this.getPropertyValue("choices");
        },
        set: function (newValue) {
            this.setPropertyValue("choices", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "choicesFromQuestion", {
        /**
         * Inherits choice items from a specified question. Accepts a question name.
         *
         * If you specify this property, the `choices`, `choicesVisibleIf`, `choicesEnableIf`, and `choicesOrder` properties do not apply because their values are inherited.
         *
         * In addition, you can specify the `choicesFromQuestionMode` property if you do not want to inherit all choice items.
         * @see choicesFromQuestionMode
         * @see choices
         */
        get: function () {
            return this.getPropertyValue("choicesFromQuestion");
        },
        set: function (val) {
            var question = this.getQuestionWithChoices();
            if (!!question) {
                question.removeFromDependedQuestion(this);
            }
            this.setPropertyValue("choicesFromQuestion", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.addIntoDependedQuestion = function (question) {
        if (!question || question.dependedQuestions.indexOf(this) > -1)
            return;
        question.dependedQuestions.push(this);
    };
    QuestionSelectBase.prototype.removeFromDependedQuestion = function (question) {
        if (!question)
            return;
        var index = question.dependedQuestions.indexOf(this);
        if (index > -1) {
            question.dependedQuestions.splice(index, 1);
        }
    };
    Object.defineProperty(QuestionSelectBase.prototype, "choicesFromQuestionMode", {
        /**
         * Specifies which choice items to inherit from another question. Applies only when the `choicesFromQuestion` property is specified.
         *
         * Possible values:
         *
         * - `"all"` (default) - Inherits all choice items.
         * - `"selected"` - Inherits only selected choice items.
         * - `"unselected"` - Inherits only unselected choice items.
         *
         * Use the `visibleChoices` property to access inherited choice items.
         * @see choicesFromQuestion
         * @see visibleChoices
         */
        get: function () {
            return this.getPropertyValue("choicesFromQuestionMode");
        },
        set: function (val) {
            this.setPropertyValue("choicesFromQuestionMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "hideIfChoicesEmpty", {
        /**
         * Specifies whether to hide the question if no choice items are visible.
         *
         * This property is useful if you show or hide choice items at runtime based on a [condition](https://surveyjs.io/form-library/documentation/questionselectbase#choicesVisibleIf).
         */
        get: function () {
            return this.getPropertyValue("hideIfChoicesEmpty", false);
        },
        set: function (val) {
            this.setPropertyValue("hideIfChoicesEmpty", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "keepIncorrectValues", {
        /**
         * Specifies whether to keep values that cannot be assigned to this question, for example, choices unlisted in the `choices` array.
         *
         * > This property cannot be specified in the survey JSON schema. Use dot notation to specify it.
         * @see clearIncorrectValues
         */
        get: function () {
            return this.getPropertyValue("keepIncorrectValues", false);
        },
        set: function (val) {
            this.setPropertyValue("keepIncorrectValues", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "storeOthersAsComment", {
        get: function () {
            return this.getPropertyValue("storeOthersAsComment");
        },
        set: function (val) {
            this.setPropertyValue("storeOthersAsComment", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.hasOtherChanged = function () {
        this.onVisibleChoicesChanged();
    };
    Object.defineProperty(QuestionSelectBase.prototype, "choicesOrder", {
        /**
         * Specifies the sort order of choice items.
         *
         * Possible values:
         *
         * - `"none"` (default) - Preserves the original order of choice items.
         * - `"asc"`- Sorts choice items in ascending order.
         * - `"desc"`- Sorts choice items in ascending order.
         * - `"random"` - Displays choice items in random order.
         */
        get: function () {
            return this.getPropertyValue("choicesOrder");
        },
        set: function (val) {
            val = val.toLowerCase();
            if (val == this.choicesOrder)
                return;
            this.setPropertyValue("choicesOrder", val);
            this.onVisibleChoicesChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "otherText", {
        /**
         * Gets or sets a caption for the "Other" choice item.
         * @see showOtherItem
         */
        get: function () {
            return this.getLocalizableStringText("otherText");
        },
        set: function (val) {
            this.setLocalizableStringText("otherText", val);
            this.onVisibleChoicesChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "locOtherText", {
        get: function () {
            return this.getLocalizableString("otherText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "otherPlaceHolder", {
        get: function () {
            return this.otherPlaceholder;
        },
        set: function (newValue) {
            this.otherPlaceholder = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "otherErrorText", {
        /**
         * Get or sets an error message displayed when users select the "Other" choice item but leave the comment area empty.
         * @see showOtherItem
         */
        get: function () {
            return this.getLocalizableStringText("otherErrorText");
        },
        set: function (val) {
            this.setLocalizableStringText("otherErrorText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "locOtherErrorText", {
        get: function () {
            return this.getLocalizableString("otherErrorText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "visibleChoices", {
        /**
         * An array of visible choice items. Includes the "Select All", "Other", and "None" choice items if they are visible. Items are sorted according to the `choicesOrder` value.
         * @see showNoneItem
         * @see showOtherItem
         * @see choicesOrder
         * @see choices
         * @see enabledChoices
         */
        get: function () {
            return this.getPropertyValue("visibleChoices");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "enabledChoices", {
        /**
         * An array of choice items with which users can interact. Includes the "Select All", "Other", and "None" choice items if they are not disabled. Items are sorted according to the `choicesOrder` value.
         * @see showNoneItem
         * @see showOtherItem
         * @see choicesOrder
         * @see choices
         * @see visibleChoices
         */
        get: function () {
            var res = [];
            var items = this.visibleChoices;
            for (var i = 0; i < items.length; i++) {
                if (items[i].isEnabled)
                    res.push(items[i]);
            }
            return res;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.updateVisibleChoices = function () {
        if (this.isLoadingFromJson)
            return;
        var newValue = new Array();
        var calcValue = this.calcVisibleChoices();
        if (!calcValue)
            calcValue = [];
        for (var i = 0; i < calcValue.length; i++) {
            newValue.push(calcValue[i]);
        }
        this.setPropertyValue("visibleChoices", newValue);
    };
    QuestionSelectBase.prototype.calcVisibleChoices = function () {
        if (this.canUseFilteredChoices())
            return this.getFilteredChoices();
        var res = this.sortVisibleChoices(this.getFilteredChoices().slice());
        this.addToVisibleChoices(res, this.isAddDefaultItems);
        return res;
    };
    QuestionSelectBase.prototype.canUseFilteredChoices = function () {
        return (!this.isAddDefaultItems &&
            !this.hasNone &&
            !this.hasOther &&
            this.choicesOrder == "none");
    };
    QuestionSelectBase.prototype.setCanShowOptionItemCallback = function (func) {
        this.canShowOptionItemCallback = func;
        if (!!func) {
            this.onVisibleChoicesChanged();
        }
    };
    Object.defineProperty(QuestionSelectBase.prototype, "newItem", {
        get: function () { return this.newItemValue; },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.addToVisibleChoices = function (items, isAddAll) {
        if (isAddAll) {
            if (!this.newItemValue) {
                this.newItemValue = new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"]("newitem"); //TODO
            }
            if (this.canShowOptionItem(this.newItemValue, isAddAll, false)) {
                items.push(this.newItemValue);
            }
        }
        if (this.supportNone() && this.canShowOptionItem(this.noneItem, isAddAll, this.hasNone)) {
            items.push(this.noneItem);
        }
        if (this.supportOther() && this.canShowOptionItem(this.otherItem, isAddAll, this.hasOther)) {
            items.push(this.otherItem);
        }
    };
    QuestionSelectBase.prototype.canShowOptionItem = function (item, isAddAll, hasItem) {
        var res = (isAddAll && (!!this.canShowOptionItemCallback ? this.canShowOptionItemCallback(item) : true)) || hasItem;
        if (this.canSurveyChangeItemVisibility()) {
            var calc = this.changeItemVisisbility();
            return calc(item, res);
        }
        return res;
    };
    QuestionSelectBase.prototype.isItemInList = function (item) {
        if (item === this.otherItem)
            return this.hasOther;
        if (item === this.noneItem)
            return this.hasNone;
        if (item === this.newItemValue)
            return false;
        return true;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "isAddDefaultItems", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].supportCreatorV2 && _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].showDefaultItemsInCreatorV2 &&
                this.isDesignMode && !this.customWidget && !this.isContentElement;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.getPlainData = function (options) {
        var _this = this;
        if (options === void 0) { options = {
            includeEmpty: true,
            includeQuestionTypes: false,
        }; }
        var questionPlainData = _super.prototype.getPlainData.call(this, options);
        if (!!questionPlainData) {
            var values = Array.isArray(this.value) ? this.value : [this.value];
            questionPlainData.isNode = true;
            questionPlainData.data = (questionPlainData.data || []).concat(values.map(function (dataValue, index) {
                var choice = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(_this.visibleChoices, dataValue);
                var choiceDataItem = {
                    name: index,
                    title: "Choice",
                    value: dataValue,
                    displayValue: _this.getChoicesDisplayValue(_this.visibleChoices, dataValue),
                    getString: function (val) {
                        return typeof val === "object" ? JSON.stringify(val) : val;
                    },
                    isNode: false,
                };
                if (!!choice) {
                    (options.calculations || []).forEach(function (calculation) {
                        choiceDataItem[calculation.propertyName] =
                            choice[calculation.propertyName];
                    });
                }
                if (_this.isOtherSelected && _this.otherItemValue === choice) {
                    choiceDataItem.isOther = true;
                    choiceDataItem.displayValue = _this.otherValue;
                }
                return choiceDataItem;
            }));
        }
        return questionPlainData;
    };
    QuestionSelectBase.prototype.getDisplayValueCore = function (keysAsText, value) {
        return this.getChoicesDisplayValue(this.visibleChoices, value);
    };
    QuestionSelectBase.prototype.getDisplayValueEmpty = function () {
        return _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getTextOrHtmlByValue(this.visibleChoices, undefined);
    };
    QuestionSelectBase.prototype.getChoicesDisplayValue = function (items, val) {
        if (val == this.otherItemValue.value)
            return this.otherValue ? this.otherValue : this.locOtherText.textOrHtml;
        var str = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getTextOrHtmlByValue(items, val);
        return str == "" && val ? val : str;
    };
    QuestionSelectBase.prototype.getDisplayArrayValue = function (keysAsText, value, onGetValueCallback) {
        var items = this.visibleChoices;
        var strs = [];
        for (var i = 0; i < value.length; i++) {
            var val = !onGetValueCallback ? value[i] : onGetValueCallback(i);
            var valStr = this.getChoicesDisplayValue(items, val);
            if (valStr) {
                strs.push(valStr);
            }
        }
        return strs.join(", ");
    };
    QuestionSelectBase.prototype.getFilteredChoices = function () {
        return this.filteredChoicesValue
            ? this.filteredChoicesValue
            : this.activeChoices;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "activeChoices", {
        get: function () {
            var question = this.getQuestionWithChoices();
            this.isUsingCarrayForward = !!question;
            if (this.isUsingCarrayForward) {
                this.addIntoDependedQuestion(question);
                return this.getChoicesFromQuestion(question);
            }
            return this.choicesFromUrl ? this.choicesFromUrl : this.getChoices();
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.getQuestionWithChoices = function () {
        if (!this.choicesFromQuestion || !this.data)
            return null;
        var res = this.data.findQuestionByName(this.choicesFromQuestion);
        return !!res && !!res.visibleChoices && Array.isArray(res.dependedQuestions) && res !== this ? res : null;
    };
    QuestionSelectBase.prototype.getChoicesFromQuestion = function (question) {
        var res = [];
        var isSelected = this.choicesFromQuestionMode == "selected"
            ? true
            : this.choicesFromQuestionMode == "unselected"
                ? false
                : undefined;
        var choices = question.visibleChoices;
        for (var i = 0; i < choices.length; i++) {
            if (this.isBuiltInChoice(choices[i], question))
                continue;
            if (isSelected === undefined) {
                res.push(choices[i]);
                continue;
            }
            var itemsSelected = question.isItemSelected(choices[i]);
            if ((itemsSelected && isSelected) || (!itemsSelected && !isSelected)) {
                res.push(choices[i]);
            }
        }
        if (this.choicesFromQuestionMode === "selected" && question.isOtherSelected && !!question.comment) {
            res.push(new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](question.otherItem.value, question.comment));
        }
        return res;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "hasActiveChoices", {
        get: function () {
            var choices = this.visibleChoices;
            if (!choices || choices.length == 0) {
                this.onVisibleChoicesChanged();
                choices = this.visibleChoices;
            }
            for (var i = 0; i < choices.length; i++) {
                if (!this.isBuiltInChoice(choices[i], this))
                    return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.isHeadChoice = function (item, question) {
        return false;
    };
    QuestionSelectBase.prototype.isFootChoice = function (item, question) {
        return (item === question.noneItem ||
            item === question.otherItem ||
            item === question.newItemValue);
    };
    QuestionSelectBase.prototype.isBuiltInChoice = function (item, question) {
        return this.isHeadChoice(item, question) || this.isFootChoice(item, question);
    };
    QuestionSelectBase.prototype.getChoices = function () {
        return this.choices;
    };
    QuestionSelectBase.prototype.supportOther = function () {
        return this.isSupportProperty("showOtherItem");
    };
    QuestionSelectBase.prototype.supportNone = function () {
        return this.isSupportProperty("showNoneItem");
    };
    QuestionSelectBase.prototype.isSupportProperty = function (propName) {
        return (!this.isDesignMode ||
            this.getPropertyByName(propName).visible);
    };
    QuestionSelectBase.prototype.onCheckForErrors = function (errors, isOnValueChanged) {
        var _this = this;
        _super.prototype.onCheckForErrors.call(this, errors, isOnValueChanged);
        if (!this.hasOther || !this.isOtherSelected || this.otherValue)
            return;
        var otherEmptyError = new _error__WEBPACK_IMPORTED_MODULE_5__["OtherEmptyError"](this.otherErrorText, this);
        otherEmptyError.onUpdateErrorTextCallback = function (err) { err.text = _this.otherErrorText; };
        errors.push(otherEmptyError);
    };
    QuestionSelectBase.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        this.runChoicesByUrl();
        if (this.isAddDefaultItems) {
            this.updateVisibleChoices();
        }
    };
    QuestionSelectBase.prototype.setSurveyCore = function (value) {
        _super.prototype.setSurveyCore.call(this, value);
        if (!!value && !!this.choicesFromQuestion) {
            this.onVisibleChoicesChanged();
        }
    };
    QuestionSelectBase.prototype.getStoreOthersAsComment = function () {
        if (this.isSettingDefaultValue)
            return false;
        if (this.showCommentArea)
            return false;
        return (this.storeOthersAsComment === true ||
            (this.storeOthersAsComment == "default" &&
                (this.survey != null ? this.survey.storeOthersAsComment : true)) ||
            (!this.choicesByUrl.isEmpty && !this.choicesFromUrl));
    };
    QuestionSelectBase.prototype.onSurveyLoad = function () {
        this.runChoicesByUrl();
        this.onVisibleChoicesChanged();
        _super.prototype.onSurveyLoad.call(this);
    };
    QuestionSelectBase.prototype.onAnyValueChanged = function (name) {
        _super.prototype.onAnyValueChanged.call(this, name);
        if (name != this.getValueName()) {
            this.runChoicesByUrl();
        }
        if (!!name && name == this.choicesFromQuestion) {
            this.onVisibleChoicesChanged();
        }
    };
    QuestionSelectBase.prototype.updateValueFromSurvey = function (newValue) {
        var newComment = "";
        if (this.hasOther &&
            !this.isRunningChoices &&
            !this.choicesByUrl.isRunning &&
            this.getStoreOthersAsComment()) {
            if (this.hasUnknownValue(newValue) && !this.getHasOther(newValue)) {
                newComment = this.getCommentFromValue(newValue);
                newValue = this.setOtherValueIntoValue(newValue);
            }
            else {
                newComment = this.data.getComment(this.getValueName());
            }
        }
        _super.prototype.updateValueFromSurvey.call(this, newValue);
        if (!!newComment) {
            this.setNewComment(newComment);
        }
    };
    QuestionSelectBase.prototype.getCommentFromValue = function (newValue) {
        return newValue;
    };
    QuestionSelectBase.prototype.setOtherValueIntoValue = function (newValue) {
        return this.otherItem.value;
    };
    QuestionSelectBase.prototype.onOtherValueInput = function (event) {
        if (this.isInputTextUpdate) {
            if (event.target) {
                this.otherValue = event.target.value;
            }
        }
        else {
            this.updateCommentElements();
        }
    };
    QuestionSelectBase.prototype.onOtherValueChange = function (event) {
        this.otherValue = event.target.value;
        if (this.otherValue !== event.target.value) {
            event.target.value = this.otherValue;
        }
    };
    QuestionSelectBase.prototype.runChoicesByUrl = function () {
        if (!this.choicesByUrl || this.isLoadingFromJson || this.isRunningChoices)
            return;
        var processor = this.surveyImpl
            ? this.surveyImpl.getTextProcessor()
            : this.textProcessor;
        if (!processor)
            processor = this.survey;
        if (!processor)
            return;
        this.isReadyValue = this.isChoicesLoaded || this.choicesByUrl.isEmpty;
        this.isRunningChoices = true;
        this.choicesByUrl.run(processor);
        this.isRunningChoices = false;
    };
    QuestionSelectBase.prototype.onBeforeSendRequest = function () {
        if (_settings__WEBPACK_IMPORTED_MODULE_9__["settings"].disableOnGettingChoicesFromWeb === true && !this.isReadOnly) {
            this.enableOnLoadingChoices = true;
            this.readOnly = true;
        }
    };
    QuestionSelectBase.prototype.onLoadChoicesFromUrl = function (array) {
        if (this.enableOnLoadingChoices) {
            this.readOnly = false;
        }
        if (!this.isReadOnly) {
            var errors = [];
            if (this.choicesByUrl && this.choicesByUrl.error) {
                errors.push(this.choicesByUrl.error);
            }
            this.errors = errors;
        }
        var newChoices = null;
        var checkCachedValuesOnExisting = true;
        if (this.isFirstLoadChoicesFromUrl &&
            !this.cachedValueForUrlRequests &&
            this.defaultValue) {
            this.cachedValueForUrlRequests = this.defaultValue;
            checkCachedValuesOnExisting = false;
        }
        if (this.isValueEmpty(this.cachedValueForUrlRequests)) {
            this.cachedValueForUrlRequests = this.value;
        }
        this.isFirstLoadChoicesFromUrl = false;
        var cachedValues = this.createCachedValueForUrlRequests(this.cachedValueForUrlRequests, checkCachedValuesOnExisting);
        if (array && (array.length > 0 || this.choicesByUrl.allowEmptyResponse)) {
            newChoices = new Array();
            _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].setData(newChoices, array);
        }
        if (!!newChoices) {
            for (var i = 0; i < newChoices.length; i++) {
                newChoices[i].locOwner = this;
            }
        }
        this.choicesFromUrl = newChoices;
        this.filterItems();
        this.onVisibleChoicesChanged();
        if (newChoices) {
            var newValue = this.updateCachedValueForUrlRequests(cachedValues, newChoices);
            if (!!newValue && !this.isReadOnly) {
                var hasChanged = !this.isTwoValueEquals(this.value, newValue.value);
                try {
                    if (!this.isValueEmpty(newValue.value)) {
                        this.allowNotifyValueChanged = false;
                        this.setQuestionValue(undefined, true, false);
                    }
                    this.allowNotifyValueChanged = hasChanged;
                    if (hasChanged) {
                        this.value = newValue.value;
                    }
                    else {
                        this.setQuestionValue(newValue.value);
                    }
                }
                finally {
                    this.allowNotifyValueChanged = true;
                }
            }
        }
        this.choicesLoaded();
    };
    QuestionSelectBase.prototype.createCachedValueForUrlRequests = function (val, checkOnExisting) {
        if (this.isValueEmpty(val))
            return null;
        if (Array.isArray(val)) {
            var res = [];
            for (var i = 0; i < val.length; i++) {
                res.push(this.createCachedValueForUrlRequests(val[i], true));
            }
            return res;
        }
        var isExists = checkOnExisting ? !this.hasUnknownValue(val) : true;
        return { value: val, isExists: isExists };
    };
    QuestionSelectBase.prototype.updateCachedValueForUrlRequests = function (val, newChoices) {
        if (this.isValueEmpty(val))
            return null;
        if (Array.isArray(val)) {
            var res = [];
            for (var i = 0; i < val.length; i++) {
                var updatedValue = this.updateCachedValueForUrlRequests(val[i], newChoices);
                if (updatedValue && !this.isValueEmpty(updatedValue.value)) {
                    var newValue = updatedValue.value;
                    var item = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(newChoices, updatedValue.value);
                    if (!!item) {
                        newValue = item.value;
                    }
                    res.push(newValue);
                }
            }
            return { value: res };
        }
        var value = val.isExists && this.hasUnknownValue(val.value) ? null : val.value;
        var item = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(newChoices, value);
        if (!!item) {
            value = item.value;
        }
        return { value: value };
    };
    QuestionSelectBase.prototype.updateChoicesDependedQuestions = function () {
        if (this.isLoadingFromJson || this.isUpdatingChoicesDependedQuestions)
            return;
        this.isUpdatingChoicesDependedQuestions = true;
        for (var i = 0; i < this.dependedQuestions.length; i++) {
            this.dependedQuestions[i].onVisibleChoicesChanged();
        }
        this.isUpdatingChoicesDependedQuestions = false;
    };
    QuestionSelectBase.prototype.onSurveyValueChanged = function (newValue) {
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        this.updateChoicesDependedQuestions();
    };
    QuestionSelectBase.prototype.onVisibleChoicesChanged = function () {
        if (this.isLoadingFromJson)
            return;
        this.updateVisibleChoices();
        this.updateVisibilityBasedOnChoices();
        if (!!this.visibleChoicesChangedCallback) {
            this.visibleChoicesChangedCallback();
        }
        this.updateChoicesDependedQuestions();
    };
    QuestionSelectBase.prototype.updateVisibilityBasedOnChoices = function () {
        if (this.hideIfChoicesEmpty) {
            var filteredChoices = this.getFilteredChoices();
            this.visible = !filteredChoices || filteredChoices.length > 0;
        }
    };
    QuestionSelectBase.prototype.sortVisibleChoices = function (array) {
        var order = this.choicesOrder.toLowerCase();
        if (order == "asc")
            return this.sortArray(array, 1);
        if (order == "desc")
            return this.sortArray(array, -1);
        if (order == "random")
            return this.randomizeArray(array);
        return array;
    };
    QuestionSelectBase.prototype.sortArray = function (array, mult) {
        return array.sort(function (a, b) {
            if (a.calculatedText < b.calculatedText)
                return -1 * mult;
            if (a.calculatedText > b.calculatedText)
                return 1 * mult;
            return 0;
        });
    };
    QuestionSelectBase.prototype.randomizeArray = function (array) {
        return _helpers__WEBPACK_IMPORTED_MODULE_8__["Helpers"].randomizeArray(array);
    };
    QuestionSelectBase.prototype.clearIncorrectValues = function () {
        if (!this.hasValueToClearIncorrectValues())
            return;
        if (!!this.survey &&
            this.survey.questionCountByValueName(this.getValueName()) > 1)
            return;
        if (!!this.choicesByUrl &&
            !this.choicesByUrl.isEmpty &&
            (!this.choicesFromUrl || this.choicesFromUrl.length == 0))
            return;
        if (this.clearIncorrectValuesCallback) {
            this.clearIncorrectValuesCallback();
        }
        else {
            this.clearIncorrectValuesCore();
        }
    };
    QuestionSelectBase.prototype.hasValueToClearIncorrectValues = function () {
        if (!!this.survey && this.survey.keepIncorrectValues)
            return false;
        return !this.keepIncorrectValues && !this.isEmpty();
    };
    QuestionSelectBase.prototype.clearValueIfInvisibleCore = function () {
        _super.prototype.clearValueIfInvisibleCore.call(this);
        this.clearIncorrectValues();
    };
    /**
     * Returns `true` if a passed choice item is selected.
     *
     * To obtain a choice item to check, use the `noneItem` or `otherItem` property or the `choices` array.
     * @param item A choice item.
     * @see noneItem
     * @see otherItem
     * @see choices
     */
    QuestionSelectBase.prototype.isItemSelected = function (item) {
        if (item === this.otherItem)
            return this.isOtherSelected;
        return this.isItemSelectedCore(item);
    };
    QuestionSelectBase.prototype.isItemSelectedCore = function (item) {
        return item.value === this.value;
    };
    QuestionSelectBase.prototype.clearDisabledValues = function () {
        if (!this.survey || !this.survey.clearValueOnDisableItems)
            return;
        this.clearDisabledValuesCore();
    };
    QuestionSelectBase.prototype.clearIncorrectValuesCore = function () {
        var val = this.value;
        if (this.canClearValueAnUnknow(val)) {
            this.clearValue();
        }
    };
    QuestionSelectBase.prototype.canClearValueAnUnknow = function (val) {
        if (!this.getStoreOthersAsComment() && this.isOtherSelected)
            return false;
        return this.hasUnknownValue(val, true, true, true);
    };
    QuestionSelectBase.prototype.clearDisabledValuesCore = function () {
        if (this.isValueDisabled(this.value)) {
            this.clearValue();
        }
    };
    QuestionSelectBase.prototype.clearUnusedValues = function () {
        _super.prototype.clearUnusedValues.call(this);
        if (!this.isOtherSelected) {
            this.otherValue = "";
        }
        if (!this.showCommentArea && (!this.getStoreOthersAsComment() && !this.isOtherSelected)) {
            this.comment = "";
        }
    };
    QuestionSelectBase.prototype.getColumnClass = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.cssClasses.column)
            .append("sv-q-column-" + this.colCount, this.hasColumns)
            .toString();
    };
    QuestionSelectBase.prototype.getItemIndex = function (item) {
        return this.visibleChoices.indexOf(item);
    };
    QuestionSelectBase.prototype.getItemClass = function (item) {
        var options = { item: item };
        var res = this.getItemClassCore(item, options);
        options.css = res;
        if (!!this.survey) {
            this.survey.updateChoiceItemCss(this, options);
        }
        return options.css;
    };
    QuestionSelectBase.prototype.getCurrentColCount = function () {
        return this.colCount;
    };
    QuestionSelectBase.prototype.getItemClassCore = function (item, options) {
        var builder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.cssClasses.item)
            .append(this.cssClasses.itemInline, !this.hasColumns && this.colCount === 0)
            .append("sv-q-col-" + this.getCurrentColCount(), !this.hasColumns && this.colCount !== 0)
            .append(this.cssClasses.itemOnError, this.errors.length > 0);
        var isDisabled = this.isReadOnly || !item.isEnabled;
        var isChecked = this.isItemSelected(item) ||
            (this.isOtherSelected && this.otherItem.value === item.value);
        var allowHover = !isDisabled && !isChecked && !(!!this.survey && this.survey.isDesignMode);
        var isNone = item === this.noneItem;
        options.isDisabled = isDisabled;
        options.isChecked = isChecked;
        options.isNone = isNone;
        return builder.append(this.cssClasses.itemDisabled, isDisabled)
            .append(this.cssClasses.itemChecked, isChecked)
            .append(this.cssClasses.itemHover, allowHover)
            .append(this.cssClasses.itemNone, isNone)
            .toString();
    };
    QuestionSelectBase.prototype.getLabelClass = function (item) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.cssClasses.label)
            .append(this.cssClasses.labelChecked, this.isItemSelected(item))
            .toString();
    };
    QuestionSelectBase.prototype.getControlLabelClass = function (item) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.cssClasses.controlLabel)
            .append(this.cssClasses.controlLabelChecked, this.isItemSelected(item))
            .toString() || undefined;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "headItems", {
        get: function () {
            var _this = this;
            return (this.separateSpecialChoices || this.isDesignMode) ?
                this.visibleChoices.filter(function (choice) { return _this.isHeadChoice(choice, _this); }) : [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "footItems", {
        get: function () {
            var _this = this;
            return (this.separateSpecialChoices || this.isDesignMode) ?
                this.visibleChoices.filter(function (choice) { return _this.isFootChoice(choice, _this); }) : [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "dataChoices", {
        get: function () {
            var _this = this;
            return this.visibleChoices.filter(function (item) { return !_this.isBuiltInChoice(item, _this); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "bodyItems", {
        get: function () {
            return (this.hasHeadItems || this.hasFootItems) ? this.dataChoices : this.visibleChoices;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "hasHeadItems", {
        get: function () {
            return this.headItems.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "hasFootItems", {
        get: function () {
            return this.footItems.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "columns", {
        get: function () {
            var columns = [];
            var colCount = this.getCurrentColCount();
            if (this.hasColumns && this.visibleChoices.length > 0) {
                var choicesToBuildColumns = (!this.separateSpecialChoices && !this.isDesignMode) ?
                    this.visibleChoices : this.dataChoices;
                if (_settings__WEBPACK_IMPORTED_MODULE_9__["settings"].showItemsInOrder == "column") {
                    var prevIndex = 0;
                    var leftElementsCount = choicesToBuildColumns.length % colCount;
                    for (var i = 0; i < colCount; i++) {
                        var column = [];
                        for (var j = prevIndex; j < prevIndex + Math.floor(choicesToBuildColumns.length / colCount); j++) {
                            column.push(choicesToBuildColumns[j]);
                        }
                        if (leftElementsCount > 0) {
                            leftElementsCount--;
                            column.push(choicesToBuildColumns[j]);
                            j++;
                        }
                        prevIndex = j;
                        columns.push(column);
                    }
                }
                else {
                    for (var i = 0; i < colCount; i++) {
                        var column = [];
                        for (var j = i; j < choicesToBuildColumns.length; j += colCount) {
                            column.push(choicesToBuildColumns[j]);
                        }
                        columns.push(column);
                    }
                }
            }
            return columns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "hasColumns", {
        get: function () {
            return !this.isMobile &&
                (this.getCurrentColCount() > 1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "rowLayout", {
        get: function () {
            return this.getCurrentColCount() == 0 && !(this.hasFootItems || this.hasHeadItems);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSelectBase.prototype, "blockedRow", {
        get: function () {
            return this.getCurrentColCount() == 0 && (this.hasFootItems || this.hasHeadItems);
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.choicesLoaded = function () {
        this.isChoicesLoaded = true;
        var oldIsReady = this.isReadyValue;
        this.isReadyValue = true;
        this.onReadyChanged &&
            this.onReadyChanged.fire(this, {
                question: this,
                isReady: true,
                oldIsReady: oldIsReady,
            });
        if (this.survey) {
            this.survey.loadedChoicesFromServer(this);
        }
        if (this.loadedChoicesFromServerCallback) {
            this.loadedChoicesFromServerCallback();
        }
    };
    QuestionSelectBase.prototype.getItemValueWrapperComponentName = function (item) {
        var survey = this.survey;
        if (survey) {
            return survey.getItemValueWrapperComponentName(item, this);
        }
        return _survey__WEBPACK_IMPORTED_MODULE_1__["SurveyModel"].TemplateRendererComponentName;
    };
    QuestionSelectBase.prototype.getItemValueWrapperComponentData = function (item) {
        var survey = this.survey;
        if (survey) {
            return survey.getItemValueWrapperComponentData(item, this);
        }
        return item;
    };
    QuestionSelectBase.prototype.ariaItemChecked = function (item) {
        return this.renderedValue === item.value ? "true" : "false";
    };
    QuestionSelectBase.prototype.isOtherItem = function (item) {
        return this.hasOther && item.value == this.otherItem.value;
    };
    Object.defineProperty(QuestionSelectBase.prototype, "itemSvgIcon", {
        get: function () {
            return this.cssClasses.itemSvgIconId;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.getSelectBaseRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_10__["CssClassBuilder"]()
            .append(this.cssClasses.root)
            .append(this.cssClasses.rootRow, this.rowLayout)
            .toString();
    };
    QuestionSelectBase.prototype.getAriaItemLabel = function (item) {
        return item.locText.renderedHtml;
    };
    QuestionSelectBase.prototype.getItemId = function (item) {
        return this.inputId + "_" + this.getItemIndex(item);
    };
    Object.defineProperty(QuestionSelectBase.prototype, "questionName", {
        get: function () {
            return this.name + "_" + this.id;
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.getItemEnabled = function (item) {
        return !this.isInputReadOnly && item.isEnabled;
    };
    QuestionSelectBase.prototype.afterRender = function (el) {
        _super.prototype.afterRender.call(this, el);
        this.rootElement = el;
    };
    QuestionSelectBase.prototype.beforeDestroyQuestionElement = function (el) {
        _super.prototype.beforeDestroyQuestionElement.call(this, el);
        this.rootElement = undefined;
    };
    QuestionSelectBase.prototype.focusOtherComment = function () {
        var _this = this;
        if (!!this.rootElement) {
            setTimeout(function () {
                var commentEl = _this.rootElement.querySelector("textarea");
                if (!!commentEl) {
                    commentEl.focus();
                }
            }, 10);
        }
    };
    QuestionSelectBase.prototype.onValueChanged = function () {
        _super.prototype.onValueChanged.call(this);
        if (!this.isDesignMode && !this.prevIsOtherSelected && this.isOtherSelected) {
            this.focusOtherComment();
        }
        this.prevIsOtherSelected = this.isOtherSelected;
    };
    QuestionSelectBase.prototype.getDefaultItemComponent = function () {
        return "";
    };
    Object.defineProperty(QuestionSelectBase.prototype, "itemComponent", {
        /**
         * The name of a component used to render items.
         */
        get: function () {
            return this.getPropertyValue("itemComponent", this.getDefaultItemComponent());
        },
        set: function (value) {
            this.setPropertyValue("itemComponent", value);
        },
        enumerable: false,
        configurable: true
    });
    QuestionSelectBase.prototype.updateCssClasses = function (res, css) {
        _super.prototype.updateCssClasses.call(this, res, css);
        if (!!this.dropdownListModel) {
            var listCssClasses = {};
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_11__["mergeValues"])(css.list, listCssClasses);
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_11__["mergeValues"])(res.list, listCssClasses);
            res["list"] = listCssClasses;
        }
    };
    QuestionSelectBase.prototype.calcCssClasses = function (css) {
        var classes = _super.prototype.calcCssClasses.call(this, css);
        if (this.dropdownListModel) {
            this.dropdownListModel.updateCssClasses(classes.popup, classes.list);
        }
        return classes;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], QuestionSelectBase.prototype, "selectedItemValues", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionSelectBase.prototype, "separateSpecialChoices", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ localizable: true })
    ], QuestionSelectBase.prototype, "otherPlaceholder", void 0);
    return QuestionSelectBase;
}(_question__WEBPACK_IMPORTED_MODULE_2__["Question"]));

/**
 * A base class for multiple-selection question types that can display choice items in multiple columns ([Checkbox](https://surveyjs.io/form-library/documentation/questioncheckboxmodel), [Radiogroup](https://surveyjs.io/form-library/documentation/questionradiogroupmodel), [Image Picker](https://surveyjs.io/form-library/documentation/questionimagepickermodel)).
 */
var QuestionCheckboxBase = /** @class */ (function (_super) {
    __extends(QuestionCheckboxBase, _super);
    function QuestionCheckboxBase(name) {
        return _super.call(this, name) || this;
    }
    Object.defineProperty(QuestionCheckboxBase.prototype, "colCount", {
        /**
         * Get or sets the number of columns used to arrange choice items.
         *
         * Set this property to 0 if you want to display all items in one line. The default value depends on the available width.
         * @see separateSpecialChoices
         */
        get: function () {
            return this.getPropertyValue("colCount", this.isFlowLayout ? 0 : 1);
        },
        set: function (value) {
            if (value < 0 || value > 5 || this.isFlowLayout)
                return;
            this.setPropertyValue("colCount", value);
            this.fireCallback(this.colCountChangedCallback);
        },
        enumerable: false,
        configurable: true
    });
    QuestionCheckboxBase.prototype.clickItemHandler = function (item, checked) {
        var newValue = [].concat(this.renderedValue || []);
        var index = newValue.indexOf(item.value);
        if (checked) {
            if (index < 0) {
                newValue.push(item.value);
            }
        }
        else {
            if (index > -1) {
                newValue.splice(index, 1);
            }
        }
        this.renderedValue = newValue;
    };
    QuestionCheckboxBase.prototype.onParentChanged = function () {
        _super.prototype.onParentChanged.call(this);
        if (this.isFlowLayout) {
            this.setPropertyValue("colCount", null);
        }
    };
    QuestionCheckboxBase.prototype.onParentQuestionChanged = function () {
        this.onVisibleChoicesChanged();
    };
    QuestionCheckboxBase.prototype.getSearchableItemValueKeys = function (keys) {
        keys.push("choices");
    };
    return QuestionCheckboxBase;
}(QuestionSelectBase));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("selectbase", [
    { name: "showCommentArea:switch", layout: "row", visible: true, category: "general" },
    "choicesFromQuestion:question_selectbase",
    {
        name: "choices:itemvalue[]", uniqueProperty: "value",
        baseValue: function () {
            return _surveyStrings__WEBPACK_IMPORTED_MODULE_4__["surveyLocalization"].getString("choices_Item");
        },
        dependsOn: "choicesFromQuestion",
        visibleIf: function (obj) {
            return !obj.choicesFromQuestion;
        },
    },
    {
        name: "choicesFromQuestionMode",
        default: "all",
        choices: ["all", "selected", "unselected"],
        dependsOn: "choicesFromQuestion",
        visibleIf: function (obj) {
            return !!obj.choicesFromQuestion;
        },
    },
    {
        name: "choicesOrder",
        default: "none",
        choices: ["none", "asc", "desc", "random"],
        dependsOn: "choicesFromQuestion",
        visibleIf: function (obj) {
            return !obj.choicesFromQuestion;
        },
    },
    {
        name: "choicesByUrl:restfull",
        className: "ChoicesRestful",
        onGetValue: function (obj) {
            return obj.choicesByUrl.getData();
        },
        onSetValue: function (obj, value) {
            obj.choicesByUrl.setData(value);
        },
    },
    "hideIfChoicesEmpty:boolean",
    {
        name: "choicesVisibleIf:condition",
        dependsOn: "choicesFromQuestion",
        visibleIf: function (obj) {
            return !obj.choicesFromQuestion;
        },
    },
    {
        name: "choicesEnableIf:condition",
        dependsOn: "choicesFromQuestion",
        visibleIf: function (obj) {
            return !obj.choicesFromQuestion;
        },
    },
    { name: "separateSpecialChoices:boolean", visible: false },
    { name: "showOtherItem:boolean", alternativeName: "hasOther" },
    { name: "showNoneItem:boolean", alternativeName: "hasNone" },
    {
        name: "otherPlaceholder",
        alternativeName: "otherPlaceHolder",
        serializationProperty: "locOtherPlaceholder",
        dependsOn: "showOtherItem",
        visibleIf: function (obj) {
            return obj.hasOther;
        },
    },
    {
        name: "noneText",
        serializationProperty: "locNoneText",
        dependsOn: "showNoneItem",
        visibleIf: function (obj) {
            return obj.hasNone;
        },
    },
    {
        name: "otherText",
        serializationProperty: "locOtherText",
        dependsOn: "showOtherItem",
        visibleIf: function (obj) {
            return obj.hasOther;
        },
    },
    {
        name: "otherErrorText",
        serializationProperty: "locOtherErrorText",
        dependsOn: "showOtherItem",
        visibleIf: function (obj) {
            return obj.hasOther;
        },
    },
    {
        name: "storeOthersAsComment",
        default: "default",
        choices: ["default", true, false],
        visible: false,
    },
    // { name: "itemComponent", visible: false }
], null, "question");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("checkboxbase", [
    {
        name: "colCount:number",
        default: 1,
        choices: [0, 1, 2, 3, 4, 5],
        layout: "row",
    }
], null, "selectbase");


/***/ }),

/***/ "./src/question_boolean.ts":
/*!*********************************!*\
  !*** ./src/question_boolean.ts ***!
  \*********************************/
/*! exports provided: QuestionBooleanModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionBooleanModel", function() { return QuestionBooleanModel; });
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





/**
 * A class that describes the Boolean question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-boolean/ (linkStyle))
 */
var QuestionBooleanModel = /** @class */ (function (_super) {
    __extends(QuestionBooleanModel, _super);
    function QuestionBooleanModel(name) {
        var _this = _super.call(this, name) || this;
        _this.createLocalizableString("labelFalse", _this, true, "booleanUncheckedLabel");
        _this.createLocalizableString("labelTrue", _this, true, "booleanCheckedLabel");
        return _this;
    }
    QuestionBooleanModel.prototype.getType = function () {
        return "boolean";
    };
    QuestionBooleanModel.prototype.isLayoutTypeSupported = function (layoutType) {
        return true;
    };
    QuestionBooleanModel.prototype.supportGoNextPageAutomatic = function () {
        return this.renderAs !== "checkbox";
    };
    Object.defineProperty(QuestionBooleanModel.prototype, "isIndeterminate", {
        get: function () {
            return this.isEmpty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "hasTitle", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "booleanValue", {
        /**
         * Gets or sets the question value as a Boolean value.
         *
         * If you set the `valueTrue` and `valueFalse` properties, the `value` property contains their values instead of Boolean values. This may be inconvenient when you operate the question value in code. To access the standard Boolean values, use the `booleanValue` property.
         * @see valueTrue
         * @see valueFalse
         */
        get: function () {
            if (this.isEmpty())
                return null;
            return this.value == this.getValueTrue();
        },
        set: function (val) {
            if (this.isReadOnly) {
                return;
            }
            this.setBooleanValue(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "checkedValue", {
        get: function () { return this.booleanValue; },
        set: function (val) { this.booleanValue = val; },
        enumerable: false,
        configurable: true
    });
    QuestionBooleanModel.prototype.setBooleanValue = function (val) {
        if (this.isValueEmpty(val)) {
            this.value = null;
            this.booleanValueRendered = null;
        }
        else {
            this.value = val == true ? this.getValueTrue() : this.getValueFalse();
            this.booleanValueRendered = val;
        }
    };
    Object.defineProperty(QuestionBooleanModel.prototype, "defaultValue", {
        get: function () {
            return this.getPropertyValue("defaultValue");
        },
        set: function (val) {
            if (val === true)
                val = "true";
            if (val === false)
                val = "false";
            if (val === undefined)
                val = "indeterminate";
            this.setPropertyValue("defaultValue", val);
            this.updateValueWithDefaults();
        },
        enumerable: false,
        configurable: true
    });
    QuestionBooleanModel.prototype.getDefaultValue = function () {
        if (this.defaultValue == "indeterminate")
            return null;
        if (this.defaultValue === undefined)
            return null;
        return this.defaultValue == "true"
            ? this.getValueTrue()
            : this.getValueFalse();
    };
    Object.defineProperty(QuestionBooleanModel.prototype, "locTitle", {
        get: function () {
            var original = this.getLocalizableString("title");
            if (!this.isValueEmpty(this.locLabel.text) && (this.isValueEmpty(original.text) || this.isLabelRendered && !this.showTitle))
                return this.locLabel;
            return original;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "labelRenderedAriaID", {
        get: function () {
            return this.isLabelRendered ? this.ariaTitleId : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "isLabelRendered", {
        get: function () {
            return this.titleLocation === "hidden";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "canRenderLabelDescription", {
        get: function () {
            return this.isLabelRendered && this.hasDescription && (this.hasDescriptionUnderTitle || this.hasDescriptionUnderInput);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "labelTrue", {
        /**
         * Gets or sets a text label that corresponds to a positive answer.
         *
         * Default value: "Yes"
         * @see valueTrue
         * @see valueFalse
         */
        get: function () {
            return this.getLocalizableStringText("labelTrue");
        },
        set: function (val) {
            this.setLocalizableStringText("labelTrue", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "locLabelTrue", {
        get: function () {
            return this.getLocalizableString("labelTrue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "isDeterminated", {
        get: function () {
            return this.booleanValue !== null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "labelFalse", {
        /**
         * Gets or sets a text label that corresponds to a negative answer.
         *
         * Default value: "No"
         * @see valueTrue
         * @see valueFalse
         */
        get: function () {
            return this.getLocalizableStringText("labelFalse");
        },
        set: function (val) {
            this.setLocalizableStringText("labelFalse", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "locLabelFalse", {
        get: function () {
            return this.getLocalizableString("labelFalse");
        },
        enumerable: false,
        configurable: true
    });
    QuestionBooleanModel.prototype.getValueTrue = function () {
        return this.valueTrue !== undefined ? this.valueTrue : true;
    };
    QuestionBooleanModel.prototype.getValueFalse = function () {
        return this.valueFalse !== undefined ? this.valueFalse : false;
    };
    QuestionBooleanModel.prototype.setDefaultValue = function () {
        if (this.isDefaultValueSet("true", this.valueTrue))
            this.setBooleanValue(true);
        if (this.isDefaultValueSet("false", this.valueFalse))
            this.setBooleanValue(false);
        if (this.defaultValue == "indeterminate")
            this.setBooleanValue(null);
    };
    QuestionBooleanModel.prototype.isDefaultValueSet = function (defaultValueCheck, valueTrueOrFalse) {
        return this.defaultValue == defaultValueCheck || (valueTrueOrFalse !== undefined && this.defaultValue === valueTrueOrFalse);
    };
    QuestionBooleanModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        if (value == this.getValueTrue())
            return this.locLabelTrue.textOrHtml;
        return this.locLabelFalse.textOrHtml;
    };
    QuestionBooleanModel.prototype.getItemCssValue = function (css) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
            .append(css.item)
            .append(css.itemOnError, this.errors.length > 0)
            .append(css.itemDisabled, this.isReadOnly)
            .append(css.itemChecked, !!this.booleanValue)
            .append(css.itemIndeterminate, this.booleanValue === null)
            .toString();
    };
    QuestionBooleanModel.prototype.getItemCss = function () {
        return this.getItemCssValue(this.cssClasses);
    };
    QuestionBooleanModel.prototype.getCheckboxItemCss = function () {
        return this.getItemCssValue({
            item: this.cssClasses.checkboxItem,
            itemOnError: this.cssClasses.checkboxItemOnError,
            itemDisabled: this.cssClasses.checkboxItemDisabled,
            itemChecked: this.cssClasses.checkboxItemChecked,
            itemIndeterminate: this.cssClasses.checkboxItemIndeterminate
        });
    };
    QuestionBooleanModel.prototype.getLabelCss = function (checked) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
            .append(this.cssClasses.label)
            .append(this.cssClasses.disabledLabel, this.booleanValue === !checked || this.isReadOnly)
            .toString();
    };
    Object.defineProperty(QuestionBooleanModel.prototype, "svgIcon", {
        get: function () {
            if (this.booleanValue && this.cssClasses.svgIconCheckedId)
                return this.cssClasses.svgIconCheckedId;
            if (this.booleanValue === null && this.cssClasses.svgIconIndId)
                return this.cssClasses.svgIconIndId;
            if (!this.booleanValue && this.cssClasses.svgIconUncheckedId)
                return this.cssClasses.svgIconUncheckedId;
            return this.cssClasses.svgIconId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionBooleanModel.prototype, "allowClick", {
        get: function () {
            return this.isIndeterminate && !this.isInputReadOnly;
        },
        enumerable: false,
        configurable: true
    });
    QuestionBooleanModel.prototype.getCheckedLabel = function () {
        if (this.booleanValue === true) {
            return this.locLabelTrue;
        }
        else if (this.booleanValue === false) {
            return this.locLabelFalse;
        }
    };
    QuestionBooleanModel.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        if (newValue === "true" && this.valueTrue !== "true")
            newValue = true;
        if (newValue === "false" && this.valueFalse !== "false")
            newValue = false;
        if (newValue === "indeterminate")
            newValue = null;
        _super.prototype.setQuestionValue.call(this, newValue, updateIsAnswered);
    };
    /* #region web-based methods */
    QuestionBooleanModel.prototype.onLabelClick = function (event, value) {
        if (this.allowClick) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["preventDefaults"])(event);
            this.booleanValue = value;
        }
        return true;
    };
    QuestionBooleanModel.prototype.calculateBooleanValueByEvent = function (event, isRightClick) {
        var isRtl = document.defaultView.getComputedStyle(event.target).direction == "rtl";
        this.booleanValue = isRtl ? !isRightClick : isRightClick;
    };
    QuestionBooleanModel.prototype.onSwitchClickModel = function (event) {
        if (this.allowClick) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["preventDefaults"])(event);
            var isRightClick = event.offsetX / event.target.offsetWidth > 0.5;
            this.calculateBooleanValueByEvent(event, isRightClick);
            return;
        }
        return true;
    };
    QuestionBooleanModel.prototype.onKeyDownCore = function (event) {
        if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_4__["preventDefaults"])(event);
            this.calculateBooleanValueByEvent(event, event.key === "ArrowRight");
            return;
        }
        return true;
    };
    /* #endregion */
    QuestionBooleanModel.prototype.getRadioItemClass = function (css, value) {
        var className = undefined;
        if (css.radioItem) {
            className = css.radioItem;
        }
        if (css.radioItemChecked && value === this.booleanValue) {
            className = (className ? className + " " : "") + css.radioItemChecked;
        }
        return className;
    };
    QuestionBooleanModel.prototype.supportResponsiveness = function () {
        return true;
    };
    QuestionBooleanModel.prototype.getCompactRenderAs = function () {
        return "radio";
    };
    QuestionBooleanModel.prototype.createActionContainer = function (allowAdaptiveActions) {
        return _super.prototype.createActionContainer.call(this, this.renderAs !== "checkbox");
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionBooleanModel.prototype, "booleanValueRendered", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionBooleanModel.prototype, "showTitle", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: true })
    ], QuestionBooleanModel.prototype, "label", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionBooleanModel.prototype, "valueTrue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionBooleanModel.prototype, "valueFalse", void 0);
    return QuestionBooleanModel;
}(_question__WEBPACK_IMPORTED_MODULE_2__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("boolean", [
    { name: "showCommentArea:switch", layout: "row", visible: true, category: "general" },
    { name: "label:text", serializationProperty: "locLabel", isSerializable: false, visible: false },
    {
        name: "labelTrue:text",
        serializationProperty: "locLabelTrue",
    },
    {
        name: "labelFalse:text",
        serializationProperty: "locLabelFalse",
    },
    "valueTrue",
    "valueFalse",
    { name: "renderAs", default: "default", visible: false },
], function () {
    return new QuestionBooleanModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_0__["QuestionFactory"].Instance.registerQuestion("boolean", function (name) {
    return new QuestionBooleanModel(name);
});


/***/ }),

/***/ "./src/question_buttongroup.ts":
/*!*************************************!*\
  !*** ./src/question_buttongroup.ts ***!
  \*************************************/
/*! exports provided: ButtonGroupItemValue, QuestionButtonGroupModel, ButtonGroupItemModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemValue", function() { return ButtonGroupItemValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionButtonGroupModel", function() { return QuestionButtonGroupModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonGroupItemModel", function() { return ButtonGroupItemModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_baseselect */ "./src/question_baseselect.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var ButtonGroupItemValue = /** @class */ (function (_super) {
    __extends(ButtonGroupItemValue, _super);
    function ButtonGroupItemValue(value, text, typeName) {
        if (text === void 0) { text = null; }
        if (typeName === void 0) { typeName = "buttongroupitemvalue"; }
        var _this = _super.call(this, value, text, typeName) || this;
        _this.typeName = typeName;
        return _this;
    }
    ButtonGroupItemValue.prototype.getType = function () {
        return !!this.typeName ? this.typeName : "buttongroupitemvalue";
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], ButtonGroupItemValue.prototype, "iconName", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], ButtonGroupItemValue.prototype, "iconSize", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], ButtonGroupItemValue.prototype, "showCaption", void 0);
    return ButtonGroupItemValue;
}(_itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"]));

/**
 * A Model for a button group question.
 */
var QuestionButtonGroupModel = /** @class */ (function (_super) {
    __extends(QuestionButtonGroupModel, _super);
    function QuestionButtonGroupModel(name) {
        return _super.call(this, name) || this;
    }
    QuestionButtonGroupModel.prototype.getType = function () {
        return "buttongroup";
    };
    QuestionButtonGroupModel.prototype.getItemValueType = function () {
        return "buttongroupitemvalue";
    };
    QuestionButtonGroupModel.prototype.supportOther = function () {
        return false;
    };
    return QuestionButtonGroupModel;
}(_question_baseselect__WEBPACK_IMPORTED_MODULE_2__["QuestionCheckboxBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("buttongroup", [
    {
        name: "choices:buttongroupitemvalue[]",
    },
], function () {
    return new QuestionButtonGroupModel("");
}, "checkboxbase");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("buttongroupitemvalue", [
    { name: "showCaption:boolean", default: true },
    { name: "iconName:text" },
    { name: "iconSize:number" },
], function (value) { return new ButtonGroupItemValue(value); }, "itemvalue");
// QuestionFactory.Instance.registerQuestion("buttongroup", name => {
//   var q = new QuestionButtonGroupModel(name);
//   q.choices = QuestionFactory.DefaultChoices;
//   return q;
// });
var ButtonGroupItemModel = /** @class */ (function () {
    function ButtonGroupItemModel(question, item, index) {
        this.question = question;
        this.item = item;
        this.index = index;
    }
    Object.defineProperty(ButtonGroupItemModel.prototype, "value", {
        get: function () {
            return this.item.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "iconName", {
        get: function () {
            return this.item.iconName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "iconSize", {
        get: function () {
            return this.item.iconSize || 24;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "caption", {
        get: function () {
            return this.item.locText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "showCaption", {
        get: function () {
            return this.item.showCaption || this.item.showCaption === undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "isRequired", {
        get: function () {
            return this.question.isRequired;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "selected", {
        get: function () {
            return this.question.isItemSelected(this.item);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "readOnly", {
        get: function () {
            return this.question.isInputReadOnly || !this.item.isEnabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "name", {
        get: function () {
            return this.question.name + "_" + this.question.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "id", {
        get: function () {
            return this.question.inputId + "_" + this.index;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "hasErrors", {
        get: function () {
            return this.question.errors.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "describedBy", {
        get: function () {
            return this.question.errors.length > 0
                ? this.question.id + "_errors"
                : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "labelClass", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
                .append(this.question.cssClasses.item)
                .append(this.question.cssClasses.itemSelected, this.selected)
                .append(this.question.cssClasses.itemHover, !this.readOnly && !this.selected)
                .append(this.question.cssClasses.itemDisabled, this.question.isReadOnly || !this.item.isEnabled)
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroupItemModel.prototype, "css", {
        get: function () {
            return {
                label: this.labelClass,
                icon: this.question.cssClasses.itemIcon,
                control: this.question.cssClasses.itemControl,
                caption: this.question.cssClasses.itemCaption,
                decorator: this.question.cssClasses.itemDecorator,
            };
        },
        enumerable: false,
        configurable: true
    });
    ButtonGroupItemModel.prototype.onChange = function () {
        this.question.renderedValue = this.item.value;
    };
    return ButtonGroupItemModel;
}());



/***/ }),

/***/ "./src/question_checkbox.ts":
/*!**********************************!*\
  !*** ./src/question_checkbox.ts ***!
  \**********************************/
/*! exports provided: QuestionCheckboxModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCheckboxModel", function() { return QuestionCheckboxModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_baseselect */ "./src/question_baseselect.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * A class that describes the Checkbox question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-checkbox/ (linkStyle))
 */
var QuestionCheckboxModel = /** @class */ (function (_super) {
    __extends(QuestionCheckboxModel, _super);
    function QuestionCheckboxModel(name) {
        var _this = _super.call(this, name) || this;
        _this.selectAllItemValue = new _itemvalue__WEBPACK_IMPORTED_MODULE_4__["ItemValue"]("selectall");
        _this.invisibleOldValues = {};
        _this.isChangingValueOnClearIncorrect = false;
        var selectAllItemText = _this.createLocalizableString("selectAllText", _this.selectAllItem, true, "selectAllItemText");
        _this.selectAllItem.locOwner = _this;
        _this.selectAllItem.setLocText(selectAllItemText);
        _this.registerPropertyChangedHandlers(["showSelectAllItem", "selectAllText"], function () {
            _this.onVisibleChoicesChanged();
        });
        return _this;
    }
    QuestionCheckboxModel.prototype.getDefaultItemComponent = function () {
        return "survey-checkbox-item";
    };
    Object.defineProperty(QuestionCheckboxModel.prototype, "ariaRole", {
        get: function () {
            return "listbox";
        },
        enumerable: false,
        configurable: true
    });
    QuestionCheckboxModel.prototype.getType = function () {
        return "checkbox";
    };
    QuestionCheckboxModel.prototype.onCreating = function () {
        _super.prototype.onCreating.call(this);
        this.createNewArray("renderedValue");
        this.createNewArray("value");
    };
    QuestionCheckboxModel.prototype.getFirstInputElementId = function () {
        return this.inputId + "_0";
    };
    Object.defineProperty(QuestionCheckboxModel.prototype, "valuePropertyName", {
        /**
         * Specifies a property name used to store selected values.
         *
         * Set this property if you want to store selected values in an array of objects instead of an array of primitive values. For example, if you set `valuePropertyName` to `"car"`, the `value` property will contain an array of objects `[{ car: "Ford" }, { car: "Tesla" }]`, not an array of string values `[ "Ford", "Tesla" ]`.
         */
        get: function () {
            return this.getPropertyValue("valuePropertyName");
        },
        set: function (val) {
            this.setPropertyValue("valuePropertyName", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionCheckboxModel.prototype.getQuestionFromArray = function (name, index) {
        if (!!name && name === this.valuePropertyName) {
            var v = this.value;
            if (Array.isArray(v) && index < v.length)
                return this;
        }
        return null;
    };
    Object.defineProperty(QuestionCheckboxModel.prototype, "selectAllItem", {
        /**
         * Returns the "Select All" choice item. Use this property to change the item's `value` or `text`.
         * @see showSelectAllItem
         */
        get: function () {
            return this.selectAllItemValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "selectAllText", {
        /**
         * Gets or sets a caption for the "Select All" choice item.
         * @see showSelectAllItem
         */
        get: function () {
            return this.getLocalizableStringText("selectAllText");
        },
        set: function (val) {
            this.setLocalizableStringText("selectAllText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "locSelectAllText", {
        get: function () {
            return this.getLocalizableString("selectAllText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "showSelectAllItem", {
        /**
         * Enable this property to display a "Select All" item. When users select it, all other choice items, except "Other" and "None", also become selected.
         * @see selectAll
         * @see isAllSelected
         * @see separateSpecialChoices
         */
        get: function () {
            return this.getPropertyValue("showSelectAllItem", false);
        },
        set: function (val) {
            this.setPropertyValue("showSelectAllItem", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "hasSelectAll", {
        get: function () {
            return this.showSelectAllItem;
        },
        set: function (val) {
            this.showSelectAllItem = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "isAllSelected", {
        /**
         * Returns `true` if all choice items, except "Other" and "None", are selected.
         * @see showSelectAllItem
         */
        get: function () {
            var val = this.value;
            if (!val || !Array.isArray(val))
                return false;
            if (this.isItemSelected(this.noneItem))
                return false;
            var allItemCount = this.visibleChoices.length;
            if (this.hasOther)
                allItemCount--;
            if (this.hasNone)
                allItemCount--;
            if (this.hasSelectAll)
                allItemCount--;
            var selectedCount = val.length;
            if (this.isOtherSelected)
                selectedCount--;
            return selectedCount === allItemCount;
        },
        set: function (val) {
            if (val) {
                this.selectAll();
            }
            else {
                this.clearValue();
            }
        },
        enumerable: false,
        configurable: true
    });
    QuestionCheckboxModel.prototype.toggleSelectAll = function () {
        this.isAllSelected = !this.isAllSelected;
    };
    /**
     * Selects all choice items, except "Other" and "None".
     *
     * To clear selection, call the `clearValue()` method.
     * @see clearValue
     */
    QuestionCheckboxModel.prototype.selectAll = function () {
        var val = [];
        for (var i = 0; i < this.visibleChoices.length; i++) {
            var item = this.visibleChoices[i];
            if (item === this.noneItem ||
                item === this.otherItem ||
                item === this.selectAllItem)
                continue;
            val.push(item.value);
        }
        this.renderedValue = val;
    };
    QuestionCheckboxModel.prototype.isItemSelectedCore = function (item) {
        if (item === this.selectAllItem)
            return this.isAllSelected;
        var val = this.renderedValue;
        if (!val || !Array.isArray(val))
            return false;
        for (var i = 0; i < val.length; i++) {
            if (this.isTwoValueEquals(val[i], item.value))
                return true;
        }
        return false;
    };
    QuestionCheckboxModel.prototype.getRealValue = function (val) {
        if (!val)
            return val;
        return !this.valuePropertyName ? val : val[this.valuePropertyName];
    };
    Object.defineProperty(QuestionCheckboxModel.prototype, "maxSelectedChoices", {
        /**
         * Sets a limit on the number of selected choices.
         *
         * Default value: 0 (unlimited)
         *
         * > This property only limits the number of choice items that can be selected by users. You can select any number of choice items in code, regardless of the `maxSelectedChoices` value.
         */
        get: function () {
            return this.getPropertyValue("maxSelectedChoices");
        },
        set: function (val) {
            if (val < 0)
                val = 0;
            this.setPropertyValue("maxSelectedChoices", val);
            this.filterItems();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "selectedChoices", {
        /**
         * An array of selected choice items. Includes the "Other" and "None" choice items if they are selected, but not "Select All". Items are sorted in the order they were selected.
         * @see visibleChoices
         * @see enabledChoices
         */
        get: function () {
            if (this.isEmpty())
                return [];
            var val = this.renderedValue;
            var allChoices = !!this.defaultSelectedItemValues ? [].concat(this.defaultSelectedItemValues, this.visibleChoices) : this.visibleChoices;
            var itemValues = val.map(function (item) { return _itemvalue__WEBPACK_IMPORTED_MODULE_4__["ItemValue"].getItemByValue(allChoices, item); }).filter(function (item) { return !!item; });
            if (!itemValues.length && !this.selectedItemValues) {
                this.updateSelectedItemValues();
            }
            return this.validateItemValues(itemValues);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCheckboxModel.prototype, "selectedItems", {
        get: function () { return this.selectedChoices; },
        enumerable: false,
        configurable: true
    });
    QuestionCheckboxModel.prototype.validateItemValues = function (itemValues) {
        if (!!itemValues.length)
            return itemValues;
        var selectedItemValues = this.selectedItemValues;
        if (!!selectedItemValues && !!selectedItemValues.length) {
            this.defaultSelectedItemValues = [].concat(selectedItemValues);
            return selectedItemValues;
        }
        var val = this.renderedValue;
        return val.map(function (item) { return new _itemvalue__WEBPACK_IMPORTED_MODULE_4__["ItemValue"](item); });
    };
    QuestionCheckboxModel.prototype.onEnableItemCallBack = function (item) {
        if (!this.shouldCheckMaxSelectedChoices())
            return true;
        return this.isItemSelected(item);
    };
    QuestionCheckboxModel.prototype.onAfterRunItemsEnableCondition = function () {
        if (this.maxSelectedChoices < 1) {
            this.selectAllItem.setIsEnabled(true);
            this.otherItem.setIsEnabled(true);
            return;
        }
        if (this.hasSelectAll) {
            this.selectAllItem.setIsEnabled(this.maxSelectedChoices >= this.activeChoices.length);
        }
        if (this.hasOther) {
            this.otherItem.setIsEnabled(!this.shouldCheckMaxSelectedChoices() || this.isOtherSelected);
        }
    };
    QuestionCheckboxModel.prototype.shouldCheckMaxSelectedChoices = function () {
        if (this.maxSelectedChoices < 1)
            return false;
        var val = this.value;
        var len = !Array.isArray(val) ? 0 : val.length;
        return len >= this.maxSelectedChoices;
    };
    QuestionCheckboxModel.prototype.getItemClassCore = function (item, options) {
        var __dummy_value = this.value; //trigger dependencies from koValue for knockout
        options.isSelectAllItem = item === this.selectAllItem;
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(_super.prototype.getItemClassCore.call(this, item, options))
            .append(this.cssClasses.itemSelectAll, options.isSelectAllItem)
            .toString();
    };
    QuestionCheckboxModel.prototype.updateValueFromSurvey = function (newValue) {
        _super.prototype.updateValueFromSurvey.call(this, newValue);
        this.invisibleOldValues = {};
    };
    QuestionCheckboxModel.prototype.setDefaultValue = function () {
        _super.prototype.setDefaultValue.call(this);
        var val = this.defaultValue;
        if (Array.isArray(val)) {
            for (var i = 0; i < val.length; i++) {
                var rVal = this.getRealValue(val[i]);
                if (this.canClearValueAnUnknow(rVal)) {
                    this.addIntoInvisibleOldValues(rVal);
                }
            }
        }
    };
    QuestionCheckboxModel.prototype.addIntoInvisibleOldValues = function (val) {
        this.invisibleOldValues[val] = val;
    };
    QuestionCheckboxModel.prototype.hasValueToClearIncorrectValues = function () {
        return _super.prototype.hasValueToClearIncorrectValues.call(this) || !_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isValueEmpty(this.invisibleOldValues);
    };
    QuestionCheckboxModel.prototype.setNewValue = function (newValue) {
        if (!this.isChangingValueOnClearIncorrect) {
            this.invisibleOldValues = {};
        }
        newValue = this.valueFromData(newValue);
        var value = this.value;
        if (!newValue)
            newValue = [];
        if (!value)
            value = [];
        if (this.isTwoValueEquals(value, newValue))
            return;
        if (this.hasNone) {
            var prevNoneIndex = this.noneIndexInArray(value);
            var newNoneIndex = this.noneIndexInArray(newValue);
            if (prevNoneIndex > -1) {
                if (newNoneIndex > -1 && newValue.length > 1) {
                    newValue.splice(newNoneIndex, 1);
                }
            }
            else {
                if (newNoneIndex > -1) {
                    newValue.splice(0, newValue.length);
                    newValue.push(this.noneItem.value);
                }
            }
        }
        _super.prototype.setNewValue.call(this, newValue);
    };
    QuestionCheckboxModel.prototype.getIsMultipleValue = function () {
        return true;
    };
    QuestionCheckboxModel.prototype.getCommentFromValue = function (newValue) {
        var ind = this.getFirstUnknownIndex(newValue);
        if (ind < 0)
            return "";
        return newValue[ind];
    };
    QuestionCheckboxModel.prototype.setOtherValueIntoValue = function (newValue) {
        var ind = this.getFirstUnknownIndex(newValue);
        if (ind < 0)
            return newValue;
        newValue.splice(ind, 1, this.otherItem.value);
        return newValue;
    };
    QuestionCheckboxModel.prototype.getFirstUnknownIndex = function (newValue) {
        if (!Array.isArray(newValue))
            return -1;
        for (var i = 0; i < newValue.length; i++) {
            if (this.hasUnknownValue(newValue[i], false, false))
                return i;
        }
        return -1;
    };
    QuestionCheckboxModel.prototype.noneIndexInArray = function (val) {
        if (!val || !Array.isArray(val))
            return -1;
        var noneValue = this.noneItem.value;
        for (var i = 0; i < val.length; i++) {
            if (val[i] == noneValue)
                return i;
        }
        return -1;
    };
    QuestionCheckboxModel.prototype.canUseFilteredChoices = function () {
        return !this.hasSelectAll && _super.prototype.canUseFilteredChoices.call(this);
    };
    QuestionCheckboxModel.prototype.supportSelectAll = function () {
        return this.isSupportProperty("showSelectAllItem");
    };
    QuestionCheckboxModel.prototype.addToVisibleChoices = function (items, isAddAll) {
        if (this.supportSelectAll() && this.canShowOptionItem(this.selectAllItem, isAddAll, this.hasSelectAll)) {
            items.unshift(this.selectAllItem);
        }
        _super.prototype.addToVisibleChoices.call(this, items, isAddAll);
    };
    QuestionCheckboxModel.prototype.isHeadChoice = function (item, question) {
        return (item === question.selectAllItem);
    };
    QuestionCheckboxModel.prototype.isItemInList = function (item) {
        if (item == this.selectAllItem)
            return this.hasSelectAll;
        return _super.prototype.isItemInList.call(this, item);
    };
    QuestionCheckboxModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        if (!Array.isArray(value))
            return _super.prototype.getDisplayValueCore.call(this, keysAsText, value);
        var valuePropName = this.valuePropertyName;
        var onGetValueCallback = function (index) {
            var val = value[index];
            if (!!valuePropName && !!val[valuePropName]) {
                val = val[valuePropName];
            }
            return val;
        };
        return this.getDisplayArrayValue(keysAsText, value, onGetValueCallback);
    };
    QuestionCheckboxModel.prototype.clearIncorrectValuesCore = function () {
        this.clearIncorrectAndDisabledValues(false);
    };
    QuestionCheckboxModel.prototype.clearDisabledValuesCore = function () {
        this.clearIncorrectAndDisabledValues(true);
    };
    QuestionCheckboxModel.prototype.clearIncorrectAndDisabledValues = function (clearDisabled) {
        var val = this.value;
        var hasChanged = false;
        var restoredValues = this.restoreValuesFromInvisible();
        if (!val && restoredValues.length == 0)
            return;
        if (!Array.isArray(val) || val.length == 0) {
            this.isChangingValueOnClearIncorrect = true;
            if (!clearDisabled) {
                if (this.hasComment) {
                    this.value = null;
                }
                else {
                    this.clearValue();
                }
            }
            this.isChangingValueOnClearIncorrect = false;
            if (restoredValues.length == 0)
                return;
            val = [];
        }
        var newValue = [];
        for (var i = 0; i < val.length; i++) {
            var rItemVal = this.getRealValue(val[i]);
            var isUnkown = this.canClearValueAnUnknow(rItemVal);
            if ((!clearDisabled && !isUnkown) ||
                (clearDisabled && !this.isValueDisabled(rItemVal))) {
                newValue.push(val[i]);
            }
            else {
                hasChanged = true;
                if (isUnkown) {
                    this.addIntoInvisibleOldValues(val[i]);
                }
            }
        }
        for (var i = 0; i < restoredValues.length; i++) {
            newValue.push(restoredValues[i]);
            hasChanged = true;
        }
        if (!hasChanged)
            return;
        this.isChangingValueOnClearIncorrect = true;
        if (newValue.length == 0) {
            this.clearValue();
        }
        else {
            this.value = newValue;
        }
        this.isChangingValueOnClearIncorrect = false;
    };
    QuestionCheckboxModel.prototype.restoreValuesFromInvisible = function () {
        var res = [];
        var visItems = this.visibleChoices;
        for (var i = 0; i < visItems.length; i++) {
            var val = visItems[i].value;
            if (_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isTwoValueEquals(val, this.invisibleOldValues[val])) {
                if (!this.isItemSelected(visItems[i])) {
                    res.push(val);
                }
                delete this.invisibleOldValues[val];
            }
        }
        return res;
    };
    QuestionCheckboxModel.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        var json = _super.prototype.getConditionJson.call(this);
        if (operator == "contains" || operator == "notcontains") {
            json["type"] = "radiogroup";
        }
        return json;
    };
    QuestionCheckboxModel.prototype.isAnswerCorrect = function () {
        return _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isArrayContainsEqual(this.value, this.correctAnswer);
    };
    QuestionCheckboxModel.prototype.setDefaultValueWithOthers = function () {
        this.value = this.renderedValueFromDataCore(this.defaultValue);
    };
    QuestionCheckboxModel.prototype.getIsItemValue = function (val, item) {
        if (!val || !Array.isArray(val))
            return false;
        return val.indexOf(item.value) >= 0;
    };
    QuestionCheckboxModel.prototype.valueFromData = function (val) {
        if (!val)
            return val;
        if (!Array.isArray(val))
            return [_super.prototype.valueFromData.call(this, val)];
        var value = [];
        for (var i = 0; i < val.length; i++) {
            var choiceitem = _itemvalue__WEBPACK_IMPORTED_MODULE_4__["ItemValue"].getItemByValue(this.activeChoices, val[i]);
            if (!!choiceitem) {
                value.push(choiceitem.value);
            }
            else {
                value.push(val[i]);
            }
        }
        return value;
    };
    QuestionCheckboxModel.prototype.rendredValueFromData = function (val) {
        val = this.convertValueFromObject(val);
        return _super.prototype.rendredValueFromData.call(this, val);
    };
    QuestionCheckboxModel.prototype.rendredValueToData = function (val) {
        val = _super.prototype.rendredValueToData.call(this, val);
        return this.convertValueToObject(val);
    };
    QuestionCheckboxModel.prototype.convertValueFromObject = function (val) {
        if (!this.valuePropertyName)
            return val;
        return _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].convertArrayObjectToValue(val, this.valuePropertyName);
    };
    QuestionCheckboxModel.prototype.convertValueToObject = function (val) {
        if (!this.valuePropertyName)
            return val;
        var dest = undefined;
        if (!!this.survey && this.survey.questionCountByValueName(this.getValueName()) > 1) {
            dest = this.data.getValue(this.getValueName());
        }
        return _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].convertArrayValueToObject(val, this.valuePropertyName, dest);
    };
    QuestionCheckboxModel.prototype.renderedValueFromDataCore = function (val) {
        if (!val || !Array.isArray(val))
            val = [];
        if (!this.hasActiveChoices)
            return val;
        for (var i = 0; i < val.length; i++) {
            if (val[i] == this.otherItem.value)
                return val;
            if (this.hasUnknownValue(val[i], true, false)) {
                this.otherValue = val[i];
                var newVal = val.slice();
                newVal[i] = this.otherItem.value;
                return newVal;
            }
        }
        return val;
    };
    QuestionCheckboxModel.prototype.rendredValueToDataCore = function (val) {
        if (!val || !val.length)
            return val;
        for (var i = 0; i < val.length; i++) {
            if (val[i] == this.otherItem.value) {
                if (this.needConvertRenderedOtherToDataValue()) {
                    var newVal = val.slice();
                    newVal[i] = this.otherValue;
                    return newVal;
                }
            }
        }
        return val;
    };
    QuestionCheckboxModel.prototype.selectOtherValueFromComment = function (val) {
        var newVal = [];
        var rendVal = this.renderedValue;
        if (Array.isArray(rendVal)) {
            for (var i = 0; i < rendVal.length; i++) {
                if (rendVal[i] !== this.otherItem.value) {
                    newVal.push(rendVal[i]);
                }
            }
        }
        if (val) {
            newVal.push(this.otherItem.value);
        }
        this.value = newVal;
    };
    Object.defineProperty(QuestionCheckboxModel.prototype, "checkBoxSvgPath", {
        get: function () {
            return "M5,13l2-2l3,3l7-7l2,2l-9,9L5,13z";
        },
        enumerable: false,
        configurable: true
    });
    return QuestionCheckboxModel;
}(_question_baseselect__WEBPACK_IMPORTED_MODULE_2__["QuestionCheckboxBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("checkbox", [
    { name: "showSelectAllItem:boolean", alternativeName: "hasSelectAll" },
    { name: "separateSpecialChoices", visible: true },
    { name: "maxSelectedChoices:number", default: 0 },
    {
        name: "selectAllText",
        serializationProperty: "locSelectAllText",
        dependsOn: "showSelectAllItem",
        visibleIf: function (obj) {
            return obj.hasSelectAll;
        }
    },
    {
        name: "valuePropertyName",
        category: "data"
    },
    { name: "itemComponent", visible: false, default: "survey-checkbox-item" }
], function () {
    return new QuestionCheckboxModel("");
}, "checkboxbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("checkbox", function (name) {
    var q = new QuestionCheckboxModel(name);
    q.choices = _questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].DefaultChoices;
    return q;
});


/***/ }),

/***/ "./src/question_comment.ts":
/*!*********************************!*\
  !*** ./src/question_comment.ts ***!
  \*********************************/
/*! exports provided: QuestionCommentModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCommentModel", function() { return QuestionCommentModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_textbase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_textbase */ "./src/question_textbase.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * A class that describes the Comment question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-comment/ (linkStyle))
 */
var QuestionCommentModel = /** @class */ (function (_super) {
    __extends(QuestionCommentModel, _super);
    function QuestionCommentModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(QuestionCommentModel.prototype, "rows", {
        /**
         * Specifies the visible height of the comment area, measured in lines.
         *
         * The value of this property is passed on to the `rows` attribute of the underlying `<textarea>` element.
         * @see cols
         */
        get: function () {
            return this.getPropertyValue("rows");
        },
        set: function (val) {
            this.setPropertyValue("rows", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCommentModel.prototype, "cols", {
        /**
         * Specifies the visible width of the comment area, measured in average character width.
         *
         * The value of this property is passed on to the `cols` attribute of the underlying `<textarea>` element.
         * @see rows
         */
        get: function () {
            return this.getPropertyValue("cols");
        },
        set: function (val) {
            this.setPropertyValue("cols", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCommentModel.prototype, "acceptCarriageReturn", {
        /**
         * Specifies whether the question allows line breaks.
         *
         * When this property is enabled, a user can press Enter to insert line breaks. They are saved as `\n` in survey results. The Comment question also recognizes and interprets the `\n` sequence as a line break when you set the question `value` in code.
         */
        get: function () {
            return this.getPropertyValue("acceptCarriageReturn");
        },
        set: function (val) {
            this.setPropertyValue("acceptCarriageReturn", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCommentModel.prototype, "autoGrow", {
        /**
         * Specifies whether the comment area automatically increases its height to accomodate multi-line content.
         *
         * Default value: `false` (inherited from `SurveyModel`'s [`autoGrowComment`](https://surveyjs.io/form-library/documentation/surveymodel#autoGrowComment) property)
         */
        get: function () {
            return this.getPropertyValue("autoGrow") || (this.survey && this.survey.autoGrowComment);
        },
        set: function (val) {
            this.setPropertyValue("autoGrow", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionCommentModel.prototype.getType = function () {
        return "comment";
    };
    QuestionCommentModel.prototype.afterRenderQuestionElement = function (el) {
        this.element = document.getElementById(this.inputId) || el;
        this.updateElement();
        _super.prototype.afterRenderQuestionElement.call(this, el);
    };
    QuestionCommentModel.prototype.updateElement = function () {
        var _this = this;
        if (this.element && this.autoGrow) {
            setTimeout(function () { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["increaseHeightByContent"])(_this.element); }, 1);
        }
    };
    QuestionCommentModel.prototype.beforeDestroyQuestionElement = function (el) {
        _super.prototype.beforeDestroyQuestionElement.call(this, el);
        this.element = undefined;
    };
    QuestionCommentModel.prototype.onInput = function (event) {
        if (this.isInputTextUpdate)
            this.value = event.target.value;
        else
            this.updateElement();
        this.updateRemainingCharacterCounter(event.target.value);
    };
    QuestionCommentModel.prototype.onKeyDown = function (event) {
        if (!this.acceptCarriageReturn && (event.key === "Enter" || event.keyCode === 13)) {
            event.preventDefault();
            event.stopPropagation();
        }
    };
    QuestionCommentModel.prototype.onValueChanged = function () {
        _super.prototype.onValueChanged.call(this);
        this.updateElement();
    };
    QuestionCommentModel.prototype.setNewValue = function (newValue) {
        if (!this.acceptCarriageReturn && !!newValue) {
            // eslint-disable-next-line no-control-regex
            newValue = newValue.replace(new RegExp("(\r\n|\n|\r)", "gm"), "");
        }
        _super.prototype.setNewValue.call(this, newValue);
    };
    Object.defineProperty(QuestionCommentModel.prototype, "className", {
        get: function () {
            return (this.cssClasses ? this.getControlClass() : "panel-comment-root") || undefined;
        },
        enumerable: false,
        configurable: true
    });
    return QuestionCommentModel;
}(_question_textbase__WEBPACK_IMPORTED_MODULE_2__["QuestionTextBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("comment", [
    { name: "maxLength:number", default: -1 },
    { name: "cols:number", default: 50 },
    { name: "rows:number", default: 4 },
    { name: "placeholder",
        alternativeName: "placeHolder",
        serializationProperty: "locPlaceholder" },
    {
        name: "textUpdateMode",
        default: "default",
        choices: ["default", "onBlur", "onTyping"],
    },
    { name: "autoGrow:boolean" },
    { name: "acceptCarriageReturn:boolean", default: true, visible: false }
], function () {
    return new QuestionCommentModel("");
}, "textbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("comment", function (name) {
    return new QuestionCommentModel(name);
});


/***/ }),

/***/ "./src/question_custom.ts":
/*!********************************!*\
  !*** ./src/question_custom.ts ***!
  \********************************/
/*! exports provided: ComponentQuestionJSON, ComponentCollection, QuestionCustomModelBase, QuestionCustomModel, QuestionCompositeModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentQuestionJSON", function() { return ComponentQuestionJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentCollection", function() { return ComponentCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomModelBase", function() { return QuestionCustomModelBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCustomModel", function() { return QuestionCustomModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionCompositeModel", function() { return QuestionCompositeModel; });
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _textPreProcessor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textPreProcessor */ "./src/textPreProcessor.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ComponentQuestionJSON = /** @class */ (function () {
    function ComponentQuestionJSON(name, json) {
        this.name = name;
        this.json = json;
        var self = this;
        _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass(name, [], function (json) {
            return ComponentCollection.Instance.createQuestion(!!json ? json.name : "", self);
        }, "question");
        this.onInit();
    }
    ComponentQuestionJSON.prototype.onInit = function () {
        if (!this.json.onInit)
            return;
        this.json.onInit();
    };
    ComponentQuestionJSON.prototype.onCreated = function (question) {
        if (!this.json.onCreated)
            return;
        this.json.onCreated(question);
    };
    ComponentQuestionJSON.prototype.onLoaded = function (question) {
        if (!this.json.onLoaded)
            return;
        this.json.onLoaded(question);
    };
    ComponentQuestionJSON.prototype.onAfterRender = function (question, htmlElement) {
        if (!this.json.onAfterRender)
            return;
        this.json.onAfterRender(question, htmlElement);
    };
    ComponentQuestionJSON.prototype.onAfterRenderContentElement = function (question, element, htmlElement) {
        if (!this.json.onAfterRenderContentElement)
            return;
        this.json.onAfterRenderContentElement(question, element, htmlElement);
    };
    ComponentQuestionJSON.prototype.onUpdateQuestionCssClasses = function (question, element, css) {
        if (!this.json.onUpdateQuestionCssClasses)
            return;
        this.json.onUpdateQuestionCssClasses(question, element, css);
    };
    ComponentQuestionJSON.prototype.onPropertyChanged = function (question, propertyName, newValue) {
        if (!this.json.onPropertyChanged)
            return;
        this.json.onPropertyChanged(question, propertyName, newValue);
    };
    ComponentQuestionJSON.prototype.onValueChanged = function (question, name, newValue) {
        if (!this.json.onValueChanged)
            return;
        this.json.onValueChanged(question, name, newValue);
    };
    ComponentQuestionJSON.prototype.onItemValuePropertyChanged = function (question, item, propertyName, name, newValue) {
        if (!this.json.onItemValuePropertyChanged)
            return;
        this.json.onItemValuePropertyChanged(question, {
            obj: item,
            propertyName: propertyName,
            name: name,
            newValue: newValue,
        });
    };
    ComponentQuestionJSON.prototype.getDisplayValue = function (keyAsText, value, question) {
        if (!this.json.getDisplayValue)
            return question.getDisplayValue(keyAsText, value);
        return this.json.getDisplayValue(question);
    };
    Object.defineProperty(ComponentQuestionJSON.prototype, "isComposite", {
        get: function () {
            return !!this.json.elementsJSON || !!this.json.createElements;
        },
        enumerable: false,
        configurable: true
    });
    return ComponentQuestionJSON;
}());

var ComponentCollection = /** @class */ (function () {
    function ComponentCollection() {
        this.customQuestionValues = [];
    }
    ComponentCollection.prototype.add = function (json) {
        if (!json)
            return;
        var name = json.name;
        if (!name) {
            throw "Attribute name is missed";
        }
        name = name.toLowerCase();
        if (!!this.getCustomQuestionByName(name)) {
            throw "There is already registered custom question with name '" +
                name +
                "'";
        }
        if (!!_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(name)) {
            throw "There is already class with name '" + name + "'";
        }
        var customQuestion = new ComponentQuestionJSON(name, json);
        if (!!this.onAddingJson)
            this.onAddingJson(name, customQuestion.isComposite);
        this.customQuestionValues.push(customQuestion);
    };
    Object.defineProperty(ComponentCollection.prototype, "items", {
        get: function () {
            return this.customQuestionValues;
        },
        enumerable: false,
        configurable: true
    });
    ComponentCollection.prototype.getCustomQuestionByName = function (name) {
        for (var i = 0; i < this.customQuestionValues.length; i++) {
            if (this.customQuestionValues[i].name == name)
                return this.customQuestionValues[i];
        }
        return null;
    };
    ComponentCollection.prototype.clear = function () {
        for (var i = 0; i < this.customQuestionValues.length; i++) {
            _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].removeClass(this.customQuestionValues[i].name);
        }
        this.customQuestionValues = [];
    };
    ComponentCollection.prototype.createQuestion = function (name, questionJSON) {
        if (!!questionJSON.isComposite)
            return this.createCompositeModel(name, questionJSON);
        return this.createCustomModel(name, questionJSON);
    };
    ComponentCollection.prototype.createCompositeModel = function (name, questionJSON) {
        if (!!this.onCreateComposite)
            return this.onCreateComposite(name, questionJSON);
        return new QuestionCompositeModel(name, questionJSON);
    };
    ComponentCollection.prototype.createCustomModel = function (name, questionJSON) {
        if (!!this.onCreateCustom)
            return this.onCreateCustom(name, questionJSON);
        return new QuestionCustomModel(name, questionJSON);
    };
    ComponentCollection.Instance = new ComponentCollection();
    return ComponentCollection;
}());

var QuestionCustomModelBase = /** @class */ (function (_super) {
    __extends(QuestionCustomModelBase, _super);
    function QuestionCustomModelBase(name, customQuestion) {
        var _this = _super.call(this, name) || this;
        _this.customQuestion = customQuestion;
        _jsonobject__WEBPACK_IMPORTED_MODULE_1__["CustomPropertiesCollection"].createProperties(_this);
        _survey_element__WEBPACK_IMPORTED_MODULE_2__["SurveyElement"].CreateDisabledDesignElements = true;
        _this.createWrapper();
        _survey_element__WEBPACK_IMPORTED_MODULE_2__["SurveyElement"].CreateDisabledDesignElements = false;
        if (!!_this.customQuestion) {
            _this.customQuestion.onCreated(_this);
        }
        return _this;
    }
    QuestionCustomModelBase.prototype.getType = function () {
        return !!this.customQuestion ? this.customQuestion.name : "custom";
    };
    QuestionCustomModelBase.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        if (!!this.getElement()) {
            this.getElement().locStrsChanged();
        }
    };
    QuestionCustomModelBase.prototype.createWrapper = function () { };
    QuestionCustomModelBase.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (!!this.customQuestion && !this.isLoadingFromJson) {
            this.customQuestion.onPropertyChanged(this, name, newValue);
        }
    };
    QuestionCustomModelBase.prototype.itemValuePropertyChanged = function (item, name, oldValue, newValue) {
        _super.prototype.itemValuePropertyChanged.call(this, item, name, oldValue, newValue);
        if (!!this.customQuestion && !this.isLoadingFromJson) {
            this.customQuestion.onItemValuePropertyChanged(this, item, item.ownerPropertyName, name, newValue);
        }
    };
    QuestionCustomModelBase.prototype.onFirstRendering = function () {
        var el = this.getElement();
        if (!!el) {
            el.onFirstRendering();
        }
        _super.prototype.onFirstRendering.call(this);
    };
    QuestionCustomModelBase.prototype.getProgressInfo = function () {
        var res = _super.prototype.getProgressInfo.call(this);
        if (!!this.getElement()) {
            res = this.getElement().getProgressInfo();
        }
        if (this.isRequired && res.requiredQuestionCount == 0) {
            res.requiredQuestionCount = 1;
            if (!this.isEmpty()) {
                res.answeredQuestionCount = 1;
            }
        }
        return res;
    };
    QuestionCustomModelBase.prototype.initElement = function (el) {
        if (!el)
            return;
        el.setSurveyImpl(this);
        el.disableDesignActions = true;
    };
    QuestionCustomModelBase.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        this.initElement(this.getElement());
    };
    QuestionCustomModelBase.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        if (!!this.getElement()) {
            this.getElement().onSurveyLoad();
            this.customQuestion.onLoaded(this);
        }
    };
    QuestionCustomModelBase.prototype.afterRenderQuestionElement = function (el) {
        //Do nothing
    };
    QuestionCustomModelBase.prototype.afterRender = function (el) {
        _super.prototype.afterRender.call(this, el);
        if (!!this.customQuestion) {
            this.customQuestion.onAfterRender(this, el);
        }
    };
    QuestionCustomModelBase.prototype.onUpdateQuestionCssClasses = function (element, css) {
        if (!!this.customQuestion) {
            this.customQuestion.onUpdateQuestionCssClasses(this, element, css);
        }
    };
    QuestionCustomModelBase.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        _super.prototype.setQuestionValue.call(this, newValue, updateIsAnswered);
        this.updateElementCss();
    };
    QuestionCustomModelBase.prototype.setNewValue = function (newValue) {
        _super.prototype.setNewValue.call(this, newValue);
        this.updateElementCss();
    };
    //ISurveyImpl
    QuestionCustomModelBase.prototype.getSurveyData = function () {
        return this;
    };
    // getSurvey(): ISurvey {
    //   return this.survey;
    // }
    QuestionCustomModelBase.prototype.getTextProcessor = function () {
        return this.textProcessor;
    };
    //ISurveyData
    QuestionCustomModelBase.prototype.getValue = function (name) {
        return this.value;
    };
    QuestionCustomModelBase.prototype.setValue = function (name, newValue, locNotification, allowNotifyValueChanged) {
        if (!this.data)
            return;
        var newName = this.convertDataName(name);
        this.data.setValue(newName, this.convertDataValue(name, newValue), locNotification, allowNotifyValueChanged);
        this.updateIsAnswered();
        this.updateElementCss();
        if (!!this.customQuestion) {
            this.customQuestion.onValueChanged(this, name, newValue);
        }
    };
    QuestionCustomModelBase.prototype.convertDataName = function (name) {
        return this.getValueName();
    };
    QuestionCustomModelBase.prototype.convertDataValue = function (name, newValue) {
        return newValue;
    };
    QuestionCustomModelBase.prototype.getVariable = function (name) {
        return !!this.data ? this.data.getVariable(name) : null;
    };
    QuestionCustomModelBase.prototype.setVariable = function (name, newValue) {
        if (!this.data)
            return;
        this.data.setVariable(name, newValue);
    };
    QuestionCustomModelBase.prototype.getComment = function (name) {
        return !!this.data ? this.data.getComment(this.getValueName()) : "";
    };
    QuestionCustomModelBase.prototype.setComment = function (name, newValue, locNotification) {
        if (!this.data)
            return;
        this.data.setComment(this.getValueName(), newValue, locNotification);
    };
    QuestionCustomModelBase.prototype.getAllValues = function () {
        return !!this.data ? this.data.getAllValues() : {};
    };
    QuestionCustomModelBase.prototype.getFilteredValues = function () {
        return !!this.data ? this.data.getFilteredValues() : {};
    };
    QuestionCustomModelBase.prototype.getFilteredProperties = function () {
        return !!this.data ? this.data.getFilteredProperties() : {};
    };
    QuestionCustomModelBase.prototype.findQuestionByName = function (name) {
        return !!this.data ? this.data.findQuestionByName(name) : null;
    };
    //IPanel
    QuestionCustomModelBase.prototype.addElement = function (element, index) { };
    QuestionCustomModelBase.prototype.removeElement = function (element) {
        return false;
    };
    QuestionCustomModelBase.prototype.getQuestionTitleLocation = function () {
        return "left";
    };
    QuestionCustomModelBase.prototype.getQuestionStartIndex = function () {
        return this.getStartIndex();
    };
    QuestionCustomModelBase.prototype.getChildrenLayoutType = function () {
        return "row";
    };
    QuestionCustomModelBase.prototype.elementWidthChanged = function (el) { };
    Object.defineProperty(QuestionCustomModelBase.prototype, "elements", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    QuestionCustomModelBase.prototype.indexOf = function (el) {
        return -1;
    };
    QuestionCustomModelBase.prototype.ensureRowsVisibility = function () {
        // do nothing
    };
    QuestionCustomModelBase.prototype.getContentDisplayValueCore = function (keyAsText, value, question) {
        if (!question)
            return _super.prototype.getDisplayValueCore.call(this, keyAsText, value);
        return this.customQuestion.getDisplayValue(keyAsText, value, question);
    };
    return QuestionCustomModelBase;
}(_question__WEBPACK_IMPORTED_MODULE_0__["Question"]));

var QuestionCustomModel = /** @class */ (function (_super) {
    __extends(QuestionCustomModel, _super);
    function QuestionCustomModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QuestionCustomModel.prototype.getTemplate = function () {
        return "custom";
    };
    QuestionCustomModel.prototype.createWrapper = function () {
        this.questionWrapper = this.createQuestion();
    };
    QuestionCustomModel.prototype.getElement = function () {
        return this.contentQuestion;
    };
    QuestionCustomModel.prototype.onAnyValueChanged = function (name) {
        _super.prototype.onAnyValueChanged.call(this, name);
        if (!!this.contentQuestion) {
            this.contentQuestion.onAnyValueChanged(name);
        }
    };
    QuestionCustomModel.prototype.hasErrors = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        if (!this.contentQuestion)
            return false;
        var res = this.contentQuestion.hasErrors(fireCallback, rec);
        this.errors = [];
        for (var i = 0; i < this.contentQuestion.errors.length; i++) {
            this.errors.push(this.contentQuestion.errors[i]);
        }
        if (!res) {
            res = _super.prototype.hasErrors.call(this, fireCallback, rec);
        }
        this.updateElementCss();
        return res;
    };
    QuestionCustomModel.prototype.focus = function (onError) {
        if (onError === void 0) { onError = false; }
        if (!!this.contentQuestion) {
            this.contentQuestion.focus(onError);
        }
        else {
            _super.prototype.focus.call(this, onError);
        }
    };
    Object.defineProperty(QuestionCustomModel.prototype, "contentQuestion", {
        get: function () {
            return this.questionWrapper;
        },
        enumerable: false,
        configurable: true
    });
    QuestionCustomModel.prototype.createQuestion = function () {
        var _this = this;
        var json = this.customQuestion.json;
        var res = null;
        if (!!json.questionJSON) {
            var qType = json.questionJSON.type;
            if (!qType || !_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findClass(qType))
                throw "type attribute in questionJSON is empty or incorrect";
            res = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(qType);
            this.initElement(res);
            res.fromJSON(json.questionJSON);
        }
        else {
            if (!!json.createQuestion) {
                res = json.createQuestion();
                this.initElement(res);
            }
        }
        if (!!res) {
            res.isContentElement = true;
            if (!res.name) {
                res.name = "question";
            }
            res.onUpdateCssClassesCallback = function (css) {
                _this.onUpdateQuestionCssClasses(res, css);
            };
        }
        return res;
    };
    QuestionCustomModel.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        if (!this.contentQuestion)
            return;
        if (this.isEmpty() && !this.contentQuestion.isEmpty()) {
            this.value = this.contentQuestion.value;
        }
    };
    QuestionCustomModel.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        if (!!this.contentQuestion) {
            this.contentQuestion.runCondition(values, properties);
        }
    };
    QuestionCustomModel.prototype.convertDataName = function (name) {
        if (!this.contentQuestion)
            return _super.prototype.convertDataName.call(this, name);
        var newName = name.replace(this.contentQuestion.getValueName(), this.getValueName());
        return newName.indexOf(this.getValueName()) == 0
            ? newName
            : _super.prototype.convertDataName.call(this, name);
    };
    QuestionCustomModel.prototype.convertDataValue = function (name, newValue) {
        return this.convertDataName(name) == _super.prototype.convertDataName.call(this, name)
            ? this.contentQuestion.value
            : newValue;
    };
    QuestionCustomModel.prototype.canSetValueToSurvey = function () {
        return false;
    };
    QuestionCustomModel.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        _super.prototype.setQuestionValue.call(this, newValue, updateIsAnswered);
        if (!this.isLoadingFromJson && !!this.contentQuestion &&
            !this.isTwoValueEquals(this.contentQuestion.value, newValue)) {
            this.contentQuestion.value = this.getUnbindValue(newValue);
        }
    };
    QuestionCustomModel.prototype.onSurveyValueChanged = function (newValue) {
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        if (!!this.contentQuestion) {
            this.contentQuestion.onSurveyValueChanged(newValue);
        }
    };
    QuestionCustomModel.prototype.getValueCore = function () {
        if (!!this.contentQuestion)
            return this.contentQuestion.value;
        return _super.prototype.getValueCore.call(this);
    };
    QuestionCustomModel.prototype.initElement = function (el) {
        var _this = this;
        _super.prototype.initElement.call(this, el);
        if (!!el) {
            el.parent = this;
            el.afterRenderQuestionCallback = function (question, element) {
                if (!!_this.customQuestion) {
                    _this.customQuestion.onAfterRenderContentElement(_this, question, element);
                }
            };
        }
    };
    QuestionCustomModel.prototype.updateElementCss = function (reNew) {
        if (!!this.contentQuestion) {
            this.questionWrapper.updateElementCss(reNew);
        }
        _super.prototype.updateElementCss.call(this, reNew);
    };
    QuestionCustomModel.prototype.updateElementCssCore = function (cssClasses) {
        if (!!this.contentQuestion) {
            cssClasses = this.contentQuestion.cssClasses;
        }
        _super.prototype.updateElementCssCore.call(this, cssClasses);
    };
    QuestionCustomModel.prototype.getDisplayValueCore = function (keyAsText, value) {
        return _super.prototype.getContentDisplayValueCore.call(this, keyAsText, value, this.contentQuestion);
    };
    return QuestionCustomModel;
}(QuestionCustomModelBase));

var QuestionCompositeTextProcessor = /** @class */ (function (_super) {
    __extends(QuestionCompositeTextProcessor, _super);
    function QuestionCompositeTextProcessor(composite, variableName) {
        var _this = _super.call(this, variableName) || this;
        _this.composite = composite;
        _this.variableName = variableName;
        return _this;
    }
    Object.defineProperty(QuestionCompositeTextProcessor.prototype, "survey", {
        get: function () {
            return this.composite.survey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionCompositeTextProcessor.prototype, "panel", {
        get: function () {
            return this.composite.contentPanel;
        },
        enumerable: false,
        configurable: true
    });
    return QuestionCompositeTextProcessor;
}(_textPreProcessor__WEBPACK_IMPORTED_MODULE_4__["QuestionTextProcessor"]));
var QuestionCompositeModel = /** @class */ (function (_super) {
    __extends(QuestionCompositeModel, _super);
    function QuestionCompositeModel(name, customQuestion) {
        var _this = _super.call(this, name, customQuestion) || this;
        _this.customQuestion = customQuestion;
        _this.settingNewValue = false;
        _this.textProcessing = new QuestionCompositeTextProcessor(_this, QuestionCompositeModel.ItemVariableName);
        return _this;
    }
    QuestionCompositeModel.prototype.createWrapper = function () {
        this.panelWrapper = this.createPanel();
    };
    QuestionCompositeModel.prototype.getTemplate = function () {
        return "composite";
    };
    QuestionCompositeModel.prototype.getElement = function () {
        return this.contentPanel;
    };
    QuestionCompositeModel.prototype.getCssRoot = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]().append(_super.prototype.getCssRoot.call(this, cssClasses)).append(cssClasses.composite).toString();
    };
    Object.defineProperty(QuestionCompositeModel.prototype, "contentPanel", {
        get: function () {
            return this.panelWrapper;
        },
        enumerable: false,
        configurable: true
    });
    QuestionCompositeModel.prototype.hasErrors = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        var res = _super.prototype.hasErrors.call(this, fireCallback, rec);
        if (!this.contentPanel)
            return res;
        return this.contentPanel.hasErrors(fireCallback, false, rec) || res;
    };
    QuestionCompositeModel.prototype.updateElementCss = function (reNew) {
        _super.prototype.updateElementCss.call(this, reNew);
        if (this.contentPanel) {
            this.contentPanel.updateElementCss(reNew);
        }
    };
    QuestionCompositeModel.prototype.getTextProcessor = function () {
        return this.textProcessing;
    };
    QuestionCompositeModel.prototype.findQuestionByName = function (name) {
        if (!!this.contentPanel) {
            var res = this.contentPanel.getQuestionByName(name);
            if (!!res)
                return res;
        }
        return _super.prototype.findQuestionByName.call(this, name);
    };
    QuestionCompositeModel.prototype.clearValueIfInvisibleCore = function () {
        _super.prototype.clearValueIfInvisibleCore.call(this);
        var questions = this.contentPanel.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].clearValueIfInvisible();
        }
    };
    QuestionCompositeModel.prototype.onAnyValueChanged = function (name) {
        _super.prototype.onAnyValueChanged.call(this, name);
        var questions = this.contentPanel.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].onAnyValueChanged(name);
        }
    };
    QuestionCompositeModel.prototype.createPanel = function () {
        var _this = this;
        var res = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("panel");
        res.showQuestionNumbers = "off";
        res.renderWidth = "100%";
        var json = this.customQuestion.json;
        if (!!json.elementsJSON) {
            res.fromJSON({ elements: json.elementsJSON });
        }
        if (!!json.createElements) {
            json.createElements(res, this);
        }
        this.initElement(res);
        res.readOnly = this.isReadOnly;
        res.questions.forEach(function (q) { return q.onUpdateCssClassesCallback = function (css) {
            _this.onUpdateQuestionCssClasses(q, css);
        }; });
        this.setAfterRenderCallbacks(res);
        return res;
    };
    QuestionCompositeModel.prototype.onReadOnlyChanged = function () {
        if (!!this.contentPanel) {
            this.contentPanel.readOnly = this.isReadOnly;
        }
        _super.prototype.onReadOnlyChanged.call(this);
    };
    QuestionCompositeModel.prototype.onSurveyLoad = function () {
        if (!!this.contentPanel) {
            this.contentPanel.readOnly = this.isReadOnly;
            this.setIsContentElement(this.contentPanel);
        }
        _super.prototype.onSurveyLoad.call(this);
        if (!!this.contentPanel) {
            var val = this.contentPanel.getValue();
            if (!_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isValueEmpty(val)) {
                this.value = val;
            }
        }
    };
    QuestionCompositeModel.prototype.setIsContentElement = function (panel) {
        panel.isContentElement = true;
        var elements = panel.elements;
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            if (el.isPanel) {
                this.setIsContentElement(el);
            }
            else {
                el.isContentElement = true;
            }
        }
    };
    QuestionCompositeModel.prototype.setVisibleIndex = function (val) {
        var res = _super.prototype.setVisibleIndex.call(this, val);
        if (this.isVisible && !!this.contentPanel) {
            res += this.contentPanel.setVisibleIndex(val);
        }
        return res;
    };
    QuestionCompositeModel.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        if (!!this.contentPanel) {
            var oldComposite = values[QuestionCompositeModel.ItemVariableName];
            values[QuestionCompositeModel.ItemVariableName] = this.contentPanel.getValue();
            this.contentPanel.runCondition(values, properties);
            delete values[QuestionCompositeModel.ItemVariableName];
            if (!!oldComposite) {
                values[QuestionCompositeModel.ItemVariableName] = oldComposite;
            }
        }
    };
    QuestionCompositeModel.prototype.getValue = function (name) {
        var val = this.value;
        return !!val ? val[name] : null;
    };
    QuestionCompositeModel.prototype.setValue = function (name, newValue, locNotification, allowNotifyValueChanged) {
        if (this.settingNewValue)
            return;
        this.settingNewValue = true;
        if (!this.isEditingSurveyElement && !!this.contentPanel) {
            var panelValue = this.contentPanel.getValue();
            if (!this.isTwoValueEquals(this.getValueCore(), panelValue)) {
                this.setValueCore(panelValue);
            }
        }
        _super.prototype.setValue.call(this, name, newValue, locNotification, allowNotifyValueChanged);
        if (!!this.contentPanel) {
            var q = this.contentPanel.getQuestionByName(name);
            if (!!q && !this.isTwoValueEquals(newValue, q.value)) {
                q.value = newValue;
            }
        }
        this.settingNewValue = false;
    };
    QuestionCompositeModel.prototype.addConditionObjectsByContext = function (objects, context) {
        if (!this.contentPanel)
            return;
        var questions = this.contentPanel.questions;
        var prefixName = this.name;
        var prefixText = this.title;
        for (var i = 0; i < questions.length; i++) {
            objects.push({
                name: prefixName + "." + questions[i].name,
                text: prefixText + "." + questions[i].title,
                question: questions[i],
            });
        }
    };
    QuestionCompositeModel.prototype.convertDataValue = function (name, newValue) {
        var val = this.value;
        if (!val)
            val = {};
        if (this.isValueEmpty(newValue) && !this.isEditingSurveyElement) {
            delete val[name];
        }
        else {
            val[name] = newValue;
        }
        return val;
    };
    QuestionCompositeModel.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        _super.prototype.setQuestionValue.call(this, newValue, updateIsAnswered);
        this.settingNewValue = true;
        var questions = this.contentPanel.questions;
        for (var i = 0; i < questions.length; i++) {
            var key = questions[i].getValueName();
            questions[i].value = !!newValue ? newValue[key] : undefined;
        }
        this.settingNewValue = false;
    };
    QuestionCompositeModel.prototype.getDisplayValueCore = function (keyAsText, value) {
        return _super.prototype.getContentDisplayValueCore.call(this, keyAsText, value, this.contentPanel);
    };
    QuestionCompositeModel.prototype.setAfterRenderCallbacks = function (panel) {
        var _this = this;
        if (!panel || !this.customQuestion)
            return;
        var questions = panel.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].afterRenderQuestionCallback = function (question, element) {
                _this.customQuestion.onAfterRenderContentElement(_this, question, element);
            };
        }
    };
    QuestionCompositeModel.ItemVariableName = "composite";
    return QuestionCompositeModel;
}(QuestionCustomModelBase));



/***/ }),

/***/ "./src/question_dropdown.ts":
/*!**********************************!*\
  !*** ./src/question_dropdown.ts ***!
  \**********************************/
/*! exports provided: QuestionDropdownModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionDropdownModel", function() { return QuestionDropdownModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_baseselect */ "./src/question_baseselect.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _dropdownListModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dropdownListModel */ "./src/dropdownListModel.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







/**
 * A class that describes the Dropdown question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-dropdown/ (linkStyle))
 */
var QuestionDropdownModel = /** @class */ (function (_super) {
    __extends(QuestionDropdownModel, _super);
    function QuestionDropdownModel(name) {
        var _this = _super.call(this, name) || this;
        _this.lastSelectedItemValue = null;
        _this.minMaxChoices = [];
        _this.onOpened = _this.addEvent();
        _this.createLocalizableString("placeholder", _this, false, true);
        _this.createLocalizableString("clearCaption", _this, false, true);
        _this.registerPropertyChangedHandlers(["choicesMin", "choicesMax", "choicesStep"], function () {
            _this.onVisibleChoicesChanged();
        });
        _this.registerPropertyChangedHandlers(["value", "renderAs", "showOtherItem", "otherText", "placeholder", "choices"], function () {
            _this.updateReadOnlyText();
        });
        _this.updateReadOnlyText();
        return _this;
    }
    QuestionDropdownModel.prototype.updateReadOnlyText = function () {
        var result = !!this.selectedItem ? "" : this.placeholder;
        if (this.renderAs == "select") {
            if (this.isOtherSelected) {
                result = this.otherText;
            }
            else if (this.isNoneSelected) {
                result = this.noneText;
            }
            else if (!!this.selectedItem) {
                result = this.selectedItemText;
            }
        }
        this.readOnlyText = result;
    };
    QuestionDropdownModel.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.updateReadOnlyText();
    };
    Object.defineProperty(QuestionDropdownModel.prototype, "showOptionsCaption", {
        get: function () {
            return this.allowClear;
        },
        set: function (val) {
            this.allowClear = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "optionsCaption", {
        get: function () {
            return this.placeholder;
        },
        set: function (val) {
            this.placeholder = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "placeholder", {
        /**
         * A placeholder for the input field.
         */
        get: function () {
            return this.getLocalizableStringText("placeholder");
        },
        set: function (val) {
            this.setLocalizableStringText("placeholder", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "locPlaceholder", {
        get: function () {
            return this.getLocalizableString("placeholder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "clearCaption", {
        get: function () {
            return this.getLocalizableStringText("clearCaption");
        },
        set: function (value) {
            this.setLocalizableStringText("clearCaption", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "locClearCaption", {
        get: function () {
            return this.getLocalizableString("clearCaption");
        },
        enumerable: false,
        configurable: true
    });
    QuestionDropdownModel.prototype.getType = function () {
        return "dropdown";
    };
    Object.defineProperty(QuestionDropdownModel.prototype, "ariaRole", {
        get: function () {
            return "combobox";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "selectedItem", {
        get: function () {
            var selectedItemValues = this.selectedItemValues;
            if (this.isEmpty())
                return null;
            var itemValue = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(this.visibleChoices, this.value);
            if (!!itemValue) {
                this.lastSelectedItemValue = itemValue;
            }
            else if (!selectedItemValues) {
                this.updateSelectedItemValues();
            }
            return this.lastSelectedItemValue || selectedItemValues || new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](this.value);
        },
        enumerable: false,
        configurable: true
    });
    QuestionDropdownModel.prototype.supportGoNextPageAutomatic = function () {
        return true;
    };
    QuestionDropdownModel.prototype.getChoices = function () {
        var items = _super.prototype.getChoices.call(this);
        if (this.choicesMax <= this.choicesMin)
            return items;
        var res = [];
        for (var i = 0; i < items.length; i++) {
            res.push(items[i]);
        }
        if (this.minMaxChoices.length === 0 ||
            this.minMaxChoices.length !==
                (this.choicesMax - this.choicesMin) / this.choicesStep + 1) {
            this.minMaxChoices = [];
            for (var i = this.choicesMin; i <= this.choicesMax; i += this.choicesStep) {
                this.minMaxChoices.push(new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](i));
            }
        }
        res = res.concat(this.minMaxChoices);
        return res;
    };
    Object.defineProperty(QuestionDropdownModel.prototype, "choicesMin", {
        /**
         * Use the `choicesMin`, `choicesMax`, and `choicesStep` properties to generate choice items automatically. For example, the configuration below generates three choice items: [10, 20, 30].
         *
         * ```js
         * "choicesMin": 10,
         * "choicesMax": 30
         * "choicesStep": 10
         * ```
         * @see choicesMax
         * @see choicesStep
         */
        get: function () {
            return this.getPropertyValue("choicesMin");
        },
        set: function (val) {
            this.setPropertyValue("choicesMin", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "choicesMax", {
        /**
         * Use the `choicesMin`, `choicesMax`, and `choicesStep` properties to generate choice items automatically. For example, the configuration below generates three choice items: [10, 20, 30].
         *
         * ```js
         * "choicesMin": 10,
         * "choicesMax": 30
         * "choicesStep": 10
         * ```
         * @see choicesMin
         * @see choicesStep
         */
        get: function () {
            return this.getPropertyValue("choicesMax");
        },
        set: function (val) {
            this.setPropertyValue("choicesMax", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "choicesStep", {
        /**
         * Use the `choicesMin`, `choicesMax`, and `choicesStep` properties to generate choice items automatically. For example, the configuration below generates three choice items: [10, 20, 30].
         *
         * ```js
         * "choicesMin": 10,
         * "choicesMax": 30
         * "choicesStep": 10
         * ```
         *
         * The default value of the `choicesStep` property is 1.
         * @see choicesMin
         * @see choicesMax
         */
        get: function () {
            return this.getPropertyValue("choicesStep");
        },
        set: function (val) {
            if (val < 1)
                val = 1;
            this.setPropertyValue("choicesStep", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "autocomplete", {
        get: function () {
            return this.getPropertyValue("autocomplete", "");
        },
        set: function (val) {
            this.setPropertyValue("autocomplete", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionDropdownModel.prototype.getControlClass = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(this.cssClasses.control)
            .append(this.cssClasses.controlEmpty, this.isEmpty())
            .append(this.cssClasses.onError, this.errors.length > 0)
            .append(this.cssClasses.controlDisabled, this.isReadOnly)
            .append(this.cssClasses.controlInputFieldComponent, !!this.inputFieldComponentName)
            .toString();
    };
    Object.defineProperty(QuestionDropdownModel.prototype, "selectedItemLocText", {
        get: function () {
            var item = this.selectedItem;
            return item === null || item === void 0 ? void 0 : item.locText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "inputFieldComponentName", {
        get: function () {
            return this.inputFieldComponent || this.itemComponent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "showSelectedItemLocText", {
        get: function () {
            return !this.inputHasValue && !this.inputFieldComponentName && !!this.selectedItemLocText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "showInputFieldComponent", {
        get: function () {
            return !this.inputHasValue && !!this.inputFieldComponentName && !this.isEmpty();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "selectedItemText", {
        get: function () {
            var item = this.selectedItem;
            return !!item ? item.text : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionDropdownModel.prototype, "popupModel", {
        get: function () {
            var _a;
            if (this.renderAs !== "select" && !this.dropdownListModel) {
                this.dropdownListModel = new _dropdownListModel__WEBPACK_IMPORTED_MODULE_5__["DropdownListModel"](this);
            }
            return (_a = this.dropdownListModel) === null || _a === void 0 ? void 0 : _a.popupModel;
        },
        enumerable: false,
        configurable: true
    });
    QuestionDropdownModel.prototype.onOpenedCallBack = function () {
        this.onOpened.fire(this, { question: this, choices: this.choices });
    };
    QuestionDropdownModel.prototype.hasUnknownValue = function (val, includeOther, isFilteredChoices, checkEmptyValue) {
        if (this.choicesLazyLoadEnabled) {
            return false;
        }
        return _super.prototype.hasUnknownValue.call(this, val, includeOther, isFilteredChoices, checkEmptyValue);
    };
    QuestionDropdownModel.prototype.onVisibleChoicesChanged = function () {
        _super.prototype.onVisibleChoicesChanged.call(this);
        if (this.popupModel) {
            this.dropdownListModel.updateItems();
        }
    };
    QuestionDropdownModel.prototype.getFirstInputElementId = function () {
        return this.inputId + (this.searchEnabled ? "_0" : "");
    };
    QuestionDropdownModel.prototype.getInputId = function () {
        return this.inputId + "_0";
    };
    QuestionDropdownModel.prototype.clearValue = function () {
        _super.prototype.clearValue.call(this);
        this.lastSelectedItemValue = null;
    };
    QuestionDropdownModel.prototype.onClick = function (e) {
        !!this.onOpenedCallBack && this.onOpenedCallBack();
    };
    QuestionDropdownModel.prototype.onKeyUp = function (event) {
        var char = event.which || event.keyCode;
        if (char === 46) {
            this.clearValue();
            event.preventDefault();
            event.stopPropagation();
        }
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], QuestionDropdownModel.prototype, "allowClear", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({
            defaultValue: true,
            onSet: function (newValue, target) {
                if (!!target.dropdownListModel) {
                    target.dropdownListModel.setSearchEnabled(newValue);
                }
            }
        })
    ], QuestionDropdownModel.prototype, "searchEnabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionDropdownModel.prototype, "inputHasValue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: "" })
    ], QuestionDropdownModel.prototype, "readOnlyText", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionDropdownModel.prototype, "choicesLazyLoadEnabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: 25 })
    ], QuestionDropdownModel.prototype, "choicesLazyLoadPageSize", void 0);
    return QuestionDropdownModel;
}(_question_baseselect__WEBPACK_IMPORTED_MODULE_2__["QuestionSelectBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("dropdown", [
    { name: "placeholder", alternativeName: "optionsCaption", serializationProperty: "locPlaceholder" },
    { name: "allowClear:boolean", alternativeName: "showOptionsCaption", default: true },
    { name: "choicesMin:number", default: 0 },
    { name: "choicesMax:number", default: 0 },
    { name: "choicesStep:number", default: 1, minValue: 1 },
    { name: "autocomplete", alternativeName: "autoComplete", choices: _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].questions.dataList, },
    { name: "renderAs", default: "default", visible: false },
    { name: "searchEnabled:boolean", default: true, visible: false },
    { name: "choicesLazyLoadEnabled:boolean", default: false, visible: false },
    { name: "choicesLazyLoadPageSize:number", default: 25, visible: false },
    { name: "inputFieldComponent", visible: false },
    { name: "itemComponent", visible: false, default: "" }
], function () {
    return new QuestionDropdownModel("");
}, "selectbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("dropdown", function (name) {
    var q = new QuestionDropdownModel(name);
    q.choices = _questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].DefaultChoices;
    return q;
});


/***/ }),

/***/ "./src/question_empty.ts":
/*!*******************************!*\
  !*** ./src/question_empty.ts ***!
  \*******************************/
/*! exports provided: QuestionEmptyModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionEmptyModel", function() { return QuestionEmptyModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question */ "./src/question.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * A Model for an question that renders empty "div" tag. It used as a base class for some custom widgets
 */
var QuestionEmptyModel = /** @class */ (function (_super) {
    __extends(QuestionEmptyModel, _super);
    function QuestionEmptyModel(name) {
        return _super.call(this, name) || this;
    }
    QuestionEmptyModel.prototype.getType = function () {
        return "empty";
    };
    return QuestionEmptyModel;
}(_question__WEBPACK_IMPORTED_MODULE_1__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("empty", [], function () {
    return new QuestionEmptyModel("");
}, "question");


/***/ }),

/***/ "./src/question_expression.ts":
/*!************************************!*\
  !*** ./src/question_expression.ts ***!
  \************************************/
/*! exports provided: QuestionExpressionModel, getCurrecyCodes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionExpressionModel", function() { return QuestionExpressionModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrecyCodes", function() { return getCurrecyCodes; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





/**
 * A class that describes the Expression question type. It is a read-only question type that calculates a value based on a specified expression.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-expression/ (linkStyle))
 */
var QuestionExpressionModel = /** @class */ (function (_super) {
    __extends(QuestionExpressionModel, _super);
    function QuestionExpressionModel(name) {
        var _this = _super.call(this, name) || this;
        _this.createLocalizableString("format", _this);
        _this.registerPropertyChangedHandlers(["expression"], function () {
            if (_this.expressionRunner) {
                _this.expressionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_4__["ExpressionRunner"](_this.expression);
            }
        });
        _this.registerPropertyChangedHandlers(["format", "currency", "displayStyle"], function () {
            _this.updateFormatedValue();
        });
        return _this;
    }
    QuestionExpressionModel.prototype.getType = function () {
        return "expression";
    };
    Object.defineProperty(QuestionExpressionModel.prototype, "hasInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "format", {
        /**
         * A string that formats a question value. Use `{0}` to reference the question value in the format string.
         * @see displayStyle
         */
        get: function () {
            return this.getLocalizableStringText("format", "");
        },
        set: function (val) {
            this.setLocalizableStringText("format", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "locFormat", {
        get: function () {
            return this.getLocalizableString("format");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "expression", {
        /**
         * An expression used to calculate the question value.
         *
         * Refer to the following help topic for more information: [Expressions](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#expressions).
         */
        get: function () {
            return this.getPropertyValue("expression", "");
        },
        set: function (val) {
            this.setPropertyValue("expression", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionExpressionModel.prototype.locCalculation = function () {
        this.expressionIsRunning = true;
    };
    QuestionExpressionModel.prototype.unlocCalculation = function () {
        this.expressionIsRunning = false;
    };
    QuestionExpressionModel.prototype.runCondition = function (values, properties) {
        var _this = this;
        _super.prototype.runCondition.call(this, values, properties);
        if (!this.expression ||
            this.expressionIsRunning ||
            (!this.runIfReadOnly && this.isReadOnly))
            return;
        this.locCalculation();
        if (!this.expressionRunner) {
            this.expressionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_4__["ExpressionRunner"](this.expression);
        }
        this.expressionRunner.onRunComplete = function (newValue) {
            if (!_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(newValue, _this.value)) {
                _this.value = newValue;
            }
            _this.unlocCalculation();
        };
        this.expressionRunner.run(values, properties);
    };
    QuestionExpressionModel.prototype.canCollectErrors = function () {
        return true;
    };
    QuestionExpressionModel.prototype.hasRequiredError = function () {
        return false;
    };
    Object.defineProperty(QuestionExpressionModel.prototype, "maximumFractionDigits", {
        /**
         * The maximum number of fraction digits. Applies only if the `displayStyle` property is not `"none"`. Accepts values in the range from -1 to 20, where -1 disables the property.
         *
         * Default value: -1
         * @see displayStyle
         * @see minimumFractionDigits
         */
        get: function () {
            return this.getPropertyValue("maximumFractionDigits");
        },
        set: function (val) {
            if (val < -1 || val > 20)
                return;
            this.setPropertyValue("maximumFractionDigits", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "minimumFractionDigits", {
        /**
         * The minimum number of fraction digits. Applies only if the `displayStyle` property is not `"none"`. Accepts values in the range from -1 to 20, where -1 disables the property.
         *
         * Default value: -1
         * @see displayStyle
         * @see maximumFractionDigits
         */
        get: function () {
            return this.getPropertyValue("minimumFractionDigits");
        },
        set: function (val) {
            if (val < -1 || val > 20)
                return;
            this.setPropertyValue("minimumFractionDigits", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "runIfReadOnly", {
        get: function () {
            return this.runIfReadOnlyValue === true;
        },
        set: function (val) {
            this.runIfReadOnlyValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "formatedValue", {
        get: function () {
            return this.getPropertyValue("formatedValue", "");
        },
        enumerable: false,
        configurable: true
    });
    QuestionExpressionModel.prototype.updateFormatedValue = function () {
        this.setPropertyValue("formatedValue", this.getDisplayValueCore(false, this.value));
    };
    QuestionExpressionModel.prototype.onValueChanged = function () {
        this.updateFormatedValue();
    };
    QuestionExpressionModel.prototype.updateValueFromSurvey = function (newValue) {
        _super.prototype.updateValueFromSurvey.call(this, newValue);
        this.updateFormatedValue();
    };
    QuestionExpressionModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        var val = this.isValueEmpty(value) ? this.defaultValue : value;
        var res = "";
        if (!this.isValueEmpty(val)) {
            var str = this.getValueAsStr(val);
            res = !this.format ? str : this.format["format"](str);
        }
        if (!!this.survey) {
            res = this.survey.getExpressionDisplayValue(this, val, res);
        }
        return res;
    };
    Object.defineProperty(QuestionExpressionModel.prototype, "displayStyle", {
        /**
         * Specifies a display style for the question value.
         *
         * Possible values:
         *
         * - `"decimal"`
         * - `"currency"`
         * - `"percent"`
         * - `"date"`
         * - `"none"` (default)
         *
         * If you use the `"currency"` display style, you can also set the `currency` property to specify a currency other than USD.
         * @see currency
         * @see minimumFractionDigits
         * @see maximumFractionDigits
         * @see format
         */
        get: function () {
            return this.getPropertyValue("displayStyle");
        },
        set: function (val) {
            this.setPropertyValue("displayStyle", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "currency", {
        /**
         * A three-letter currency code. Applies only if the `displayStyle` property is set to `"currency"`.
         *
         * Default value: "USD".
         * @see displayStyle
         * @see minimumFractionDigits
         * @see maximumFractionDigits
         * @see format
         */
        get: function () {
            return this.getPropertyValue("currency");
        },
        set: function (val) {
            if (getCurrecyCodes().indexOf(val) < 0)
                return;
            this.setPropertyValue("currency", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionExpressionModel.prototype, "useGrouping", {
        /**
         * Specifies whether to use grouping separators in number representation. Separators depend on the selected [locale](https://surveyjs.io/form-library/documentation/surveymodel#locale).
         *
         * Default value: `true`
         */
        get: function () {
            return this.getPropertyValue("useGrouping");
        },
        set: function (val) {
            this.setPropertyValue("useGrouping", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionExpressionModel.prototype.getValueAsStr = function (val) {
        if (this.displayStyle == "date") {
            var d = new Date(val);
            if (!!d && !!d.toLocaleDateString)
                return d.toLocaleDateString();
        }
        if (this.displayStyle != "none" && _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(val)) {
            var locale = this.getLocale();
            if (!locale)
                locale = "en";
            var options = {
                style: this.displayStyle,
                currency: this.currency,
                useGrouping: this.useGrouping,
            };
            if (this.maximumFractionDigits > -1) {
                options["maximumFractionDigits"] = this.maximumFractionDigits;
            }
            if (this.minimumFractionDigits > -1) {
                options["minimumFractionDigits"] = this.minimumFractionDigits;
            }
            return val.toLocaleString(locale, options);
        }
        return val.toString();
    };
    return QuestionExpressionModel;
}(_question__WEBPACK_IMPORTED_MODULE_1__["Question"]));

function getCurrecyCodes() {
    return [
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BHD",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BOV",
        "BRL",
        "BSD",
        "BTN",
        "BWP",
        "BYN",
        "BZD",
        "CAD",
        "CDF",
        "CHE",
        "CHF",
        "CHW",
        "CLF",
        "CLP",
        "CNY",
        "COP",
        "COU",
        "CRC",
        "CUC",
        "CUP",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EGP",
        "ERN",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GHS",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "INR",
        "IQD",
        "IRR",
        "ISK",
        "JMD",
        "JOD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KPW",
        "KRW",
        "KWD",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LYD",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MMK",
        "MNT",
        "MOP",
        "MRO",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MXV",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "OMR",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SDG",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SRD",
        "SSP",
        "STD",
        "SVC",
        "SYP",
        "SZL",
        "THB",
        "TJS",
        "TMT",
        "TND",
        "TOP",
        "TRY",
        "TTD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "USN",
        "UYI",
        "UYU",
        "UZS",
        "VEF",
        "VND",
        "VUV",
        "WST",
        "XAF",
        "XAG",
        "XAU",
        "XBA",
        "XBB",
        "XBC",
        "XBD",
        "XCD",
        "XDR",
        "XOF",
        "XPD",
        "XPF",
        "XPT",
        "XSU",
        "XTS",
        "XUA",
        "XXX",
        "YER",
        "ZAR",
        "ZMW",
        "ZWL",
    ];
}
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("expression", [
    "expression:expression",
    { name: "format", serializationProperty: "locFormat" },
    {
        name: "displayStyle",
        default: "none",
        choices: ["none", "decimal", "currency", "percent", "date"],
    },
    {
        name: "currency",
        choices: function () {
            return getCurrecyCodes();
        },
        default: "USD",
    },
    { name: "maximumFractionDigits:number", default: -1 },
    { name: "minimumFractionDigits:number", default: -1 },
    { name: "useGrouping:boolean", default: true },
    { name: "enableIf", visible: false },
    { name: "isRequired", visible: false },
    { name: "readOnly", visible: false },
    { name: "requiredErrorText", visible: false },
    { name: "defaultValueExpression", visible: false },
    { name: "defaultValue", visible: false },
    { name: "correctAnswer", visible: false },
    { name: "requiredIf", visible: false }
], function () {
    return new QuestionExpressionModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_3__["QuestionFactory"].Instance.registerQuestion("expression", function (name) {
    return new QuestionExpressionModel(name);
});


/***/ }),

/***/ "./src/question_file.ts":
/*!******************************!*\
  !*** ./src/question_file.ts ***!
  \******************************/
/*! exports provided: QuestionFileModel, FileLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionFileModel", function() { return QuestionFileModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileLoader", function() { return FileLoader; });
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









/**
 * A class that describes the File question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-file/ (linkStyle))
 */
var QuestionFileModel = /** @class */ (function (_super) {
    __extends(QuestionFileModel, _super);
    function QuestionFileModel(name) {
        var _this = _super.call(this, name) || this;
        _this.isUploading = false;
        _this.isDragging = false;
        /**
         * An event that is raised after the upload state has changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.state`: `String`\
         * The current upload state: `"empty"`, `"loading"`, `"loaded"`, or `"error"`.
         */
        _this.onUploadStateChanged = _this.addEvent();
        _this.onStateChanged = _this.addEvent();
        _this.mobileFileNavigator = new _actions_container__WEBPACK_IMPORTED_MODULE_6__["ActionContainer"]();
        _this.dragCounter = 0;
        _this.onDragEnter = function (event) {
            if (!_this.isInputReadOnly) {
                event.preventDefault();
                _this.isDragging = true;
                _this.dragCounter++;
            }
        };
        _this.onDragOver = function (event) {
            if (_this.isInputReadOnly) {
                event.returnValue = false;
                return false;
            }
            event.dataTransfer.dropEffect = "copy";
            event.preventDefault();
        };
        _this.onDrop = function (event) {
            if (!_this.isInputReadOnly) {
                _this.isDragging = false;
                _this.dragCounter = 0;
                event.preventDefault();
                var src = event.dataTransfer;
                _this.onChange(src);
            }
        };
        _this.onDragLeave = function (event) {
            if (!_this.isInputReadOnly) {
                _this.dragCounter--;
                if (_this.dragCounter === 0) {
                    _this.isDragging = false;
                }
            }
        };
        _this.doChange = function (event) {
            var src = event.target || event.srcElement;
            _this.onChange(src);
        };
        _this.doClean = function (event) {
            var src = event.currentTarget || event.srcElement;
            if (_this.needConfirmRemoveFile) {
                var isConfirmed = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["confirmAction"])(_this.confirmRemoveAllMessage);
                if (!isConfirmed)
                    return;
            }
            if (_this.rootElement) {
                _this.rootElement.querySelectorAll("input")[0].value = "";
            }
            _this.clear();
        };
        _this.doDownloadFile = function (event, data) {
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["detectIEOrEdge"])()) {
                event.preventDefault();
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["loadFileFromBase64"])(data.content, data.name);
            }
        };
        _this.fileIndexAction = new _actions_action__WEBPACK_IMPORTED_MODULE_7__["Action"]({
            id: "fileIndex",
            title: _this.getFileIndexCaption(),
            enabled: false
        });
        _this.prevFileAction = new _actions_action__WEBPACK_IMPORTED_MODULE_7__["Action"]({
            id: "prevPage",
            iconSize: 16,
            action: function () {
                _this.indexToShow = _this.previewValue.length && ((_this.indexToShow - 1 + _this.previewValue.length) % _this.previewValue.length) || 0;
                _this.fileIndexAction.title = _this.getFileIndexCaption();
            }
        });
        _this.nextFileAction = new _actions_action__WEBPACK_IMPORTED_MODULE_7__["Action"]({
            id: "nextPage",
            iconSize: 16,
            action: function () {
                _this.indexToShow = _this.previewValue.length && ((_this.indexToShow + 1) % _this.previewValue.length) || 0;
                _this.fileIndexAction.title = _this.getFileIndexCaption();
            }
        });
        _this.mobileFileNavigator.actions = [_this.prevFileAction, _this.fileIndexAction, _this.nextFileAction];
        return _this;
    }
    Object.defineProperty(QuestionFileModel.prototype, "mobileFileNavigatorVisible", {
        get: function () {
            return this.isMobile && this.containsMultiplyFiles;
        },
        enumerable: false,
        configurable: true
    });
    QuestionFileModel.prototype.updateElementCssCore = function (cssClasses) {
        _super.prototype.updateElementCssCore.call(this, cssClasses);
        this.prevFileAction.iconName = this.cssClasses.leftIconId;
        this.nextFileAction.iconName = this.cssClasses.rightIconId;
        //this.mobileFileNavigator.cssClasses = this.survey.getCss().actionBar;
    };
    QuestionFileModel.prototype.getFileIndexCaption = function () {
        return this.getLocalizationFormatString("indexText", this.indexToShow + 1, this.previewValue.length);
    };
    QuestionFileModel.prototype.isPreviewVisible = function (index) {
        return !this.isMobile || index === this.indexToShow;
    };
    QuestionFileModel.prototype.getType = function () {
        return "file";
    };
    QuestionFileModel.prototype.clearOnDeletingContainer = function () {
        if (!this.survey)
            return;
        this.survey.clearFiles(this, this.name, this.value, null, function () { });
    };
    Object.defineProperty(QuestionFileModel.prototype, "showPreview", {
        /**
         * Disable this property only to implement a custom preview.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/file-custom-preview/ (linkStyle))
         * @see allowImagesPreview
         */
        get: function () {
            return this.getPropertyValue("showPreview");
        },
        set: function (val) {
            this.setPropertyValue("showPreview", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "allowMultiple", {
        /**
         * Specifies whether users can upload multiple files.
         *
         * Default value: `false`
         */
        get: function () {
            return this.getPropertyValue("allowMultiple");
        },
        set: function (val) {
            this.setPropertyValue("allowMultiple", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "imageHeight", {
        /**
         * The image height.
         */
        get: function () {
            return this.getPropertyValue("imageHeight");
        },
        set: function (val) {
            this.setPropertyValue("imageHeight", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "imageWidth", {
        /**
         * The image width.
         */
        get: function () {
            return this.getPropertyValue("imageWidth");
        },
        set: function (val) {
            this.setPropertyValue("imageWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "acceptedTypes", {
        /**
         * An [accept](https://www.w3schools.com/tags/att_input_accept.asp) attribute value for the underlying `<input>` element.
         */
        get: function () {
            return this.getPropertyValue("acceptedTypes");
        },
        set: function (val) {
            this.setPropertyValue("acceptedTypes", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "storeDataAsText", {
        /**
         * Specifies whether to store file content as text in `SurveyModel`'s [`data`](https://surveyjs.io/form-library/documentation/surveymodel#data) property.
         *
         * If you disable this property, implement `SurveyModel`'s [`onUploadFiles`](https://surveyjs.io/form-library/documentation/surveymodel#onUploadFiles) event handler to specify how to store file content.
         */
        get: function () {
            return this.getPropertyValue("storeDataAsText");
        },
        set: function (val) {
            this.setPropertyValue("storeDataAsText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "waitForUpload", {
        /**
         * Enable this property if you want to wait until files are uploaded to complete the survey.
         *
         * Default value: `false`
         */
        get: function () {
            return this.getPropertyValue("waitForUpload");
        },
        set: function (val) {
            this.setPropertyValue("waitForUpload", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "allowImagesPreview", {
        /**
         * Specifies whether to show a preview of image files.
         */
        get: function () {
            return this.getPropertyValue("allowImagesPreview");
        },
        set: function (val) {
            this.setPropertyValue("allowImagesPreview", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "maxSize", {
        /**
         * Maximum allowed file size, measured in bytes.
         *
         * Default value: 0 (unlimited)
         */
        get: function () {
            return this.getPropertyValue("maxSize");
        },
        set: function (val) {
            this.setPropertyValue("maxSize", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "needConfirmRemoveFile", {
        /**
         * Specifies whether users should confirm file deletion.
         *
         * Default value: `false`
         */
        get: function () {
            return this.getPropertyValue("needConfirmRemoveFile");
        },
        set: function (val) {
            this.setPropertyValue("needConfirmRemoveFile", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionFileModel.prototype.getConfirmRemoveMessage = function (fileName) {
        return this.confirmRemoveMessage.format(fileName);
    };
    Object.defineProperty(QuestionFileModel.prototype, "inputTitle", {
        get: function () {
            if (this.isUploading)
                return this.loadingFileTitle;
            if (this.isEmpty())
                return this.chooseFileTitle;
            return " ";
        },
        enumerable: false,
        configurable: true
    });
    QuestionFileModel.prototype.clear = function (doneCallback) {
        var _this = this;
        if (!this.survey)
            return;
        this.containsMultiplyFiles = false;
        this.survey.clearFiles(this, this.name, this.value, null, function (status, data) {
            if (status === "success") {
                _this.value = undefined;
                _this.errors = [];
                !!doneCallback && doneCallback();
                _this.indexToShow = 0;
                _this.fileIndexAction.title = _this.getFileIndexCaption();
            }
        });
    };
    Object.defineProperty(QuestionFileModel.prototype, "multipleRendered", {
        get: function () {
            return this.allowMultiple ? "multiple" : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "showRemoveButton", {
        get: function () {
            return !this.isReadOnly && !this.isEmpty() && this.cssClasses.removeButton;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFileModel.prototype, "showRemoveButtonBottom", {
        get: function () {
            return !this.isReadOnly && !this.isEmpty() && this.cssClasses.removeButtonBottom;
        },
        enumerable: false,
        configurable: true
    });
    QuestionFileModel.prototype.defaultImage = function (data) {
        return !this.canPreviewImage(data) && !!this.cssClasses.defaultImage;
    };
    /**
     * Removes a file with a specified name.
     */
    QuestionFileModel.prototype.removeFile = function (name) {
        this.removeFileByContent(this.value.filter(function (f) { return f.name === name; })[0]);
    };
    QuestionFileModel.prototype.removeFileByContent = function (content) {
        var _this = this;
        if (!this.survey)
            return;
        this.survey.clearFiles(this, this.name, this.value, content.name, function (status, data) {
            if (status === "success") {
                var oldValue = _this.value;
                if (Array.isArray(oldValue)) {
                    _this.value = oldValue.filter(function (f) { return !_helpers__WEBPACK_IMPORTED_MODULE_8__["Helpers"].isTwoValueEquals(f, content, true); });
                }
                else {
                    _this.value = undefined;
                }
            }
        });
    };
    /**
     * Loads multiple files into the question.
     * @param files An array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects.
     */
    QuestionFileModel.prototype.loadFiles = function (files) {
        var _this = this;
        if (!this.survey) {
            return;
        }
        this.errors = [];
        if (!this.allFilesOk(files)) {
            return;
        }
        var loadFilesProc = function () {
            _this.stateChanged("loading");
            var content = [];
            if (_this.storeDataAsText) {
                files.forEach(function (file) {
                    var fileReader = new FileReader();
                    fileReader.onload = function (e) {
                        content = content.concat([
                            { name: file.name, type: file.type, content: fileReader.result },
                        ]);
                        if (content.length === files.length) {
                            _this.value = (_this.value || []).concat(content);
                        }
                    };
                    fileReader.readAsDataURL(file);
                });
            }
            else {
                if (_this.survey) {
                    _this.survey.uploadFiles(_this, _this.name, files, function (status, data) {
                        if (status === "error") {
                            _this.stateChanged("error");
                        }
                        if (status === "success") {
                            _this.value = (_this.value || []).concat(data.map(function (r) {
                                return {
                                    name: r.file.name,
                                    type: r.file.type,
                                    content: r.content,
                                };
                            }));
                        }
                    });
                }
            }
        };
        if (this.allowMultiple) {
            loadFilesProc();
        }
        else {
            this.clear(loadFilesProc);
        }
    };
    QuestionFileModel.prototype.canPreviewImage = function (fileItem) {
        return this.allowImagesPreview && !!fileItem && this.isFileImage(fileItem);
    };
    QuestionFileModel.prototype.loadPreview = function (newValue) {
        var _this = this;
        this.previewValue.splice(0, this.previewValue.length);
        if (!this.showPreview || !newValue)
            return;
        var newValues = Array.isArray(newValue)
            ? newValue
            : !!newValue
                ? [newValue]
                : [];
        if (this.storeDataAsText) {
            newValues.forEach(function (value) {
                var content = value.content || value;
                _this.previewValue.push({
                    name: value.name,
                    type: value.type,
                    content: content,
                });
            });
        }
        else {
            if (!!this._previewLoader) {
                this._previewLoader.dispose();
            }
            this.isReadyValue = false;
            this._previewLoader = new FileLoader(this, function (status, loaded) {
                if (status === "loaded") {
                    loaded.forEach(function (val) {
                        _this.previewValue.push(val);
                    });
                }
                _this.isReadyValue = true;
                _this.onReadyChanged &&
                    _this.onReadyChanged.fire(_this, {
                        question: _this,
                        isReady: true,
                        oldIsReady: false,
                    });
                _this._previewLoader.dispose();
                _this._previewLoader = undefined;
            });
            this._previewLoader.load(newValues);
        }
        this.indexToShow = this.previewValue.length > 0 ? (this.indexToShow > 0 ? this.indexToShow - 1 : 0) : 0;
        this.fileIndexAction.title = this.getFileIndexCaption();
        this.containsMultiplyFiles = this.previewValue.length > 1;
    };
    QuestionFileModel.prototype.onCheckForErrors = function (errors, isOnValueChanged) {
        _super.prototype.onCheckForErrors.call(this, errors, isOnValueChanged);
        if (this.isUploading && this.waitForUpload) {
            errors.push(new _error__WEBPACK_IMPORTED_MODULE_3__["UploadingFileError"](this.getLocalizationString("uploadingFile"), this));
        }
    };
    QuestionFileModel.prototype.stateChanged = function (state) {
        if (this.currentState == state) {
            return;
        }
        if (state === "loading") {
            this.isUploading = true;
        }
        if (state === "loaded") {
            this.isUploading = false;
        }
        if (state === "error") {
            this.isUploading = false;
        }
        this.currentState = state;
        this.onStateChanged.fire(this, { state: state });
        this.onUploadStateChanged.fire(this, { state: state });
    };
    QuestionFileModel.prototype.allFilesOk = function (files) {
        var _this = this;
        var errorLength = this.errors ? this.errors.length : 0;
        (files || []).forEach(function (file) {
            if (_this.maxSize > 0 && file.size > _this.maxSize) {
                _this.errors.push(new _error__WEBPACK_IMPORTED_MODULE_3__["ExceedSizeError"](_this.maxSize, _this));
            }
        });
        return errorLength === this.errors.length;
    };
    QuestionFileModel.prototype.isFileImage = function (file) {
        if (!file)
            return false;
        var imagePrefix = "data:image";
        var subStr = file.content && file.content.substring(0, imagePrefix.length);
        subStr = subStr && subStr.toLowerCase();
        var result = subStr === imagePrefix ||
            (!!file.type && file.type.toLowerCase().indexOf("image/") === 0);
        return result;
    };
    QuestionFileModel.prototype.getPlainData = function (options) {
        if (options === void 0) { options = {
            includeEmpty: true,
        }; }
        var questionPlainData = _super.prototype.getPlainData.call(this, options);
        if (!!questionPlainData && !this.isEmpty()) {
            questionPlainData.isNode = false;
            var values = Array.isArray(this.value) ? this.value : [this.value];
            questionPlainData.data = values.map(function (dataValue, index) {
                return {
                    name: index,
                    title: "File",
                    value: (dataValue.content && dataValue.content) || dataValue,
                    displayValue: (dataValue.name && dataValue.name) || dataValue,
                    getString: function (val) {
                        return typeof val === "object" ? JSON.stringify(val) : val;
                    },
                    isNode: false,
                };
            });
        }
        return questionPlainData;
    };
    QuestionFileModel.prototype.getChooseFileCss = function () {
        var isAnswered = this.isAnswered;
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(this.cssClasses.chooseFile)
            .append(this.cssClasses.controlDisabled, this.isReadOnly)
            .append(this.cssClasses.chooseFileAsText, !isAnswered)
            .append(this.cssClasses.chooseFileAsTextDisabled, !isAnswered && this.isInputReadOnly)
            .append(this.cssClasses.chooseFileAsIcon, isAnswered)
            .toString();
    };
    QuestionFileModel.prototype.getReadOnlyFileCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append("form-control")
            .append(this.cssClasses.placeholderInput)
            .toString();
    };
    Object.defineProperty(QuestionFileModel.prototype, "fileRootCss", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
                .append(this.cssClasses.root)
                .append(this.cssClasses.single, !this.allowMultiple)
                .append(this.cssClasses.singleImage, !this.allowMultiple && this.isAnswered && this.canPreviewImage(this.value[0]))
                .append(this.cssClasses.mobile, this.isMobile)
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    QuestionFileModel.prototype.getFileDecoratorCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(this.cssClasses.fileDecorator)
            .append(this.cssClasses.onError, this.errors.length > 0)
            .append(this.cssClasses.fileDecoratorDrag, this.isDragging)
            .toString();
    };
    QuestionFileModel.prototype.onChange = function (src) {
        if (!window["FileReader"])
            return;
        if (!src || !src.files || src.files.length < 1)
            return;
        var files = [];
        var allowCount = this.allowMultiple ? src.files.length : 1;
        for (var i = 0; i < allowCount; i++) {
            files.push(src.files[i]);
        }
        src.value = "";
        this.loadFiles(files);
    };
    QuestionFileModel.prototype.onChangeQuestionValue = function (newValue) {
        _super.prototype.onChangeQuestionValue.call(this, newValue);
        this.stateChanged(this.isEmpty() ? "empty" : "loaded");
        if (!this.isLoadingFromJson) {
            this.loadPreview(newValue);
        }
    };
    QuestionFileModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.loadPreview(this.value);
    };
    QuestionFileModel.prototype.afterRender = function (el) {
        this.rootElement = el;
        _super.prototype.afterRender.call(this, el);
    };
    QuestionFileModel.prototype.doRemoveFile = function (data) {
        if (this.needConfirmRemoveFile) {
            var isConfirmed = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["confirmAction"])(this.getConfirmRemoveMessage(data.name));
            if (!isConfirmed)
                return;
        }
        var previewIndex = this.previewValue.indexOf(data);
        this.removeFileByContent(previewIndex === -1 ? data : this.value[previewIndex]);
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], QuestionFileModel.prototype, "isDragging", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])({})
    ], QuestionFileModel.prototype, "previewValue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: "empty" })
    ], QuestionFileModel.prototype, "currentState", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: 0 })
    ], QuestionFileModel.prototype, "indexToShow", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], QuestionFileModel.prototype, "containsMultiplyFiles", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "confirmRemoveFile" } })
    ], QuestionFileModel.prototype, "confirmRemoveMessage", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "confirmRemoveAllFiles" } })
    ], QuestionFileModel.prototype, "confirmRemoveAllMessage", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "noFileChosen" } })
    ], QuestionFileModel.prototype, "noFileChosenCaption", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "chooseFileCaption" } })
    ], QuestionFileModel.prototype, "chooseButtonCaption", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "clearCaption" } })
    ], QuestionFileModel.prototype, "clearButtonCaption", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "removeFileCaption" } })
    ], QuestionFileModel.prototype, "removeFileCaption", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "loadingFile" } })
    ], QuestionFileModel.prototype, "loadingFileTitle", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "chooseFile" } })
    ], QuestionFileModel.prototype, "chooseFileTitle", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: { defaultStr: "fileDragAreaPlaceholder" } })
    ], QuestionFileModel.prototype, "dragAreaPlaceholder", void 0);
    return QuestionFileModel;
}(_question__WEBPACK_IMPORTED_MODULE_0__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("file", [
    { name: "showCommentArea:switch", layout: "row", visible: true, category: "general" },
    { name: "showPreview:boolean", default: true },
    "allowMultiple:boolean",
    { name: "allowImagesPreview:boolean", default: true },
    "imageHeight",
    "imageWidth",
    "acceptedTypes",
    { name: "storeDataAsText:boolean", default: true },
    { name: "waitForUpload:boolean", default: false },
    { name: "maxSize:number", default: 0 },
    { name: "defaultValue", visible: false },
    { name: "correctAnswer", visible: false },
    { name: "validators", visible: false },
    { name: "needConfirmRemoveFile:boolean" },
], function () {
    return new QuestionFileModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_2__["QuestionFactory"].Instance.registerQuestion("file", function (name) {
    return new QuestionFileModel(name);
});
var FileLoader = /** @class */ (function () {
    function FileLoader(fileQuestion, callback) {
        this.fileQuestion = fileQuestion;
        this.callback = callback;
        this.loaded = [];
    }
    FileLoader.prototype.load = function (files) {
        var _this = this;
        files.forEach(function (value) {
            if (_this.fileQuestion.survey) {
                _this.fileQuestion.survey.downloadFile(_this.fileQuestion, _this.fileQuestion.name, value, function (status, data) {
                    if (!_this.fileQuestion || !_this.callback) {
                        return;
                    }
                    if (status === "success") {
                        _this.loaded.push({
                            content: data,
                            name: value.name,
                            type: value.type,
                        });
                        if (_this.loaded.length === files.length) {
                            _this.callback("loaded", _this.loaded);
                        }
                    }
                    else {
                        _this.callback("error", _this.loaded);
                    }
                });
            }
        });
    };
    FileLoader.prototype.dispose = function () {
        this.fileQuestion = undefined;
        this.callback = undefined;
    };
    return FileLoader;
}());



/***/ }),

/***/ "./src/question_html.ts":
/*!******************************!*\
  !*** ./src/question_html.ts ***!
  \******************************/
/*! exports provided: QuestionHtmlModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionHtmlModel", function() { return QuestionHtmlModel; });
/* harmony import */ var _questionnonvalue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./questionnonvalue */ "./src/questionnonvalue.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
  * A class that describes the Html question type. Unlike other question types, Html cannot have a title or value.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-html/ (linkStyle))
 */
var QuestionHtmlModel = /** @class */ (function (_super) {
    __extends(QuestionHtmlModel, _super);
    function QuestionHtmlModel(name) {
        var _this = _super.call(this, name) || this;
        var locHtml = _this.createLocalizableString("html", _this);
        locHtml.onGetTextCallback = function (str) {
            return !!_this.survey && !_this.ignoreHtmlProgressing
                ? _this.survey.processHtml(str)
                : str;
        };
        return _this;
    }
    QuestionHtmlModel.prototype.getType = function () {
        return "html";
    };
    Object.defineProperty(QuestionHtmlModel.prototype, "isCompositeQuestion", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    QuestionHtmlModel.prototype.getProcessedText = function (text) {
        if (this.ignoreHtmlProgressing)
            return text;
        return _super.prototype.getProcessedText.call(this, text);
    };
    Object.defineProperty(QuestionHtmlModel.prototype, "html", {
        /**
         * HTML markup to display.
         *
         * > IMPORTANT: If you get the markup from a third party, ensure that it does not contain malicious code.
         */
        get: function () {
            return this.getLocalizableStringText("html", "");
        },
        set: function (val) {
            this.setLocalizableStringText("html", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionHtmlModel.prototype, "locHtml", {
        get: function () {
            return this.getLocalizableString("html");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionHtmlModel.prototype, "processedHtml", {
        get: function () {
            return this.survey ? this.survey.processHtml(this.html) : this.html;
        },
        enumerable: false,
        configurable: true
    });
    return QuestionHtmlModel;
}(_questionnonvalue__WEBPACK_IMPORTED_MODULE_0__["QuestionNonValue"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("html", [{ name: "html:html", serializationProperty: "locHtml" }], function () {
    return new QuestionHtmlModel("");
}, "nonvalue");
_questionfactory__WEBPACK_IMPORTED_MODULE_2__["QuestionFactory"].Instance.registerQuestion("html", function (name) {
    return new QuestionHtmlModel(name);
});


/***/ }),

/***/ "./src/question_image.ts":
/*!*******************************!*\
  !*** ./src/question_image.ts ***!
  \*******************************/
/*! exports provided: QuestionImageModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionImageModel", function() { return QuestionImageModel; });
/* harmony import */ var _questionnonvalue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./questionnonvalue */ "./src/questionnonvalue.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var youtubeTags = ["youtube.com", "youtu.be"];
var videoSuffics = [".mp4", ".mov", ".wmv", ".flv", ".avi", ".mkv"];
var youtubeUrl = "https://www.youtube.com/";
var youtubeEmbed = "embed";
function isUrlYoutubeVideo(url) {
    if (!url)
        return false;
    url = url.toLowerCase();
    for (var i = 0; i < youtubeTags.length; i++) {
        if (url.indexOf(youtubeTags[i]) !== -1)
            return true;
    }
    return false;
}
/**
  * A class that describes the Image question type. Unlike other question types, Image cannot have a title or value.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-image/ (linkStyle))
 */
var QuestionImageModel = /** @class */ (function (_super) {
    __extends(QuestionImageModel, _super);
    function QuestionImageModel(name) {
        var _this = _super.call(this, name) || this;
        var locImageLink = _this.createLocalizableString("imageLink", _this, false);
        locImageLink.onGetTextCallback = function (text) {
            return getCorrectImageLink(text);
        };
        _this.createLocalizableString("altText", _this, false);
        _this.registerPropertyChangedHandlers(["contentMode", "imageLink"], function () { return _this.calculateRenderedMode(); });
        return _this;
    }
    QuestionImageModel.prototype.getType = function () {
        return "image";
    };
    Object.defineProperty(QuestionImageModel.prototype, "isCompositeQuestion", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionImageModel.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        this.calculateRenderedMode();
    };
    Object.defineProperty(QuestionImageModel.prototype, "imageLink", {
        /**
         * Specifies an image or video URL.
         * @see contentMode
         */
        get: function () {
            return this.getLocalizableStringText("imageLink");
        },
        set: function (val) {
            this.setLocalizableStringText("imageLink", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "locImageLink", {
        get: function () {
            return this.getLocalizableString("imageLink");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "altText", {
        /**
         * Specifies a value for the `alt` attribute of the underlying `<img>` element.
         */
        get: function () {
            return this.getLocalizableStringText("altText");
        },
        set: function (val) {
            this.setLocalizableStringText("altText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "locAltText", {
        get: function () {
            return this.getLocalizableString("altText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "imageHeight", {
        /**
         * Specifies the height of a container for the image or video. Accepts positive numbers and CSS values.
         *
         * Default value: 150
         *
         * Use the `imageFit` property to specify how to fit the image or video into the container.
         * @see imageWidth
         * @see imageFit
         */
        get: function () {
            return this.getPropertyValue("imageHeight");
        },
        set: function (val) {
            this.setPropertyValue("imageHeight", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "renderedHeight", {
        get: function () {
            return this.imageHeight ? this.imageHeight + "px" : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "imageWidth", {
        /**
         * Specifies the width of a container for the image or video. Accepts positive numbers and CSS values.
         *
         * Default value: 200
         *
         * Use the `imageFit` property to specify how to fit the image or video into the container.
         * @see imageHeight
         * @see imageFit
         */
        get: function () {
            return this.getPropertyValue("imageWidth");
        },
        set: function (val) {
            this.setPropertyValue("imageWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "renderedWidth", {
        get: function () {
            return this.imageWidth ? this.imageWidth + "px" : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "imageFit", {
        /**
         * Specifies how to resize the image or video to fit it into its container.
         *
         * Refer to the [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property description for information on accepted values.
         * @see imageHeight
         * @see imageWidth
         */
        get: function () {
            return this.getPropertyValue("imageFit");
        },
        set: function (val) {
            this.setPropertyValue("imageFit", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "contentMode", {
        /**
         * Specifies the type of content that the Image question displays.
         *
         * Possible values:
         *
         * - `"image"` - An image in one of the following formats: JPEG, GIF, PNG, APNG, SVG, BMP, ICO.
         * - `"video"` - A video in one of the following formats: MP4, MOV, WMV, FLV, AVI, MKV.
         * - `"youtube"` - A link to a YouTube video.
         * - `"auto"` (default) - Selects one of the above based on the [`imageLink`](https://surveyjs.io/form-library/documentation/questionimagemodel#imageLink) property.
         */
        get: function () {
            return this.getPropertyValue("contentMode");
        },
        set: function (val) {
            this.setPropertyValue("contentMode", val);
            if (val === "video") {
                this.showLabel = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImageModel.prototype, "renderedMode", {
        /**
         * Returns the type of content that the Image question displays: `"image"`, `"video"`, or `"youtube"`.
         * @see contentMode
         */
        get: function () {
            return this.getPropertyValue("renderedMode", "image");
        },
        enumerable: false,
        configurable: true
    });
    QuestionImageModel.prototype.getImageCss = function () {
        var imageHeightProperty = this.getPropertyByName("imageHeight");
        var imageWidthProperty = this.getPropertyByName("imageWidth");
        var isDefaultSize = imageHeightProperty.isDefaultValue(this.imageHeight) && imageWidthProperty.isDefaultValue(this.imageWidth);
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
            .append(this.cssClasses.image)
            .append(this.cssClasses.adaptive, isDefaultSize)
            .toString();
    };
    QuestionImageModel.prototype.setRenderedMode = function (val) {
        this.setPropertyValue("renderedMode", val);
    };
    QuestionImageModel.prototype.calculateRenderedMode = function () {
        if (this.contentMode !== "auto") {
            this.setRenderedMode(this.contentMode);
        }
        else {
            if (this.isYoutubeVideo()) {
                this.setRenderedMode("youtube");
            }
            else if (this.isVideo()) {
                this.setRenderedMode("video");
            }
            else {
                this.setRenderedMode("image");
            }
        }
    };
    QuestionImageModel.prototype.isYoutubeVideo = function () {
        return isUrlYoutubeVideo(this.imageLink);
    };
    QuestionImageModel.prototype.isVideo = function () {
        var link = this.imageLink;
        if (!link)
            return false;
        link = link.toLowerCase();
        for (var i = 0; i < videoSuffics.length; i++) {
            if (link.endsWith(videoSuffics[i]))
                return true;
        }
        return false;
    };
    return QuestionImageModel;
}(_questionnonvalue__WEBPACK_IMPORTED_MODULE_0__["QuestionNonValue"]));

function getCorrectImageLink(val) {
    if (!val || !isUrlYoutubeVideo(val))
        return val;
    var res = val.toLocaleLowerCase();
    if (res.indexOf(youtubeEmbed) > -1)
        return val;
    var id = "";
    for (var i = val.length - 1; i >= 0; i--) {
        if (val[i] === "=" || val[i] === "/")
            break;
        id = val[i] + id;
    }
    return youtubeUrl + youtubeEmbed + "/" + id;
}
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("image", [
    { name: "imageLink", serializationProperty: "locImageLink" },
    { name: "altText", serializationProperty: "locAltText", alternativeName: "text", category: "general" },
    {
        name: "contentMode",
        default: "auto",
        choices: ["auto", "image", "video", "youtube"],
    },
    {
        name: "imageFit",
        default: "contain",
        choices: ["none", "contain", "cover", "fill"],
    },
    { name: "imageHeight:number", default: 150, minValue: 0 },
    { name: "imageWidth:number", default: 200, minValue: 0 },
], function () {
    return new QuestionImageModel("");
}, "nonvalue");
_questionfactory__WEBPACK_IMPORTED_MODULE_2__["QuestionFactory"].Instance.registerQuestion("image", function (name) {
    return new QuestionImageModel(name);
});


/***/ }),

/***/ "./src/question_imagepicker.ts":
/*!*************************************!*\
  !*** ./src/question_imagepicker.ts ***!
  \*************************************/
/*! exports provided: ImageItemValue, QuestionImagePickerModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageItemValue", function() { return ImageItemValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionImagePickerModel", function() { return QuestionImagePickerModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_baseselect */ "./src/question_baseselect.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








var ImageItemValue = /** @class */ (function (_super) {
    __extends(ImageItemValue, _super);
    function ImageItemValue(value, text, typeName) {
        if (text === void 0) { text = null; }
        if (typeName === void 0) { typeName = "imageitemvalue"; }
        var _this = _super.call(this, value, text, typeName) || this;
        _this.typeName = typeName;
        _this.createLocalizableString("imageLink", _this, false);
        return _this;
    }
    ImageItemValue.prototype.getType = function () {
        return !!this.typeName ? this.typeName : "itemvalue";
    };
    Object.defineProperty(ImageItemValue.prototype, "imageLink", {
        /**
         * The image or video link property.
         */
        get: function () {
            return this.getLocalizableStringText("imageLink");
        },
        set: function (val) {
            this.setLocalizableStringText("imageLink", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageItemValue.prototype, "locImageLink", {
        get: function () {
            return this.getLocalizableString("imageLink");
        },
        enumerable: false,
        configurable: true
    });
    ImageItemValue.prototype.getLocale = function () {
        return !!this.locOwner ? this.locOwner.getLocale() : "";
    };
    ImageItemValue.prototype.getMarkdownHtml = function (text, name) {
        return !!this.locOwner ? this.locOwner.getMarkdownHtml(text, name) : undefined;
    };
    ImageItemValue.prototype.getRenderer = function (name) {
        return !!this.locOwner ? this.locOwner.getRenderer(name) : null;
    };
    ImageItemValue.prototype.getRendererContext = function (locStr) {
        return !!this.locOwner ? this.locOwner.getRendererContext(locStr) : locStr;
    };
    ImageItemValue.prototype.getProcessedText = function (text) {
        return !!this.locOwner ? this.locOwner.getProcessedText(text) : text;
    };
    return ImageItemValue;
}(_itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"]));

/**
  * A class that describes the Image Picker question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/image-picker-question/ (linkStyle))
 */
var QuestionImagePickerModel = /** @class */ (function (_super) {
    __extends(QuestionImagePickerModel, _super);
    function QuestionImagePickerModel(name) {
        var _this = _super.call(this, name) || this;
        //responsive mode
        _this.isResponsiveValue = false;
        _this.onContentLoaded = function (item, event) {
            var content = event.target;
            if (_this.contentMode == "video") {
                item["aspectRatio"] = content.videoWidth / content.videoHeight;
            }
            else {
                item["aspectRatio"] = content.naturalWidth / content.naturalHeight;
            }
            _this._width && _this.processResponsiveness(0, _this._width);
        };
        _this.colCount = 0;
        _this.registerPropertyChangedHandlers(["minImageWidth", "maxImageWidth", "minImageHeight", "maxImageHeight", "visibleChoices", "colCount", "isResponsiveValue"], function () {
            if (!!_this._width) {
                _this.processResponsiveness(0, _this._width);
            }
        });
        _this.registerPropertyChangedHandlers(["imageWidth", "imageHeight"], function () {
            _this.calcIsResponsive();
        });
        _this.calcIsResponsive();
        return _this;
    }
    QuestionImagePickerModel.prototype.getType = function () {
        return "imagepicker";
    };
    QuestionImagePickerModel.prototype.supportGoNextPageAutomatic = function () {
        return !this.multiSelect;
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "hasSingleInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.getItemValueType = function () {
        return "imageitemvalue";
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "isCompositeQuestion", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.supportOther = function () {
        return false;
    };
    QuestionImagePickerModel.prototype.supportNone = function () {
        return false;
    };
    QuestionImagePickerModel.prototype.isAnswerCorrect = function () {
        if (!this.multiSelect)
            return _super.prototype.isAnswerCorrect.call(this);
        return _helpers__WEBPACK_IMPORTED_MODULE_4__["Helpers"].isArrayContainsEqual(this.value, this.correctAnswer);
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "multiSelect", {
        /**
         * Specifies whether users can select multiple images or videos.
         *
         * Default value: `false`
         */
        get: function () {
            return this.getPropertyValue("multiSelect");
        },
        set: function (newValue) {
            this.setPropertyValue("multiSelect", newValue);
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.isItemSelected = function (item) {
        var val = this.value;
        if (this.isValueEmpty(val))
            return false;
        if (!this.multiSelect)
            return this.isTwoValueEquals(val, item.value);
        if (!Array.isArray(val))
            return false;
        for (var i = 0; i < val.length; i++) {
            if (this.isTwoValueEquals(val[i], item.value))
                return true;
        }
        return false;
    };
    QuestionImagePickerModel.prototype.clearIncorrectValues = function () {
        if (this.multiSelect) {
            var val = this.value;
            if (!val)
                return;
            if (!Array.isArray(val) || val.length == 0) {
                this.clearValue();
                return;
            }
            var newValue = [];
            for (var i = 0; i < val.length; i++) {
                if (!this.hasUnknownValue(val[i], true)) {
                    newValue.push(val[i]);
                }
            }
            if (newValue.length == val.length)
                return;
            if (newValue.length == 0) {
                this.clearValue();
            }
            else {
                this.value = newValue;
            }
        }
        else {
            _super.prototype.clearIncorrectValues.call(this);
        }
    };
    QuestionImagePickerModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        if (!this.multiSelect && !Array.isArray(value))
            return _super.prototype.getDisplayValueCore.call(this, keysAsText, value);
        return this.getDisplayArrayValue(keysAsText, value);
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "showLabel", {
        /**
         * Specifies whether to display labels under images or videos. Labels text are taken from the `text` property of each object in the `choices` array.
         * @see choices
         */
        get: function () {
            return this.getPropertyValue("showLabel");
        },
        set: function (newValue) {
            this.setPropertyValue("showLabel", newValue);
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        if (!this.isDesignMode && this.multiSelect) {
            this.createNewArray("renderedValue");
            this.createNewArray("value");
        }
        this.calcIsResponsive();
    };
    QuestionImagePickerModel.prototype.getValueCore = function () {
        var value = _super.prototype.getValueCore.call(this);
        if (value !== undefined) {
            return value;
        }
        if (this.multiSelect) {
            return [];
        }
        return value;
    };
    QuestionImagePickerModel.prototype.convertValToArrayForMultSelect = function (val) {
        if (!this.multiSelect)
            return val;
        if (this.isValueEmpty(val) || Array.isArray(val))
            return val;
        return [val];
    };
    QuestionImagePickerModel.prototype.renderedValueFromDataCore = function (val) {
        return this.convertValToArrayForMultSelect(val);
    };
    QuestionImagePickerModel.prototype.rendredValueToDataCore = function (val) {
        return this.convertValToArrayForMultSelect(val);
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "imageHeight", {
        /**
         * Specifies the height of containers for images or videos. Accepts positive numbers and CSS values.
         *
         * Default value: undefined
         *
         * Use the `imageFit` property to specify how to fit the images or videos into their containers.
         * @see imageWidth
         * @see imageFit
         */
        get: function () {
            return this.getPropertyValue("imageHeight");
        },
        set: function (val) {
            this.setPropertyValue("imageHeight", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImagePickerModel.prototype, "renderedImageHeight", {
        get: function () {
            var height = this.isResponsive ? this.responsiveImageHeight : this.imageHeight;
            return (height ? height : 150) + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImagePickerModel.prototype, "imageWidth", {
        /**
         * Specifies the width of containers for images or videos. Accepts positive numbers and CSS values.
         *
         * Default value: 200
         *
         * Use the `imageFit` property to specify how to fit the images or videos into their containers.
         * @see imageHeight
         * @see imageFit
         */
        get: function () {
            return this.getPropertyValue("imageWidth");
        },
        set: function (val) {
            this.setPropertyValue("imageWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImagePickerModel.prototype, "renderedImageWidth", {
        get: function () {
            var width = this.isResponsive ? this.responsiveImageWidth : this.imageWidth;
            return (width ? width : 200) + "px";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImagePickerModel.prototype, "imageFit", {
        /**
         * Specifies how to resize images or videos to fit them into their containers.
         *
         * Refer to the [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property description for information on accepted values.
         * @see imageHeight
         * @see imageWidth
         */
        get: function () {
            return this.getPropertyValue("imageFit");
        },
        set: function (val) {
            this.setPropertyValue("imageFit", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImagePickerModel.prototype, "contentMode", {
        /**
         * Specifies the type of content that choice items display.
         *
         * Possible values:
         *
         * - `"image"` - Images in one of the following formats: JPEG, GIF, PNG, APNG, SVG, BMP, ICO.
         * - `"video"` - Videos in one of the following formats: MP4, MOV, WMV, FLV, AVI, MKV.
         * - `"youtube"` - Links to YouTube videos.
         * - `"auto"` (default) - Selects one of the above based on the `imageLink` property value of each choice item.
         */
        get: function () {
            return this.getPropertyValue("contentMode");
        },
        set: function (val) {
            this.setPropertyValue("contentMode", val);
            if (val === "video") {
                this.showLabel = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.convertDefaultValue = function (val) {
        return val;
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "inputType", {
        get: function () {
            return this.multiSelect ? "checkbox" : "radio";
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.isFootChoice = function (_item, _question) {
        return false;
    };
    QuestionImagePickerModel.prototype.getSelectBaseRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]().append(_super.prototype.getSelectBaseRootCss.call(this)).append(this.cssClasses.rootColumn, this.getCurrentColCount() == 1).toString();
    };
    Object.defineProperty(QuestionImagePickerModel.prototype, "isResponsive", {
        get: function () {
            return this.isResponsiveValue && this.isDefaultV2Theme;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionImagePickerModel.prototype, "exactSizesAreEmpty", {
        get: function () {
            var _this = this;
            return !(["imageHeight", "imageWidth"].some(function (propName) { return _this[propName] !== undefined && _this[propName] !== null; }));
        },
        enumerable: false,
        configurable: true
    });
    QuestionImagePickerModel.prototype.calcIsResponsive = function () {
        this.isResponsiveValue = this.exactSizesAreEmpty;
    };
    QuestionImagePickerModel.prototype.getObservedElementSelector = function () {
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_7__["classesToSelector"])(this.cssClasses.root);
    };
    QuestionImagePickerModel.prototype.supportResponsiveness = function () {
        return true;
    };
    QuestionImagePickerModel.prototype.needResponsiveness = function () {
        return this.supportResponsiveness() && this.isDefaultV2Theme;
    };
    QuestionImagePickerModel.prototype.getCurrentColCount = function () {
        if (this.responsiveColCount === undefined || this.colCount === 0) {
            return this.colCount;
        }
        return this.responsiveColCount;
    };
    QuestionImagePickerModel.prototype.processResponsiveness = function (_, availableWidth) {
        this._width = availableWidth = Math.floor(availableWidth);
        var calcAvailableColumnsCount = function (availableWidth, minWidth, gap) {
            var itemsInRow = Math.floor(availableWidth / (minWidth + gap));
            if ((itemsInRow + 1) * (minWidth + gap) - gap <= availableWidth)
                itemsInRow++;
            return itemsInRow;
        };
        if (this.isResponsive) {
            var itemsCount = this.choices.length + (this.isDesignMode ? 1 : 0);
            var gap = this.gapBetweenItems || 0;
            var minWidth = this.minImageWidth;
            var maxWidth = this.maxImageWidth;
            var maxHeight = this.maxImageHeight;
            var minHeight = this.minImageHeight;
            var colCount = this.colCount;
            var width_1;
            if (colCount === 0) {
                if ((gap + minWidth) * itemsCount - gap > availableWidth) {
                    var itemsInRow = calcAvailableColumnsCount(availableWidth, minWidth, gap);
                    width_1 = Math.floor((availableWidth - gap * (itemsInRow - 1)) / itemsInRow);
                }
                else {
                    width_1 = Math.floor(((availableWidth - gap * (itemsCount - 1)) / itemsCount));
                }
            }
            else {
                var availableColumnsCount = calcAvailableColumnsCount(availableWidth, minWidth, gap);
                if (availableColumnsCount < colCount) {
                    this.responsiveColCount = availableColumnsCount >= 1 ? availableColumnsCount : 1;
                    colCount = this.responsiveColCount;
                }
                else {
                    this.responsiveColCount = colCount;
                }
                width_1 = Math.floor((availableWidth - gap * (colCount - 1)) / colCount);
            }
            width_1 = Math.max(minWidth, Math.min(width_1, maxWidth));
            var height_1 = Number.MIN_VALUE;
            this.choices.forEach(function (item) {
                var tempHeight = width_1 / item["aspectRatio"];
                height_1 = tempHeight > height_1 ? tempHeight : height_1;
            });
            if (height_1 > maxHeight) {
                height_1 = maxHeight;
            }
            else if (height_1 < minHeight) {
                height_1 = minHeight;
            }
            var oldResponsiveImageWidth = this.responsiveImageWidth;
            var oldResponsiveImageHeight = this.responsiveImageHeight;
            this.responsiveImageWidth = width_1;
            this.responsiveImageHeight = height_1;
            return oldResponsiveImageWidth !== this.responsiveImageWidth || oldResponsiveImageHeight !== this.responsiveImageHeight;
        }
        return false;
    };
    QuestionImagePickerModel.prototype.afterRender = function (el) {
        _super.prototype.afterRender.call(this, el);
        var variables = this.survey.getCss().variables;
        if (!!variables) {
            this.gapBetweenItems = Number.parseInt(window.getComputedStyle(el).getPropertyValue(variables.imagepickerGapBetweenItems)) || 0;
        }
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "responsiveImageHeight", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "responsiveImageWidth", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "isResponsiveValue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "maxImageWidth", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "minImageWidth", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "maxImageHeight", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "minImageHeight", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({})
    ], QuestionImagePickerModel.prototype, "responsiveColCount", void 0);
    return QuestionImagePickerModel;
}(_question_baseselect__WEBPACK_IMPORTED_MODULE_2__["QuestionCheckboxBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("imageitemvalue", [], function (value) { return new ImageItemValue(value); }, "itemvalue");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addProperty("imageitemvalue", {
    name: "imageLink",
    serializationProperty: "locImageLink",
});
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("responsiveImageSize", [], undefined, "number");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("imagepicker", [
    { name: "showOtherItem", visible: false },
    { name: "otherText", visible: false },
    { name: "showNoneItem", visible: false },
    { name: "noneText", visible: false },
    { name: "optionsCaption", visible: false },
    { name: "otherErrorText", visible: false },
    { name: "storeOthersAsComment", visible: false },
    {
        name: "contentMode",
        default: "image",
        choices: ["image", "video"],
    },
    {
        name: "imageFit",
        default: "contain",
        choices: ["none", "contain", "cover", "fill"],
    },
    { name: "imageHeight:number", minValue: 0 },
    { name: "imageWidth:number", minValue: 0 },
    { name: "minImageWidth:responsiveImageSize", default: 200, minValue: 0, visibleIf: function () { return _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].supportCreatorV2; } },
    { name: "minImageHeight:responsiveImageSize", default: 133, minValue: 0, visibleIf: function () { return _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].supportCreatorV2; } },
    { name: "maxImageWidth:responsiveImageSize", default: 400, minValue: 0, visibleIf: function () { return _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].supportCreatorV2; } },
    { name: "maxImageHeight:responsiveImageSize", default: 266, minValue: 0, visibleIf: function () { return _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].supportCreatorV2; } },
], function () {
    return new QuestionImagePickerModel("");
}, "checkboxbase");
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addProperty("imagepicker", {
    name: "showLabel:boolean",
    default: false,
});
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addProperty("imagepicker", {
    name: "colCount:number",
    default: 0,
    choices: [0, 1, 2, 3, 4, 5],
});
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addProperty("imagepicker", {
    name: "multiSelect:boolean",
    default: false,
});
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addProperty("imagepicker", {
    name: "choices:imageitemvalue[]",
});
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("imagepicker", function (name) {
    var q = new QuestionImagePickerModel(name);
    //q.choices = QuestionFactory.DefaultChoices;
    return q;
});


/***/ }),

/***/ "./src/question_matrix.ts":
/*!********************************!*\
  !*** ./src/question_matrix.ts ***!
  \********************************/
/*! exports provided: MatrixRowModel, MatrixCells, QuestionMatrixModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixRowModel", function() { return MatrixRowModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixCells", function() { return MatrixCells; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixModel", function() { return QuestionMatrixModel; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _martixBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./martixBase */ "./src/martixBase.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _question_dropdown__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./question_dropdown */ "./src/question_dropdown.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();












var MatrixRowModel = /** @class */ (function (_super) {
    __extends(MatrixRowModel, _super);
    function MatrixRowModel(item, fullName, data, value) {
        var _this = _super.call(this) || this;
        _this.fullName = fullName;
        _this.item = item;
        _this.data = data;
        _this.value = value;
        _this.cellClick = function (column) {
            _this.value = column.value;
        };
        _this.registerPropertyChangedHandlers(["value"], function () {
            if (_this.data)
                _this.data.onMatrixRowChanged(_this);
        });
        return _this;
    }
    Object.defineProperty(MatrixRowModel.prototype, "name", {
        get: function () {
            return this.item.value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixRowModel.prototype, "text", {
        get: function () {
            return this.item.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixRowModel.prototype, "locText", {
        get: function () {
            return this.item.locText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixRowModel.prototype, "value", {
        get: function () {
            return this.getPropertyValue("value");
        },
        set: function (newValue) {
            newValue = this.data.getCorrectedRowValue(newValue);
            this.setPropertyValue("value", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixRowModel.prototype, "rowClasses", {
        get: function () {
            var cssClasses = this.data.cssClasses;
            var hasError = !!this.data.getErrorByType("requiredinallrowserror");
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]().append(cssClasses.row)
                .append(cssClasses.rowError, hasError && this.isValueEmpty(this.value))
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    return MatrixRowModel;
}(_base__WEBPACK_IMPORTED_MODULE_4__["Base"]));

var MatrixCells = /** @class */ (function () {
    function MatrixCells(cellsOwner) {
        this.cellsOwner = cellsOwner;
        this.values = {};
    }
    Object.defineProperty(MatrixCells.prototype, "isEmpty", {
        get: function () {
            return Object.keys(this.values).length == 0;
        },
        enumerable: false,
        configurable: true
    });
    MatrixCells.prototype.valuesChanged = function () {
        if (!!this.onValuesChanged) {
            this.onValuesChanged();
        }
    };
    MatrixCells.prototype.setCellText = function (row, column, val) {
        row = this.getCellRowColumnValue(row, this.rows);
        column = this.getCellRowColumnValue(column, this.columns);
        if (!row || !column)
            return;
        if (val) {
            if (!this.values[row])
                this.values[row] = {};
            if (!this.values[row][column])
                this.values[row][column] = this.createString();
            this.values[row][column].text = val;
        }
        else {
            if (this.values[row] && this.values[row][column]) {
                var loc = this.values[row][column];
                loc.text = "";
                if (loc.isEmpty) {
                    delete this.values[row][column];
                    if (Object.keys(this.values[row]).length == 0) {
                        delete this.values[row];
                    }
                }
            }
        }
        this.valuesChanged();
    };
    MatrixCells.prototype.setDefaultCellText = function (column, val) {
        this.setCellText(_settings__WEBPACK_IMPORTED_MODULE_10__["settings"].matrixDefaultRowName, column, val);
    };
    MatrixCells.prototype.getCellLocText = function (row, column) {
        row = this.getCellRowColumnValue(row, this.rows);
        column = this.getCellRowColumnValue(column, this.columns);
        if (!row || !column)
            return null;
        if (!this.values[row])
            return null;
        if (!this.values[row][column])
            return null;
        return this.values[row][column];
    };
    MatrixCells.prototype.getDefaultCellLocText = function (column, val) {
        return this.getCellLocText(_settings__WEBPACK_IMPORTED_MODULE_10__["settings"].matrixDefaultRowName, column);
    };
    MatrixCells.prototype.getCellDisplayLocText = function (row, column) {
        var cellText = this.getCellLocText(row, column);
        if (cellText && !cellText.isEmpty)
            return cellText;
        cellText = this.getCellLocText(_settings__WEBPACK_IMPORTED_MODULE_10__["settings"].matrixDefaultRowName, column);
        if (cellText && !cellText.isEmpty)
            return cellText;
        if (typeof column == "number") {
            column =
                column >= 0 && column < this.columns.length
                    ? this.columns[column]
                    : null;
        }
        if (column && column.locText)
            return column.locText;
        return null;
    };
    MatrixCells.prototype.getCellText = function (row, column) {
        var loc = this.getCellLocText(row, column);
        return loc ? loc.calculatedText : null;
    };
    MatrixCells.prototype.getDefaultCellText = function (column) {
        var loc = this.getCellLocText(_settings__WEBPACK_IMPORTED_MODULE_10__["settings"].matrixDefaultRowName, column);
        return loc ? loc.calculatedText : null;
    };
    MatrixCells.prototype.getCellDisplayText = function (row, column) {
        var loc = this.getCellDisplayLocText(row, column);
        return loc ? loc.calculatedText : null;
    };
    Object.defineProperty(MatrixCells.prototype, "rows", {
        get: function () {
            return this.cellsOwner ? this.cellsOwner.getRows() : [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixCells.prototype, "columns", {
        get: function () {
            return this.cellsOwner ? this.cellsOwner.getColumns() : [];
        },
        enumerable: false,
        configurable: true
    });
    MatrixCells.prototype.getCellRowColumnValue = function (val, values) {
        if (val === null || val === undefined)
            return null;
        if (typeof val == "number") {
            if (val < 0 || val >= values.length)
                return null;
            val = values[val].value;
        }
        if (val.value)
            return val.value;
        return val;
    };
    MatrixCells.prototype.getJson = function () {
        if (this.isEmpty)
            return null;
        var res = {};
        for (var row in this.values) {
            var resRow = {};
            var rowValues = this.values[row];
            for (var col in rowValues) {
                resRow[col] = rowValues[col].getJson();
            }
            res[row] = resRow;
        }
        return res;
    };
    MatrixCells.prototype.setJson = function (value) {
        this.values = {};
        if (!!value) {
            for (var row in value) {
                if (row == "pos")
                    continue;
                var rowValues = value[row];
                this.values[row] = {};
                for (var col in rowValues) {
                    if (col == "pos")
                        continue;
                    var loc = this.createString();
                    loc.setJson(rowValues[col]);
                    this.values[row][col] = loc;
                }
            }
        }
        this.valuesChanged();
    };
    MatrixCells.prototype.locStrsChanged = function () {
        if (this.isEmpty)
            return;
        for (var row in this.values) {
            var rowValues = this.values[row];
            for (var col in rowValues) {
                rowValues[col].strChanged();
            }
        }
    };
    MatrixCells.prototype.createString = function () {
        return new _localizablestring__WEBPACK_IMPORTED_MODULE_8__["LocalizableString"](this.cellsOwner, true);
    };
    return MatrixCells;
}());

/**
  * A class that describes the Single-Choice Matrix question type.
  *
  * [View Demo](https://surveyjs.io/form-library/examples/single-selection-matrix-table-question/ (linkStyle))
  */
var QuestionMatrixModel = /** @class */ (function (_super) {
    __extends(QuestionMatrixModel, _super);
    function QuestionMatrixModel(name) {
        var _this = _super.call(this, name) || this;
        _this.isRowChanging = false;
        _this.emptyLocalizableString = new _localizablestring__WEBPACK_IMPORTED_MODULE_8__["LocalizableString"](_this);
        _this.cellsValue = new MatrixCells(_this);
        _this.cellsValue.onValuesChanged = function () {
            _this.updateHasCellText();
            _this.propertyValueChanged("cells", _this.cells, _this.cells);
        };
        _this.registerPropertyChangedHandlers(["columns"], function () {
            _this.onColumnsChanged();
        });
        _this.registerPropertyChangedHandlers(["rows"], function () {
            if (!_this.filterItems()) {
                _this.onRowsChanged();
            }
        });
        _this.registerPropertyChangedHandlers(["hideIfRowsEmpty"], function () {
            _this.updateVisibilityBasedOnRows();
        });
        return _this;
    }
    QuestionMatrixModel.prototype.getType = function () {
        return "matrix";
    };
    Object.defineProperty(QuestionMatrixModel.prototype, "hasSingleInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixModel.prototype, "isAllRowRequired", {
        /**
         * Specifies whether each row requires an answer. If a respondent skips a row, the question displays a validation error.
         * @see isRequired
         */
        get: function () {
            return this.getPropertyValue("isAllRowRequired", false);
        },
        set: function (val) {
            this.setPropertyValue("isAllRowRequired", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixModel.prototype, "hasRows", {
        get: function () {
            return this.rows.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixModel.prototype, "rowsOrder", {
        /**
         * Specifies a sort order for matrix rows.
         *
         * Possible values:
         *
         * - "initial" (default) - Preserves the original order of the `rows` array.
         * - "random" - Arranges matrix rows in random order each time the question is displayed.
         * @see rows
         */
        get: function () {
            return this.getPropertyValue("rowsOrder");
        },
        set: function (val) {
            val = val.toLowerCase();
            if (val == this.rowsOrder)
                return;
            this.setPropertyValue("rowsOrder", val);
            this.onRowsChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixModel.prototype, "hideIfRowsEmpty", {
        /**
         * Specifies whether to hide the question when the matrix has no visible rows.
         * @see rowsVisibleIf
         */
        get: function () {
            return this.getPropertyValue("hideIfRowsEmpty");
        },
        set: function (val) {
            this.setPropertyValue("hideIfRowsEmpty", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixModel.prototype.getRows = function () {
        return this.rows;
    };
    QuestionMatrixModel.prototype.getColumns = function () {
        return this.visibleColumns;
    };
    QuestionMatrixModel.prototype.addColumn = function (value, text) {
        var col = new _itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"](value, text);
        this.columns.push(col);
        return col;
    };
    QuestionMatrixModel.prototype.getItemClass = function (row, column) {
        var isChecked = row.value == column.value;
        var isDisabled = this.isReadOnly;
        var allowHover = !isChecked && !isDisabled;
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]()
            .append(this.cssClasses.cell, this.hasCellText)
            .append(this.hasCellText ? this.cssClasses.cellText : this.cssClasses.label)
            .append(this.cssClasses.itemOnError, !this.hasCellText && this.errors.length > 0)
            .append(this.hasCellText ? this.cssClasses.cellTextSelected : this.cssClasses.itemChecked, isChecked)
            .append(this.hasCellText ? this.cssClasses.cellTextDisabled : this.cssClasses.itemDisabled, isDisabled)
            .append(this.cssClasses.itemHover, allowHover && !this.hasCellText)
            .toString();
    };
    Object.defineProperty(QuestionMatrixModel.prototype, "itemSvgIcon", {
        get: function () {
            return this.cssClasses.itemSvgIconId;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixModel.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.cells.locStrsChanged();
    };
    QuestionMatrixModel.prototype.getQuizQuestionCount = function () {
        var res = 0;
        for (var i = 0; i < this.rows.length; i++) {
            if (!this.isValueEmpty(this.correctAnswer[this.rows[i].value]))
                res++;
        }
        return res;
    };
    QuestionMatrixModel.prototype.getCorrectAnswerCount = function () {
        var res = 0;
        var value = this.value;
        for (var i = 0; i < this.rows.length; i++) {
            var row = this.rows[i].value;
            if (!this.isValueEmpty(value[row]) &&
                this.isTwoValueEquals(this.correctAnswer[row], value[row]))
                res++;
        }
        return res;
    };
    QuestionMatrixModel.prototype.getVisibleRows = function () {
        var result = new Array();
        var val = this.value;
        if (!val)
            val = {};
        var rows = !!this.filteredRows ? this.filteredRows : this.rows;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (this.isValueEmpty(row.value))
                continue;
            result.push(this.createMatrixRow(row, this.id + "_" + row.value.toString().replace(/\s/g, "_"), val[row.value]));
        }
        this.generatedVisibleRows = result;
        return result;
    };
    QuestionMatrixModel.prototype.sortVisibleRows = function (array) {
        if (!!this.survey && this.survey.isDesignMode)
            return array;
        var order = this.rowsOrder.toLowerCase();
        if (order === "random")
            return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].randomizeArray(array);
        return array;
    };
    QuestionMatrixModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.rows = this.sortVisibleRows(this.rows);
    };
    QuestionMatrixModel.prototype.processRowsOnSet = function (newRows) {
        return this.sortVisibleRows(newRows);
    };
    Object.defineProperty(QuestionMatrixModel.prototype, "visibleRows", {
        get: function () {
            return this.getVisibleRows();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixModel.prototype, "cells", {
        get: function () {
            return this.cellsValue;
        },
        set: function (value) {
            this.cells.setJson(value && value.getJson ? value.getJson() : null);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixModel.prototype, "hasCellText", {
        get: function () {
            return this.getPropertyValue("hasCellText", false);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixModel.prototype.updateHasCellText = function () {
        this.setPropertyValue("hasCellText", !this.cells.isEmpty);
    };
    QuestionMatrixModel.prototype.setCellText = function (row, column, val) {
        this.cells.setCellText(row, column, val);
    };
    QuestionMatrixModel.prototype.getCellText = function (row, column) {
        return this.cells.getCellText(row, column);
    };
    QuestionMatrixModel.prototype.setDefaultCellText = function (column, val) {
        this.cells.setDefaultCellText(column, val);
    };
    QuestionMatrixModel.prototype.getDefaultCellText = function (column) {
        return this.cells.getDefaultCellText(column);
    };
    QuestionMatrixModel.prototype.getCellDisplayText = function (row, column) {
        return this.cells.getCellDisplayText(row, column);
    };
    QuestionMatrixModel.prototype.getCellDisplayLocText = function (row, column) {
        var loc = this.cells.getCellDisplayLocText(row, column);
        return loc ? loc : this.emptyLocalizableString;
    };
    QuestionMatrixModel.prototype.supportGoNextPageAutomatic = function () {
        return this.hasValuesInAllRows();
    };
    QuestionMatrixModel.prototype.onCheckForErrors = function (errors, isOnValueChanged) {
        _super.prototype.onCheckForErrors.call(this, errors, isOnValueChanged);
        if ((!isOnValueChanged || this.errors.length > 0) &&
            this.hasErrorInRows()) {
            errors.push(new _error__WEBPACK_IMPORTED_MODULE_6__["RequiredInAllRowsError"](null, this));
        }
    };
    QuestionMatrixModel.prototype.hasErrorInRows = function () {
        if (!this.isAllRowRequired)
            return false;
        return !this.hasValuesInAllRows();
    };
    QuestionMatrixModel.prototype.hasValuesInAllRows = function () {
        var rows = this.generatedVisibleRows;
        if (!rows)
            rows = this.visibleRows;
        if (!rows)
            return true;
        for (var i = 0; i < rows.length; i++) {
            if (this.isValueEmpty(rows[i].value))
                return false;
        }
        return true;
    };
    QuestionMatrixModel.prototype.getIsAnswered = function () {
        return _super.prototype.getIsAnswered.call(this) && this.hasValuesInAllRows();
    };
    QuestionMatrixModel.prototype.createMatrixRow = function (item, fullName, value) {
        var row = new MatrixRowModel(item, fullName, this, value);
        this.onMatrixRowCreated(row);
        return row;
    };
    QuestionMatrixModel.prototype.onMatrixRowCreated = function (row) { };
    QuestionMatrixModel.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        _super.prototype.setQuestionValue.call(this, newValue, this.isRowChanging || updateIsAnswered);
        if (!this.generatedVisibleRows || this.generatedVisibleRows.length == 0)
            return;
        this.isRowChanging = true;
        var val = this.value;
        if (!val)
            val = {};
        if (this.rows.length == 0) {
            this.generatedVisibleRows[0].value = val;
        }
        else {
            for (var i = 0; i < this.generatedVisibleRows.length; i++) {
                var row = this.generatedVisibleRows[i];
                var rowVal = val[row.name];
                if (this.isValueEmpty(rowVal))
                    rowVal = null;
                this.generatedVisibleRows[i].value = rowVal;
            }
        }
        this.updateIsAnswered();
        this.isRowChanging = false;
    };
    QuestionMatrixModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        var res = {};
        for (var key in value) {
            var newKey = keysAsText
                ? _itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getTextOrHtmlByValue(this.rows, key)
                : key;
            if (!newKey)
                newKey = key;
            var newValue = _itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getTextOrHtmlByValue(this.columns, value[key]);
            if (!newValue)
                newValue = value[key];
            res[newKey] = newValue;
        }
        return res;
    };
    QuestionMatrixModel.prototype.getPlainData = function (options) {
        var _this = this;
        if (options === void 0) { options = {
            includeEmpty: true,
        }; }
        var questionPlainData = _super.prototype.getPlainData.call(this, options);
        if (!!questionPlainData) {
            var values = this.createValueCopy();
            questionPlainData.isNode = true;
            questionPlainData.data = Object.keys(values || {}).map(function (rowName) {
                var row = _this.rows.filter(function (r) { return r.value === rowName; })[0];
                var rowDataItem = {
                    name: rowName,
                    title: !!row ? row.text : "row",
                    value: values[rowName],
                    displayValue: _itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getTextOrHtmlByValue(_this.visibleColumns, values[rowName]),
                    getString: function (val) {
                        return typeof val === "object" ? JSON.stringify(val) : val;
                    },
                    isNode: false,
                };
                var item = _itemvalue__WEBPACK_IMPORTED_MODULE_1__["ItemValue"].getItemByValue(_this.visibleColumns, values[rowName]);
                if (!!item) {
                    (options.calculations || []).forEach(function (calculation) {
                        rowDataItem[calculation.propertyName] =
                            item[calculation.propertyName];
                    });
                }
                return rowDataItem;
            });
        }
        return questionPlainData;
    };
    QuestionMatrixModel.prototype.addConditionObjectsByContext = function (objects, context) {
        for (var i = 0; i < this.rows.length; i++) {
            var row = this.rows[i];
            if (!!row.value) {
                objects.push({
                    name: this.getValueName() + "." + row.value,
                    text: this.processedTitle + "." + row.calculatedText,
                    question: this,
                });
            }
        }
    };
    QuestionMatrixModel.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        if (!path)
            return _super.prototype.getConditionJson.call(this);
        var question = new _question_dropdown__WEBPACK_IMPORTED_MODULE_9__["QuestionDropdownModel"](path);
        question.choices = this.columns;
        var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_3__["JsonObject"]().toJsonObject(question);
        json["type"] = question.getType();
        return json;
    };
    QuestionMatrixModel.prototype.clearValueIfInvisibleCore = function () {
        _super.prototype.clearValueIfInvisibleCore.call(this);
        if (this.hasRows) {
            this.clearInvisibleValuesInRows();
        }
    };
    QuestionMatrixModel.prototype.getFirstInputElementId = function () {
        var rows = this.generatedVisibleRows;
        if (!rows)
            rows = this.visibleRows;
        if (rows.length > 0 && this.visibleColumns.length > 0) {
            return this.inputId + "_" + rows[0].name + "_" + 0;
        }
        return _super.prototype.getFirstInputElementId.call(this);
    };
    //IMatrixData
    QuestionMatrixModel.prototype.onMatrixRowChanged = function (row) {
        if (this.isRowChanging)
            return;
        this.isRowChanging = true;
        if (!this.hasRows) {
            this.setNewValue(row.value);
        }
        else {
            var newValue = this.value;
            if (!newValue) {
                newValue = {};
            }
            newValue[row.name] = row.value;
            this.setNewValue(newValue);
        }
        this.isRowChanging = false;
    };
    QuestionMatrixModel.prototype.getCorrectedRowValue = function (value) {
        for (var i = 0; i < this.columns.length; i++) {
            if (value === this.columns[i].value)
                return value;
        }
        for (var i = 0; i < this.columns.length; i++) {
            if (this.isTwoValueEquals(value, this.columns[i].value))
                return this.columns[i].value;
        }
        return value;
    };
    QuestionMatrixModel.prototype.getSearchableItemValueKeys = function (keys) {
        keys.push("columns");
        keys.push("rows");
    };
    Object.defineProperty(QuestionMatrixModel.prototype, "SurveyModel", {
        get: function () {
            return this.survey;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixModel.prototype.getColumnHeaderWrapperComponentName = function (cell) {
        return this.SurveyModel.getElementWrapperComponentName({ column: cell }, "column-header");
    };
    QuestionMatrixModel.prototype.getColumnHeaderWrapperComponentData = function (cell) {
        return this.SurveyModel.getElementWrapperComponentData({ column: cell }, "column-header");
    };
    QuestionMatrixModel.prototype.getRowHeaderWrapperComponentName = function (cell) {
        return this.SurveyModel.getElementWrapperComponentName({ row: cell }, "row-header");
    };
    QuestionMatrixModel.prototype.getRowHeaderWrapperComponentData = function (cell) {
        return this.SurveyModel.getElementWrapperComponentData({ row: cell }, "row-header");
    };
    return QuestionMatrixModel;
}(_martixBase__WEBPACK_IMPORTED_MODULE_2__["QuestionMatrixBaseModel"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_3__["Serializer"].addClass("matrix", [
    "rowTitleWidth",
    {
        name: "columns:itemvalue[]", uniqueProperty: "value",
        baseValue: function () {
            return _surveyStrings__WEBPACK_IMPORTED_MODULE_5__["surveyLocalization"].getString("matrix_column");
        },
    },
    {
        name: "rows:itemvalue[]", uniqueProperty: "value",
        baseValue: function () {
            return _surveyStrings__WEBPACK_IMPORTED_MODULE_5__["surveyLocalization"].getString("matrix_row");
        },
    },
    { name: "cells:cells", serializationProperty: "cells" },
    {
        name: "rowsOrder",
        default: "initial",
        choices: ["initial", "random"],
    },
    "isAllRowRequired:boolean",
    "hideIfRowsEmpty:boolean",
], function () {
    return new QuestionMatrixModel("");
}, "matrixbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_7__["QuestionFactory"].Instance.registerQuestion("matrix", function (name) {
    var q = new QuestionMatrixModel(name);
    q.rows = _questionfactory__WEBPACK_IMPORTED_MODULE_7__["QuestionFactory"].DefaultRows;
    q.columns = _questionfactory__WEBPACK_IMPORTED_MODULE_7__["QuestionFactory"].DefaultColums;
    return q;
});


/***/ }),

/***/ "./src/question_matrixdropdown.ts":
/*!****************************************!*\
  !*** ./src/question_matrixdropdown.ts ***!
  \****************************************/
/*! exports provided: MatrixDropdownRowModel, QuestionMatrixDropdownModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModel", function() { return MatrixDropdownRowModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModel", function() { return QuestionMatrixDropdownModel; });
/* harmony import */ var _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./question_matrixdropdownbase */ "./src/question_matrixdropdownbase.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var MatrixDropdownRowModel = /** @class */ (function (_super) {
    __extends(MatrixDropdownRowModel, _super);
    function MatrixDropdownRowModel(name, item, data, value) {
        var _this = _super.call(this, data, value) || this;
        _this.name = name;
        _this.item = item;
        _this.buildCells(value);
        return _this;
    }
    Object.defineProperty(MatrixDropdownRowModel.prototype, "rowName", {
        get: function () {
            return this.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModel.prototype, "text", {
        get: function () {
            return this.item.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModel.prototype, "locText", {
        get: function () {
            return this.item.locText;
        },
        enumerable: false,
        configurable: true
    });
    return MatrixDropdownRowModel;
}(_question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_0__["MatrixDropdownRowModelBase"]));

/**
  * A class that describes the Multiple-Choice Matrix question type. Multiple-Choice Matrix allows you to use the [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel), [Checkbox](https://surveyjs.io/form-library/documentation/questioncheckboxmodel), [Radiogroup](https://surveyjs.io/form-library/documentation/questionradiogroupmodel), [Text](https://surveyjs.io/form-library/documentation/questiontextmodel), and [Comment](https://surveyjs.io/form-library/documentation/questioncommentmodel) question types as cell editors.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-matrixdropdown/ (linkStyle))
 */
var QuestionMatrixDropdownModel = /** @class */ (function (_super) {
    __extends(QuestionMatrixDropdownModel, _super);
    function QuestionMatrixDropdownModel(name) {
        var _this = _super.call(this, name) || this;
        _this.createLocalizableString("totalText", _this, true);
        _this.registerPropertyChangedHandlers(["rows"], function () {
            _this.clearGeneratedRows();
            _this.resetRenderedTable();
            if (!_this.filterItems()) {
                _this.onRowsChanged();
            }
            _this.clearIncorrectValues();
        });
        _this.registerPropertyChangedHandlers(["hideIfRowsEmpty"], function () {
            _this.updateVisibilityBasedOnRows();
        });
        return _this;
    }
    QuestionMatrixDropdownModel.prototype.getType = function () {
        return "matrixdropdown";
    };
    Object.defineProperty(QuestionMatrixDropdownModel.prototype, "totalText", {
        /**
         * A title for the total row. Applies if at least one column displays total values.
         * @see rowTitleWidth
         * @see columns
         */
        get: function () {
            return this.getLocalizableStringText("totalText", "");
        },
        set: function (val) {
            this.setLocalizableStringText("totalText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModel.prototype, "locTotalText", {
        get: function () {
            return this.getLocalizableString("totalText");
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModel.prototype.getFooterText = function () {
        return this.locTotalText;
    };
    QuestionMatrixDropdownModel.prototype.getRowTitleWidth = function () {
        return this.rowTitleWidth;
    };
    Object.defineProperty(QuestionMatrixDropdownModel.prototype, "hideIfRowsEmpty", {
        /**
         * Specifies whether to hide the question when the matrix has no visible rows.
         * @see rowsVisibleIf
         */
        get: function () {
            return this.getPropertyValue("hideIfRowsEmpty", false);
        },
        set: function (val) {
            this.setPropertyValue("hideIfRowsEmpty", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        if (!value)
            return value;
        var rows = this.visibleRows;
        var res = {};
        if (!rows)
            return res;
        for (var i = 0; i < rows.length; i++) {
            var rowValue = rows[i].rowName;
            var val = value[rowValue];
            if (!val)
                continue;
            if (keysAsText) {
                var displayRowValue = _itemvalue__WEBPACK_IMPORTED_MODULE_2__["ItemValue"].getTextOrHtmlByValue(this.rows, rowValue);
                if (!!displayRowValue) {
                    rowValue = displayRowValue;
                }
            }
            res[rowValue] = this.getRowDisplayValue(keysAsText, rows[i], val);
        }
        return res;
    };
    QuestionMatrixDropdownModel.prototype.getConditionObjectRowName = function (index) {
        return "." + this.rows[index].value;
    };
    QuestionMatrixDropdownModel.prototype.getConditionObjectRowText = function (index) {
        return "." + this.rows[index].calculatedText;
    };
    QuestionMatrixDropdownModel.prototype.getConditionObjectsRowIndeces = function () {
        var res = [];
        for (var i = 0; i < this.rows.length; i++)
            res.push(i);
        return res;
    };
    QuestionMatrixDropdownModel.prototype.setNewValue = function (newValue) {
        if (!!newValue && typeof newValue !== "object")
            return;
        _super.prototype.setNewValue.call(this, newValue);
    };
    QuestionMatrixDropdownModel.prototype.clearIncorrectValues = function () {
        var val = this.value;
        if (!val)
            return;
        var newVal = null;
        var isChanged = false;
        var rows = !!this.filteredRows ? this.filteredRows : this.rows;
        for (var key in val) {
            if (_itemvalue__WEBPACK_IMPORTED_MODULE_2__["ItemValue"].getItemByValue(rows, key)) {
                if (newVal == null)
                    newVal = {};
                newVal[key] = val[key];
            }
            else {
                isChanged = true;
            }
        }
        if (isChanged) {
            this.value = newVal;
        }
        _super.prototype.clearIncorrectValues.call(this);
    };
    QuestionMatrixDropdownModel.prototype.clearValueIfInvisibleCore = function () {
        _super.prototype.clearValueIfInvisibleCore.call(this);
        this.clearInvisibleValuesInRows();
    };
    QuestionMatrixDropdownModel.prototype.generateRows = function () {
        var result = new Array();
        var rows = !!this.filteredRows ? this.filteredRows : this.rows;
        if (!rows || rows.length === 0)
            return result;
        var val = this.value;
        if (!val)
            val = {};
        for (var i = 0; i < rows.length; i++) {
            if (!rows[i].value)
                continue;
            result.push(this.createMatrixRow(rows[i], val[rows[i].value]));
        }
        return result;
    };
    QuestionMatrixDropdownModel.prototype.createMatrixRow = function (item, value) {
        return new MatrixDropdownRowModel(item.value, item, this, value);
    };
    QuestionMatrixDropdownModel.prototype.getSearchableItemValueKeys = function (keys) {
        keys.push("rows");
    };
    QuestionMatrixDropdownModel.prototype.updateProgressInfoByValues = function (res) {
        var val = this.value;
        if (!val)
            val = {};
        for (var i = 0; i < this.rows.length; i++) {
            var row = this.rows[i];
            var rowValue = val[row.value];
            this.updateProgressInfoByRow(res, !!rowValue ? rowValue : {});
        }
    };
    return QuestionMatrixDropdownModel;
}(_question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("matrixdropdown", [
    {
        name: "rows:itemvalue[]", uniqueProperty: "value"
    },
    "rowsVisibleIf:condition",
    "rowTitleWidth",
    { name: "totalText", serializationProperty: "locTotalText" },
    "hideIfRowsEmpty:boolean"
], function () {
    return new QuestionMatrixDropdownModel("");
}, "matrixdropdownbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_3__["QuestionFactory"].Instance.registerQuestion("matrixdropdown", function (name) {
    var q = new QuestionMatrixDropdownModel(name);
    q.choices = [1, 2, 3, 4, 5];
    q.rows = _questionfactory__WEBPACK_IMPORTED_MODULE_3__["QuestionFactory"].DefaultRows;
    _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_0__["QuestionMatrixDropdownModelBase"].addDefaultColumns(q);
    return q;
});


/***/ }),

/***/ "./src/question_matrixdropdownbase.ts":
/*!********************************************!*\
  !*** ./src/question_matrixdropdownbase.ts ***!
  \********************************************/
/*! exports provided: MatrixDropdownCell, MatrixDropdownTotalCell, MatrixDropdownRowModelBase, MatrixDropdownTotalRowModel, QuestionMatrixDropdownModelBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownCell", function() { return MatrixDropdownCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownTotalCell", function() { return MatrixDropdownTotalCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownRowModelBase", function() { return MatrixDropdownRowModelBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownTotalRowModel", function() { return MatrixDropdownTotalRowModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownModelBase", function() { return QuestionMatrixDropdownModelBase; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _martixBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./martixBase */ "./src/martixBase.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _textPreProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./textPreProcessor */ "./src/textPreProcessor.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _functionsfactory__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functionsfactory */ "./src/functionsfactory.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _question_matrixdropdowncolumn__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./question_matrixdropdowncolumn */ "./src/question_matrixdropdowncolumn.ts");
/* harmony import */ var _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./question_matrixdropdownrendered */ "./src/question_matrixdropdownrendered.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();














var MatrixDropdownCell = /** @class */ (function () {
    function MatrixDropdownCell(column, row, data) {
        this.column = column;
        this.row = row;
        this.data = data;
        this.questionValue = this.createQuestion(column, row, data);
        this.questionValue.updateCustomWidget();
    }
    MatrixDropdownCell.prototype.locStrsChanged = function () {
        this.question.locStrsChanged();
    };
    MatrixDropdownCell.prototype.createQuestion = function (column, row, data) {
        var res = data.createQuestion(this.row, this.column);
        res.validateValueCallback = function () {
            return data.validateCell(row, column.name, row.value);
        };
        _jsonobject__WEBPACK_IMPORTED_MODULE_0__["CustomPropertiesCollection"].getProperties(column.getType()).forEach(function (property) {
            var propertyName = property.name;
            if (column[propertyName] !== undefined) {
                res[propertyName] = column[propertyName];
            }
        });
        return res;
    };
    Object.defineProperty(MatrixDropdownCell.prototype, "question", {
        get: function () {
            return this.questionValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownCell.prototype, "value", {
        get: function () {
            return this.question.value;
        },
        set: function (value) {
            this.question.value = value;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownCell.prototype.runCondition = function (values, properties) {
        this.question.runCondition(values, properties);
    };
    return MatrixDropdownCell;
}());

var MatrixDropdownTotalCell = /** @class */ (function (_super) {
    __extends(MatrixDropdownTotalCell, _super);
    function MatrixDropdownTotalCell(column, row, data) {
        var _this = _super.call(this, column, row, data) || this;
        _this.column = column;
        _this.row = row;
        _this.data = data;
        _this.updateCellQuestion();
        return _this;
    }
    MatrixDropdownTotalCell.prototype.createQuestion = function (column, row, data) {
        var res = _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass("expression");
        res.setSurveyImpl(row);
        return res;
    };
    MatrixDropdownTotalCell.prototype.locStrsChanged = function () {
        this.updateCellQuestion();
        _super.prototype.locStrsChanged.call(this);
    };
    MatrixDropdownTotalCell.prototype.updateCellQuestion = function () {
        this.question.locCalculation();
        this.column.updateCellQuestion(this.question, null, function (json) {
            delete json["defaultValue"];
        });
        this.question.expression = this.getTotalExpression();
        this.question.format = this.column.totalFormat;
        this.question.currency = this.column.totalCurrency;
        this.question.displayStyle = this.column.totalDisplayStyle;
        this.question.maximumFractionDigits = this.column.totalMaximumFractionDigits;
        this.question.minimumFractionDigits = this.column.totalMinimumFractionDigits;
        this.question.unlocCalculation();
        this.question.runIfReadOnly = true;
    };
    MatrixDropdownTotalCell.prototype.getTotalExpression = function () {
        if (!!this.column.totalExpression)
            return this.column.totalExpression;
        if (this.column.totalType == "none")
            return "";
        var funName = this.column.totalType + "InArray";
        if (!_functionsfactory__WEBPACK_IMPORTED_MODULE_8__["FunctionFactory"].Instance.hasFunction(funName))
            return "";
        return funName + "({self}, '" + this.column.name + "')";
    };
    return MatrixDropdownTotalCell;
}(MatrixDropdownCell));

var MatrixDropdownRowTextProcessor = /** @class */ (function (_super) {
    __extends(MatrixDropdownRowTextProcessor, _super);
    function MatrixDropdownRowTextProcessor(row, variableName, parentTextProcessor) {
        var _this = _super.call(this, variableName) || this;
        _this.row = row;
        _this.variableName = variableName;
        _this.parentTextProcessor = parentTextProcessor;
        return _this;
    }
    MatrixDropdownRowTextProcessor.prototype.getParentTextProcessor = function () { return this.parentTextProcessor; };
    Object.defineProperty(MatrixDropdownRowTextProcessor.prototype, "survey", {
        get: function () {
            return this.row.getSurvey();
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownRowTextProcessor.prototype.getValues = function () {
        return this.row.value;
    };
    MatrixDropdownRowTextProcessor.prototype.getQuestionByName = function (name) {
        return this.row.getQuestionByName(name);
    };
    MatrixDropdownRowTextProcessor.prototype.onCustomProcessText = function (textValue) {
        if (textValue.name == MatrixDropdownRowModelBase.IndexVariableName) {
            textValue.isExists = true;
            textValue.value = this.row.rowIndex;
            return true;
        }
        if (textValue.name == MatrixDropdownRowModelBase.RowValueVariableName) {
            textValue.isExists = true;
            textValue.value = this.row.rowName;
            return true;
        }
        return false;
    };
    return MatrixDropdownRowTextProcessor;
}(_textPreProcessor__WEBPACK_IMPORTED_MODULE_5__["QuestionTextProcessor"]));
var MatrixDropdownRowModelBase = /** @class */ (function () {
    function MatrixDropdownRowModelBase(data, value) {
        var _this = this;
        this.isSettingValue = false;
        this.detailPanelValue = null;
        this.cells = [];
        this.isCreatingDetailPanel = false;
        this.data = data;
        this.subscribeToChanges(value);
        this.textPreProcessor = new MatrixDropdownRowTextProcessor(this, MatrixDropdownRowModelBase.RowVariableName, !!data ? data.getParentTextProcessor() : null);
        this.showHideDetailPanelClick = function () {
            if (_this.getSurvey().isDesignMode)
                return true;
            _this.showHideDetailPanel();
        };
        this.idValue = MatrixDropdownRowModelBase.getId();
    }
    MatrixDropdownRowModelBase.getId = function () {
        return "srow_" + MatrixDropdownRowModelBase.idCounter++;
    };
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "id", {
        get: function () {
            return this.idValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "rowName", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "text", {
        get: function () {
            return this.rowName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "value", {
        get: function () {
            var result = {};
            var questions = this.questions;
            for (var i = 0; i < questions.length; i++) {
                var question = questions[i];
                if (!question.isEmpty()) {
                    result[question.getValueName()] = question.value;
                }
                if (!!question.comment &&
                    !!this.getSurvey() &&
                    this.getSurvey().storeOthersAsComment) {
                    result[question.getValueName() + _base__WEBPACK_IMPORTED_MODULE_3__["Base"].commentSuffix] =
                        question.comment;
                }
            }
            return result;
        },
        set: function (value) {
            this.isSettingValue = true;
            this.subscribeToChanges(value);
            var questions = this.questions;
            for (var i = 0; i < questions.length; i++) {
                var question = questions[i];
                var val = this.getCellValue(value, question.getValueName());
                var oldComment = question.comment;
                var comment = !!value
                    ? value[question.getValueName() + _base__WEBPACK_IMPORTED_MODULE_3__["Base"].commentSuffix]
                    : "";
                if (comment == undefined)
                    comment = "";
                question.updateValueFromSurvey(val);
                if (!!comment || this.isTwoValueEquals(oldComment, question.comment)) {
                    question.updateCommentFromSurvey(comment);
                }
                question.onSurveyValueChanged(val);
            }
            this.isSettingValue = false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "locText", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "hasPanel", {
        get: function () {
            if (!this.data)
                return false;
            return this.data.hasDetailPanel(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "detailPanel", {
        get: function () {
            return this.detailPanelValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "detailPanelId", {
        get: function () {
            return !!this.detailPanel ? this.detailPanel.id : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "isDetailPanelShowing", {
        get: function () {
            return !!this.data ? this.data.getIsDetailPanelShowing(this) : false;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownRowModelBase.prototype.setIsDetailPanelShowing = function (val) {
        if (!!this.data) {
            this.data.setIsDetailPanelShowing(this, val);
        }
        if (!!this.onDetailPanelShowingChanged) {
            this.onDetailPanelShowingChanged();
        }
    };
    MatrixDropdownRowModelBase.prototype.showHideDetailPanel = function () {
        if (this.isDetailPanelShowing) {
            this.hideDetailPanel();
        }
        else {
            this.showDetailPanel();
        }
    };
    MatrixDropdownRowModelBase.prototype.showDetailPanel = function () {
        this.ensureDetailPanel();
        if (!this.detailPanelValue)
            return;
        this.setIsDetailPanelShowing(true);
    };
    MatrixDropdownRowModelBase.prototype.hideDetailPanel = function (destroyPanel) {
        if (destroyPanel === void 0) { destroyPanel = false; }
        this.setIsDetailPanelShowing(false);
        if (destroyPanel) {
            this.detailPanelValue = null;
        }
    };
    MatrixDropdownRowModelBase.prototype.ensureDetailPanel = function () {
        if (this.isCreatingDetailPanel)
            return;
        if (!!this.detailPanelValue || !this.hasPanel || !this.data)
            return;
        this.isCreatingDetailPanel = true;
        this.detailPanelValue = this.data.createRowDetailPanel(this);
        var questions = this.detailPanelValue.questions;
        var value = this.data.getRowValue(this.data.getRowIndex(this));
        if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(value)) {
            for (var i = 0; i < questions.length; i++) {
                var key = questions[i].getValueName();
                if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(value[key])) {
                    questions[i].value = value[key];
                }
            }
        }
        this.detailPanelValue.setSurveyImpl(this);
        this.isCreatingDetailPanel = false;
    };
    MatrixDropdownRowModelBase.prototype.getAllValues = function () {
        return this.value;
    };
    MatrixDropdownRowModelBase.prototype.getFilteredValues = function () {
        var allValues = this.getAllValues();
        var values = { row: allValues };
        for (var key in allValues) {
            values[key] = allValues[key];
        }
        return values;
    };
    MatrixDropdownRowModelBase.prototype.getFilteredProperties = function () {
        return { survey: this.getSurvey(), row: this };
    };
    MatrixDropdownRowModelBase.prototype.runCondition = function (values, properties) {
        if (!!this.data) {
            values[MatrixDropdownRowModelBase.OwnerVariableName] = this.data.value;
        }
        values[MatrixDropdownRowModelBase.IndexVariableName] = this.rowIndex;
        values[MatrixDropdownRowModelBase.RowValueVariableName] = this.rowName;
        if (!properties)
            properties = {};
        properties[MatrixDropdownRowModelBase.RowVariableName] = this;
        for (var i = 0; i < this.cells.length; i++) {
            values[MatrixDropdownRowModelBase.RowVariableName] = this.value;
            this.cells[i].runCondition(values, properties);
        }
        if (!!this.detailPanel) {
            this.detailPanel.runCondition(values, properties);
        }
    };
    MatrixDropdownRowModelBase.prototype.clearValue = function () {
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].clearValue();
        }
    };
    MatrixDropdownRowModelBase.prototype.onAnyValueChanged = function (name) {
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].onAnyValueChanged(name);
        }
    };
    MatrixDropdownRowModelBase.prototype.getDataValueCore = function (valuesHash, key) {
        var survey = this.getSurvey();
        if (!!survey) {
            return survey.getDataValueCore(valuesHash, key);
        }
        else {
            return valuesHash[key];
        }
    };
    MatrixDropdownRowModelBase.prototype.getValue = function (name) {
        var question = this.getQuestionByName(name);
        return !!question ? question.value : null;
    };
    MatrixDropdownRowModelBase.prototype.setValue = function (name, newColumnValue) {
        this.setValueCore(name, newColumnValue, false);
    };
    MatrixDropdownRowModelBase.prototype.getVariable = function (name) {
        return undefined;
    };
    MatrixDropdownRowModelBase.prototype.setVariable = function (name, newValue) { };
    MatrixDropdownRowModelBase.prototype.getComment = function (name) {
        var question = this.getQuestionByName(name);
        return !!question ? question.comment : "";
    };
    MatrixDropdownRowModelBase.prototype.setComment = function (name, newValue, locNotification) {
        this.setValueCore(name, newValue, true);
    };
    MatrixDropdownRowModelBase.prototype.findQuestionByName = function (name) {
        if (!name)
            return undefined;
        var prefix = MatrixDropdownRowModelBase.RowVariableName + ".";
        if (name.indexOf(prefix) === 0) {
            return this.getQuestionByName(name.substring(prefix.length));
        }
        var survey = this.getSurvey();
        return !!survey ? survey.getQuestionByName(name) : null;
    };
    MatrixDropdownRowModelBase.prototype.setValueCore = function (name, newColumnValue, isComment) {
        if (this.isSettingValue)
            return;
        this.updateQuestionsValue(name, newColumnValue, isComment);
        var newValue = this.value;
        var changedName = isComment ? name + _base__WEBPACK_IMPORTED_MODULE_3__["Base"].commentSuffix : name;
        var changedValue = newColumnValue;
        var changedQuestion = this.getQuestionByName(name);
        var changingValue = this.data.onRowChanging(this, changedName, newValue);
        if (!!changedQuestion &&
            !this.isTwoValueEquals(changingValue, changedValue)) {
            this.isSettingValue = true;
            if (isComment) {
                changedQuestion.comment = changingValue;
            }
            else {
                changedQuestion.value = changingValue;
            }
            this.isSettingValue = false;
            newValue = this.value;
        }
        if (this.data.isValidateOnValueChanging && this.hasQuestonError(changedQuestion))
            return;
        var isDeleting = newColumnValue == null && !changedQuestion ||
            isComment && !newColumnValue && !!changedQuestion && changedQuestion.autoOtherMode;
        this.data.onRowChanged(this, changedName, newValue, isDeleting);
        this.onAnyValueChanged(MatrixDropdownRowModelBase.RowVariableName);
    };
    MatrixDropdownRowModelBase.prototype.updateQuestionsValue = function (name, newColumnValue, isComment) {
        if (!this.detailPanel)
            return;
        var colQuestion = this.getQuestionByColumnName(name);
        var detailQuestion = this.detailPanel.getQuestionByName(name);
        if (!colQuestion || !detailQuestion)
            return;
        var isColQuestion = this.isTwoValueEquals(newColumnValue, isComment ? colQuestion.comment : colQuestion.value);
        var question = isColQuestion ? detailQuestion : colQuestion;
        this.isSettingValue = true;
        if (!isComment) {
            question.value = newColumnValue;
        }
        else {
            question.comment = newColumnValue;
        }
        this.isSettingValue = false;
    };
    MatrixDropdownRowModelBase.prototype.hasQuestonError = function (question) {
        if (!question)
            return false;
        if (question.hasErrors(true, {
            isOnValueChanged: !this.data.isValidateOnValueChanging,
        }))
            return true;
        if (question.isEmpty())
            return false;
        var cell = this.getCellByColumnName(question.name);
        if (!cell || !cell.column || !cell.column.isUnique)
            return false;
        return this.data.checkIfValueInRowDuplicated(this, question);
    };
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "isEmpty", {
        get: function () {
            var val = this.value;
            if (_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(val))
                return true;
            for (var key in val) {
                if (val[key] !== undefined && val[key] !== null)
                    return false;
            }
            return true;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownRowModelBase.prototype.getQuestionByColumn = function (column) {
        var cell = this.getCellByColumn(column);
        return !!cell ? cell.question : null;
    };
    MatrixDropdownRowModelBase.prototype.getCellByColumn = function (column) {
        for (var i = 0; i < this.cells.length; i++) {
            if (this.cells[i].column == column)
                return this.cells[i];
        }
        return null;
    };
    MatrixDropdownRowModelBase.prototype.getCellByColumnName = function (columnName) {
        for (var i = 0; i < this.cells.length; i++) {
            if (this.cells[i].column.name == columnName)
                return this.cells[i];
        }
        return null;
    };
    MatrixDropdownRowModelBase.prototype.getQuestionByColumnName = function (columnName) {
        var cell = this.getCellByColumnName(columnName);
        return !!cell ? cell.question : null;
    };
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "questions", {
        get: function () {
            var res = [];
            for (var i = 0; i < this.cells.length; i++) {
                res.push(this.cells[i].question);
            }
            var detailQuestions = !!this.detailPanel ? this.detailPanel.questions : [];
            for (var i = 0; i < detailQuestions.length; i++) {
                res.push(detailQuestions[i]);
            }
            return res;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownRowModelBase.prototype.getQuestionByName = function (name) {
        var res = this.getQuestionByColumnName(name);
        if (!!res)
            return res;
        return !!this.detailPanel ? this.detailPanel.getQuestionByName(name) : null;
    };
    MatrixDropdownRowModelBase.prototype.getQuestionsByName = function (name) {
        var res = [];
        var q = this.getQuestionByColumnName(name);
        if (!!q)
            res.push(q);
        if (!!this.detailPanel) {
            q = this.detailPanel.getQuestionByName(name);
            if (!!q)
                res.push(q);
        }
        return res;
    };
    MatrixDropdownRowModelBase.prototype.getSharedQuestionByName = function (columnName) {
        return !!this.data
            ? this.data.getSharedQuestionByName(columnName, this)
            : null;
    };
    MatrixDropdownRowModelBase.prototype.clearIncorrectValues = function (val) {
        for (var key in val) {
            var question = this.getQuestionByName(key);
            if (question) {
                var qVal = question.value;
                question.clearIncorrectValues();
                if (!this.isTwoValueEquals(qVal, question.value)) {
                    this.setValue(key, question.value);
                }
            }
            else {
                if (!this.getSharedQuestionByName(key) &&
                    key.indexOf(_settings__WEBPACK_IMPORTED_MODULE_9__["settings"].matrixTotalValuePostFix) < 0) {
                    this.setValue(key, null);
                }
            }
        }
    };
    MatrixDropdownRowModelBase.prototype.getLocale = function () {
        return this.data ? this.data.getLocale() : "";
    };
    MatrixDropdownRowModelBase.prototype.getMarkdownHtml = function (text, name) {
        return this.data ? this.data.getMarkdownHtml(text, name) : undefined;
    };
    MatrixDropdownRowModelBase.prototype.getRenderer = function (name) {
        return this.data ? this.data.getRenderer(name) : null;
    };
    MatrixDropdownRowModelBase.prototype.getRendererContext = function (locStr) {
        return this.data ? this.data.getRendererContext(locStr) : locStr;
    };
    MatrixDropdownRowModelBase.prototype.getProcessedText = function (text) {
        return this.data ? this.data.getProcessedText(text) : text;
    };
    MatrixDropdownRowModelBase.prototype.locStrsChanged = function () {
        for (var i = 0; i < this.cells.length; i++) {
            this.cells[i].locStrsChanged();
        }
        if (!!this.detailPanel) {
            this.detailPanel.locStrsChanged();
        }
    };
    MatrixDropdownRowModelBase.prototype.updateCellQuestionOnColumnChanged = function (column, name, newValue) {
        var cell = this.getCellByColumn(column);
        if (!cell)
            return;
        this.updateCellOnColumnChanged(cell, name, newValue);
    };
    MatrixDropdownRowModelBase.prototype.updateCellQuestionOnColumnItemValueChanged = function (column, propertyName, obj, name, newValue, oldValue) {
        var cell = this.getCellByColumn(column);
        if (!cell)
            return;
        this.updateCellOnColumnItemValueChanged(cell, propertyName, obj, name, newValue, oldValue);
    };
    MatrixDropdownRowModelBase.prototype.onQuestionReadOnlyChanged = function (parentIsReadOnly) {
        var questions = this.questions;
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            q.setPropertyValue("isReadOnly", q.isReadOnly);
        }
        if (!!this.detailPanel) {
            this.detailPanel.readOnly = parentIsReadOnly;
        }
    };
    MatrixDropdownRowModelBase.prototype.hasErrors = function (fireCallback, rec, raiseOnCompletedAsyncValidators) {
        var res = false;
        var cells = this.cells;
        if (!cells)
            return res;
        for (var colIndex = 0; colIndex < cells.length; colIndex++) {
            if (!cells[colIndex])
                continue;
            var question = cells[colIndex].question;
            if (!question || !question.visible)
                continue;
            question.onCompletedAsyncValidators = function (hasErrors) {
                raiseOnCompletedAsyncValidators();
            };
            if (!!rec && rec.isOnValueChanged === true && question.isEmpty())
                continue;
            res = question.hasErrors(fireCallback, rec) || res;
        }
        if (this.hasPanel) {
            this.ensureDetailPanel();
            var panelHasError = this.detailPanel.hasErrors(fireCallback, false, rec);
            if (!rec.hideErroredPanel && panelHasError && fireCallback) {
                if (rec.isSingleDetailPanel) {
                    rec.hideErroredPanel = true;
                }
                this.showDetailPanel();
            }
            res = panelHasError || res;
        }
        return res;
    };
    MatrixDropdownRowModelBase.prototype.updateCellOnColumnChanged = function (cell, name, newValue) {
        cell.question[name] = newValue;
    };
    MatrixDropdownRowModelBase.prototype.updateCellOnColumnItemValueChanged = function (cell, propertyName, obj, name, newValue, oldValue) {
        var items = cell.question[propertyName];
        if (!Array.isArray(items))
            return;
        var val = name === "value" ? oldValue : obj["value"];
        var item = _itemvalue__WEBPACK_IMPORTED_MODULE_6__["ItemValue"].getItemByValue(items, val);
        if (!item)
            return;
        item[name] = newValue;
    };
    MatrixDropdownRowModelBase.prototype.buildCells = function (value) {
        this.isSettingValue = true;
        var columns = this.data.columns;
        for (var i = 0; i < columns.length; i++) {
            var column = columns[i];
            if (!column.isVisible)
                continue;
            var cell = this.createCell(column);
            this.cells.push(cell);
            var cellValue = this.getCellValue(value, column.name);
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(cellValue)) {
                cell.question.value = cellValue;
                var commentKey = column.name + _base__WEBPACK_IMPORTED_MODULE_3__["Base"].commentSuffix;
                if (!!value && !_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(value[commentKey])) {
                    cell.question.comment = value[commentKey];
                }
            }
        }
        this.isSettingValue = false;
    };
    MatrixDropdownRowModelBase.prototype.isTwoValueEquals = function (val1, val2) {
        return _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(val1, val2, false, true, false);
    };
    MatrixDropdownRowModelBase.prototype.getCellValue = function (value, name) {
        if (!!this.editingObj)
            return _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].getObjPropertyValue(this.editingObj, name);
        return !!value ? value[name] : undefined;
    };
    MatrixDropdownRowModelBase.prototype.createCell = function (column) {
        return new MatrixDropdownCell(column, this, this.data);
    };
    MatrixDropdownRowModelBase.prototype.getSurveyData = function () {
        return this;
    };
    MatrixDropdownRowModelBase.prototype.getSurvey = function () {
        return this.data ? this.data.getSurvey() : null;
    };
    MatrixDropdownRowModelBase.prototype.getTextProcessor = function () {
        return this.textPreProcessor;
    };
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "rowIndex", {
        get: function () {
            return !!this.data ? this.data.getRowIndex(this) + 1 : -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownRowModelBase.prototype, "editingObj", {
        get: function () {
            return this.editingObjValue;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownRowModelBase.prototype.dispose = function () {
        if (!!this.editingObj) {
            this.editingObj.onPropertyChanged.remove(this.onEditingObjPropertyChanged);
            this.editingObjValue = null;
        }
    };
    MatrixDropdownRowModelBase.prototype.subscribeToChanges = function (value) {
        var _this = this;
        if (!value || !value.getType || !value.onPropertyChanged)
            return;
        if (value === this.editingObj)
            return;
        this.editingObjValue = value;
        this.onEditingObjPropertyChanged = function (sender, options) {
            _this.updateOnSetValue(options.name, options.newValue);
        };
        this.editingObj.onPropertyChanged.add(this.onEditingObjPropertyChanged);
    };
    MatrixDropdownRowModelBase.prototype.updateOnSetValue = function (name, newValue) {
        this.isSettingValue = true;
        var questions = this.getQuestionsByName(name);
        for (var i = 0; i < questions.length; i++) {
            questions[i].value = newValue;
        }
        this.isSettingValue = false;
    };
    MatrixDropdownRowModelBase.RowVariableName = "row";
    MatrixDropdownRowModelBase.OwnerVariableName = "self";
    MatrixDropdownRowModelBase.IndexVariableName = "rowIndex";
    MatrixDropdownRowModelBase.RowValueVariableName = "rowValue";
    MatrixDropdownRowModelBase.idCounter = 1;
    return MatrixDropdownRowModelBase;
}());

var MatrixDropdownTotalRowModel = /** @class */ (function (_super) {
    __extends(MatrixDropdownTotalRowModel, _super);
    function MatrixDropdownTotalRowModel(data) {
        var _this = _super.call(this, data, null) || this;
        _this.buildCells(null);
        return _this;
    }
    MatrixDropdownTotalRowModel.prototype.createCell = function (column) {
        return new MatrixDropdownTotalCell(column, this, this.data);
    };
    MatrixDropdownTotalRowModel.prototype.setValue = function (name, newValue) {
        if (!!this.data && !this.isSettingValue) {
            this.data.onTotalValueChanged();
        }
    };
    MatrixDropdownTotalRowModel.prototype.runCondition = function (values, properties) {
        var counter = 0;
        var prevValue;
        do {
            prevValue = _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].getUnbindValue(this.value);
            _super.prototype.runCondition.call(this, values, properties);
            counter++;
        } while (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(prevValue, this.value) && counter < 3);
    };
    MatrixDropdownTotalRowModel.prototype.updateCellOnColumnChanged = function (cell, name, newValue) {
        cell.updateCellQuestion();
    };
    return MatrixDropdownTotalRowModel;
}(MatrixDropdownRowModelBase));

/**
 * A base class for the [QuestionMatrixDropdownModel](https://surveyjs.io/form-library/documentation/questionmatrixdropdownmodel) and [QuestionMatrixDynamicModel](https://surveyjs.io/form-library/documentation/questionmatrixdynamicmodel) classes.
 */
var QuestionMatrixDropdownModelBase = /** @class */ (function (_super) {
    __extends(QuestionMatrixDropdownModelBase, _super);
    function QuestionMatrixDropdownModelBase(name) {
        var _this = _super.call(this, name) || this;
        _this.isRowChanging = false;
        _this.lockResetRenderedTable = false;
        _this.isDoingonAnyValueChanged = false;
        _this.createItemValues("choices");
        _this.createLocalizableString("placeholder", _this, false, true);
        _this.createLocalizableString("keyDuplicationError", _this, false, true);
        _this.detailPanelValue = _this.createNewDetailPanel();
        _this.detailPanel.selectedElementInDesign = _this;
        _this.detailPanel.renderWidth = "100%";
        _this.detailPanel.isInteractiveDesignElement = false;
        _this.detailPanel.showTitle = false;
        _this.registerPropertyChangedHandlers(["columns", "cellType"], function () { _this.updateColumnsAndRows(); });
        _this.registerPropertyChangedHandlers(["placeholder", "columnColCount", "rowTitleWidth", "choices"], function () {
            _this.clearRowsAndResetRenderedTable();
        });
        _this.registerPropertyChangedHandlers([
            "columnLayout",
            "addRowLocation",
            "hideColumnsIfEmpty",
            "showHeader",
            "minRowCount",
            "isReadOnly",
            "rowCount",
            "hasFooter",
            "detailPanelMode",
        ], function () {
            _this.resetRenderedTable();
        });
        _this.registerPropertyChangedHandlers(["isMobile"], function () {
            if (_this.columnLayout === "vertical") {
                _this.resetRenderedTable();
            }
        });
        return _this;
    }
    Object.defineProperty(QuestionMatrixDropdownModelBase, "defaultCellType", {
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].matrixDefaultCellType;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].matrixDefaultCellType = val;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.addDefaultColumns = function (matrix) {
        var colNames = _questionfactory__WEBPACK_IMPORTED_MODULE_7__["QuestionFactory"].DefaultColums;
        for (var i = 0; i < colNames.length; i++)
            matrix.addColumn(colNames[i]);
    };
    QuestionMatrixDropdownModelBase.prototype.createColumnValues = function () {
        var _this = this;
        return this.createNewArray("columns", function (item) {
            item.colOwner = _this;
            if (_this.onAddColumn)
                _this.onAddColumn(item);
            if (_this.survey) {
                _this.survey.matrixColumnAdded(_this, item);
            }
        }, function (item) {
            item.colOwner = null;
            if (_this.onRemoveColumn)
                _this.onRemoveColumn(item);
        });
    };
    QuestionMatrixDropdownModelBase.prototype.getType = function () {
        return "matrixdropdownbase";
    };
    QuestionMatrixDropdownModelBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.clearGeneratedRows();
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "hasSingleInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "isRowsDynamic", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "isUpdateLocked", {
        get: function () {
            return this.isLoadingFromJson || this.isUpdating;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.beginUpdate = function () {
        this.isUpdating = true;
    };
    QuestionMatrixDropdownModelBase.prototype.endUpdate = function () {
        this.isUpdating = false;
        this.updateColumnsAndRows();
    };
    QuestionMatrixDropdownModelBase.prototype.updateColumnsAndRows = function () {
        this.updateColumnsIndexes(this.columns);
        this.updateColumnsCellType();
        this.generatedTotalRow = null;
        this.clearRowsAndResetRenderedTable();
    };
    QuestionMatrixDropdownModelBase.prototype.itemValuePropertyChanged = function (item, name, oldValue, newValue) {
        _super.prototype.itemValuePropertyChanged.call(this, item, name, oldValue, newValue);
        if (item.ownerPropertyName === "choices") {
            this.clearRowsAndResetRenderedTable();
        }
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "columnLayout", {
        /**
         * Specifies the matrix layout. Set this property to `"vertical"` if you want to display columns instead of rows and rows instead of columns.
         *
         * Default value: `"horizontal"`
         * @see columns
         * @see rows
         * @see isColumnLayoutHorizontal
         */
        get: function () {
            return this.getPropertyValue("columnLayout");
        },
        set: function (val) {
            this.setPropertyValue("columnLayout", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "columnsLocation", {
        get: function () {
            return this.columnLayout;
        },
        set: function (val) {
            this.columnLayout = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "isColumnLayoutHorizontal", {
        /**
         * Returns `true` if columns are placed in the horizontal direction and rows in the vertical direction.
         *
         * To specify the layout, use the `columnLayout` property. If you set it to `"vertical"`, the survey applies it only when the screen has enough space. Otherwise, the survey falls back to the horizontal layout, but the `columnLayout` property remains set to `"vertical"`. Unlike `columnLayout`, the `isColumnLayoutHorizontal` property always indicates the current layout.
         * @see columnLayout
         */
        get: function () {
            if (this.isMobile)
                return true;
            return this.columnLayout != "vertical";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "isUniqueCaseSensitive", {
        /**
         * Enables case-sensitive comparison in columns with the `isUnique` property set to `true`.
         *
         * When this property is `true`, `"ABC"` and `"abc"` are considered different values.
         *
         * Default value: `false`
         * @see keyDuplicationError
         */
        get: function () {
            return this.isUniqueCaseSensitiveValue !== undefined ? this.isUniqueCaseSensitiveValue : _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].comparator.caseSensitive;
        },
        set: function (val) {
            this.isUniqueCaseSensitiveValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "detailPanelMode", {
        /**
         * Specifies the location of detail sections.
         *
         * Possible values:
         *
         * - `"underRow"` - Displays detail sections under their respective rows. Users can expand any number of detail sections.
         * - `"underRowSingle"` - Displays detail sections under their respective rows, but only one detail section can be expanded at a time.
         * - `"none"` (default) - Hides detail sections.
         *
         * Use the `detailElements` property to specify content of detail sections.
         * @see detailElements
         * @see detailPanel
         */
        get: function () {
            return this.getPropertyValue("detailPanelMode");
        },
        set: function (val) {
            this.setPropertyValue("detailPanelMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "detailPanel", {
        /**
         * Contains a [`PanelModel`](https://surveyjs.io/form-library/documentation/panelmodel) instance that represents a detail section template.
         * @see detailElements
         * @see detailPanelMode
         */
        get: function () {
            return this.detailPanelValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getPanel = function () {
        return this.detailPanel;
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "detailElements", {
        /**
         * An array of survey elements (questions and panels) to be displayed in detail sections.
         *
         * Detail sections are expandable panels displayed under each matrix row. You can use them to display questions that do not fit into the row.
         *
         * Set the `detailPanelMode` property to `"underRow"` or `"underRowSingle"` to display detail sections.
         * @see detailPanelMode
         * @see detailPanel
         */
        get: function () {
            return this.detailPanel.elements;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.createNewDetailPanel = function () {
        return _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass("panel");
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "hasRowText", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getFooterText = function () {
        return null;
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "canAddRow", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "canRemoveRows", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.canRemoveRow = function (row) {
        return true;
    };
    QuestionMatrixDropdownModelBase.prototype.onPointerDown = function (pointerDownEvent, row) { };
    QuestionMatrixDropdownModelBase.prototype.onRowsChanged = function () {
        this.resetRenderedTable();
        _super.prototype.onRowsChanged.call(this);
    };
    QuestionMatrixDropdownModelBase.prototype.onStartRowAddingRemoving = function () {
        this.lockResetRenderedTable = true;
        this.setValueChangedDirectly();
    };
    QuestionMatrixDropdownModelBase.prototype.onEndRowAdding = function () {
        this.lockResetRenderedTable = false;
        if (!this.renderedTable)
            return;
        if (this.renderedTable.isRequireReset()) {
            this.resetRenderedTable();
        }
        else {
            this.renderedTable.onAddedRow();
        }
    };
    QuestionMatrixDropdownModelBase.prototype.onEndRowRemoving = function (row) {
        this.lockResetRenderedTable = false;
        if (this.renderedTable.isRequireReset()) {
            this.resetRenderedTable();
        }
        else {
            if (!!row) {
                this.renderedTable.onRemovedRow(row);
            }
        }
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "renderedTableValue", {
        get: function () {
            return this.getPropertyValue("renderedTable", null);
        },
        set: function (val) {
            this.setPropertyValue("renderedTable", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.clearRowsAndResetRenderedTable = function () {
        this.clearGeneratedRows();
        this.resetRenderedTable();
        this.fireCallback(this.columnsChangedCallback);
    };
    QuestionMatrixDropdownModelBase.prototype.resetRenderedTable = function () {
        if (this.lockResetRenderedTable || this.isUpdateLocked)
            return;
        this.renderedTableValue = null;
        this.fireCallback(this.onRenderedTableResetCallback);
    };
    QuestionMatrixDropdownModelBase.prototype.clearGeneratedRows = function () {
        if (!this.generatedVisibleRows)
            return;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            this.generatedVisibleRows[i].dispose();
        }
        _super.prototype.clearGeneratedRows.call(this);
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "renderedTable", {
        get: function () {
            if (!this.renderedTableValue) {
                this.renderedTableValue = this.createRenderedTable();
                if (!!this.onRenderedTableCreatedCallback) {
                    this.onRenderedTableCreatedCallback(this.renderedTableValue);
                }
            }
            return this.renderedTableValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.createRenderedTable = function () {
        return new _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_13__["QuestionMatrixDropdownRenderedTable"](this);
    };
    QuestionMatrixDropdownModelBase.prototype.onMatrixRowCreated = function (row) {
        if (!this.survey)
            return;
        var options = {
            rowValue: row.value,
            row: row,
            column: null,
            columnName: null,
            cell: null,
            cellQuestion: null,
            value: null,
        };
        for (var i = 0; i < this.visibleColumns.length; i++) {
            options.column = this.visibleColumns[i];
            options.columnName = options.column.name;
            var cell = row.cells[i];
            options.cell = cell;
            options.cellQuestion = cell.question;
            options.value = cell.value;
            if (!!this.onCellCreatedCallback) {
                this.onCellCreatedCallback(options);
            }
            this.survey.matrixCellCreated(this, options);
        }
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "cellType", {
        /**
         * Specifies the type of matrix cells. You can override this property for individual columns.
         *
         * Possible values:
         *
         * - `"dropdown"`
         * - `"checkbox"`
         * - `"radiogroup"`
         * - `"text"`
         * - `"comment"`
         * - `"boolean"`
         * - `"expression"`
         * - `"rating"`
         *
         * Default value: `"dropdown"` (inherited from [`settings.matrixDefaultCellType`](https://surveyjs.io/form-library/documentation/settings#matrixDefaultCellType))
         */
        get: function () {
            return this.getPropertyValue("cellType", _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].matrixDefaultCellType);
        },
        set: function (val) {
            val = val.toLowerCase();
            this.setPropertyValue("cellType", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.updateColumnsCellType = function () {
        for (var i = 0; i < this.columns.length; i++) {
            this.columns[i].defaultCellTypeChanged();
        }
    };
    QuestionMatrixDropdownModelBase.prototype.updateColumnsIndexes = function (cols) {
        for (var i = 0; i < cols.length; i++) {
            cols[i].setIndex(i);
        }
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "columnColCount", {
        /**
         * Specifies the number of columns in Radiogroup and Checkbox cells.
         *
         * Default value: 0 (the number of columns is selected automatically based on the available column width)
         * @see cellType
         */
        get: function () {
            return this.getPropertyValue("columnColCount");
        },
        set: function (value) {
            if (value < 0 || value > 4)
                return;
            this.setPropertyValue("columnColCount", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "horizontalScroll", {
        get: function () {
            return this.getPropertyValue("horizontalScroll", false);
        },
        set: function (val) {
            this.setPropertyValue("horizontalScroll", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "allowAdaptiveActions", {
        get: function () {
            return this.getPropertyValue("allowAdaptiveActions");
        },
        set: function (val) {
            this.setPropertyValue("allowAdaptiveActions", val);
            if (!!this.detailPanel) {
                this.detailPanel.allowAdaptiveActions = val;
            }
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getRequiredText = function () {
        return this.survey ? this.survey.requiredText : "";
    };
    QuestionMatrixDropdownModelBase.prototype.hasChoices = function () {
        return this.choices.length > 0;
    };
    QuestionMatrixDropdownModelBase.prototype.onColumnPropertyChanged = function (column, name, newValue) {
        this.updateHasFooter();
        if (!this.generatedVisibleRows)
            return;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            this.generatedVisibleRows[i].updateCellQuestionOnColumnChanged(column, name, newValue);
        }
        if (!!this.generatedTotalRow) {
            this.generatedTotalRow.updateCellQuestionOnColumnChanged(column, name, newValue);
        }
        this.onColumnsChanged();
        if (name == "isRequired") {
            this.resetRenderedTable();
        }
    };
    QuestionMatrixDropdownModelBase.prototype.onColumnItemValuePropertyChanged = function (column, propertyName, obj, name, newValue, oldValue) {
        if (!this.generatedVisibleRows)
            return;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            this.generatedVisibleRows[i].updateCellQuestionOnColumnItemValueChanged(column, propertyName, obj, name, newValue, oldValue);
        }
    };
    QuestionMatrixDropdownModelBase.prototype.onShowInMultipleColumnsChanged = function (column) {
        this.clearGeneratedRows();
        this.resetRenderedTable();
    };
    QuestionMatrixDropdownModelBase.prototype.onColumnCellTypeChanged = function (column) {
        this.clearGeneratedRows();
        this.resetRenderedTable();
    };
    QuestionMatrixDropdownModelBase.prototype.getRowTitleWidth = function () {
        return "";
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "hasFooter", {
        get: function () {
            return this.getPropertyValue("hasFooter", false);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getAddRowLocation = function () {
        return "default";
    };
    QuestionMatrixDropdownModelBase.prototype.getShowColumnsIfEmpty = function () {
        return false;
    };
    QuestionMatrixDropdownModelBase.prototype.updateShowTableAndAddRow = function () {
        if (!!this.renderedTable) {
            this.renderedTable.updateShowTableAndAddRow();
        }
    };
    QuestionMatrixDropdownModelBase.prototype.updateHasFooter = function () {
        this.setPropertyValue("hasFooter", this.hasTotal);
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "hasTotal", {
        get: function () {
            for (var i = 0; i < this.columns.length; i++) {
                if (this.columns[i].hasTotal)
                    return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getCellType = function () {
        return this.cellType;
    };
    QuestionMatrixDropdownModelBase.prototype.getCustomCellType = function (column, row, cellType) {
        if (!this.survey)
            return cellType;
        var options = {
            rowValue: row.value,
            row: row,
            column: column,
            columnName: column.name,
            cellType: cellType
        };
        this.survey.matrixCellCreating(this, options);
        return options.cellType;
    };
    QuestionMatrixDropdownModelBase.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        if (!path)
            return _super.prototype.getConditionJson.call(this);
        var columnName = "";
        for (var i = path.length - 1; i >= 0; i--) {
            if (path[i] == ".")
                break;
            columnName = path[i] + columnName;
        }
        var column = this.getColumnByName(columnName);
        if (!column)
            return null;
        var question = column.createCellQuestion(null);
        if (!question)
            return null;
        return question.getConditionJson(operator);
    };
    QuestionMatrixDropdownModelBase.prototype.clearIncorrectValues = function () {
        var rows = this.visibleRows;
        if (!rows)
            return;
        for (var i = 0; i < rows.length; i++) {
            rows[i].clearIncorrectValues(this.getRowValue(i));
        }
    };
    QuestionMatrixDropdownModelBase.prototype.clearErrors = function () {
        _super.prototype.clearErrors.call(this);
        this.runFuncForCellQuestions(function (q) { q.clearErrors(); });
    };
    QuestionMatrixDropdownModelBase.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        this.runFuncForCellQuestions(function (q) { q.localeChanged(); });
    };
    QuestionMatrixDropdownModelBase.prototype.runFuncForCellQuestions = function (func) {
        if (!!this.generatedVisibleRows) {
            for (var i = 0; i < this.generatedVisibleRows.length; i++) {
                var row = this.generatedVisibleRows[i];
                for (var j = 0; j < row.cells.length; j++) {
                    func(row.cells[j].question);
                }
            }
        }
    };
    QuestionMatrixDropdownModelBase.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        var counter = 0;
        var prevTotalValue;
        do {
            prevTotalValue = _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].getUnbindValue(this.totalValue);
            this.runCellsCondition(values, properties);
            this.runTotalsCondition(values, properties);
            counter++;
        } while (!_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(prevTotalValue, this.totalValue) &&
            counter < 3);
    };
    QuestionMatrixDropdownModelBase.prototype.shouldRunColumnExpression = function () {
        return false;
    };
    QuestionMatrixDropdownModelBase.prototype.runCellsCondition = function (values, properties) {
        if (!this.generatedVisibleRows)
            return;
        var newValues = this.getRowConditionValues(values);
        var rows = this.generatedVisibleRows;
        for (var i = 0; i < rows.length; i++) {
            rows[i].runCondition(newValues, properties);
        }
        this.checkColumnsVisibility();
        this.checkColumnsRenderedRequired();
    };
    QuestionMatrixDropdownModelBase.prototype.checkColumnsVisibility = function () {
        var hasChanged = false;
        for (var i = 0; i < this.visibleColumns.length; i++) {
            if (!this.visibleColumns[i].visibleIf)
                continue;
            hasChanged =
                this.isColumnVisibilityChanged(this.visibleColumns[i]) || hasChanged;
        }
        if (hasChanged) {
            this.resetRenderedTable();
        }
    };
    QuestionMatrixDropdownModelBase.prototype.checkColumnsRenderedRequired = function () {
        var rows = this.generatedVisibleRows;
        for (var i = 0; i < this.visibleColumns.length; i++) {
            var column = this.visibleColumns[i];
            if (!column.requiredIf)
                continue;
            var required = rows.length > 0;
            for (var j = 0; j < rows.length; j++) {
                if (!rows[j].cells[i].question.isRequired) {
                    required = false;
                    break;
                }
            }
            column.updateIsRenderedRequired(required);
        }
    };
    QuestionMatrixDropdownModelBase.prototype.isColumnVisibilityChanged = function (column) {
        var curVis = column.hasVisibleCell;
        var hasVisCell = false;
        var rows = this.generatedVisibleRows;
        for (var i = 0; i < rows.length; i++) {
            var cell = rows[i].cells[column.index];
            if (!!cell && !!cell.question && cell.question.isVisible) {
                hasVisCell = true;
                break;
            }
        }
        if (curVis != hasVisCell) {
            column.hasVisibleCell = hasVisCell;
        }
        return curVis != hasVisCell;
    };
    QuestionMatrixDropdownModelBase.prototype.runTotalsCondition = function (values, properties) {
        if (!this.generatedTotalRow)
            return;
        this.generatedTotalRow.runCondition(this.getRowConditionValues(values), properties);
    };
    QuestionMatrixDropdownModelBase.prototype.getRowConditionValues = function (values) {
        var newValues = values;
        if (!newValues)
            newValues = {};
        /*
        var newValues: { [index: string]: any } = {};
        if (values && values instanceof Object) {
          newValues = JSON.parse(JSON.stringify(values));
        }
        */
        var totalRow = {};
        if (!this.isValueEmpty(this.totalValue)) {
            totalRow = JSON.parse(JSON.stringify(this.totalValue));
        }
        newValues["row"] = {};
        newValues["totalRow"] = totalRow;
        return newValues;
    };
    QuestionMatrixDropdownModelBase.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        var columns = this.columns;
        for (var i = 0; i < columns.length; i++) {
            columns[i].locStrsChanged();
        }
        var rows = this.generatedVisibleRows;
        if (!rows)
            return;
        for (var i = 0; i < rows.length; i++) {
            rows[i].locStrsChanged();
        }
        if (!!this.generatedTotalRow) {
            this.generatedTotalRow.locStrsChanged();
        }
    };
    /**
     * Returns a matrix column with a given `name` or `null` if a column with this is not found.
     * @param columnName A column name.
     */
    QuestionMatrixDropdownModelBase.prototype.getColumnByName = function (columnName) {
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].name == columnName)
                return this.columns[i];
        }
        return null;
    };
    QuestionMatrixDropdownModelBase.prototype.getColumnName = function (columnName) {
        return this.getColumnByName(columnName);
    };
    QuestionMatrixDropdownModelBase.prototype.getColumnWidth = function (column) {
        return column.minWidth ? column.minWidth : this.columnMinWidth;
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "choices", {
        /**
         * Gets or sets choice items for Dropdown, Checkbox, and Radiogroup matrix cells. You can override this property for individual columns.
         *
         * This property accepts an array of objects with the following structure:
         *
         * ```js
         * {
         *   "value": any, // A value to be saved in survey results
         *   "text": String, // A display text. This property supports Markdown. When `text` is undefined, `value` is used.
         *   "customProperty": any // Any property that you find useful.
         * }
         * ```
         *
         * To enable Markdown support for the `text` property, implement Markdown-to-HTML conversion in the [onTextMarkdown](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onTextMarkdown) event handler. For an example, refer to the following demo: [Convert Markdown to HTML with Showdown](https://surveyjs.io/form-library/examples/edit-survey-questions-markdown/).
         *
         * If you add custom properties, refer to the following help topic to learn how to serialize them into JSON: [Add Custom Properties to Property Grid](https://surveyjs.io/survey-creator/documentation/property-grid#add-custom-properties-to-the-property-grid).
         *
         * If you need to specify only the `value` property, you can set the `choices` property to an array of primitive values, for example, `[ "item1", "item2", "item3" ]`. These values are both saved in survey results and used as display text.
         * @see cellType
         */
        get: function () {
            return this.getPropertyValue("choices");
        },
        set: function (val) {
            this.setPropertyValue("choices", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "placeholder", {
        /**
         * A placeholder for Dropdown matrix cells.
         * @see cellType
         */
        get: function () {
            return this.getLocalizableStringText("placeholder");
        },
        set: function (val) {
            this.setLocalizableStringText("placeholder", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "locPlaceholder", {
        get: function () {
            return this.getLocalizableString("placeholder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "optionsCaption", {
        get: function () {
            return this.placeholder;
        },
        set: function (val) {
            this.placeholder = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "keyDuplicationError", {
        /**
         * An error message displayed when users enter a duplicate value into a column that accepts only unique values (`isUnique` is set to `true` or `keyName` is specified).
         *
         * A default value for this property is taken from a [localization dictionary](https://github.com/surveyjs/survey-library/tree/master/src/localization). Refer to the following help topic for more information: [Localization & Globalization](https://surveyjs.io/form-library/documentation/localization).
         * @see isUniqueCaseSensitive
         */
        get: function () {
            return this.getLocalizableStringText("keyDuplicationError");
        },
        set: function (val) {
            this.setLocalizableStringText("keyDuplicationError", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "locKeyDuplicationError", {
        get: function () {
            return this.getLocalizableString("keyDuplicationError");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "storeOthersAsComment", {
        get: function () {
            return !!this.survey ? this.survey.storeOthersAsComment : false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.addColumn = function (name, title) {
        if (title === void 0) { title = null; }
        var column = new _question_matrixdropdowncolumn__WEBPACK_IMPORTED_MODULE_12__["MatrixDropdownColumn"](name, title);
        this.columns.push(column);
        return column;
    };
    QuestionMatrixDropdownModelBase.prototype.getVisibleRows = function () {
        var _this = this;
        if (this.isUpdateLocked)
            return null;
        if (!this.generatedVisibleRows) {
            this.generatedVisibleRows = this.generateRows();
            this.generatedVisibleRows.forEach(function (row) { return _this.onMatrixRowCreated(row); });
            if (this.data) {
                this.runCellsCondition(this.data.getFilteredValues(), this.data.getFilteredProperties());
            }
            this.updateValueOnRowsGeneration(this.generatedVisibleRows);
            this.updateIsAnswered();
        }
        return this.generatedVisibleRows;
    };
    QuestionMatrixDropdownModelBase.prototype.updateValueOnRowsGeneration = function (rows) {
        var oldValue = this.createNewValue(true);
        var newValue = this.createNewValue();
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (!!row.editingObj)
                continue;
            var rowValue = this.getRowValue(i);
            var rValue = row.value;
            if (this.isTwoValueEquals(rowValue, rValue))
                continue;
            newValue = this.getNewValueOnRowChanged(row, "", rValue, false, newValue)
                .value;
        }
        if (this.isTwoValueEquals(oldValue, newValue))
            return;
        this.isRowChanging = true;
        this.setNewValue(newValue);
        this.isRowChanging = false;
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "totalValue", {
        get: function () {
            if (!this.hasTotal || !this.visibleTotalRow)
                return {};
            return this.visibleTotalRow.value;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getVisibleTotalRow = function () {
        if (this.isUpdateLocked)
            return null;
        if (this.hasTotal) {
            if (!this.generatedTotalRow) {
                this.generatedTotalRow = this.generateTotalRow();
                if (this.data) {
                    var properties = { survey: this.survey };
                    this.runTotalsCondition(this.data.getAllValues(), properties);
                }
            }
        }
        else {
            this.generatedTotalRow = null;
        }
        return this.generatedTotalRow;
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "visibleTotalRow", {
        get: function () {
            return this.getVisibleTotalRow();
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        this.updateColumnsIndexes(this.columns);
        this.clearGeneratedRows();
        this.generatedTotalRow = null;
        this.updateHasFooter();
    };
    /**
     * Returns an object with row values. If a row has no answers, this method returns an empty object.
     * @param rowIndex A zero-based row index.
     * @see setRowValue
     */
    QuestionMatrixDropdownModelBase.prototype.getRowValue = function (rowIndex) {
        if (rowIndex < 0)
            return null;
        var visRows = this.visibleRows;
        if (rowIndex >= visRows.length)
            return null;
        var newValue = this.createNewValue();
        return this.getRowValueCore(visRows[rowIndex], newValue);
    };
    QuestionMatrixDropdownModelBase.prototype.checkIfValueInRowDuplicated = function (checkedRow, cellQuestion) {
        if (!this.generatedVisibleRows)
            return false;
        var res = false;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            var row = this.generatedVisibleRows[i];
            if (checkedRow === row)
                continue;
            if (_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(row.getValue(cellQuestion.name), cellQuestion.value, true, this.isUniqueCaseSensitive)) {
                res = true;
                break;
            }
        }
        if (res) {
            this.addDuplicationError(cellQuestion);
        }
        else {
            cellQuestion.clearErrors();
        }
        return res;
    };
    /**
     * Assigns values to a row.
     * @param rowIndex A zero-based row index.
     * @param rowValue An object with the following structure: `{ "column_name": columnValue, ... }`
     * @see getRowValue
     */
    QuestionMatrixDropdownModelBase.prototype.setRowValue = function (rowIndex, rowValue) {
        if (rowIndex < 0)
            return null;
        var visRows = this.visibleRows;
        if (rowIndex >= visRows.length)
            return null;
        visRows[rowIndex].value = rowValue;
        this.onRowChanged(visRows[rowIndex], "", rowValue, false);
    };
    QuestionMatrixDropdownModelBase.prototype.generateRows = function () {
        return null;
    };
    QuestionMatrixDropdownModelBase.prototype.generateTotalRow = function () {
        return new MatrixDropdownTotalRowModel(this);
    };
    QuestionMatrixDropdownModelBase.prototype.createNewValue = function (nullOnEmpty) {
        if (nullOnEmpty === void 0) { nullOnEmpty = false; }
        var res = !this.value ? {} : this.createValueCopy();
        if (nullOnEmpty && this.isMatrixValueEmpty(res))
            return null;
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.getRowValueCore = function (row, questionValue, create) {
        if (create === void 0) { create = false; }
        var result = !!questionValue && !!questionValue[row.rowName]
            ? questionValue[row.rowName]
            : null;
        if (!result && create) {
            result = {};
            if (!!questionValue) {
                questionValue[row.rowName] = result;
            }
        }
        return result;
    };
    QuestionMatrixDropdownModelBase.prototype.getRowObj = function (row) {
        var obj = this.getRowValueCore(row, this.value);
        return !!obj && !!obj.getType ? obj : null;
    };
    QuestionMatrixDropdownModelBase.prototype.getRowDisplayValue = function (keysAsText, row, rowValue) {
        if (!rowValue)
            return rowValue;
        if (!!row.editingObj)
            return rowValue;
        var keys = Object.keys(rowValue);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var question = row.getQuestionByName(key);
            if (!question) {
                question = this.getSharedQuestionByName(key, row);
            }
            if (!!question) {
                var displayvalue = question.getDisplayValue(keysAsText, rowValue[key]);
                if (keysAsText && !!question.title && question.title !== key) {
                    rowValue[question.title] = displayvalue;
                    delete rowValue[key];
                }
                else {
                    rowValue[key] = displayvalue;
                }
            }
        }
        return rowValue;
    };
    QuestionMatrixDropdownModelBase.prototype.getPlainData = function (options) {
        var _this = this;
        if (options === void 0) { options = {
            includeEmpty: true,
        }; }
        var questionPlainData = _super.prototype.getPlainData.call(this, options);
        if (!!questionPlainData) {
            questionPlainData.isNode = true;
            questionPlainData.data = this.visibleRows.map(function (row) {
                var rowDataItem = {
                    name: row.rowName,
                    title: row.text,
                    value: row.value,
                    displayValue: _this.getRowDisplayValue(false, row, row.value),
                    getString: function (val) {
                        return typeof val === "object" ? JSON.stringify(val) : val;
                    },
                    isNode: true,
                    data: row.cells
                        .map(function (cell) {
                        return cell.question.getPlainData(options);
                    })
                        .filter(function (d) { return !!d; }),
                };
                (options.calculations || []).forEach(function (calculation) {
                    rowDataItem[calculation.propertyName] = row[calculation.propertyName];
                });
                return rowDataItem;
            });
        }
        return questionPlainData;
    };
    QuestionMatrixDropdownModelBase.prototype.addConditionObjectsByContext = function (objects, context) {
        var hasContext = !!context ? context === true || this.columns.indexOf(context) > -1 : false;
        var rowsIndeces = this.getConditionObjectsRowIndeces();
        if (hasContext) {
            rowsIndeces.push(-1);
        }
        for (var i = 0; i < rowsIndeces.length; i++) {
            var index = rowsIndeces[i];
            var rowName = index > -1 ? this.getConditionObjectRowName(index) : "row";
            if (!rowName)
                continue;
            var rowText = index > -1 ? this.getConditionObjectRowText(index) : "row";
            var hasQuestionPrefix = index > -1 || context === true;
            var dot = hasQuestionPrefix && index === -1 ? "." : "";
            var prefixName = (hasQuestionPrefix ? this.getValueName() : "") + dot + rowName + ".";
            var prefixTitle = (hasQuestionPrefix ? this.processedTitle : "") + dot + rowText + ".";
            for (var j = 0; j < this.columns.length; j++) {
                var column = this.columns[j];
                if (index === -1 && context === column)
                    continue;
                var obj = {
                    name: prefixName + column.name,
                    text: prefixTitle + column.fullTitle,
                    question: this
                };
                if (index === -1 && context === true) {
                    obj.context = this;
                }
                objects.push(obj);
            }
        }
    };
    QuestionMatrixDropdownModelBase.prototype.getConditionObjectRowName = function (index) {
        return "";
    };
    QuestionMatrixDropdownModelBase.prototype.getConditionObjectRowText = function (index) {
        return this.getConditionObjectRowName(index);
    };
    QuestionMatrixDropdownModelBase.prototype.getConditionObjectsRowIndeces = function () {
        return [];
    };
    QuestionMatrixDropdownModelBase.prototype.getProgressInfo = function () {
        if (!!this.generatedVisibleRows)
            return _survey_element__WEBPACK_IMPORTED_MODULE_4__["SurveyElement"].getProgressInfoByElements(this.getCellQuestions(), this.isRequired);
        var res = _base__WEBPACK_IMPORTED_MODULE_3__["Base"].createProgressInfo();
        this.updateProgressInfoByValues(res);
        if (res.requiredQuestionCount === 0 && this.isRequired) {
            res.requiredQuestionCount = 1;
            res.requiredAnsweredQuestionCount = !this.isEmpty() ? 1 : 0;
        }
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.updateProgressInfoByValues = function (res) { };
    QuestionMatrixDropdownModelBase.prototype.updateProgressInfoByRow = function (res, rowValue) {
        for (var i = 0; i < this.columns.length; i++) {
            var col = this.columns[i];
            if (!col.templateQuestion.hasInput)
                continue;
            res.questionCount += 1;
            res.requiredQuestionCount += col.isRequired;
            var hasValue = !_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isValueEmpty(rowValue[col.name]);
            res.answeredQuestionCount += hasValue ? 1 : 0;
            res.requiredAnsweredQuestionCount += hasValue && col.isRequired ? 1 : 0;
        }
    };
    QuestionMatrixDropdownModelBase.prototype.getCellQuestions = function () {
        var res = [];
        this.runFuncForCellQuestions(function (q) { res.push(q); });
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.onBeforeValueChanged = function (val) { };
    QuestionMatrixDropdownModelBase.prototype.onSetQuestionValue = function () {
        if (this.isRowChanging)
            return;
        this.onBeforeValueChanged(this.value);
        if (!this.generatedVisibleRows || this.generatedVisibleRows.length == 0)
            return;
        this.isRowChanging = true;
        var val = this.createNewValue();
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            var row = this.generatedVisibleRows[i];
            this.generatedVisibleRows[i].value = this.getRowValueCore(row, val);
        }
        this.isRowChanging = false;
    };
    QuestionMatrixDropdownModelBase.prototype.setQuestionValue = function (newValue) {
        _super.prototype.setQuestionValue.call(this, newValue, false);
        this.onSetQuestionValue();
        this.updateIsAnswered();
    };
    QuestionMatrixDropdownModelBase.prototype.supportGoNextPageAutomatic = function () {
        var rows = this.generatedVisibleRows;
        if (!rows)
            rows = this.visibleRows;
        if (!rows)
            return true;
        for (var i = 0; i < rows.length; i++) {
            var cells = this.generatedVisibleRows[i].cells;
            if (!cells)
                continue;
            for (var colIndex = 0; colIndex < cells.length; colIndex++) {
                var question = cells[colIndex].question;
                if (question &&
                    (!question.supportGoNextPageAutomatic() || !question.value))
                    return false;
            }
        }
        return true;
    };
    QuestionMatrixDropdownModelBase.prototype.getContainsErrors = function () {
        return (_super.prototype.getContainsErrors.call(this) ||
            this.checkForAnswersOrErrors(function (question) { return question.containsErrors; }, false));
    };
    QuestionMatrixDropdownModelBase.prototype.getIsAnswered = function () {
        return (_super.prototype.getIsAnswered.call(this) &&
            this.checkForAnswersOrErrors(function (question) { return question.isAnswered; }, true));
    };
    QuestionMatrixDropdownModelBase.prototype.checkForAnswersOrErrors = function (predicate, every) {
        if (every === void 0) { every = false; }
        var rows = this.generatedVisibleRows;
        if (!rows)
            return false;
        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].cells;
            if (!cells)
                continue;
            for (var colIndex = 0; colIndex < cells.length; colIndex++) {
                if (!cells[colIndex])
                    continue;
                var question = cells[colIndex].question;
                if (question && question.isVisible)
                    if (predicate(question)) {
                        if (!every)
                            return true;
                    }
                    else {
                        if (every)
                            return false;
                    }
            }
        }
        return every ? true : false;
    };
    QuestionMatrixDropdownModelBase.prototype.hasErrors = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        var errosInRows = this.hasErrorInRows(fireCallback, rec);
        var isDuplicated = this.isValueDuplicated();
        return _super.prototype.hasErrors.call(this, fireCallback, rec) || errosInRows || isDuplicated;
    };
    QuestionMatrixDropdownModelBase.prototype.getIsRunningValidators = function () {
        if (_super.prototype.getIsRunningValidators.call(this))
            return true;
        if (!this.generatedVisibleRows)
            return false;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            var cells = this.generatedVisibleRows[i].cells;
            if (!cells)
                continue;
            for (var colIndex = 0; colIndex < cells.length; colIndex++) {
                if (!cells[colIndex])
                    continue;
                var question = cells[colIndex].question;
                if (!!question && question.isRunningValidators)
                    return true;
            }
        }
        return false;
    };
    QuestionMatrixDropdownModelBase.prototype.getAllErrors = function () {
        var result = _super.prototype.getAllErrors.call(this);
        var rows = this.generatedVisibleRows;
        if (rows === null)
            return result;
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            for (var j = 0; j < row.cells.length; j++) {
                var errors = row.cells[j].question.getAllErrors();
                if (errors && errors.length > 0) {
                    result = result.concat(errors);
                }
            }
        }
        return result;
    };
    QuestionMatrixDropdownModelBase.prototype.hasErrorInRows = function (fireCallback, rec) {
        var _this = this;
        var rows = this.generatedVisibleRows;
        if (!this.generatedVisibleRows) {
            rows = this.visibleRows;
        }
        var res = false;
        if (!rec)
            rec = {};
        if (!rows)
            return rec;
        rec.isSingleDetailPanel = this.detailPanelMode === "underRowSingle";
        for (var i = 0; i < rows.length; i++) {
            res = rows[i].hasErrors(fireCallback, rec, function () {
                _this.raiseOnCompletedAsyncValidators();
            }) || res;
        }
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.isValueDuplicated = function () {
        if (!this.generatedVisibleRows)
            return false;
        var columns = this.getUniqueColumns();
        var res = false;
        for (var i = 0; i < columns.length; i++) {
            res = this.isValueInColumnDuplicated(columns[i]) || res;
        }
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.isValueInColumnDuplicated = function (column) {
        var keyValues = [];
        var res = false;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            res =
                this.isValueDuplicatedInRow(this.generatedVisibleRows[i], column, keyValues) || res;
        }
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.getUniqueColumns = function () {
        var res = new Array();
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].isUnique) {
                res.push(this.columns[i]);
            }
        }
        return res;
    };
    QuestionMatrixDropdownModelBase.prototype.isValueDuplicatedInRow = function (row, column, keyValues) {
        var question = row.getQuestionByColumn(column);
        if (!question || question.isEmpty())
            return false;
        var value = question.value;
        for (var i = 0; i < keyValues.length; i++) {
            if (_helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].isTwoValueEquals(value, keyValues[i], true, this.isUniqueCaseSensitive)) {
                this.addDuplicationError(question);
                return true;
            }
        }
        keyValues.push(value);
        return false;
    };
    QuestionMatrixDropdownModelBase.prototype.addDuplicationError = function (question) {
        question.addError(new _error__WEBPACK_IMPORTED_MODULE_10__["KeyDuplicationError"](this.keyDuplicationError, this));
    };
    QuestionMatrixDropdownModelBase.prototype.getFirstQuestionToFocus = function (withError) {
        return this.getFirstCellQuestion(withError);
    };
    QuestionMatrixDropdownModelBase.prototype.getFirstInputElementId = function () {
        var question = this.getFirstCellQuestion(false);
        return question ? question.inputId : _super.prototype.getFirstInputElementId.call(this);
    };
    QuestionMatrixDropdownModelBase.prototype.getFirstErrorInputElementId = function () {
        var question = this.getFirstCellQuestion(true);
        return question ? question.inputId : _super.prototype.getFirstErrorInputElementId.call(this);
    };
    QuestionMatrixDropdownModelBase.prototype.getFirstCellQuestion = function (onError) {
        if (!this.generatedVisibleRows)
            return null;
        for (var i = 0; i < this.generatedVisibleRows.length; i++) {
            var cells = this.generatedVisibleRows[i].cells;
            for (var colIndex = 0; colIndex < cells.length; colIndex++) {
                if (!onError)
                    return cells[colIndex].question;
                if (cells[colIndex].question.currentErrorCount > 0)
                    return cells[colIndex].question;
            }
        }
        return null;
    };
    QuestionMatrixDropdownModelBase.prototype.onReadOnlyChanged = function () {
        _super.prototype.onReadOnlyChanged.call(this);
        if (!this.generateRows)
            return;
        for (var i = 0; i < this.visibleRows.length; i++) {
            this.visibleRows[i].onQuestionReadOnlyChanged(this.isReadOnly);
        }
    };
    //IMatrixDropdownData
    QuestionMatrixDropdownModelBase.prototype.createQuestion = function (row, column) {
        return this.createQuestionCore(row, column);
    };
    QuestionMatrixDropdownModelBase.prototype.createQuestionCore = function (row, column) {
        var question = column.createCellQuestion(row);
        question.setSurveyImpl(row);
        question.setParentQuestion(this);
        return question;
    };
    QuestionMatrixDropdownModelBase.prototype.deleteRowValue = function (newValue, row) {
        if (!newValue)
            return newValue;
        delete newValue[row.rowName];
        return this.isObject(newValue) && Object.keys(newValue).length == 0
            ? null
            : newValue;
    };
    QuestionMatrixDropdownModelBase.prototype.onAnyValueChanged = function (name) {
        if (this.isUpdateLocked ||
            this.isDoingonAnyValueChanged ||
            !this.generatedVisibleRows)
            return;
        this.isDoingonAnyValueChanged = true;
        var rows = this.visibleRows;
        for (var i = 0; i < rows.length; i++) {
            rows[i].onAnyValueChanged(name);
        }
        var totalRow = this.visibleTotalRow;
        if (!!totalRow) {
            totalRow.onAnyValueChanged(name);
        }
        this.isDoingonAnyValueChanged = false;
    };
    QuestionMatrixDropdownModelBase.prototype.isObject = function (value) {
        return value !== null && typeof value === "object";
    };
    QuestionMatrixDropdownModelBase.prototype.getOnCellValueChangedOptions = function (row, columnName, rowValue) {
        var getQuestion = function (colName) {
            for (var i = 0; i < row.cells.length; i++) {
                var col = row.cells[i].column;
                if (!!col && col.name === colName) {
                    return row.cells[i].question;
                }
            }
            return null;
        };
        return {
            row: row,
            columnName: columnName,
            rowValue: rowValue,
            value: !!rowValue ? rowValue[columnName] : null,
            getCellQuestion: getQuestion,
        };
    };
    QuestionMatrixDropdownModelBase.prototype.onCellValueChanged = function (row, columnName, rowValue) {
        if (!this.survey)
            return;
        var options = this.getOnCellValueChangedOptions(row, columnName, rowValue);
        if (!!this.onCellValueChangedCallback) {
            this.onCellValueChangedCallback(options);
        }
        this.survey.matrixCellValueChanged(this, options);
    };
    QuestionMatrixDropdownModelBase.prototype.validateCell = function (row, columnName, rowValue) {
        if (!this.survey)
            return;
        var options = this.getOnCellValueChangedOptions(row, columnName, rowValue);
        return this.survey.matrixCellValidate(this, options);
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "isValidateOnValueChanging", {
        get: function () {
            return !!this.survey ? this.survey.isValidateOnValueChanging : false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.onRowChanging = function (row, columnName, rowValue) {
        if (!this.survey)
            return !!rowValue ? rowValue[columnName] : null;
        var options = this.getOnCellValueChangedOptions(row, columnName, rowValue);
        var oldRowValue = this.getRowValueCore(row, this.createNewValue(), true);
        options.oldValue = !!oldRowValue ? oldRowValue[columnName] : null;
        this.survey.matrixCellValueChanging(this, options);
        return options.value;
    };
    QuestionMatrixDropdownModelBase.prototype.onRowChanged = function (row, columnName, newRowValue, isDeletingValue) {
        var rowObj = !!columnName ? this.getRowObj(row) : null;
        if (!!rowObj) {
            var columnValue = null;
            if (!!newRowValue && !isDeletingValue) {
                columnValue = newRowValue[columnName];
            }
            this.isRowChanging = true;
            rowObj[columnName] = columnValue;
            this.isRowChanging = false;
            this.onCellValueChanged(row, columnName, rowObj);
        }
        else {
            var oldValue = this.createNewValue(true);
            var combine = this.getNewValueOnRowChanged(row, columnName, newRowValue, isDeletingValue, this.createNewValue());
            if (this.isTwoValueEquals(oldValue, combine.value))
                return;
            this.isRowChanging = true;
            this.setNewValue(combine.value);
            this.isRowChanging = false;
            if (columnName) {
                this.onCellValueChanged(row, columnName, combine.rowValue);
            }
        }
    };
    QuestionMatrixDropdownModelBase.prototype.getNewValueOnRowChanged = function (row, columnName, newRowValue, isDeletingValue, newValue) {
        var rowValue = this.getRowValueCore(row, newValue, true);
        if (isDeletingValue) {
            delete rowValue[columnName];
        }
        for (var i = 0; i < row.cells.length; i++) {
            var key = row.cells[i].question.getValueName();
            delete rowValue[key];
        }
        if (newRowValue) {
            newRowValue = JSON.parse(JSON.stringify(newRowValue));
            for (var key in newRowValue) {
                if (!this.isValueEmpty(newRowValue[key])) {
                    rowValue[key] = newRowValue[key];
                }
            }
        }
        if (this.isObject(rowValue) && Object.keys(rowValue).length === 0) {
            newValue = this.deleteRowValue(newValue, row);
        }
        return { value: newValue, rowValue: rowValue };
    };
    QuestionMatrixDropdownModelBase.prototype.getRowIndex = function (row) {
        if (!this.generatedVisibleRows)
            return -1;
        return this.visibleRows.indexOf(row);
    };
    QuestionMatrixDropdownModelBase.prototype.getElementsInDesign = function (includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        var elements;
        if (this.detailPanelMode == "none") {
            elements = _super.prototype.getElementsInDesign.call(this, includeHidden);
        }
        else {
            elements = includeHidden ? [this.detailPanel] : this.detailElements;
        }
        return this.columns.concat(elements);
    };
    QuestionMatrixDropdownModelBase.prototype.hasDetailPanel = function (row) {
        if (this.detailPanelMode == "none")
            return false;
        if (this.isDesignMode)
            return true;
        if (!!this.onHasDetailPanelCallback)
            return this.onHasDetailPanelCallback(row);
        return this.detailElements.length > 0;
    };
    QuestionMatrixDropdownModelBase.prototype.getIsDetailPanelShowing = function (row) {
        if (this.detailPanelMode == "none")
            return false;
        if (this.isDesignMode) {
            var res = this.visibleRows.indexOf(row) == 0;
            if (res) {
                if (!row.detailPanel) {
                    row.showDetailPanel();
                }
            }
            return res;
        }
        return this.getPropertyValue("isRowShowing" + row.id, false);
    };
    QuestionMatrixDropdownModelBase.prototype.setIsDetailPanelShowing = function (row, val) {
        if (val == this.getIsDetailPanelShowing(row))
            return;
        this.setPropertyValue("isRowShowing" + row.id, val);
        this.updateDetailPanelButtonCss(row);
        if (!!this.renderedTable) {
            this.renderedTable.onDetailPanelChangeVisibility(row, val);
        }
        if (val && this.detailPanelMode === "underRowSingle") {
            var rows = this.visibleRows;
            for (var i = 0; i < rows.length; i++) {
                if (rows[i].id !== row.id && rows[i].isDetailPanelShowing) {
                    rows[i].hideDetailPanel();
                }
            }
        }
    };
    QuestionMatrixDropdownModelBase.prototype.getDetailPanelButtonCss = function (row) {
        var builder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]().append(this.getPropertyValue("detailButtonCss" + row.id));
        return builder.append(this.cssClasses.detailButton, builder.toString() === "").toString();
    };
    QuestionMatrixDropdownModelBase.prototype.getDetailPanelIconCss = function (row) {
        var builder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]().append(this.getPropertyValue("detailIconCss" + row.id));
        return builder.append(this.cssClasses.detailIcon, builder.toString() === "").toString();
    };
    QuestionMatrixDropdownModelBase.prototype.getDetailPanelIconId = function (row) {
        return this.getIsDetailPanelShowing(row) ? this.cssClasses.detailIconExpandedId : this.cssClasses.detailIconId;
    };
    QuestionMatrixDropdownModelBase.prototype.updateDetailPanelButtonCss = function (row) {
        var classes = this.cssClasses;
        var isPanelShowing = this.getIsDetailPanelShowing(row);
        var iconBuilder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]().append(classes.detailIcon)
            .append(classes.detailIconExpanded, isPanelShowing);
        this.setPropertyValue("detailIconCss" + row.id, iconBuilder.toString());
        var buttonBuilder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]().append(classes.detailButton)
            .append(classes.detailButtonExpanded, isPanelShowing);
        this.setPropertyValue("detailButtonCss" + row.id, buttonBuilder.toString());
    };
    QuestionMatrixDropdownModelBase.prototype.createRowDetailPanel = function (row) {
        if (this.isDesignMode)
            return this.detailPanel;
        var panel = this.createNewDetailPanel();
        panel.readOnly = this.isReadOnly;
        var json = this.detailPanel.toJSON();
        new _jsonobject__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]().toObject(json, panel);
        panel.renderWidth = "100%";
        panel.updateCustomWidgets();
        if (!!this.onCreateDetailPanelCallback) {
            this.onCreateDetailPanelCallback(row, panel);
        }
        return panel;
    };
    QuestionMatrixDropdownModelBase.prototype.getSharedQuestionByName = function (columnName, row) {
        if (!this.survey || !this.valueName)
            return null;
        var index = this.getRowIndex(row);
        if (index < 0)
            return null;
        return (this.survey.getQuestionByValueNameFromArray(this.valueName, columnName, index));
    };
    QuestionMatrixDropdownModelBase.prototype.onTotalValueChanged = function () {
        if (!!this.data &&
            !!this.visibleTotalRow &&
            !this.isUpdateLocked &&
            !this.isSett) {
            this.data.setValue(this.getValueName() + _settings__WEBPACK_IMPORTED_MODULE_9__["settings"].matrixTotalValuePostFix, this.totalValue, false);
        }
    };
    QuestionMatrixDropdownModelBase.prototype.getParentTextProcessor = function () {
        if (!this.parentQuestion || !this.parent)
            return null;
        var data = this.parent.data;
        if (!!data && !!data.getTextProcessor)
            return data.getTextProcessor();
        return null;
    };
    QuestionMatrixDropdownModelBase.prototype.getQuestionFromArray = function (name, index) {
        if (index >= this.visibleRows.length)
            return null;
        return this.visibleRows[index].getQuestionByName(name);
    };
    QuestionMatrixDropdownModelBase.prototype.isMatrixValueEmpty = function (val) {
        if (!val)
            return;
        if (Array.isArray(val)) {
            for (var i = 0; i < val.length; i++) {
                if (this.isObject(val[i]) && Object.keys(val[i]).length > 0)
                    return false;
            }
            return true;
        }
        return Object.keys(val).length == 0;
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "SurveyModel", {
        get: function () {
            return this.survey;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getCellTemplateData = function (cell) {
        // return cell.cell.column.templateQuestion;
        return this.SurveyModel.getMatrixCellTemplateData(cell);
    };
    QuestionMatrixDropdownModelBase.prototype.getCellWrapperComponentName = function (cell) {
        return this.SurveyModel.getElementWrapperComponentName(cell, "cell");
    };
    QuestionMatrixDropdownModelBase.prototype.getCellWrapperComponentData = function (cell) {
        return this.SurveyModel.getElementWrapperComponentData(cell, "cell");
    };
    QuestionMatrixDropdownModelBase.prototype.getColumnHeaderWrapperComponentName = function (cell) {
        return this.SurveyModel.getElementWrapperComponentName(cell, "column-header");
    };
    QuestionMatrixDropdownModelBase.prototype.getColumnHeaderWrapperComponentData = function (cell) {
        return this.SurveyModel.getElementWrapperComponentData(cell, "column-header");
    };
    QuestionMatrixDropdownModelBase.prototype.getRowHeaderWrapperComponentName = function (cell) {
        return this.SurveyModel.getElementWrapperComponentName(cell, "row-header");
    };
    QuestionMatrixDropdownModelBase.prototype.getRowHeaderWrapperComponentData = function (cell) {
        return this.SurveyModel.getElementWrapperComponentData(cell, "row-header");
    };
    Object.defineProperty(QuestionMatrixDropdownModelBase.prototype, "showHorizontalScroll", {
        get: function () {
            return !this.isDefaultV2Theme && this.horizontalScroll;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownModelBase.prototype.getRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_11__["CssClassBuilder"]().append(_super.prototype.getRootCss.call(this)).append(this.cssClasses.rootScroll, this.horizontalScroll).toString();
    };
    QuestionMatrixDropdownModelBase.prototype.getIsTooltipErrorInsideSupported = function () {
        return true;
    };
    return QuestionMatrixDropdownModelBase;
}(_martixBase__WEBPACK_IMPORTED_MODULE_1__["QuestionMatrixBaseModel"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("matrixdropdownbase", [
    {
        name: "columns:matrixdropdowncolumns",
        className: "matrixdropdowncolumn",
    },
    {
        name: "columnLayout",
        alternativeName: "columnsLocation",
        default: "horizontal",
        choices: ["horizontal", "vertical"],
    },
    {
        name: "detailElements",
        visible: false,
        isLightSerializable: false,
    },
    {
        name: "detailPanelMode",
        choices: ["none", "underRow", "underRowSingle"],
        default: "none",
    },
    "horizontalScroll:boolean",
    {
        name: "choices:itemvalue[]", uniqueProperty: "value",
    },
    { name: "placeholder", alternativeName: "optionsCaption", serializationProperty: "locPlaceholder" },
    {
        name: "keyDuplicationError",
        serializationProperty: "locKeyDuplicationError",
    },
    {
        name: "cellType",
        default: "dropdown",
        choices: function () {
            return _question_matrixdropdowncolumn__WEBPACK_IMPORTED_MODULE_12__["MatrixDropdownColumn"].getColumnTypes();
        },
    },
    { name: "columnColCount", default: 0, choices: [0, 1, 2, 3, 4] },
    "columnMinWidth",
    { name: "allowAdaptiveActions:boolean", default: false, visible: false },
], function () {
    return new QuestionMatrixDropdownModelBase("");
}, "matrixbase");


/***/ }),

/***/ "./src/question_matrixdropdowncolumn.ts":
/*!**********************************************!*\
  !*** ./src/question_matrixdropdowncolumn.ts ***!
  \**********************************************/
/*! exports provided: matrixDropdownColumnTypes, MatrixDropdownColumn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matrixDropdownColumnTypes", function() { return matrixDropdownColumnTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDropdownColumn", function() { return MatrixDropdownColumn; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _question_expression__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_expression */ "./src/question_expression.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




function onUpdateSelectBaseCellQuestion(cellQuestion, column, question, data) {
    cellQuestion.storeOthersAsComment = !!question
        ? question.storeOthersAsComment
        : false;
    if ((!cellQuestion.choices || cellQuestion.choices.length == 0) &&
        cellQuestion.choicesByUrl.isEmpty) {
        cellQuestion.choices = question.choices;
    }
    if (!cellQuestion.choicesByUrl.isEmpty) {
        cellQuestion.choicesByUrl.run(data.getTextProcessor());
    }
}
var matrixDropdownColumnTypes = {
    dropdown: {
        onCellQuestionUpdate: function (cellQuestion, column, question, data) {
            onUpdateSelectBaseCellQuestion(cellQuestion, column, question, data);
            if (!!cellQuestion.locPlaceholder &&
                cellQuestion.locPlaceholder.isEmpty &&
                !question.locPlaceholder.isEmpty) {
                cellQuestion.optionsCaption = question.optionsCaption;
            }
        },
    },
    checkbox: {
        onCellQuestionUpdate: function (cellQuestion, column, question, data) {
            onUpdateSelectBaseCellQuestion(cellQuestion, column, question, data);
            cellQuestion.colCount =
                column.colCount > -1 ? column.colCount : question.columnColCount;
        },
    },
    radiogroup: {
        onCellQuestionUpdate: function (cellQuestion, column, question, data) {
            onUpdateSelectBaseCellQuestion(cellQuestion, column, question, data);
            cellQuestion.colCount =
                column.colCount > -1 ? column.colCount : question.columnColCount;
        },
    },
    tagbox: {},
    text: {},
    comment: {},
    boolean: {
        onCellQuestionUpdate: function (cellQuestion, column, question, data) {
            cellQuestion.renderAs = column.renderAs;
        },
    },
    expression: {},
    rating: {},
};
var MatrixDropdownColumn = /** @class */ (function (_super) {
    __extends(MatrixDropdownColumn, _super);
    function MatrixDropdownColumn(name, title) {
        if (title === void 0) { title = null; }
        var _this = _super.call(this) || this;
        _this.colOwnerValue = null;
        _this.indexValue = -1;
        _this._isVisible = true;
        _this._hasVisibleCell = true;
        _this.previousChoicesId = undefined;
        _this.createLocalizableString("totalFormat", _this);
        _this.createLocalizableString("cellHint", _this);
        _this.registerPropertyChangedHandlers(["showInMultipleColumns"], function () { _this.doShowInMultipleColumnsChanged(); });
        _this.updateTemplateQuestion();
        _this.name = name;
        if (title) {
            _this.title = title;
        }
        else {
            _this.templateQuestion.locTitle.strChanged();
        }
        return _this;
    }
    MatrixDropdownColumn.getColumnTypes = function () {
        var res = [];
        for (var key in matrixDropdownColumnTypes) {
            res.push(key);
        }
        return res;
    };
    MatrixDropdownColumn.prototype.getOriginalObj = function () {
        return this.templateQuestion;
    };
    MatrixDropdownColumn.prototype.getClassNameProperty = function () {
        return "cellType";
    };
    MatrixDropdownColumn.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        return !!this.colOwner ? this.colOwner.survey : null;
    };
    MatrixDropdownColumn.prototype.endLoadingFromJson = function () {
        var _this = this;
        _super.prototype.endLoadingFromJson.call(this);
        this.templateQuestion.autoOtherMode = this.isShowInMultipleColumns;
        this.templateQuestion.endLoadingFromJson();
        this.templateQuestion.onGetSurvey = function () {
            return _this.getSurvey();
        };
    };
    MatrixDropdownColumn.prototype.getDynamicPropertyName = function () {
        return "cellType";
    };
    MatrixDropdownColumn.prototype.getDynamicType = function () {
        if (this.cellType === "default")
            return "question";
        return this.calcCellQuestionType(null);
    };
    Object.defineProperty(MatrixDropdownColumn.prototype, "colOwner", {
        get: function () {
            return this.colOwnerValue;
        },
        set: function (value) {
            this.colOwnerValue = value;
            if (!!value) {
                this.updateTemplateQuestion();
                this.setParentQuestionToTemplate(this.templateQuestion);
            }
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownColumn.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.locTitle.strChanged();
    };
    MatrixDropdownColumn.prototype.addUsedLocales = function (locales) {
        _super.prototype.addUsedLocales.call(this, locales);
        this.templateQuestion.addUsedLocales(locales);
    };
    Object.defineProperty(MatrixDropdownColumn.prototype, "index", {
        get: function () {
            return this.indexValue;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownColumn.prototype.setIndex = function (val) {
        this.indexValue = val;
    };
    MatrixDropdownColumn.prototype.getType = function () {
        return "matrixdropdowncolumn";
    };
    Object.defineProperty(MatrixDropdownColumn.prototype, "cellType", {
        get: function () {
            return this.getPropertyValue("cellType");
        },
        set: function (val) {
            val = val.toLocaleLowerCase();
            this.updateTemplateQuestion(val);
            this.setPropertyValue("cellType", val);
            if (!!this.colOwner) {
                this.colOwner.onColumnCellTypeChanged(this);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "templateQuestion", {
        get: function () {
            return this.templateQuestionValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "value", {
        get: function () {
            return this.templateQuestion.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "isVisible", {
        get: function () {
            return this._isVisible;
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownColumn.prototype.setIsVisible = function (newVal) {
        this._isVisible = newVal;
    };
    Object.defineProperty(MatrixDropdownColumn.prototype, "hasVisibleCell", {
        get: function () {
            return this._hasVisibleCell;
        },
        set: function (newVal) {
            this._hasVisibleCell = newVal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "name", {
        get: function () {
            return this.templateQuestion.name;
        },
        set: function (val) {
            this.templateQuestion.name = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "title", {
        get: function () {
            return this.templateQuestion.title;
        },
        set: function (val) {
            this.templateQuestion.title = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "locTitle", {
        get: function () {
            return this.templateQuestion.locTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "fullTitle", {
        get: function () {
            return this.locTitle.textOrHtml;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "isRequired", {
        get: function () {
            return this.templateQuestion.isRequired;
        },
        set: function (val) {
            this.templateQuestion.isRequired = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "isRenderedRequired", {
        get: function () {
            return this.getPropertyValue("isRenderedRequired", this.isRequired);
        },
        set: function (val) {
            this.setPropertyValue("isRenderedRequired", val);
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownColumn.prototype.updateIsRenderedRequired = function (val) {
        this.isRenderedRequired = val || this.isRequired;
    };
    Object.defineProperty(MatrixDropdownColumn.prototype, "requiredText", {
        get: function () {
            return this.isRenderedRequired && this.getSurvey() ? this.getSurvey().requiredText : this.templateQuestion.requiredText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "requiredErrorText", {
        get: function () {
            return this.templateQuestion.requiredErrorText;
        },
        set: function (val) {
            this.templateQuestion.requiredErrorText = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "locRequiredErrorText", {
        get: function () {
            return this.templateQuestion.locRequiredErrorText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "readOnly", {
        get: function () {
            return this.templateQuestion.readOnly;
        },
        set: function (val) {
            this.templateQuestion.readOnly = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "hasOther", {
        get: function () {
            return this.templateQuestion.hasOther;
        },
        set: function (val) {
            this.templateQuestion.hasOther = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "visibleIf", {
        get: function () {
            return this.templateQuestion.visibleIf;
        },
        set: function (val) {
            this.templateQuestion.visibleIf = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "enableIf", {
        get: function () {
            return this.templateQuestion.enableIf;
        },
        set: function (val) {
            this.templateQuestion.enableIf = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "requiredIf", {
        get: function () {
            return this.templateQuestion.requiredIf;
        },
        set: function (val) {
            this.templateQuestion.requiredIf = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "isUnique", {
        get: function () {
            return this.getPropertyValue("isUnique");
        },
        set: function (val) {
            this.setPropertyValue("isUnique", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "showInMultipleColumns", {
        get: function () {
            return this.getPropertyValue("showInMultipleColumns", false);
        },
        set: function (val) {
            this.setPropertyValue("showInMultipleColumns", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "isSupportMultipleColumns", {
        get: function () {
            return ["checkbox", "radiogroup"].indexOf(this.cellType) > -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "isShowInMultipleColumns", {
        get: function () {
            return this.showInMultipleColumns && this.isSupportMultipleColumns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "validators", {
        get: function () {
            return this.templateQuestion.validators;
        },
        set: function (val) {
            this.templateQuestion.validators = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalType", {
        get: function () {
            return this.getPropertyValue("totalType");
        },
        set: function (val) {
            this.setPropertyValue("totalType", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalExpression", {
        get: function () {
            return this.getPropertyValue("totalExpression");
        },
        set: function (val) {
            this.setPropertyValue("totalExpression", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "hasTotal", {
        get: function () {
            return this.totalType != "none" || !!this.totalExpression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalFormat", {
        get: function () {
            return this.getLocalizableStringText("totalFormat", "");
        },
        set: function (val) {
            this.setLocalizableStringText("totalFormat", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "locTotalFormat", {
        get: function () {
            return this.getLocalizableString("totalFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "cellHint", {
        get: function () {
            return this.getLocalizableStringText("cellHint", "");
        },
        set: function (val) {
            this.setLocalizableStringText("cellHint", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "locCellHint", {
        get: function () {
            return this.getLocalizableString("cellHint");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "renderAs", {
        get: function () {
            return this.getPropertyValue("renderAs");
        },
        set: function (val) {
            this.setPropertyValue("renderAs", val);
            if (!!this.templateQuestion) {
                this.templateQuestion.renderAs = val;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalMaximumFractionDigits", {
        get: function () {
            return this.getPropertyValue("totalMaximumFractionDigits");
        },
        set: function (val) {
            if (val < -1 || val > 20)
                return;
            this.setPropertyValue("totalMaximumFractionDigits", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalMinimumFractionDigits", {
        get: function () {
            return this.getPropertyValue("totalMinimumFractionDigits");
        },
        set: function (val) {
            if (val < -1 || val > 20)
                return;
            this.setPropertyValue("totalMinimumFractionDigits", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalDisplayStyle", {
        get: function () {
            return this.getPropertyValue("totalDisplayStyle");
        },
        set: function (val) {
            this.setPropertyValue("totalDisplayStyle", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "totalCurrency", {
        get: function () {
            return this.getPropertyValue("totalCurrency");
        },
        set: function (val) {
            if (Object(_question_expression__WEBPACK_IMPORTED_MODULE_2__["getCurrecyCodes"])().indexOf(val) < 0)
                return;
            this.setPropertyValue("totalCurrency", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "minWidth", {
        get: function () {
            return this.getPropertyValue("minWidth", "");
        },
        set: function (val) {
            this.setPropertyValue("minWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "width", {
        get: function () {
            return this.getPropertyValue("width", "");
        },
        set: function (val) {
            this.setPropertyValue("width", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDropdownColumn.prototype, "colCount", {
        get: function () {
            return this.getPropertyValue("colCount");
        },
        set: function (val) {
            if (val < -1 || val > 4)
                return;
            this.setPropertyValue("colCount", val);
        },
        enumerable: false,
        configurable: true
    });
    MatrixDropdownColumn.prototype.getLocale = function () {
        return this.colOwner ? this.colOwner.getLocale() : "";
    };
    MatrixDropdownColumn.prototype.getMarkdownHtml = function (text, name) {
        return this.colOwner ? this.colOwner.getMarkdownHtml(text, name) : undefined;
    };
    MatrixDropdownColumn.prototype.getRenderer = function (name) {
        return !!this.colOwner ? this.colOwner.getRenderer(name) : null;
    };
    MatrixDropdownColumn.prototype.getRendererContext = function (locStr) {
        return !!this.colOwner ? this.colOwner.getRendererContext(locStr) : locStr;
    };
    MatrixDropdownColumn.prototype.getProcessedText = function (text) {
        return this.colOwner ? this.colOwner.getProcessedText(text) : text;
    };
    MatrixDropdownColumn.prototype.createCellQuestion = function (row) {
        var qType = this.calcCellQuestionType(row);
        var cellQuestion = this.createNewQuestion(qType);
        this.callOnCellQuestionUpdate(cellQuestion, row);
        return cellQuestion;
    };
    MatrixDropdownColumn.prototype.startLoadingFromJson = function (json) {
        _super.prototype.startLoadingFromJson.call(this, json);
        if (!!json && !json.cellType && !!json.choices) {
            json.cellType = this.colOwner.getCellType();
        }
    };
    MatrixDropdownColumn.prototype.updateCellQuestion = function (cellQuestion, data, onUpdateJson) {
        if (onUpdateJson === void 0) { onUpdateJson = null; }
        this.setQuestionProperties(cellQuestion, onUpdateJson);
    };
    MatrixDropdownColumn.prototype.callOnCellQuestionUpdate = function (cellQuestion, data) {
        var qType = cellQuestion.getType();
        var qDefinition = matrixDropdownColumnTypes[qType];
        if (qDefinition && qDefinition["onCellQuestionUpdate"]) {
            qDefinition["onCellQuestionUpdate"](cellQuestion, this, this.colOwner, data);
        }
    };
    MatrixDropdownColumn.prototype.defaultCellTypeChanged = function () {
        this.updateTemplateQuestion();
    };
    MatrixDropdownColumn.prototype.calcCellQuestionType = function (row) {
        var cellType = this.getDefaultCellQuestionType();
        if (!!row && !!this.colOwner) {
            cellType = this.colOwner.getCustomCellType(this, row, cellType);
        }
        return cellType;
    };
    MatrixDropdownColumn.prototype.getDefaultCellQuestionType = function (cellType) {
        if (!cellType)
            cellType = this.cellType;
        if (cellType !== "default")
            return cellType;
        if (this.colOwner)
            return this.colOwner.getCellType();
        return _settings__WEBPACK_IMPORTED_MODULE_3__["settings"].matrixDefaultCellType;
    };
    MatrixDropdownColumn.prototype.updateTemplateQuestion = function (newCellType) {
        var _this = this;
        var curCellType = this.getDefaultCellQuestionType(newCellType);
        var prevCellType = this.templateQuestion
            ? this.templateQuestion.getType()
            : "";
        if (curCellType === prevCellType)
            return;
        if (this.templateQuestion) {
            this.removeProperties(prevCellType);
        }
        this.templateQuestionValue = this.createNewQuestion(curCellType);
        this.templateQuestion.locOwner = this;
        this.addProperties(curCellType);
        this.templateQuestion.onPropertyChanged.add(function (sender, options) {
            _this.propertyValueChanged(options.name, options.oldValue, options.newValue);
        });
        this.templateQuestion.onItemValuePropertyChanged.add(function (sender, options) {
            _this.doItemValuePropertyChanged(options.propertyName, options.obj, options.name, options.newValue, options.oldValue);
        });
        this.templateQuestion.isContentElement = true;
        if (!this.isLoadingFromJson) {
            this.templateQuestion.onGetSurvey = function () {
                return _this.getSurvey();
            };
        }
        this.templateQuestion.locTitle.strChanged();
    };
    MatrixDropdownColumn.prototype.createNewQuestion = function (cellType) {
        var question = _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass(cellType);
        if (!question) {
            question = _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].createClass("text");
        }
        question.loadingOwner = this;
        question.isEditableTemplateElement = true;
        question.autoOtherMode = this.isShowInMultipleColumns;
        this.setQuestionProperties(question);
        this.setParentQuestionToTemplate(question);
        return question;
    };
    MatrixDropdownColumn.prototype.setParentQuestionToTemplate = function (question) {
        if (!!this.colOwner && this.colOwner.isQuestion) {
            question.setParentQuestion(this.colOwner);
        }
    };
    MatrixDropdownColumn.prototype.setQuestionProperties = function (question, onUpdateJson) {
        var _this = this;
        if (onUpdateJson === void 0) { onUpdateJson = null; }
        if (this.templateQuestion) {
            var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]().toJsonObject(this.templateQuestion, true);
            if (onUpdateJson) {
                onUpdateJson(json);
            }
            json.type = question.getType();
            if (this.cellType === "default" && !!this.colOwner && this.colOwner.hasChoices()) {
                delete json["choices"];
            }
            delete json["itemComponent"];
            new _jsonobject__WEBPACK_IMPORTED_MODULE_0__["JsonObject"]().toObject(json, question);
            question.isContentElement = this.templateQuestion.isContentElement;
            this.previousChoicesId = undefined;
            question.loadedChoicesFromServerCallback = function () {
                if (!_this.isShowInMultipleColumns)
                    return;
                if (!!_this.previousChoicesId && _this.previousChoicesId !== question.id)
                    return;
                _this.previousChoicesId = question.id;
                var choices = question.visibleChoices;
                _this.templateQuestion.choices = choices;
                _this.propertyValueChanged("choices", choices, choices);
            };
        }
    };
    MatrixDropdownColumn.prototype.propertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.propertyValueChanged.call(this, name, oldValue, newValue);
        if (name === "isRequired") {
            this.updateIsRenderedRequired(newValue);
        }
        if (!this.colOwner || this.isLoadingFromJson)
            return;
        if (this.isShowInMultipleColumns && ["visibleChoices", "choices"].indexOf(name) > -1) {
            this.colOwner.onShowInMultipleColumnsChanged(this);
        }
        if (!_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].hasOriginalProperty(this, name))
            return;
        this.colOwner.onColumnPropertyChanged(this, name, newValue);
    };
    MatrixDropdownColumn.prototype.doItemValuePropertyChanged = function (propertyName, obj, name, newValue, oldValue) {
        if (!_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].hasOriginalProperty(obj, name))
            return;
        if (this.colOwner != null && !this.isLoadingFromJson) {
            this.colOwner.onColumnItemValuePropertyChanged(this, propertyName, obj, name, newValue, oldValue);
        }
    };
    MatrixDropdownColumn.prototype.doShowInMultipleColumnsChanged = function () {
        if (this.colOwner != null && !this.isLoadingFromJson) {
            this.colOwner.onShowInMultipleColumnsChanged(this);
        }
        if (this.templateQuestion) {
            this.templateQuestion.autoOtherMode = this.isShowInMultipleColumns;
        }
    };
    MatrixDropdownColumn.prototype.getProperties = function (curCellType) {
        return _jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].getDynamicPropertiesByObj(this, curCellType);
    };
    MatrixDropdownColumn.prototype.removeProperties = function (curCellType) {
        var properties = this.getProperties(curCellType);
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            delete this[prop.name];
            if (prop.serializationProperty) {
                delete this[prop.serializationProperty];
            }
        }
    };
    MatrixDropdownColumn.prototype.addProperties = function (curCellType) {
        var question = this.templateQuestion;
        var properties = this.getProperties(curCellType);
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            this.addProperty(question, prop.name, false);
            if (prop.serializationProperty) {
                this.addProperty(question, prop.serializationProperty, true);
            }
            if (prop.alternativeName) {
                this.addProperty(question, prop.alternativeName, false);
            }
        }
    };
    MatrixDropdownColumn.prototype.addProperty = function (question, propName, isReadOnly) {
        var desc = {
            configurable: true,
            get: function () {
                return question[propName];
            },
        };
        if (!isReadOnly) {
            desc["set"] = function (v) {
                question[propName] = v;
            };
        }
        Object.defineProperty(this, propName, desc);
    };
    return MatrixDropdownColumn;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("matrixdropdowncolumn", [
    { name: "!name", isUnique: true },
    {
        name: "title", serializationProperty: "locTitle", dependsOn: "name",
        onPropertyEditorUpdate: function (obj, editor) {
            if (!!obj && !!editor) {
                editor.placeholder = obj.name;
            }
        }
    },
    { name: "cellHint", serializationProperty: "locCellHint", visible: false },
    {
        name: "cellType",
        default: "default",
        choices: function () {
            var res = MatrixDropdownColumn.getColumnTypes();
            res.splice(0, 0, "default");
            return res;
        },
    },
    { name: "colCount", default: -1, choices: [-1, 0, 1, 2, 3, 4] },
    "isRequired:boolean",
    "isUnique:boolean",
    {
        name: "requiredErrorText:text",
        serializationProperty: "locRequiredErrorText",
    },
    "readOnly:boolean",
    "minWidth",
    "width",
    "visibleIf:condition",
    "enableIf:condition",
    "requiredIf:condition",
    {
        name: "showInMultipleColumns:boolean",
        dependsOn: "cellType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.isSupportMultipleColumns;
        },
    },
    {
        name: "validators:validators",
        baseClassName: "surveyvalidator",
        classNamePart: "validator",
    },
    {
        name: "totalType",
        default: "none",
        choices: ["none", "sum", "count", "min", "max", "avg"],
    },
    "totalExpression:expression",
    { name: "totalFormat", serializationProperty: "locTotalFormat" },
    {
        name: "totalDisplayStyle",
        default: "none",
        choices: ["none", "decimal", "currency", "percent"],
    },
    {
        name: "totalCurrency",
        choices: function () {
            return Object(_question_expression__WEBPACK_IMPORTED_MODULE_2__["getCurrecyCodes"])();
        },
        default: "USD",
    },
    { name: "totalMaximumFractionDigits:number", default: -1 },
    { name: "totalMinimumFractionDigits:number", default: -1 },
    { name: "renderAs", default: "default", visible: false },
], function () {
    return new MatrixDropdownColumn("");
});


/***/ }),

/***/ "./src/question_matrixdropdownrendered.ts":
/*!************************************************!*\
  !*** ./src/question_matrixdropdownrendered.ts ***!
  \************************************************/
/*! exports provided: QuestionMatrixDropdownRenderedCell, QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownRenderedTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedCell", function() { return QuestionMatrixDropdownRenderedCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedRow", function() { return QuestionMatrixDropdownRenderedRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDropdownRenderedTable", function() { return QuestionMatrixDropdownRenderedTable; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _actions_adaptive_container__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions/adaptive-container */ "./src/actions/adaptive-container.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








var QuestionMatrixDropdownRenderedCell = /** @class */ (function () {
    function QuestionMatrixDropdownRenderedCell() {
        this.minWidth = "";
        this.width = "";
        this.colSpans = 1;
        this.isActionsCell = false;
        this.isDragHandlerCell = false;
        this.classNameValue = "";
        this.idValue = QuestionMatrixDropdownRenderedCell.counter++;
    }
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "hasQuestion", {
        get: function () {
            return !!this.question;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "hasTitle", {
        get: function () {
            return !!this.locTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "hasPanel", {
        get: function () {
            return !!this.panel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "id", {
        get: function () {
            return this.idValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "showErrorOnTop", {
        get: function () {
            return this.showErrorOnCore("top");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "showErrorOnBottom", {
        get: function () {
            return this.showErrorOnCore("bottom");
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownRenderedCell.prototype.showErrorOnCore = function (location) {
        return (this.getShowErrorLocation(location) &&
            (!this.isChoice || this.isFirstChoice));
    };
    QuestionMatrixDropdownRenderedCell.prototype.getShowErrorLocation = function (location) {
        return this.hasQuestion && this.question.showErrorOnCore(location);
    };
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "item", {
        get: function () {
            return this.itemValue;
        },
        set: function (val) {
            this.itemValue = val;
            if (!!val) {
                val.hideCaption = true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "isChoice", {
        get: function () {
            return !!this.item;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "isItemChoice", {
        get: function () {
            return this.isChoice && !this.isOtherChoice;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "choiceValue", {
        get: function () {
            return this.isChoice ? this.item.value : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "isCheckbox", {
        get: function () {
            return this.isItemChoice && this.question.isDescendantOf("checkbox");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "isRadio", {
        get: function () {
            return this.isItemChoice && this.question.isDescendantOf("radiogroup");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "isFirstChoice", {
        get: function () {
            return this.choiceIndex === 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "className", {
        get: function () {
            var builder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]().append(this.classNameValue);
            if (this.hasQuestion) {
                builder
                    .append(this.question.cssClasses.hasError, this.question.errors.length > 0)
                    .append(this.question.cssClasses.answered, this.question.isAnswered);
            }
            return builder.toString();
        },
        set: function (val) {
            this.classNameValue = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedCell.prototype, "headers", {
        get: function () {
            if (this.cell && this.cell.column) {
                if (this.cell.column.cellHint === " ") {
                    return "";
                }
                if (!!this.cell.column.cellHint) {
                    return this.cell.column.locCellHint.renderedHtml;
                }
                if (this.cell.column.isShowInMultipleColumns) {
                    return this.item.locText.renderedHtml;
                }
            }
            if (this.question && this.question.isVisible) {
                return this.question.locTitle.renderedHtml;
            }
            if (this.hasTitle) {
                return this.locTitle.renderedHtml || "";
            }
            return "";
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownRenderedCell.prototype.getTitle = function () {
        return (this.matrix && this.matrix.showHeader) ? this.headers : "";
    };
    QuestionMatrixDropdownRenderedCell.prototype.calculateFinalClassName = function (matrixCssClasses) {
        var questionCss = this.cell.question.cssClasses;
        // 'text-align': $data.isChoice ? 'center':
        var builder = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(questionCss.itemValue, !!questionCss)
            .append(questionCss.asCell, !!questionCss);
        return builder.append(matrixCssClasses.cell, builder.isEmpty() && !!matrixCssClasses)
            .append(matrixCssClasses.choiceCell, this.isChoice)
            .toString();
    };
    QuestionMatrixDropdownRenderedCell.counter = 1;
    return QuestionMatrixDropdownRenderedCell;
}());

var QuestionMatrixDropdownRenderedRow = /** @class */ (function (_super) {
    __extends(QuestionMatrixDropdownRenderedRow, _super);
    function QuestionMatrixDropdownRenderedRow(cssClasses, isDetailRow) {
        if (isDetailRow === void 0) { isDetailRow = false; }
        var _this = _super.call(this) || this;
        _this.cssClasses = cssClasses;
        _this.isDetailRow = isDetailRow;
        _this.cells = [];
        _this.idValue = QuestionMatrixDropdownRenderedRow.counter++;
        return _this;
    }
    Object.defineProperty(QuestionMatrixDropdownRenderedRow.prototype, "id", {
        get: function () {
            return this.idValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedRow.prototype, "attributes", {
        get: function () {
            if (!this.row)
                return {};
            return { "data-sv-drop-target-matrix-row": this.row.id };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedRow.prototype, "className", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
                .append(this.cssClasses.row)
                .append(this.cssClasses.detailRow, this.isDetailRow)
                .append(this.cssClasses.ghostRow, this.isGhostRow)
                .append(this.cssClasses.rowAdditional, this.isAdditionalClasses)
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownRenderedRow.counter = 1;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionMatrixDropdownRenderedRow.prototype, "isGhostRow", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionMatrixDropdownRenderedRow.prototype, "isAdditionalClasses", void 0);
    return QuestionMatrixDropdownRenderedRow;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var QuestionMatrixDropdownRenderedTable = /** @class */ (function (_super) {
    __extends(QuestionMatrixDropdownRenderedTable, _super);
    function QuestionMatrixDropdownRenderedTable(matrix) {
        var _this = _super.call(this) || this;
        _this.matrix = matrix;
        _this.renderedRowsChangedCallback = function () { };
        _this.hasActionCellInRowsValues = {};
        _this.build();
        return _this;
    }
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "showTable", {
        get: function () {
            return this.getPropertyValue("showTable", true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "showHeader", {
        get: function () {
            return this.getPropertyValue("showHeader");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "showAddRowOnTop", {
        get: function () {
            return this.getPropertyValue("showAddRowOnTop", false);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "showAddRowOnBottom", {
        get: function () {
            return this.getPropertyValue("showAddRowOnBottom", false);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "showFooter", {
        get: function () {
            return this.matrix.hasFooter && this.matrix.isColumnLayoutHorizontal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "hasFooter", {
        get: function () {
            return !!this.footerRow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "hasRemoveRows", {
        get: function () {
            return this.hasRemoveRowsValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownRenderedTable.prototype.isRequireReset = function () {
        return (this.hasRemoveRows != this.matrix.canRemoveRows ||
            !this.matrix.isColumnLayoutHorizontal);
    };
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "headerRow", {
        get: function () {
            return this.headerRowValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "footerRow", {
        get: function () {
            return this.footerRowValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "allowRowsDragAndDrop", {
        get: function () {
            return this.matrix.allowRowsDragAndDrop && this.matrix.isColumnLayoutHorizontal;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownRenderedTable.prototype.build = function () {
        this.hasRemoveRowsValue = this.matrix.canRemoveRows;
        //build rows now
        var rows = this.matrix.visibleRows;
        this.cssClasses = this.matrix.cssClasses;
        this.buildRowsActions();
        this.buildHeader();
        this.buildRows();
        this.buildFooter();
        this.updateShowTableAndAddRow();
    };
    QuestionMatrixDropdownRenderedTable.prototype.updateShowTableAndAddRow = function () {
        var showTable = this.rows.length > 0 ||
            this.matrix.isDesignMode ||
            !this.matrix.getShowColumnsIfEmpty();
        this.setPropertyValue("showTable", showTable);
        var showAddRow = this.matrix.canAddRow && showTable;
        var showAddRowOnTop = showAddRow;
        var showAddRowOnBottom = showAddRow;
        if (showAddRowOnTop) {
            if (this.matrix.getAddRowLocation() === "default") {
                showAddRowOnTop = !this.matrix.isColumnLayoutHorizontal;
            }
            else {
                showAddRowOnTop = this.matrix.getAddRowLocation() !== "bottom";
            }
        }
        if (showAddRowOnBottom && this.matrix.getAddRowLocation() !== "topBottom") {
            showAddRowOnBottom = !showAddRowOnTop;
        }
        this.setPropertyValue("showAddRowOnTop", showAddRowOnTop);
        this.setPropertyValue("showAddRowOnBottom", showAddRowOnBottom);
    };
    QuestionMatrixDropdownRenderedTable.prototype.onAddedRow = function () {
        if (this.getRenderedDataRowCount() >= this.matrix.visibleRows.length)
            return;
        var row = this.matrix.visibleRows[this.matrix.visibleRows.length - 1];
        this.rowsActions.push(this.buildRowActions(row));
        this.addHorizontalRow(this.rows, row, this.matrix.visibleRows.length == 1 && !this.matrix.showHeader);
        this.updateShowTableAndAddRow();
    };
    QuestionMatrixDropdownRenderedTable.prototype.getRenderedDataRowCount = function () {
        var res = 0;
        for (var i = 0; i < this.rows.length; i++) {
            if (!this.rows[i].isDetailRow)
                res++;
        }
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.onRemovedRow = function (row) {
        var rowIndex = this.getRenderedRowIndex(row);
        if (rowIndex < 0)
            return;
        this.rowsActions.splice(rowIndex, 1);
        var removeCount = 1;
        if (rowIndex < this.rows.length - 1 &&
            this.rows[rowIndex + 1].isDetailRow) {
            removeCount++;
        }
        this.rows.splice(rowIndex, removeCount);
        this.updateShowTableAndAddRow();
    };
    QuestionMatrixDropdownRenderedTable.prototype.onDetailPanelChangeVisibility = function (row, isShowing) {
        var rowIndex = this.getRenderedRowIndex(row);
        if (rowIndex < 0)
            return;
        var panelRowIndex = rowIndex < this.rows.length - 1 && this.rows[rowIndex + 1].isDetailRow
            ? rowIndex + 1
            : -1;
        if ((isShowing && panelRowIndex > -1) || (!isShowing && panelRowIndex < 0))
            return;
        if (isShowing) {
            var detailRow = this.createDetailPanelRow(row, this.rows[rowIndex]);
            this.rows.splice(rowIndex + 1, 0, detailRow);
        }
        else {
            this.rows.splice(panelRowIndex, 1);
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.getRenderedRowIndex = function (row) {
        for (var i = 0; i < this.rows.length; i++) {
            if (this.rows[i].row == row)
                return i;
        }
        return -1;
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildRowsActions = function () {
        this.rowsActions = [];
        var rows = this.matrix.visibleRows;
        for (var i = 0; i < rows.length; i++) {
            this.rowsActions.push(this.buildRowActions(rows[i]));
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.createRenderedRow = function (cssClasses, isDetailRow) {
        if (isDetailRow === void 0) { isDetailRow = false; }
        return new QuestionMatrixDropdownRenderedRow(cssClasses, isDetailRow);
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildHeader = function () {
        var colHeaders = this.matrix.isColumnLayoutHorizontal && this.matrix.showHeader;
        var isShown = colHeaders ||
            (this.matrix.hasRowText && !this.matrix.isColumnLayoutHorizontal);
        this.setPropertyValue("showHeader", isShown);
        if (!isShown)
            return;
        this.headerRowValue = this.createRenderedRow(this.cssClasses);
        if (this.allowRowsDragAndDrop) {
            this.headerRow.cells.push(this.createHeaderCell(null));
        }
        if (this.hasActionCellInRows("start")) {
            this.headerRow.cells.push(this.createHeaderCell(null));
        }
        if (this.matrix.hasRowText && this.matrix.showHeader) {
            this.headerRow.cells.push(this.createHeaderCell(null));
        }
        if (this.matrix.isColumnLayoutHorizontal) {
            for (var i = 0; i < this.matrix.visibleColumns.length; i++) {
                var column = this.matrix.visibleColumns[i];
                if (!column.hasVisibleCell)
                    continue;
                if (column.isShowInMultipleColumns) {
                    this.createMutlipleColumnsHeader(column);
                }
                else {
                    this.headerRow.cells.push(this.createHeaderCell(column));
                }
            }
        }
        else {
            var rows = this.matrix.visibleRows;
            for (var i = 0; i < rows.length; i++) {
                var cell = this.createTextCell(rows[i].locText);
                cell.row = rows[i];
                this.headerRow.cells.push(cell);
            }
            if (this.matrix.hasFooter) {
                this.headerRow.cells.push(this.createTextCell(this.matrix.getFooterText()));
            }
        }
        if (this.hasActionCellInRows("end")) {
            this.headerRow.cells.push(this.createHeaderCell(null));
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildFooter = function () {
        if (!this.showFooter)
            return;
        this.footerRowValue = this.createRenderedRow(this.cssClasses);
        if (this.allowRowsDragAndDrop) {
            this.footerRow.cells.push(this.createHeaderCell(null));
        }
        if (this.hasActionCellInRows("start")) {
            this.footerRow.cells.push(this.createHeaderCell(null));
        }
        if (this.matrix.hasRowText) {
            this.footerRow.cells.push(this.createTextCell(this.matrix.getFooterText()));
        }
        var cells = this.matrix.visibleTotalRow.cells;
        for (var i = 0; i < cells.length; i++) {
            var cell = cells[i];
            if (!cell.column.hasVisibleCell)
                continue;
            if (cell.column.isShowInMultipleColumns) {
                this.createMutlipleColumnsFooter(this.footerRow, cell);
            }
            else {
                var editCell = this.createEditCell(cell);
                if (cell.column) {
                    this.setHeaderCellWidth(cell.column, editCell);
                }
                this.footerRow.cells.push(editCell);
            }
        }
        if (this.hasActionCellInRows("end")) {
            this.footerRow.cells.push(this.createHeaderCell(null));
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildRows = function () {
        var rows = this.matrix.isColumnLayoutHorizontal
            ? this.buildHorizontalRows()
            : this.buildVerticalRows();
        this.rows = rows;
    };
    QuestionMatrixDropdownRenderedTable.prototype.hasActionCellInRows = function (location) {
        if (this.hasActionCellInRowsValues[location] === undefined) {
            this.hasActionCellInRowsValues[location] = this.hasActionsCellInLocaltion(location);
        }
        return this.hasActionCellInRowsValues[location];
    };
    QuestionMatrixDropdownRenderedTable.prototype.hasActionsCellInLocaltion = function (location) {
        var _this = this;
        if (location == "end" && this.hasRemoveRows)
            return true;
        return this.matrix.visibleRows.some(function (row, index) { return !_this.isValueEmpty(_this.getRowActions(index, location)); });
    };
    QuestionMatrixDropdownRenderedTable.prototype.canRemoveRow = function (row) {
        return this.matrix.canRemoveRow(row);
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildHorizontalRows = function () {
        var rows = this.matrix.visibleRows;
        var renderedRows = [];
        for (var i = 0; i < rows.length; i++) {
            this.addHorizontalRow(renderedRows, rows[i], i == 0 && !this.matrix.showHeader);
        }
        return renderedRows;
    };
    QuestionMatrixDropdownRenderedTable.prototype.addHorizontalRow = function (renderedRows, row, useAsHeader) {
        var renderedRow = this.createHorizontalRow(row, useAsHeader);
        renderedRow.row = row;
        renderedRows.push(renderedRow);
        if (row.isDetailPanelShowing) {
            renderedRows.push(this.createDetailPanelRow(row, renderedRow));
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.getRowDragCell = function (rowIndex) {
        var cell = new QuestionMatrixDropdownRenderedCell();
        cell.isDragHandlerCell = true;
        cell.className = this.getActionsCellClassName();
        cell.row = this.matrix.visibleRows[rowIndex];
        return cell;
    };
    QuestionMatrixDropdownRenderedTable.prototype.getActionsCellClassName = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]().append(this.cssClasses.actionsCell).append(this.cssClasses.verticalCell, !this.matrix.isColumnLayoutHorizontal).toString();
    };
    QuestionMatrixDropdownRenderedTable.prototype.getRowActionsCell = function (rowIndex, location) {
        var rowActions = this.getRowActions(rowIndex, location);
        if (!this.isValueEmpty(rowActions)) {
            var cell = new QuestionMatrixDropdownRenderedCell();
            var actionContainer = this.matrix.allowAdaptiveActions ? new _actions_adaptive_container__WEBPACK_IMPORTED_MODULE_4__["AdaptiveActionContainer"]() : new _actions_container__WEBPACK_IMPORTED_MODULE_6__["ActionContainer"]();
            if (!!this.matrix.survey && this.matrix.survey.getCss().actionBar) {
                actionContainer.cssClasses = this.matrix.survey.getCss().actionBar;
            }
            actionContainer.setItems(rowActions);
            var itemValue = new _itemvalue__WEBPACK_IMPORTED_MODULE_2__["ItemValue"](actionContainer);
            cell.item = itemValue;
            cell.isActionsCell = true;
            cell.className = this.getActionsCellClassName();
            cell.row = this.matrix.visibleRows[rowIndex];
            return cell;
        }
        return null;
    };
    QuestionMatrixDropdownRenderedTable.prototype.getRowActions = function (rowIndex, location) {
        var actions = this.rowsActions[rowIndex];
        if (!Array.isArray(actions))
            return [];
        return actions.filter(function (action) {
            if (!action.location) {
                action.location = "start";
            }
            return action.location === location;
        });
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildRowActions = function (row) {
        var actions = [];
        this.setDefaultRowActions(row, actions);
        if (!!this.matrix.survey) {
            actions = this.matrix.survey.getUpdatedMatrixRowActions(this.matrix, row, actions);
        }
        return actions;
    };
    Object.defineProperty(QuestionMatrixDropdownRenderedTable.prototype, "showRemoveButtonAsIcon", {
        get: function () {
            return (_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].matrixRenderRemoveAsIcon && this.matrix.survey && this.matrix.survey.css.root === "sd-root-modern");
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDropdownRenderedTable.prototype.setDefaultRowActions = function (row, actions) {
        var matrix = this.matrix;
        if (this.hasRemoveRows && this.canRemoveRow(row)) {
            if (!this.showRemoveButtonAsIcon) {
                actions.push(new _actions_action__WEBPACK_IMPORTED_MODULE_3__["Action"]({
                    id: "remove-row",
                    location: "end",
                    enabled: !this.matrix.isInputReadOnly,
                    component: "sv-matrix-remove-button",
                    data: { row: row, question: this.matrix },
                }));
            }
            else {
                actions.push(new _actions_action__WEBPACK_IMPORTED_MODULE_3__["Action"]({
                    id: "remove-row",
                    iconName: "icon-delete",
                    component: "sv-action-bar-item",
                    innerCss: new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]().append(this.matrix.cssClasses.button).append(this.matrix.cssClasses.buttonRemove).toString(),
                    location: "end",
                    showTitle: false,
                    title: matrix.removeRowText,
                    enabled: !matrix.isInputReadOnly,
                    data: { row: row, question: matrix },
                    action: function () {
                        matrix.removeRowUI(row);
                    },
                }));
            }
        }
        if (row.hasPanel) {
            actions.push(new _actions_action__WEBPACK_IMPORTED_MODULE_3__["Action"]({
                id: "show-detail",
                title: this.matrix.getLocalizationString("editText"),
                showTitle: false,
                location: "start",
                component: "sv-matrix-detail-button",
                data: { row: row, question: this.matrix },
            }));
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.createHorizontalRow = function (row, useAsHeader) {
        var res = this.createRenderedRow(this.cssClasses);
        if (this.allowRowsDragAndDrop) {
            var rowIndex = this.matrix.visibleRows.indexOf(row);
            res.cells.push(this.getRowDragCell(rowIndex));
        }
        this.addRowActionsCell(row, res, "start");
        if (this.matrix.hasRowText) {
            var renderedCell = this.createTextCell(row.locText);
            renderedCell.row = row;
            res.cells.push(renderedCell);
            if (useAsHeader) {
                this.setHeaderCellWidth(null, renderedCell);
            }
            renderedCell.className = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
                .append(renderedCell.className)
                .append(this.cssClasses.rowTextCell)
                .append(this.cssClasses.detailRowText, row.hasPanel)
                .toString();
        }
        for (var i = 0; i < row.cells.length; i++) {
            var cell = row.cells[i];
            if (!cell.column.hasVisibleCell)
                continue;
            if (cell.column.isShowInMultipleColumns) {
                this.createMutlipleEditCells(res, cell);
            }
            else {
                var renderedCell = this.createEditCell(cell);
                res.cells.push(renderedCell);
                if (useAsHeader) {
                    this.setHeaderCellWidth(cell.column, renderedCell);
                }
            }
        }
        this.addRowActionsCell(row, res, "end");
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.addRowActionsCell = function (row, renderedRow, location) {
        var rowIndex = this.matrix.visibleRows.indexOf(row);
        if (this.hasActionCellInRows(location)) {
            var actions = this.getRowActionsCell(rowIndex, location);
            if (!!actions) {
                renderedRow.cells.push(actions);
            }
            else {
                var cell = new QuestionMatrixDropdownRenderedCell();
                cell.isEmpty = true;
                renderedRow.cells.push(cell);
            }
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.createDetailPanelRow = function (row, renderedRow) {
        var panelFullWidth = this.matrix.isDesignMode;
        var res = this.createRenderedRow(this.cssClasses, true);
        res.row = row;
        var buttonCell = new QuestionMatrixDropdownRenderedCell();
        if (this.matrix.hasRowText) {
            buttonCell.colSpans = 2;
        }
        buttonCell.isEmpty = true;
        if (!panelFullWidth)
            res.cells.push(buttonCell);
        var actionsCell = null;
        if (this.hasActionCellInRows("end")) {
            actionsCell = new QuestionMatrixDropdownRenderedCell();
            actionsCell.isEmpty = true;
        }
        var cell = new QuestionMatrixDropdownRenderedCell();
        cell.panel = row.detailPanel;
        cell.colSpans =
            renderedRow.cells.length -
                (!panelFullWidth ? buttonCell.colSpans : 0) -
                (!!actionsCell ? actionsCell.colSpans : 0);
        cell.className = this.cssClasses.detailPanelCell;
        res.cells.push(cell);
        if (!!actionsCell) {
            res.cells.push(actionsCell);
        }
        if (typeof this.matrix.onCreateDetailPanelRenderedRowCallback === "function") {
            this.matrix.onCreateDetailPanelRenderedRowCallback(res);
        }
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.buildVerticalRows = function () {
        var columns = this.matrix.columns;
        var renderedRows = [];
        for (var i = 0; i < columns.length; i++) {
            var col = columns[i];
            if (col.isVisible && col.hasVisibleCell) {
                if (col.isShowInMultipleColumns) {
                    this.createMutlipleVerticalRows(renderedRows, col, i);
                }
                else {
                    renderedRows.push(this.createVerticalRow(col, i));
                }
            }
        }
        if (this.hasActionCellInRows("end")) {
            renderedRows.push(this.createEndVerticalActionRow());
        }
        return renderedRows;
    };
    QuestionMatrixDropdownRenderedTable.prototype.createMutlipleVerticalRows = function (renderedRows, column, index) {
        var choices = this.getMultipleColumnChoices(column);
        if (!choices)
            return;
        for (var i = 0; i < choices.length; i++) {
            renderedRows.push(this.createVerticalRow(column, index, choices[i], i));
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.createVerticalRow = function (column, index, choice, choiceIndex) {
        if (choice === void 0) { choice = null; }
        if (choiceIndex === void 0) { choiceIndex = -1; }
        var res = this.createRenderedRow(this.cssClasses);
        if (this.matrix.showHeader) {
            var lTitle = !!choice ? choice.locText : column.locTitle;
            var hCell = this.createTextCell(lTitle);
            hCell.column = column;
            hCell.className = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
                .append(hCell.className)
                .append(this.cssClasses.rowTextCell).toString();
            if (!choice) {
                this.setRequriedToHeaderCell(column, hCell);
            }
            res.cells.push(hCell);
        }
        var rows = this.matrix.visibleRows;
        for (var i = 0; i < rows.length; i++) {
            var rChoice = choice;
            var rChoiceIndex = choiceIndex >= 0 ? choiceIndex : i;
            var cell = rows[i].cells[index];
            var visChoices = !!choice ? cell.question.visibleChoices : undefined;
            if (!!visChoices && rChoiceIndex < visChoices.length) {
                rChoice = visChoices[rChoiceIndex];
            }
            var rCell = this.createEditCell(cell, rChoice);
            rCell.item = rChoice;
            rCell.choiceIndex = rChoiceIndex;
            res.cells.push(rCell);
        }
        if (this.matrix.hasTotal) {
            res.cells.push(this.createEditCell(this.matrix.visibleTotalRow.cells[index]));
        }
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.createEndVerticalActionRow = function () {
        var res = this.createRenderedRow(this.cssClasses);
        if (this.matrix.showHeader) {
            res.cells.push(this.createEmptyCell());
        }
        var rows = this.matrix.visibleRows;
        for (var i = 0; i < rows.length; i++) {
            res.cells.push(this.getRowActionsCell(i, "end"));
        }
        if (this.matrix.hasTotal) {
            res.cells.push(this.createEmptyCell());
        }
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.createMutlipleEditCells = function (rRow, cell, isFooter) {
        if (isFooter === void 0) { isFooter = false; }
        var choices = isFooter
            ? this.getMultipleColumnChoices(cell.column)
            : cell.question.visibleChoices;
        if (!choices)
            return;
        for (var i = 0; i < choices.length; i++) {
            var rCell = this.createEditCell(cell, !isFooter ? choices[i] : undefined);
            if (!isFooter) {
                //rCell.item = choices[i];
                this.setItemCellCssClasses(rCell);
                rCell.choiceIndex = i;
            }
            rRow.cells.push(rCell);
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.setItemCellCssClasses = function (cell) {
        cell.className = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(this.cssClasses.itemCell)
            .append(this.cssClasses.radioCell, cell.isRadio)
            .append(this.cssClasses.checkboxCell, cell.isCheckbox)
            .toString();
    };
    QuestionMatrixDropdownRenderedTable.prototype.createEditCell = function (cell, choiceItem) {
        if (choiceItem === void 0) { choiceItem = undefined; }
        var res = new QuestionMatrixDropdownRenderedCell();
        res.cell = cell;
        res.row = cell.row;
        res.question = cell.question;
        res.matrix = this.matrix;
        res.item = choiceItem;
        res.isOtherChoice = !!choiceItem && !!cell.question && cell.question.otherItem === choiceItem;
        res.className = res.calculateFinalClassName(this.cssClasses);
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.createMutlipleColumnsFooter = function (rRow, cell) {
        this.createMutlipleEditCells(rRow, cell, true);
    };
    QuestionMatrixDropdownRenderedTable.prototype.createMutlipleColumnsHeader = function (column) {
        var choices = this.getMultipleColumnChoices(column);
        if (!choices)
            return;
        for (var i = 0; i < choices.length; i++) {
            var cell = this.createTextCell(choices[i].locText);
            this.setHeaderCell(column, cell);
            this.setHeaderCellCssClasses(cell);
            this.headerRow.cells.push(cell);
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.getMultipleColumnChoices = function (column) {
        var choices = column.templateQuestion.choices;
        if (!!choices && Array.isArray(choices) && choices.length == 0)
            return this.matrix.choices;
        choices = column.templateQuestion.visibleChoices;
        if (!choices || !Array.isArray(choices))
            return null;
        return choices;
    };
    QuestionMatrixDropdownRenderedTable.prototype.setHeaderCellCssClasses = function (cell, cellType) {
        cell.className = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_5__["CssClassBuilder"]()
            .append(this.cssClasses.headerCell)
            .append(this.cssClasses.emptyCell, !!cell.isEmpty)
            .append(this.cssClasses.cell + "--" + cellType, !!cellType)
            .toString();
    };
    QuestionMatrixDropdownRenderedTable.prototype.createHeaderCell = function (column) {
        var cell = !!column ? this.createTextCell(column.locTitle) : this.createEmptyCell();
        cell.column = column;
        this.setHeaderCell(column, cell);
        var cellType = (!!column && column.cellType !== "default") ? column.cellType : this.matrix.cellType;
        this.setHeaderCellCssClasses(cell, cellType);
        return cell;
    };
    QuestionMatrixDropdownRenderedTable.prototype.setHeaderCell = function (column, cell) {
        this.setHeaderCellWidth(column, cell);
        this.setRequriedToHeaderCell(column, cell);
    };
    QuestionMatrixDropdownRenderedTable.prototype.setHeaderCellWidth = function (column, cell) {
        cell.minWidth = column != null ? this.matrix.getColumnWidth(column) : this.matrix.getRowTitleWidth();
        cell.width = column != null ? column.width : this.matrix.getRowTitleWidth();
    };
    QuestionMatrixDropdownRenderedTable.prototype.setRequriedToHeaderCell = function (column, cell) {
        if (!!column && column.isRequired && this.matrix.survey) {
            cell.requiredText = this.matrix.survey.requiredText;
        }
    };
    QuestionMatrixDropdownRenderedTable.prototype.createRemoveRowCell = function (row) {
        var res = new QuestionMatrixDropdownRenderedCell();
        res.row = row;
        res.isRemoveRow = this.canRemoveRow(row);
        if (!!this.cssClasses.cell) {
            res.className = this.cssClasses.cell;
        }
        return res;
    };
    QuestionMatrixDropdownRenderedTable.prototype.createTextCell = function (locTitle) {
        var cell = new QuestionMatrixDropdownRenderedCell();
        cell.locTitle = locTitle;
        if (!!locTitle) {
            locTitle.strChanged();
        }
        if (!!this.cssClasses.cell) {
            cell.className = this.cssClasses.cell;
        }
        return cell;
    };
    QuestionMatrixDropdownRenderedTable.prototype.createEmptyCell = function () {
        var res = this.createTextCell(null);
        res.isEmpty = true;
        return res;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["propertyArray"])({
            onPush: function (_, i, target) {
                target.renderedRowsChangedCallback();
            },
        })
    ], QuestionMatrixDropdownRenderedTable.prototype, "rows", void 0);
    return QuestionMatrixDropdownRenderedTable;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));



/***/ }),

/***/ "./src/question_matrixdynamic.ts":
/*!***************************************!*\
  !*** ./src/question_matrixdynamic.ts ***!
  \***************************************/
/*! exports provided: MatrixDynamicRowModel, QuestionMatrixDynamicModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MatrixDynamicRowModel", function() { return MatrixDynamicRowModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMatrixDynamicModel", function() { return QuestionMatrixDynamicModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_matrixdropdownbase */ "./src/question_matrixdropdownbase.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _dragdrop_matrix_rows__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dragdrop/matrix-rows */ "./src/dragdrop/matrix-rows.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./question_matrixdropdownrendered */ "./src/question_matrixdropdownrendered.ts");
/* harmony import */ var _utils_dragOrClickHelper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/dragOrClickHelper */ "./src/utils/dragOrClickHelper.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();










var MatrixDynamicRowModel = /** @class */ (function (_super) {
    __extends(MatrixDynamicRowModel, _super);
    function MatrixDynamicRowModel(index, data, value) {
        var _this = _super.call(this, data, value) || this;
        _this.index = index;
        _this.buildCells(value);
        return _this;
    }
    Object.defineProperty(MatrixDynamicRowModel.prototype, "rowName", {
        get: function () {
            return this.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixDynamicRowModel.prototype, "shortcutText", {
        get: function () {
            var matrix = this.data;
            var index = matrix.visibleRows.indexOf(this) + 1;
            var questionValue1 = this.cells.length > 1 ? this.cells[1]["questionValue"] : undefined;
            var questionValue0 = this.cells.length > 0 ? this.cells[0]["questionValue"] : undefined;
            return (questionValue1 && questionValue1.value ||
                questionValue0 && questionValue0.value ||
                "" + index);
        },
        enumerable: false,
        configurable: true
    });
    return MatrixDynamicRowModel;
}(_question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_2__["MatrixDropdownRowModelBase"]));

/**
  * A class that describes the Dynamic Matrix question type.
  *
  * Dynamic Matrix allows respondents to add and delete matrix rows. You can use the [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel), [Checkbox](https://surveyjs.io/form-library/documentation/questioncheckboxmodel), [Radiogroup](https://surveyjs.io/form-library/documentation/questionradiogroupmodel), [Text](https://surveyjs.io/form-library/documentation/questiontextmodel), and [Comment](https://surveyjs.io/form-library/documentation/questioncommentmodel) question types as cell editors.
  *
  * [View Demo](https://surveyjs.io/form-library/examples/questiontype-matrixdynamic/ (linkStyle))
  */
var QuestionMatrixDynamicModel = /** @class */ (function (_super) {
    __extends(QuestionMatrixDynamicModel, _super);
    function QuestionMatrixDynamicModel(name) {
        var _this = _super.call(this, name) || this;
        _this.rowCounter = 0;
        _this.initialRowCount = 2;
        _this.setRowCountValueFromData = false;
        _this.startDragMatrixRow = function (event, currentTarget) {
            _this.dragDropMatrixRows.startDrag(event, _this.draggedRow, _this, event.target);
        };
        _this.moveRowByIndex = function (fromIndex, toIndex) {
            var value = _this.createNewValue();
            if (!value)
                return;
            var movableRow = value[fromIndex];
            if (!movableRow)
                return;
            value.splice(fromIndex, 1);
            value.splice(toIndex, 0, movableRow);
            _this.value = value;
        };
        _this.createLocalizableString("confirmDeleteText", _this, false, "confirmDelete");
        var locAddRowText = _this.createLocalizableString("addRowText", _this);
        locAddRowText.onGetTextCallback = function (text) {
            return !!text ? text : _this.defaultAddRowText;
        };
        _this.createLocalizableString("removeRowText", _this, false, "removeRow");
        _this.createLocalizableString("emptyRowsText", _this, false, true);
        _this.registerPropertyChangedHandlers(["hideColumnsIfEmpty", "allowAddRows"], function () {
            _this.updateShowTableAndAddRow();
        });
        _this.registerPropertyChangedHandlers(["allowRowsDragAndDrop"], function () { _this.clearRowsAndResetRenderedTable(); });
        _this.dragOrClickHelper = new _utils_dragOrClickHelper__WEBPACK_IMPORTED_MODULE_9__["DragOrClickHelper"](_this.startDragMatrixRow);
        return _this;
    }
    QuestionMatrixDynamicModel.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        this.dragDropMatrixRows = new _dragdrop_matrix_rows__WEBPACK_IMPORTED_MODULE_6__["DragDropMatrixRows"](this.survey, null, true);
    };
    QuestionMatrixDynamicModel.prototype.isBanStartDrag = function (pointerDownEvent) {
        var target = pointerDownEvent.target;
        return target.getAttribute("contenteditable") === "true" || target.nodeName === "INPUT";
    };
    QuestionMatrixDynamicModel.prototype.onPointerDown = function (pointerDownEvent, row) {
        if (!row || !this.allowRowsDragAndDrop)
            return;
        if (this.isBanStartDrag(pointerDownEvent))
            return;
        if (row.isDetailPanelShowing)
            return;
        this.draggedRow = row;
        this.dragOrClickHelper.onPointerDown(pointerDownEvent);
    };
    QuestionMatrixDynamicModel.prototype.getType = function () {
        return "matrixdynamic";
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "isRowsDynamic", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "confirmDelete", {
        /**
         * Specifies whether to display a confirmation dialog when a respondent wants to delete a row.
         *
         * Default value: `false`
         * @see confirmDeleteText
         */
        get: function () {
            return this.getPropertyValue("confirmDelete", false);
        },
        set: function (val) {
            this.setPropertyValue("confirmDelete", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "keyName", {
        /**
         * Specifies a key column. Set this property to a column name, and the question will display `keyDuplicationError` if a user tries to enter a duplicate value in this column.
         * @see keyDuplicationError
         */
        get: function () {
            return this.getPropertyValue("keyName", "");
        },
        set: function (val) {
            this.setPropertyValue("keyName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "defaultRowValue", {
        /**
         * If it is not empty, then this value is set to every new row, including rows created initially, unless the defaultValue is not empty
         * @see defaultValue
         * @see defaultValueFromLastRow
         */
        get: function () {
            return this.getPropertyValue("defaultRowValue");
        },
        set: function (val) {
            this.setPropertyValue("defaultRowValue", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "defaultValueFromLastRow", {
        /**
         * Specifies whether default values for a new row/column should be copied from the last row/column.
         *
         * If you also specify `defaultValue`, it will be merged with the copied values.
         * @see defaultValue
         */
        get: function () {
            return this.getPropertyValue("defaultValueFromLastRow", false);
        },
        set: function (val) {
            this.setPropertyValue("defaultValueFromLastRow", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.isDefaultValueEmpty = function () {
        return (_super.prototype.isDefaultValueEmpty.call(this) && this.isValueEmpty(this.defaultRowValue));
    };
    QuestionMatrixDynamicModel.prototype.valueFromData = function (val) {
        if (this.minRowCount < 1)
            return _super.prototype.valueFromData.call(this, val);
        if (!Array.isArray(val))
            val = [];
        for (var i = val.length; i < this.minRowCount; i++)
            val.push({});
        return val;
    };
    QuestionMatrixDynamicModel.prototype.setDefaultValue = function () {
        if (this.isValueEmpty(this.defaultRowValue) ||
            !this.isValueEmpty(this.defaultValue)) {
            _super.prototype.setDefaultValue.call(this);
            return;
        }
        if (!this.isEmpty() || this.rowCount == 0)
            return;
        var newValue = [];
        for (var i = 0; i < this.rowCount; i++) {
            newValue.push(this.defaultRowValue);
        }
        this.value = newValue;
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "rowCount", {
        /**
         * The number of rows in the matrix.
         * @see minRowCount
         * @see maxRowCount
         */
        get: function () {
            return this.rowCountValue;
        },
        set: function (val) {
            if (val < 0 || val > _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].matrixMaximumRowCount)
                return;
            this.setRowCountValueFromData = false;
            var prevValue = this.rowCountValue;
            this.rowCountValue = val;
            if (this.value && this.value.length > val) {
                var qVal = this.value;
                qVal.splice(val);
                this.value = qVal;
            }
            if (this.isUpdateLocked) {
                this.initialRowCount = val;
                return;
            }
            if (this.generatedVisibleRows || prevValue == 0) {
                if (!this.generatedVisibleRows) {
                    this.generatedVisibleRows = [];
                }
                this.generatedVisibleRows.splice(val);
                for (var i = prevValue; i < val; i++) {
                    var newRow = this.createMatrixRow(this.getValueForNewRow());
                    this.generatedVisibleRows.push(newRow);
                    this.onMatrixRowCreated(newRow);
                }
                this.runCondition(this.getDataFilteredValues(), this.getDataFilteredProperties());
            }
            this.onRowsChanged();
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.updateProgressInfoByValues = function (res) {
        var val = this.value;
        if (!Array.isArray(val))
            val = [];
        for (var i = 0; i < this.rowCount; i++) {
            var rowValue = i < val.length ? val[i] : {};
            this.updateProgressInfoByRow(res, rowValue);
        }
    };
    QuestionMatrixDynamicModel.prototype.getValueForNewRow = function () {
        var res = null;
        if (!!this.onGetValueForNewRowCallBack) {
            res = this.onGetValueForNewRowCallBack(this);
        }
        return res;
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "allowRowsDragAndDrop", {
        /**
         * Specifies whether users can drag and drop matrix rows to reorder them.
         *
         * Default value: `false`
         */
        get: function () {
            if (this.readOnly)
                return false;
            return this.getPropertyValue("allowRowsDragAndDrop");
        },
        set: function (val) {
            this.setPropertyValue("allowRowsDragAndDrop", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "iconDragElement", {
        get: function () {
            return this.cssClasses.iconDragElement;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.createRenderedTable = function () {
        return new QuestionMatrixDynamicRenderedTable(this);
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "rowCountValue", {
        get: function () {
            return this.getPropertyValue("rowCount");
        },
        set: function (val) {
            this.setPropertyValue("rowCount", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "minRowCount", {
        /**
         * A minimum number of rows in the matrix. Users cannot delete rows if `rowCount` equals `minRowCount`.
         *
         * Default value: 0
         * @see rowCount
         * @see maxRowCount
         * @see allowRemoveRows
         */
        get: function () {
            return this.getPropertyValue("minRowCount");
        },
        set: function (val) {
            if (val < 0)
                val = 0;
            this.setPropertyValue("minRowCount", val);
            if (val > this.maxRowCount)
                this.maxRowCount = val;
            if (this.rowCount < val)
                this.rowCount = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "maxRowCount", {
        /**
         * A maximum number of rows in the matrix. Users cannot add new rows if `rowCount` equals `maxRowCount`.
         *
         * Default value: 1000 (inherited from [`settings.matrixMaximumRowCount`](https://surveyjs.io/form-library/documentation/settings#matrixMaximumRowCount))
         * @see rowCount
         * @see minRowCount
         * @see allowAddRows
         */
        get: function () {
            return this.getPropertyValue("maxRowCount");
        },
        set: function (val) {
            if (val <= 0)
                return;
            if (val > _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].matrixMaximumRowCount)
                val = _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].matrixMaximumRowCount;
            if (val == this.maxRowCount)
                return;
            this.setPropertyValue("maxRowCount", val);
            if (val < this.minRowCount)
                this.minRowCount = val;
            if (this.rowCount > val)
                this.rowCount = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "allowAddRows", {
        /**
         * Specifies whether users are allowed to add new rows.
         *
         * Default value: `true`
         * @see canAddRow
         * @see allowRemoveRows
         */
        get: function () {
            return this.getPropertyValue("allowAddRows");
        },
        set: function (val) {
            this.setPropertyValue("allowAddRows", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "allowRemoveRows", {
        /**
         * Specifies whether users are allowed to delete rows.
         *
         * Default value: `true`
         * @see canRemoveRows
         * @see allowAddRows
         */
        get: function () {
            return this.getPropertyValue("allowRemoveRows");
        },
        set: function (val) {
            this.setPropertyValue("allowRemoveRows", val);
            if (!this.isUpdateLocked) {
                this.resetRenderedTable();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "canAddRow", {
        /**
         * Indicates whether it is possible to add a new row.
         *
         * This property returns `true` when all of the following conditions apply:
         *
         * - Users are allowed to add new rows (`allowAddRows` is `true`).
         * - The question, its parent panel, or survey is not in read-only state.
         * - `rowCount` is less than `maxRowCount`.
         * @see allowAddRows
         * @see isReadOnly
         * @see rowCount
         * @see maxRowCount
         * @see canRemoveRows
         */
        get: function () {
            return (this.allowAddRows && !this.isReadOnly && this.rowCount < this.maxRowCount);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "canRemoveRows", {
        /**
         * Indicates whether it is possible to delete rows.
         *
         * This property returns `true` when all of the following conditions apply:
         *
         * - Users are allowed to delete rows (`allowRemoveRows` is `true`).
         * - The question, its parent panel, or survey is not in read-only state.
         * - `rowCount` exceeds `minRowCount`.
         * @see allowRemoveRows
         * @see isReadOnly
         * @see rowCount
         * @see minRowCount
         * @see canAddRow
         */
        get: function () {
            var res = this.allowRemoveRows &&
                !this.isReadOnly &&
                this.rowCount > this.minRowCount;
            return !!this.canRemoveRowsCallback ? this.canRemoveRowsCallback(res) : res;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.canRemoveRow = function (row) {
        if (!this.survey)
            return true;
        return this.survey.matrixAllowRemoveRow(this, row.index, row);
    };
    QuestionMatrixDynamicModel.prototype.addRowUI = function () {
        this.addRow(true);
    };
    QuestionMatrixDynamicModel.prototype.getQuestionToFocusOnAddingRow = function () {
        var row = this.visibleRows[this.visibleRows.length - 1];
        for (var i = 0; i < row.cells.length; i++) {
            var q = row.cells[i].question;
            if (!!q && q.isVisible && !q.isReadOnly) {
                return q;
            }
        }
        return null;
    };
    /**
     * Creates and adds a new row to the matrix.
     * @param setFocus *Optional.* Pass `true` to focus the cell in the first column.
     */
    QuestionMatrixDynamicModel.prototype.addRow = function (setFocus) {
        var oldRowCount = this.rowCount;
        var options = { question: this, canAddRow: this.canAddRow };
        if (!!this.survey) {
            this.survey.matrixBeforeRowAdded(options);
        }
        if (!options.canAddRow)
            return;
        this.onStartRowAddingRemoving();
        this.addRowCore();
        this.onEndRowAdding();
        if (this.detailPanelShowOnAdding && this.visibleRows.length > 0) {
            this.visibleRows[this.visibleRows.length - 1].showDetailPanel();
        }
        if (setFocus && oldRowCount !== this.rowCount) {
            var q = this.getQuestionToFocusOnAddingRow();
            if (!!q) {
                q.focus();
            }
        }
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "detailPanelShowOnAdding", {
        /**
         * Specifies whether to expand the detail section immediately when a respondent adds a new row.
         * @see detailPanelMode
         */
        get: function () {
            return this.getPropertyValue("detailPanelShowOnAdding");
        },
        set: function (val) {
            this.setPropertyValue("detailPanelShowOnAdding", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.hasRowsAsItems = function () {
        return false;
    };
    QuestionMatrixDynamicModel.prototype.unbindValue = function () {
        this.clearGeneratedRows();
        this.clearPropertyValue("value");
        this.rowCountValue = 0;
        _super.prototype.unbindValue.call(this);
    };
    QuestionMatrixDynamicModel.prototype.isValueSurveyElement = function (val) {
        return this.isEditingSurveyElement || _super.prototype.isValueSurveyElement.call(this, val);
    };
    QuestionMatrixDynamicModel.prototype.addRowCore = function () {
        var prevRowCount = this.rowCount;
        this.rowCount = this.rowCount + 1;
        var defaultValue = this.getDefaultRowValue(true);
        var newValue = null;
        if (!this.isValueEmpty(defaultValue)) {
            newValue = this.createNewValue();
            if (newValue.length == this.rowCount) {
                newValue[newValue.length - 1] = defaultValue;
                this.value = newValue;
            }
        }
        if (this.data) {
            this.runCellsCondition(this.getDataFilteredValues(), this.getDataFilteredProperties());
            if (this.isValueEmpty(defaultValue)) {
                var row = this.visibleRows[this.rowCount - 1];
                if (!this.isValueEmpty(row.value)) {
                    if (!newValue) {
                        newValue = this.createNewValue();
                    }
                    if (!this.isValueSurveyElement(newValue) &&
                        !this.isTwoValueEquals(newValue[newValue.length - 1], row.value)) {
                        newValue[newValue.length - 1] = row.value;
                        this.value = newValue;
                    }
                }
            }
        }
        if (this.survey) {
            if (prevRowCount + 1 == this.rowCount) {
                this.survey.matrixRowAdded(this, this.visibleRows[this.visibleRows.length - 1]);
                this.onRowsChanged();
            }
        }
    };
    QuestionMatrixDynamicModel.prototype.getDefaultRowValue = function (isRowAdded) {
        var res = null;
        for (var i = 0; i < this.columns.length; i++) {
            var q = this.columns[i].templateQuestion;
            if (!!q && !this.isValueEmpty(q.getDefaultValue())) {
                res = res || {};
                res[this.columns[i].name] = q.getDefaultValue();
            }
        }
        if (!this.isValueEmpty(this.defaultRowValue)) {
            for (var key in this.defaultRowValue) {
                res = res || {};
                res[key] = this.defaultRowValue[key];
            }
        }
        if (isRowAdded && this.defaultValueFromLastRow) {
            var val = this.value;
            if (!!val && Array.isArray(val) && val.length >= this.rowCount - 1) {
                var rowValue = val[this.rowCount - 2];
                for (var key in rowValue) {
                    res = res || {};
                    res[key] = rowValue[key];
                }
            }
        }
        return res;
    };
    QuestionMatrixDynamicModel.prototype.removeRowUI = function (value) {
        if (!!value && !!value.rowName) {
            var index = this.visibleRows.indexOf(value);
            if (index < 0)
                return;
            value = index;
        }
        this.removeRow(value);
    };
    QuestionMatrixDynamicModel.prototype.isRequireConfirmOnRowDelete = function (index) {
        if (!this.confirmDelete)
            return false;
        if (index < 0 || index >= this.rowCount)
            return false;
        var value = this.createNewValue();
        if (this.isValueEmpty(value) || !Array.isArray(value))
            return false;
        if (index >= value.length)
            return false;
        return !this.isValueEmpty(value[index]);
    };
    /**
     * Removes a matrix row with a specified index.
     * @param index A zero-based row index.
     * @param confirmDelete *Optional.* A Boolean value that specifies whether to display a confirmation dialog. If you do not specify this parameter, the [`confirmDelete`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-matrix-table-question-model#confirmDelete) property value is used.
     */
    QuestionMatrixDynamicModel.prototype.removeRow = function (index, confirmDelete) {
        if (!this.canRemoveRows)
            return;
        if (index < 0 || index >= this.rowCount)
            return;
        var row = !!this.visibleRows && index < this.visibleRows.length
            ? this.visibleRows[index]
            : null;
        if (confirmDelete === undefined) {
            confirmDelete = this.isRequireConfirmOnRowDelete(index);
        }
        if (confirmDelete && !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_5__["confirmAction"])(this.confirmDeleteText))
            return;
        if (!!row && !!this.survey && !this.survey.matrixRowRemoving(this, index, row))
            return;
        this.onStartRowAddingRemoving();
        this.removeRowCore(index);
        this.onEndRowRemoving(row);
    };
    QuestionMatrixDynamicModel.prototype.removeRowCore = function (index) {
        var row = this.generatedVisibleRows
            ? this.generatedVisibleRows[index]
            : null;
        if (this.generatedVisibleRows && index < this.generatedVisibleRows.length) {
            this.generatedVisibleRows.splice(index, 1);
        }
        this.rowCountValue--;
        if (this.value) {
            var val = [];
            if (Array.isArray(this.value) && index < this.value.length) {
                val = this.createValueCopy();
            }
            else {
                val = this.createNewValue();
            }
            val.splice(index, 1);
            val = this.deleteRowValue(val, null);
            this.isRowChanging = true;
            this.value = val;
            this.isRowChanging = false;
        }
        this.onRowsChanged();
        if (this.survey) {
            this.survey.matrixRowRemoved(this, index, row);
        }
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "confirmDeleteText", {
        /**
         * A message displayed in a confirmation dialog that appears when a respondent wants to delete a row.
         * @see confirmDelete
         */
        get: function () {
            return this.getLocalizableStringText("confirmDeleteText");
        },
        set: function (val) {
            this.setLocalizableStringText("confirmDeleteText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "locConfirmDeleteText", {
        get: function () {
            return this.getLocalizableString("confirmDeleteText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "addRowText", {
        /**
         * A caption for the Add Row button.
         * @see addRowLocation
         */
        get: function () {
            return this.getLocalizableStringText("addRowText", this.defaultAddRowText);
        },
        set: function (val) {
            this.setLocalizableStringText("addRowText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "locAddRowText", {
        get: function () {
            return this.getLocalizableString("addRowText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "defaultAddRowText", {
        get: function () {
            return this.getLocalizationString(this.isColumnLayoutHorizontal ? "addRow" : "addColumn");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "addRowLocation", {
        /**
         * Specifies the location of the Add Row button.
         *
         * Possible values:
         *
         * - `"top"` - Displays the Add Row button at the top of the matrix.
         * - `"bottom"` - Displays the Add Row button at the bottom of the matrix.
         * - `"topBottom"` - Displays the Add Row button at the top and bottom of the matrix.
         *
         * Default value: `"top"` if `columnLayout` is `vertical`; `"bottom"` if `columnLayout` is `"horizontal"` or the matrix is in compact mode.
         * @see columnLayout
         * @see addRowText
         */
        get: function () {
            return this.getPropertyValue("addRowLocation");
        },
        set: function (val) {
            this.setPropertyValue("addRowLocation", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.getAddRowLocation = function () {
        return this.addRowLocation;
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "hideColumnsIfEmpty", {
        /**
         * Specifies whether to hide columns when the matrix does not contain any rows. If you enable this property, the matrix displays the `emptyRowsText` message and the Add Row button.
         *
         * Default value: `false`
         * @see emptyRowsText
         */
        get: function () {
            return this.getPropertyValue("hideColumnsIfEmpty");
        },
        set: function (val) {
            this.setPropertyValue("hideColumnsIfEmpty", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.getShowColumnsIfEmpty = function () {
        return this.hideColumnsIfEmpty;
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "removeRowText", {
        /**
         * Use this property to change the default value of remove row button text.
         */
        get: function () {
            return this.getLocalizableStringText("removeRowText");
        },
        set: function (val) {
            this.setLocalizableStringText("removeRowText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "locRemoveRowText", {
        get: function () {
            return this.getLocalizableString("removeRowText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "emptyRowsText", {
        /**
         * A message displayed when the matrix does not contain any rows. Applies only if `hideColumnsIfEmpty` is enabled.
         * @see hideColumnsIfEmpty
         */
        get: function () {
            return this.getLocalizableStringText("emptyRowsText");
        },
        set: function (val) {
            this.setLocalizableStringText("emptyRowsText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "locEmptyRowsText", {
        get: function () {
            return this.getLocalizableString("emptyRowsText");
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        if (!value || !Array.isArray(value))
            return value;
        var values = this.getUnbindValue(value);
        var rows = this.visibleRows;
        for (var i = 0; i < rows.length && i < values.length; i++) {
            var val = values[i];
            if (!val)
                continue;
            values[i] = this.getRowDisplayValue(keysAsText, rows[i], val);
        }
        return values;
    };
    QuestionMatrixDynamicModel.prototype.getConditionObjectRowName = function (index) {
        return "[" + index.toString() + "]";
    };
    QuestionMatrixDynamicModel.prototype.getConditionObjectsRowIndeces = function () {
        var res = [];
        var rowCount = Math.max(this.rowCount, 1);
        for (var i = 0; i < Math.min(_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].matrixMaxRowCountInCondition, rowCount); i++) {
            res.push(i);
        }
        return res;
    };
    QuestionMatrixDynamicModel.prototype.supportGoNextPageAutomatic = function () {
        return false;
    };
    Object.defineProperty(QuestionMatrixDynamicModel.prototype, "hasRowText", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionMatrixDynamicModel.prototype.onCheckForErrors = function (errors, isOnValueChanged) {
        _super.prototype.onCheckForErrors.call(this, errors, isOnValueChanged);
        if (!isOnValueChanged && this.hasErrorInMinRows()) {
            errors.push(new _error__WEBPACK_IMPORTED_MODULE_3__["MinRowCountError"](this.minRowCount, this));
        }
    };
    QuestionMatrixDynamicModel.prototype.hasErrorInMinRows = function () {
        if (this.minRowCount <= 0 || !this.isRequired || !this.generatedVisibleRows)
            return false;
        var setRowCount = 0;
        for (var rowIndex = 0; rowIndex < this.generatedVisibleRows.length; rowIndex++) {
            var row = this.generatedVisibleRows[rowIndex];
            if (!row.isEmpty)
                setRowCount++;
        }
        return setRowCount < this.minRowCount;
    };
    QuestionMatrixDynamicModel.prototype.getUniqueColumns = function () {
        var res = _super.prototype.getUniqueColumns.call(this);
        if (!!this.keyName) {
            var column = this.getColumnByName(this.keyName);
            if (!!column && res.indexOf(column) < 0) {
                res.push(column);
            }
        }
        return res;
    };
    QuestionMatrixDynamicModel.prototype.generateRows = function () {
        var result = new Array();
        if (this.rowCount === 0)
            return result;
        var val = this.createNewValue();
        for (var i = 0; i < this.rowCount; i++) {
            result.push(this.createMatrixRow(this.getRowValueByIndex(val, i)));
        }
        if (!this.isValueEmpty(this.getDefaultRowValue(false))) {
            this.value = val;
        }
        return result;
    };
    QuestionMatrixDynamicModel.prototype.createMatrixRow = function (value) {
        return new MatrixDynamicRowModel(this.rowCounter++, this, value);
    };
    QuestionMatrixDynamicModel.prototype.onBeforeValueChanged = function (val) {
        if (!val || !Array.isArray(val))
            return;
        var newRowCount = val.length;
        if (newRowCount == this.rowCount)
            return;
        if (!this.setRowCountValueFromData && newRowCount < this.initialRowCount)
            return;
        this.setRowCountValueFromData = true;
        this.rowCountValue = newRowCount;
        if (!this.generatedVisibleRows)
            return;
        if (newRowCount == this.generatedVisibleRows.length + 1) {
            this.onStartRowAddingRemoving();
            var newValue = this.getRowValueByIndex(val, newRowCount - 1);
            var newRow = this.createMatrixRow(newValue);
            this.generatedVisibleRows.push(newRow);
            this.onMatrixRowCreated(newRow);
            this.onEndRowAdding();
        }
        else {
            this.clearGeneratedRows();
            this.generatedVisibleRows = this.visibleRows;
            this.onRowsChanged();
        }
        this.setRowCountValueFromData = false;
    };
    QuestionMatrixDynamicModel.prototype.createNewValue = function () {
        var result = this.createValueCopy();
        if (!result || !Array.isArray(result))
            result = [];
        if (result.length > this.rowCount)
            result.splice(this.rowCount);
        var rowValue = this.getDefaultRowValue(false);
        rowValue = rowValue || {};
        for (var i = result.length; i < this.rowCount; i++) {
            result.push(this.getUnbindValue(rowValue));
        }
        return result;
    };
    QuestionMatrixDynamicModel.prototype.deleteRowValue = function (newValue, row) {
        var isEmpty = true;
        for (var i = 0; i < newValue.length; i++) {
            if (this.isObject(newValue[i]) && Object.keys(newValue[i]).length > 0) {
                isEmpty = false;
                break;
            }
        }
        return isEmpty ? null : newValue;
    };
    QuestionMatrixDynamicModel.prototype.getRowValueByIndex = function (questionValue, index) {
        return Array.isArray(questionValue) &&
            index >= 0 &&
            index < questionValue.length
            ? questionValue[index]
            : null;
    };
    QuestionMatrixDynamicModel.prototype.getRowValueCore = function (row, questionValue, create) {
        if (create === void 0) { create = false; }
        if (!this.generatedVisibleRows)
            return {};
        var res = this.getRowValueByIndex(questionValue, this.generatedVisibleRows.indexOf(row));
        if (!res && create)
            res = {};
        return res;
    };
    QuestionMatrixDynamicModel.prototype.getAddRowButtonCss = function (isEmptySection) {
        if (isEmptySection === void 0) { isEmptySection = false; }
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__["CssClassBuilder"]()
            .append(this.cssClasses.button)
            .append(this.cssClasses.buttonAdd)
            .append(this.cssClasses.emptyRowsButton, isEmptySection)
            .toString();
    };
    QuestionMatrixDynamicModel.prototype.getRemoveRowButtonCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__["CssClassBuilder"]()
            .append(this.cssClasses.button)
            .append(this.cssClasses.buttonRemove)
            .toString();
    };
    QuestionMatrixDynamicModel.prototype.getRootCss = function () {
        var _a;
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__["CssClassBuilder"]().append(_super.prototype.getRootCss.call(this)).append(this.cssClasses.empty, !((_a = this.renderedTable) === null || _a === void 0 ? void 0 : _a.showTable)).toString();
    };
    return QuestionMatrixDynamicModel;
}(_question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_2__["QuestionMatrixDropdownModelBase"]));

var QuestionMatrixDynamicRenderedTable = /** @class */ (function (_super) {
    __extends(QuestionMatrixDynamicRenderedTable, _super);
    function QuestionMatrixDynamicRenderedTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QuestionMatrixDynamicRenderedTable.prototype.setDefaultRowActions = function (row, actions) {
        _super.prototype.setDefaultRowActions.call(this, row, actions);
    };
    return QuestionMatrixDynamicRenderedTable;
}(_question_matrixdropdownrendered__WEBPACK_IMPORTED_MODULE_8__["QuestionMatrixDropdownRenderedTable"]));
_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("matrixdynamic", [
    { name: "rowsVisibleIf:condition", visible: false },
    { name: "allowAddRows:boolean", default: true },
    { name: "allowRemoveRows:boolean", default: true },
    { name: "rowCount:number", default: 2, minValue: 0, isBindable: true },
    { name: "minRowCount:number", default: 0, minValue: 0 },
    {
        name: "maxRowCount:number",
        default: _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].matrixMaximumRowCount,
    },
    { name: "keyName" },
    "defaultRowValue:rowvalue",
    "defaultValueFromLastRow:boolean",
    { name: "confirmDelete:boolean" },
    {
        name: "confirmDeleteText",
        dependsOn: "confirmDelete",
        visibleIf: function (obj) {
            return !obj || obj.confirmDelete;
        },
        serializationProperty: "locConfirmDeleteText",
    },
    {
        name: "addRowLocation",
        default: "default",
        choices: ["default", "top", "bottom", "topBottom"],
    },
    { name: "addRowText", serializationProperty: "locAddRowText" },
    { name: "removeRowText", serializationProperty: "locRemoveRowText" },
    "hideColumnsIfEmpty:boolean",
    {
        name: "emptyRowsText:text",
        serializationProperty: "locEmptyRowsText",
        dependsOn: "hideColumnsIfEmpty",
        visibleIf: function (obj) {
            return !obj || obj.hideColumnsIfEmpty;
        },
    },
    {
        name: "detailPanelShowOnAdding:boolean",
        dependsOn: "detailPanelMode",
        visibleIf: function (obj) {
            return obj.detailPanelMode !== "none";
        },
    },
    "allowRowsDragAndDrop:switch"
], function () {
    return new QuestionMatrixDynamicModel("");
}, "matrixdropdownbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("matrixdynamic", function (name) {
    var q = new QuestionMatrixDynamicModel(name);
    q.choices = [1, 2, 3, 4, 5];
    _question_matrixdropdownbase__WEBPACK_IMPORTED_MODULE_2__["QuestionMatrixDropdownModelBase"].addDefaultColumns(q);
    return q;
});


/***/ }),

/***/ "./src/question_multipletext.ts":
/*!**************************************!*\
  !*** ./src/question_multipletext.ts ***!
  \**************************************/
/*! exports provided: MultipleTextItemModel, QuestionMultipleTextModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultipleTextItemModel", function() { return MultipleTextItemModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionMultipleTextModel", function() { return QuestionMultipleTextModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _question_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./question_text */ "./src/question_text.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









/**
 * A class that describes an item in a [Multiple Text](https://surveyjs.io/form-library/documentation/api-reference/multiple-text-entry-question-model) question.
 *
 * [View Demo](/form-library/examples/multiple-text-box-question/)
 */
var MultipleTextItemModel = /** @class */ (function (_super) {
    __extends(MultipleTextItemModel, _super);
    function MultipleTextItemModel(name, title) {
        if (name === void 0) { name = null; }
        if (title === void 0) { title = null; }
        var _this = _super.call(this) || this;
        _this.editorValue = _this.createEditor(name);
        _this.editor.questionTitleTemplateCallback = function () {
            return "";
        };
        _this.editor.titleLocation = "left";
        if (title) {
            _this.title = title;
        }
        return _this;
    }
    MultipleTextItemModel.prototype.getType = function () {
        return "multipletextitem";
    };
    Object.defineProperty(MultipleTextItemModel.prototype, "id", {
        get: function () {
            return this.editor.id;
        },
        enumerable: false,
        configurable: true
    });
    MultipleTextItemModel.prototype.getOriginalObj = function () {
        return this.editor;
    };
    Object.defineProperty(MultipleTextItemModel.prototype, "name", {
        /**
         * The item name.
         */
        get: function () {
            return this.editor.name;
        },
        set: function (val) {
            this.editor.name = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "question", {
        get: function () {
            return this.data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "editor", {
        get: function () {
            return this.editorValue;
        },
        enumerable: false,
        configurable: true
    });
    MultipleTextItemModel.prototype.createEditor = function (name) {
        return new _question_text__WEBPACK_IMPORTED_MODULE_3__["QuestionTextModel"](name);
    };
    MultipleTextItemModel.prototype.addUsedLocales = function (locales) {
        _super.prototype.addUsedLocales.call(this, locales);
        this.editor.addUsedLocales(locales);
    };
    MultipleTextItemModel.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        this.editor.localeChanged();
    };
    MultipleTextItemModel.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        this.editor.locStrsChanged();
    };
    MultipleTextItemModel.prototype.setData = function (data) {
        this.data = data;
        if (!!data) {
            this.editor.defaultValue = data.getItemDefaultValue(this.name);
            this.editor.setSurveyImpl(this);
            this.editor.parent = data;
        }
    };
    Object.defineProperty(MultipleTextItemModel.prototype, "isRequired", {
        /**
         * Set this property to true, to make the item a required. If a user doesn't fill the item then a validation error will be generated.
         */
        get: function () {
            return this.editor.isRequired;
        },
        set: function (val) {
            this.editor.isRequired = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "inputType", {
        /**
         * Use this property to change the default input type.
         */
        get: function () {
            return this.editor.inputType;
        },
        set: function (val) {
            this.editor.inputType = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "title", {
        /**
         * Item title. If it is empty, the item name is rendered as title. This property supports markdown.
         * @see name
         */
        get: function () {
            return this.editor.title;
        },
        set: function (val) {
            this.editor.title = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "locTitle", {
        get: function () {
            return this.editor.locTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "fullTitle", {
        get: function () {
            return this.editor.fullTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "maxLength", {
        /**
         * The maximum text length. If it is -1, defaul value, then the survey maxTextLength property will be used.
         * If it is 0, then the value is unlimited
         * @see SurveyModel.maxTextLength
         */
        get: function () {
            return this.editor.maxLength;
        },
        set: function (val) {
            this.editor.maxLength = val;
        },
        enumerable: false,
        configurable: true
    });
    MultipleTextItemModel.prototype.getMaxLength = function () {
        var survey = this.getSurvey();
        return _helpers__WEBPACK_IMPORTED_MODULE_6__["Helpers"].getMaxLength(this.maxLength, survey ? survey.maxTextLength : -1);
    };
    Object.defineProperty(MultipleTextItemModel.prototype, "placeholder", {
        /**
         * The input place holder.
         */
        get: function () {
            return this.editor.placeholder;
        },
        set: function (val) {
            this.editor.placeholder = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "locPlaceholder", {
        get: function () {
            return this.editor.locPlaceholder;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "placeHolder", {
        get: function () {
            return this.placeholder;
        },
        set: function (val) {
            this.placeholder = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "locPlaceHolder", {
        get: function () {
            return this.locPlaceholder;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "requiredErrorText", {
        /**
         * The custom text that will be shown on required error. Use this property, if you do not want to show the default text.
         */
        get: function () {
            return this.editor.requiredErrorText;
        },
        set: function (val) {
            this.editor.requiredErrorText = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "locRequiredErrorText", {
        get: function () {
            return this.editor.locRequiredErrorText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "size", {
        /**
         * The input size.
         */
        get: function () {
            return this.editor.size;
        },
        set: function (val) {
            this.editor.size = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MultipleTextItemModel.prototype, "validators", {
        /**
         * The list of question validators.
         */
        get: function () {
            return this.editor.validators;
        },
        set: function (val) {
            this.editor.validators = val;
        },
        enumerable: false,
        configurable: true
    });
    MultipleTextItemModel.prototype.getValidators = function () {
        return this.validators;
    };
    Object.defineProperty(MultipleTextItemModel.prototype, "value", {
        /**
         * The item value.
         */
        get: function () {
            return this.data ? this.data.getMultipleTextValue(this.name) : null;
        },
        set: function (value) {
            if (this.data != null) {
                this.data.setMultipleTextValue(this.name, value);
            }
        },
        enumerable: false,
        configurable: true
    });
    MultipleTextItemModel.prototype.isEmpty = function () {
        return this.editor.isEmpty();
    };
    MultipleTextItemModel.prototype.onValueChanged = function (newValue) {
        if (this.valueChangedCallback)
            this.valueChangedCallback(newValue);
    };
    //ISurveyImpl
    MultipleTextItemModel.prototype.getSurveyData = function () {
        return this;
    };
    MultipleTextItemModel.prototype.getSurvey = function () {
        return this.data ? this.data.getSurvey() : null;
    };
    MultipleTextItemModel.prototype.getTextProcessor = function () {
        return this.data ? this.data.getTextProcessor() : null;
    };
    //ISurveyData
    MultipleTextItemModel.prototype.getValue = function (name) {
        if (!this.data)
            return null;
        return this.data.getMultipleTextValue(name);
    };
    MultipleTextItemModel.prototype.setValue = function (name, value) {
        if (this.data) {
            this.data.setMultipleTextValue(name, value);
        }
    };
    MultipleTextItemModel.prototype.getVariable = function (name) {
        return undefined;
    };
    MultipleTextItemModel.prototype.setVariable = function (name, newValue) { };
    MultipleTextItemModel.prototype.getComment = function (name) {
        return null;
    };
    MultipleTextItemModel.prototype.setComment = function (name, newValue) { };
    MultipleTextItemModel.prototype.getAllValues = function () {
        if (this.data)
            return this.data.getAllValues();
        return this.value;
    };
    MultipleTextItemModel.prototype.getFilteredValues = function () {
        return this.getAllValues();
    };
    MultipleTextItemModel.prototype.getFilteredProperties = function () {
        return { survey: this.getSurvey() };
    };
    MultipleTextItemModel.prototype.findQuestionByName = function (name) {
        var survey = this.getSurvey();
        return !!survey ? survey.getQuestionByName(name) : null;
    };
    //IValidatorOwner
    MultipleTextItemModel.prototype.getValidatorTitle = function () {
        return this.title;
    };
    Object.defineProperty(MultipleTextItemModel.prototype, "validatedValue", {
        get: function () {
            return this.value;
        },
        set: function (val) {
            this.value = val;
        },
        enumerable: false,
        configurable: true
    });
    MultipleTextItemModel.prototype.getDataFilteredValues = function () {
        return this.getFilteredValues();
    };
    MultipleTextItemModel.prototype.getDataFilteredProperties = function () {
        return this.getFilteredProperties();
    };
    return MultipleTextItemModel;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));

/**
 * A class that describes the Multiple Text question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-multipletext/ (linkStyle))
 */
var QuestionMultipleTextModel = /** @class */ (function (_super) {
    __extends(QuestionMultipleTextModel, _super);
    function QuestionMultipleTextModel(name) {
        var _this = _super.call(this, name) || this;
        _this.isMultipleItemValueChanging = false;
        _this.createNewArray("items", function (item) {
            item.setData(_this);
            if (_this.survey) {
                _this.survey.multipleTextItemAdded(_this, item);
            }
        });
        _this.registerPropertyChangedHandlers(["items", "colCount"], function () {
            _this.fireCallback(_this.colCountChangedCallback);
        });
        _this.registerPropertyChangedHandlers(["itemSize"], function () { _this.updateItemsSize(); });
        return _this;
    }
    QuestionMultipleTextModel.addDefaultItems = function (question) {
        var names = _questionfactory__WEBPACK_IMPORTED_MODULE_5__["QuestionFactory"].DefaultMutlipleTextItems;
        for (var i = 0; i < names.length; i++)
            question.addItem(names[i]);
    };
    QuestionMultipleTextModel.prototype.getType = function () {
        return "multipletext";
    };
    QuestionMultipleTextModel.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].setData(this);
        }
    };
    Object.defineProperty(QuestionMultipleTextModel.prototype, "isAllowTitleLeft", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMultipleTextModel.prototype, "hasSingleInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMultipleTextModel.prototype, "id", {
        get: function () {
            return this.getPropertyValue("id");
        },
        set: function (val) {
            var _a;
            (_a = this.items) === null || _a === void 0 ? void 0 : _a.map(function (item, index) { return item.editor.id = val + "_" + index; });
            this.setPropertyValue("id", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMultipleTextModel.prototype.onSurveyLoad = function () {
        this.editorsOnSurveyLoad();
        _super.prototype.onSurveyLoad.call(this);
        this.fireCallback(this.colCountChangedCallback);
    };
    QuestionMultipleTextModel.prototype.setQuestionValue = function (newValue, updateIsAnswered) {
        if (updateIsAnswered === void 0) { updateIsAnswered = true; }
        _super.prototype.setQuestionValue.call(this, newValue, updateIsAnswered);
        this.performForEveryEditor(function (item) {
            item.editor.updateValueFromSurvey(item.value);
        });
        this.updateIsAnswered();
    };
    QuestionMultipleTextModel.prototype.onSurveyValueChanged = function (newValue) {
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        this.performForEveryEditor(function (item) {
            item.editor.onSurveyValueChanged(item.value);
        });
    };
    QuestionMultipleTextModel.prototype.updateItemsSize = function () {
        this.performForEveryEditor(function (item) {
            item.editor.updateInputSize();
        });
    };
    QuestionMultipleTextModel.prototype.editorsOnSurveyLoad = function () {
        this.performForEveryEditor(function (item) {
            item.editor.onSurveyLoad();
        });
    };
    QuestionMultipleTextModel.prototype.performForEveryEditor = function (func) {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            if (item.editor) {
                func(item);
            }
        }
    };
    Object.defineProperty(QuestionMultipleTextModel.prototype, "items", {
        /**
         * Gets or sets an array of `MultipleTextItemModel` objects that represent input items.
         *
         * This property accepts an array of objects with the following structure:
         *
         * ```js
         * {
         *   "name": any, // A unique value used to identify an input item and save an item value to survey results.
         *   "title": String // An item caption. When `title` is undefined, `name` is used. This property supports Markdown.
         * }
         * ```
         *
         * To enable Markdown support for the `title` property, implement Markdown-to-HTML conversion in the [onTextMarkdown](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onTextMarkdown) event handler. For an example, refer to the following demo: [Convert Markdown to HTML with Showdown](https://surveyjs.io/form-library/examples/edit-survey-questions-markdown/).
         * @see addItem
         */
        get: function () {
            return this.getPropertyValue("items");
        },
        set: function (val) {
            this.setPropertyValue("items", val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds a new input item.
     * @param name An item name
     * @param title (Optional) An item title
     * @see items
     */
    QuestionMultipleTextModel.prototype.addItem = function (name, title) {
        if (title === void 0) { title = null; }
        var item = this.createTextItem(name, title);
        this.items.push(item);
        return item;
    };
    QuestionMultipleTextModel.prototype.getItemByName = function (name) {
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].name == name)
                return this.items[i];
        }
        return null;
    };
    QuestionMultipleTextModel.prototype.addConditionObjectsByContext = function (objects, context) {
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            objects.push({
                name: this.getValueName() + "." + item.name,
                text: this.processedTitle + "." + item.fullTitle,
                question: this,
            });
        }
    };
    QuestionMultipleTextModel.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        if (!path)
            return _super.prototype.getConditionJson.call(this);
        var item = this.getItemByName(path);
        if (!item)
            return null;
        var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_4__["JsonObject"]().toJsonObject(item);
        json["type"] = "text";
        return json;
    };
    QuestionMultipleTextModel.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].locStrsChanged();
        }
    };
    QuestionMultipleTextModel.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].localeChanged();
        }
    };
    QuestionMultipleTextModel.prototype.supportGoNextPageAutomatic = function () {
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].isEmpty())
                return false;
        }
        return true;
    };
    Object.defineProperty(QuestionMultipleTextModel.prototype, "colCount", {
        /**
         * The number of columns used to arrange input items. Accepts the following values: 1, 2, 3, 4, 5.
         *
         * Default value: 1
         */
        get: function () {
            return this.getPropertyValue("colCount");
        },
        set: function (val) {
            if (val < 1 || val > 5)
                return;
            this.setPropertyValue("colCount", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionMultipleTextModel.prototype, "itemSize", {
        /**
         * A value passed on to the [`size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size) attribute of the underlying `<input>` elements.
         */
        get: function () {
            return this.getPropertyValue("itemSize");
        },
        set: function (val) {
            this.setPropertyValue("itemSize", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionMultipleTextModel.prototype.getRows = function () {
        var colCount = this.colCount;
        var items = this.items;
        var rows = [];
        var index = 0;
        for (var i = 0; i < items.length; i++) {
            if (index == 0) {
                rows.push([]);
            }
            rows[rows.length - 1].push(items[i]);
            index++;
            if (index >= colCount) {
                index = 0;
            }
        }
        return rows;
    };
    QuestionMultipleTextModel.prototype.onValueChanged = function () {
        _super.prototype.onValueChanged.call(this);
        this.onItemValueChanged();
    };
    QuestionMultipleTextModel.prototype.createTextItem = function (name, title) {
        return new MultipleTextItemModel(name, title);
    };
    QuestionMultipleTextModel.prototype.onItemValueChanged = function () {
        if (this.isMultipleItemValueChanging)
            return;
        for (var i = 0; i < this.items.length; i++) {
            var itemValue = null;
            if (this.value && this.items[i].name in this.value) {
                itemValue = this.value[this.items[i].name];
            }
            this.items[i].onValueChanged(itemValue);
        }
    };
    QuestionMultipleTextModel.prototype.getIsRunningValidators = function () {
        if (_super.prototype.getIsRunningValidators.call(this))
            return true;
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].editor.isRunningValidators)
                return true;
        }
        return false;
    };
    QuestionMultipleTextModel.prototype.hasErrors = function (fireCallback, rec) {
        var _this = this;
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        var res = false;
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].editor.onCompletedAsyncValidators = function (hasErrors) {
                _this.raiseOnCompletedAsyncValidators();
            };
            if (!!rec &&
                rec.isOnValueChanged === true &&
                this.items[i].editor.isEmpty())
                continue;
            res = this.items[i].editor.hasErrors(fireCallback, rec) || res;
        }
        return _super.prototype.hasErrors.call(this, fireCallback) || res;
    };
    QuestionMultipleTextModel.prototype.getAllErrors = function () {
        var result = _super.prototype.getAllErrors.call(this);
        for (var i = 0; i < this.items.length; i++) {
            var errors = this.items[i].editor.getAllErrors();
            if (errors && errors.length > 0) {
                result = result.concat(errors);
            }
        }
        return result;
    };
    QuestionMultipleTextModel.prototype.clearErrors = function () {
        _super.prototype.clearErrors.call(this);
        for (var i = 0; i < this.items.length; i++) {
            this.items[i].editor.clearErrors();
        }
    };
    QuestionMultipleTextModel.prototype.getContainsErrors = function () {
        var res = _super.prototype.getContainsErrors.call(this);
        if (res)
            return res;
        var items = this.items;
        for (var i = 0; i < items.length; i++) {
            if (items[i].editor.containsErrors)
                return true;
        }
        return false;
    };
    QuestionMultipleTextModel.prototype.getIsAnswered = function () {
        if (!_super.prototype.getIsAnswered.call(this))
            return false;
        for (var i = 0; i < this.items.length; i++) {
            var editor = this.items[i].editor;
            if (editor.isVisible && !editor.isAnswered)
                return false;
        }
        return true;
    };
    QuestionMultipleTextModel.prototype.getProgressInfo = function () {
        var elements = [];
        for (var i = 0; i < this.items.length; i++) {
            elements.push(this.items[i].editor);
        }
        return _survey_element__WEBPACK_IMPORTED_MODULE_1__["SurveyElement"].getProgressInfoByElements(elements, this.isRequired);
    };
    QuestionMultipleTextModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        if (!value)
            return value;
        var res = {};
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            var val = value[item.name];
            if (_helpers__WEBPACK_IMPORTED_MODULE_6__["Helpers"].isValueEmpty(val))
                continue;
            var itemName = item.name;
            if (keysAsText && !!item.title) {
                itemName = item.title;
            }
            res[itemName] = item.editor.getDisplayValue(keysAsText, val);
        }
        return res;
    };
    //IMultipleTextData
    QuestionMultipleTextModel.prototype.getMultipleTextValue = function (name) {
        if (!this.value)
            return null;
        return this.value[name];
    };
    QuestionMultipleTextModel.prototype.setMultipleTextValue = function (name, value) {
        this.isMultipleItemValueChanging = true;
        if (this.isValueEmpty(value)) {
            value = undefined;
        }
        var newValue = this.value;
        if (!newValue) {
            newValue = {};
        }
        newValue[name] = value;
        this.setNewValue(newValue);
        this.isMultipleItemValueChanging = false;
    };
    QuestionMultipleTextModel.prototype.getItemDefaultValue = function (name) {
        return !!this.defaultValue ? this.defaultValue[name] : null;
    };
    QuestionMultipleTextModel.prototype.getTextProcessor = function () {
        return this.textProcessor;
    };
    QuestionMultipleTextModel.prototype.getAllValues = function () {
        return this.data ? this.data.getAllValues() : null;
    };
    QuestionMultipleTextModel.prototype.getIsRequiredText = function () {
        return this.survey ? this.survey.requiredText : "";
    };
    //IPanel
    QuestionMultipleTextModel.prototype.addElement = function (element, index) { };
    QuestionMultipleTextModel.prototype.removeElement = function (element) {
        return false;
    };
    QuestionMultipleTextModel.prototype.getQuestionTitleLocation = function () {
        return "left";
    };
    QuestionMultipleTextModel.prototype.getQuestionStartIndex = function () {
        return this.getStartIndex();
    };
    QuestionMultipleTextModel.prototype.getChildrenLayoutType = function () {
        return "row";
    };
    QuestionMultipleTextModel.prototype.elementWidthChanged = function (el) { };
    Object.defineProperty(QuestionMultipleTextModel.prototype, "elements", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    QuestionMultipleTextModel.prototype.indexOf = function (el) {
        return -1;
    };
    QuestionMultipleTextModel.prototype.ensureRowsVisibility = function () {
        // do nothing
    };
    QuestionMultipleTextModel.prototype.getItemLabelCss = function (item) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__["CssClassBuilder"]().append(this.cssClasses.itemLabel).append(this.cssClasses.itemLabelOnError, item.editor.errors.length > 0).toString();
    };
    QuestionMultipleTextModel.prototype.getItemCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__["CssClassBuilder"]().append(this.cssClasses.item).toString();
    };
    QuestionMultipleTextModel.prototype.getItemTitleCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_7__["CssClassBuilder"]().append(this.cssClasses.itemTitle).toString();
    };
    QuestionMultipleTextModel.prototype.getIsTooltipErrorInsideSupported = function () {
        return true;
    };
    return QuestionMultipleTextModel;
}(_question__WEBPACK_IMPORTED_MODULE_2__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_4__["Serializer"].addClass("multipletextitem", [
    "name",
    "isRequired:boolean",
    { name: "placeholder", alternativeName: "placeHolder", serializationProperty: "locPlaceholder" },
    {
        name: "inputType",
        default: "text",
        choices: _settings__WEBPACK_IMPORTED_MODULE_8__["settings"].questions.inputTypes,
    },
    { name: "title", serializationProperty: "locTitle" },
    { name: "maxLength:number", default: -1 },
    { name: "size:number", minValue: 0 },
    {
        name: "requiredErrorText:text",
        serializationProperty: "locRequiredErrorText",
    },
    {
        name: "validators:validators",
        baseClassName: "surveyvalidator",
        classNamePart: "validator",
    },
], function () {
    return new MultipleTextItemModel("");
});
_jsonobject__WEBPACK_IMPORTED_MODULE_4__["Serializer"].addClass("multipletext", [
    { name: "!items:textitems", className: "multipletextitem" },
    { name: "itemSize:number", minValue: 0 },
    { name: "colCount:number", default: 1, choices: [1, 2, 3, 4, 5] },
], function () {
    return new QuestionMultipleTextModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_5__["QuestionFactory"].Instance.registerQuestion("multipletext", function (name) {
    var q = new QuestionMultipleTextModel(name);
    QuestionMultipleTextModel.addDefaultItems(q);
    return q;
});


/***/ }),

/***/ "./src/question_paneldynamic.ts":
/*!**************************************!*\
  !*** ./src/question_paneldynamic.ts ***!
  \**************************************/
/*! exports provided: QuestionPanelDynamicItem, QuestionPanelDynamicTemplateSurveyImpl, QuestionPanelDynamicModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicItem", function() { return QuestionPanelDynamicItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicTemplateSurveyImpl", function() { return QuestionPanelDynamicTemplateSurveyImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionPanelDynamicModel", function() { return QuestionPanelDynamicModel; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _textPreProcessor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textPreProcessor */ "./src/textPreProcessor.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./base */ "./src/base.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};












var QuestionPanelDynamicItemTextProcessor = /** @class */ (function (_super) {
    __extends(QuestionPanelDynamicItemTextProcessor, _super);
    function QuestionPanelDynamicItemTextProcessor(data, panelItem, variableName) {
        var _this = _super.call(this, variableName) || this;
        _this.data = data;
        _this.panelItem = panelItem;
        _this.variableName = variableName;
        _this.sharedQuestions = {};
        return _this;
    }
    Object.defineProperty(QuestionPanelDynamicItemTextProcessor.prototype, "survey", {
        get: function () {
            return this.panelItem.getSurvey();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicItemTextProcessor.prototype, "panel", {
        get: function () {
            return this.panelItem.panel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicItemTextProcessor.prototype, "panelIndex", {
        get: function () {
            return !!this.data ? this.data.getItemIndex(this.panelItem) : -1;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicItemTextProcessor.prototype.getValues = function () {
        return this.panelItem.getAllValues();
    };
    QuestionPanelDynamicItemTextProcessor.prototype.getQuestionByName = function (name) {
        var res = _super.prototype.getQuestionByName.call(this, name);
        if (!!res)
            return res;
        var index = this.panelIndex;
        res = index > -1 ? this.data.getSharedQuestionFromArray(name, index) : undefined;
        var qName = !!res ? res.name : name;
        this.sharedQuestions[qName] = name;
        return res;
    };
    QuestionPanelDynamicItemTextProcessor.prototype.getQuestionDisplayText = function (question) {
        var name = this.sharedQuestions[question.name];
        if (!name)
            return _super.prototype.getQuestionDisplayText.call(this, question);
        var val = this.panelItem.getValue(name);
        return question.getDisplayValue(true, val);
    };
    QuestionPanelDynamicItemTextProcessor.prototype.onCustomProcessText = function (textValue) {
        if (textValue.name == QuestionPanelDynamicItem.IndexVariableName) {
            var index = this.panelIndex;
            if (index > -1) {
                textValue.isExists = true;
                textValue.value = index + 1;
                return true;
            }
        }
        if (textValue.name.toLowerCase().indexOf(QuestionPanelDynamicItem.ParentItemVariableName + ".") == 0) {
            var q = this.data;
            if (!!q && !!q.parentQuestion && !!q.parent && !!q.parent.data) {
                var processor = new QuestionPanelDynamicItemTextProcessor(q.parentQuestion, q.parent.data, QuestionPanelDynamicItem.ItemVariableName);
                var text = QuestionPanelDynamicItem.ItemVariableName +
                    textValue.name.substring(QuestionPanelDynamicItem.ParentItemVariableName.length);
                var res = processor.processValue(text, textValue.returnDisplayValue);
                textValue.isExists = res.isExists;
                textValue.value = res.value;
            }
            return true;
        }
        return false;
    };
    return QuestionPanelDynamicItemTextProcessor;
}(_textPreProcessor__WEBPACK_IMPORTED_MODULE_2__["QuestionTextProcessor"]));
var QuestionPanelDynamicItem = /** @class */ (function () {
    function QuestionPanelDynamicItem(data, panel) {
        this.data = data;
        this.panelValue = panel;
        this.textPreProcessor = new QuestionPanelDynamicItemTextProcessor(data, this, QuestionPanelDynamicItem.ItemVariableName);
        this.setSurveyImpl();
    }
    Object.defineProperty(QuestionPanelDynamicItem.prototype, "panel", {
        get: function () {
            return this.panelValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicItem.prototype.setSurveyImpl = function () {
        this.panel.setSurveyImpl(this);
    };
    QuestionPanelDynamicItem.prototype.getValue = function (name) {
        var values = this.getAllValues();
        return values[name];
    };
    QuestionPanelDynamicItem.prototype.setValue = function (name, newValue) {
        var oldItemData = this.data.getPanelItemData(this);
        var oldValue = !!oldItemData ? oldItemData[name] : undefined;
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(newValue, oldValue))
            return;
        this.data.setPanelItemData(this, name, _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].getUnbindValue(newValue));
        var questions = this.panel.questions;
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].getValueName() === name)
                continue;
            questions[i].checkBindings(name, newValue);
        }
    };
    QuestionPanelDynamicItem.prototype.getVariable = function (name) {
        return undefined;
    };
    QuestionPanelDynamicItem.prototype.setVariable = function (name, newValue) { };
    QuestionPanelDynamicItem.prototype.getComment = function (name) {
        var result = this.getValue(name + _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].commentSuffix);
        return result ? result : "";
    };
    QuestionPanelDynamicItem.prototype.setComment = function (name, newValue, locNotification) {
        this.setValue(name + _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].commentSuffix, newValue);
    };
    QuestionPanelDynamicItem.prototype.findQuestionByName = function (name) {
        if (!name)
            return undefined;
        var prefix = QuestionPanelDynamicItem.ItemVariableName + ".";
        if (name.indexOf(prefix) === 0) {
            return this.panel.getQuestionByName(name.substring(prefix.length));
        }
        var survey = this.getSurvey();
        return !!survey ? survey.getQuestionByName(name) : null;
    };
    QuestionPanelDynamicItem.prototype.getAllValues = function () {
        return this.data.getPanelItemData(this);
    };
    QuestionPanelDynamicItem.prototype.getFilteredValues = function () {
        var values = {};
        var surveyValues = !!this.data && !!this.data.getRootData()
            ? this.data.getRootData().getFilteredValues()
            : {};
        for (var key in surveyValues) {
            values[key] = surveyValues[key];
        }
        values[QuestionPanelDynamicItem.ItemVariableName] = this.getAllValues();
        if (!!this.data) {
            values[QuestionPanelDynamicItem.IndexVariableName.toLowerCase()] = this.data.getItemIndex(this);
            var q = this.data;
            if (!!q && !!q.parentQuestion && !!q.parent) {
                values[QuestionPanelDynamicItem.ParentItemVariableName] = q.parent.getValue();
            }
        }
        return values;
    };
    QuestionPanelDynamicItem.prototype.getFilteredProperties = function () {
        if (!!this.data && !!this.data.getRootData())
            return this.data.getRootData().getFilteredProperties();
        return { survey: this.getSurvey() };
    };
    QuestionPanelDynamicItem.prototype.getSurveyData = function () {
        return this;
    };
    QuestionPanelDynamicItem.prototype.getSurvey = function () {
        return this.data ? this.data.getSurvey() : null;
    };
    QuestionPanelDynamicItem.prototype.getTextProcessor = function () {
        return this.textPreProcessor;
    };
    QuestionPanelDynamicItem.ItemVariableName = "panel";
    QuestionPanelDynamicItem.ParentItemVariableName = "parentpanel";
    QuestionPanelDynamicItem.IndexVariableName = "panelIndex";
    return QuestionPanelDynamicItem;
}());

var QuestionPanelDynamicTemplateSurveyImpl = /** @class */ (function () {
    function QuestionPanelDynamicTemplateSurveyImpl(data) {
        this.data = data;
    }
    QuestionPanelDynamicTemplateSurveyImpl.prototype.getSurveyData = function () {
        return null;
    };
    QuestionPanelDynamicTemplateSurveyImpl.prototype.getSurvey = function () {
        return this.data.getSurvey();
    };
    QuestionPanelDynamicTemplateSurveyImpl.prototype.getTextProcessor = function () {
        return null;
    };
    return QuestionPanelDynamicTemplateSurveyImpl;
}());

/**
  * A class that describes the Dynamic Panel question type.
  *
  * Dynamic Panel allows respondents to add panels based on a template panel and delete them. Specify the [`templateElements`](https://surveyjs.io/form-library/documentation/questionpaneldynamicmodel#templateElements) property to configure template panel elements.
  *
  * [View Demo](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/ (linkStyle))
  */
var QuestionPanelDynamicModel = /** @class */ (function (_super) {
    __extends(QuestionPanelDynamicModel, _super);
    function QuestionPanelDynamicModel(name) {
        var _this = _super.call(this, name) || this;
        _this.loadingPanelCount = 0;
        _this.isAddingNewPanels = false;
        _this.onReadyChangedCallback = function () {
            _this.recalculateIsReadyValue();
        };
        _this.isSetPanelItemData = {};
        _this.createNewArray("panels");
        _this.templateValue = _this.createAndSetupNewPanelObject();
        _this.template.renderWidth = "100%";
        _this.template.selectedElementInDesign = _this;
        _this.template.addElementCallback = function (element) {
            _this.addOnPropertyChangedCallback(element);
            _this.rebuildPanels();
        };
        _this.template.removeElementCallback = function () {
            _this.rebuildPanels();
        };
        _this.createLocalizableString("confirmDeleteText", _this, false, "confirmDelete");
        _this.createLocalizableString("keyDuplicationError", _this, false, true);
        _this.createLocalizableString("panelAddText", _this, false, "addPanel");
        _this.createLocalizableString("panelRemoveText", _this, false, "removePanel");
        _this.createLocalizableString("panelPrevText", _this, false, "pagePrevText");
        _this.createLocalizableString("panelNextText", _this, false, "pageNextText");
        _this.createLocalizableString("noEntriesText", _this, false, "noEntriesText");
        _this.registerPropertyChangedHandlers(["panelsState"], function () {
            _this.setPanelsState();
        });
        _this.registerPropertyChangedHandlers(["isMobile"], function () {
            _this.updateFooterActions();
        });
        return _this;
    }
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "hasSingleInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.getFirstQuestionToFocus = function (withError) {
        for (var i = 0; i < this.panels.length; i++) {
            var res = this.panels[i].getFirstQuestionToFocus(withError);
            if (!!res)
                return res;
        }
        return null;
    };
    QuestionPanelDynamicModel.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        this.setTemplatePanelSurveyImpl();
        this.setPanelsSurveyImpl();
    };
    QuestionPanelDynamicModel.prototype.assignOnPropertyChangedToTemplate = function () {
        var elements = this.template.elements;
        for (var i = 0; i < elements.length; i++) {
            this.addOnPropertyChangedCallback(elements[i]);
        }
    };
    QuestionPanelDynamicModel.prototype.addOnPropertyChangedCallback = function (element) {
        var _this = this;
        if (element.isQuestion) {
            element.setParentQuestion(this);
        }
        element.onPropertyChanged.add(function (element, options) {
            _this.onTemplateElementPropertyChanged(element, options);
        });
        if (element.isPanel) {
            element.addElementCallback = function (element) {
                _this.addOnPropertyChangedCallback(element);
            };
        }
    };
    QuestionPanelDynamicModel.prototype.onTemplateElementPropertyChanged = function (element, options) {
        if (this.isLoadingFromJson || this.useTemplatePanel || this.panels.length == 0)
            return;
        var property = _jsonobject__WEBPACK_IMPORTED_MODULE_4__["Serializer"].findProperty(element.getType(), options.name);
        if (!property)
            return;
        var panels = this.panels;
        for (var i = 0; i < panels.length; i++) {
            var question = panels[i].getQuestionByName(element.name);
            if (!!question && question[options.name] !== options.newValue) {
                question[options.name] = options.newValue;
            }
        }
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "useTemplatePanel", {
        get: function () {
            return this.isDesignMode && !this.isContentElement;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.getType = function () {
        return "paneldynamic";
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isCompositeQuestion", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.clearOnDeletingContainer = function () {
        this.panels.forEach(function (panel) {
            panel.clearOnDeletingContainer();
        });
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isAllowTitleLeft", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.removeElement = function (element) {
        return this.template.removeElement(element);
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "template", {
        /**
         * A `PanelModel` object used as a template to create dynamic panels.
         * @see PanelModel
         * @see templateElements
         * @see templateTitle
         * @see panels
         * @see panelCount
         */
        get: function () {
            return this.templateValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.getPanel = function () {
        return this.template;
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "templateElements", {
        /**
         * An array of questions and panels included in the template panel.
         * @see template
         * @see panels
         * @see panelCount
         */
        get: function () {
            return this.template.elements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "templateTitle", {
        /**
         * A title for the template panel.
         * @see template
         * @see templateDescription
         * @see templateElements
         * @see panels
         * @see panelCount
         */
        get: function () {
            return this.template.title;
        },
        set: function (newValue) {
            this.template.title = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locTemplateTitle", {
        get: function () {
            return this.template.locTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "templateDescription", {
        /**
         * A description for the template panel.
         * @see template
         * @see templateTitle
         * @see templateElements
         * @see panels
         * @see panelCount
         */
        get: function () {
            return this.template.description;
        },
        set: function (newValue) {
            this.template.description = newValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locTemplateDescription", {
        get: function () {
            return this.template.locDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "items", {
        get: function () {
            var res = [];
            for (var i = 0; i < this.panels.length; i++) {
                res.push(this.panels[i].data);
            }
            return res;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panels", {
        /**
         * An array of `PanelModel` objects created based on the template panel.
         * @see PanelModel
         * @see template
         * @see panelCount
         */
        get: function () {
            return this.getPropertyValue("panels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "currentIndex", {
        /**
         * A zero-based index of the currently displayed panel.
         *
         * When `renderMode` is `"list"` or Dynamic Panel is empty (`panelCount` is 0), this property contains -1.
         * @see currentPanel
         * @see panels
         * @see panelCount
         * @see renderMode
         */
        get: function () {
            if (this.isRenderModeList)
                return -1;
            if (this.useTemplatePanel)
                return 0;
            if (this.currentIndexValue < 0 && this.panelCount > 0) {
                this.currentIndexValue = 0;
            }
            if (this.currentIndexValue >= this.panelCount) {
                this.currentIndexValue = this.panelCount - 1;
            }
            return this.currentIndexValue;
        },
        set: function (val) {
            if (this.currentIndexValue !== val) {
                if (val >= this.panelCount)
                    val = this.panelCount - 1;
                this.currentIndexValue = val;
                this.updateFooterActions();
                this.fireCallback(this.currentIndexChangedCallback);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "currentIndexValue", {
        get: function () { return this.getPropertyValue("currentIndexValue", -1); },
        set: function (val) { this.setPropertyValue("currentIndexValue", val); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "currentPanel", {
        /**
         * A `PanelModel` object that is the currently displayed panel.
         *
         * When `renderMode` is `"list"` or Dynamic Panel is empty (`panelCount` is 0), this property contains `null`.
         * @see currentIndex
         * @see panels
         * @see panelCount
         * @see renderMode
         */
        get: function () {
            var index = this.currentIndex;
            if (index < 0 || index >= this.panels.length)
                return null;
            return this.panels[index];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "confirmDelete", {
        /**
         * Specifies whether to display a confirmation dialog when a respondent wants to delete a panel.
         * @see confirmDeleteText
         */
        get: function () {
            return this.getPropertyValue("confirmDelete", false);
        },
        set: function (val) {
            this.setPropertyValue("confirmDelete", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "keyName", {
        /**
         * Specifies a key question. Set this property to the name of a question used in the template, and Dynamic Panel will display `keyDuplicationError` if a user tries to enter a duplicate value in this question.
         * @see keyDuplicationError
         */
        get: function () {
            return this.getPropertyValue("keyName", "");
        },
        set: function (val) {
            this.setPropertyValue("keyName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "confirmDeleteText", {
        /**
         * A message displayed in a confirmation dialog that appears when a respondent wants to delete a panel.
         * @see confirmDelete
         */
        get: function () {
            return this.getLocalizableStringText("confirmDeleteText");
        },
        set: function (val) {
            this.setLocalizableStringText("confirmDeleteText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locConfirmDeleteText", {
        get: function () {
            return this.getLocalizableString("confirmDeleteText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "keyDuplicationError", {
        /**
         * An error message displayed when users enter a duplicate value into a question that accepts only unique values (`isUnique` is set to `true` or `keyName` is specified).
         *
         * A default value for this property is taken from a [localization dictionary](https://github.com/surveyjs/survey-library/tree/master/src/localization). Refer to the following help topic for more information: [Localization & Globalization](https://surveyjs.io/form-library/documentation/localization).
         * @see keyName
         */
        get: function () {
            return this.getLocalizableStringText("keyDuplicationError");
        },
        set: function (val) {
            this.setLocalizableStringText("keyDuplicationError", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locKeyDuplicationError", {
        get: function () {
            return this.getLocalizableString("keyDuplicationError");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelPrevText", {
        /**
         * A caption for the Previous button. Applies only if `renderMode` is different from `"list"`.
         * @see renderMode
         * @see isPrevButtonVisible
         */
        get: function () {
            return this.getLocalizableStringText("panelPrevText");
        },
        set: function (val) {
            this.setLocalizableStringText("panelPrevText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locPanelPrevText", {
        get: function () {
            return this.getLocalizableString("panelPrevText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelNextText", {
        /**
         * A caption for the Next button. Applies only if `renderMode` is different from `"list"`.
         * @see renderMode
         * @see isNextButtonVisible
         */
        get: function () {
            return this.getLocalizableStringText("panelNextText");
        },
        set: function (val) {
            this.setLocalizableStringText("panelNextText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locPanelNextText", {
        get: function () {
            return this.getLocalizableString("panelNextText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelAddText", {
        /**
         * A caption for the Add Panel button.
         */
        get: function () {
            return this.getLocalizableStringText("panelAddText");
        },
        set: function (value) {
            this.setLocalizableStringText("panelAddText", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locPanelAddText", {
        get: function () {
            return this.getLocalizableString("panelAddText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelRemoveText", {
        /**
         * A caption for the Delete Panel button.
         * @see panelRemoveButtonLocation
         */
        get: function () {
            return this.getLocalizableStringText("panelRemoveText");
        },
        set: function (val) {
            this.setLocalizableStringText("panelRemoveText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locPanelRemoveText", {
        get: function () {
            return this.getLocalizableString("panelRemoveText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isProgressTopShowing", {
        /**
         * Returns true when the renderMode equals to "progressTop" or "progressTopBottom"
         */
        get: function () {
            return this.renderMode === "progressTop" || this.renderMode === "progressTopBottom";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isProgressBottomShowing", {
        /**
         * Returns true when the renderMode equals to "progressBottom" or "progressTopBottom"
         */
        get: function () {
            return this.renderMode === "progressBottom" || this.renderMode === "progressTopBottom";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isPrevButtonVisible", {
        /**
         * Indicates whether the Previous button is visible.
         * @see currentIndex
         * @see currentPanel
         * @see panelPrevText
         */
        get: function () { return this.currentIndex > 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isPrevButtonShowing", {
        get: function () { return this.isPrevButtonVisible; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isNextButtonVisible", {
        /**
         * Indicates whether the Next button is visible.
         * @see currentIndex
         * @see currentPanel
         * @see panelNextText
         */
        get: function () {
            return this.currentIndex >= 0 && this.currentIndex < this.panelCount - 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isNextButtonShowing", {
        get: function () { return this.isNextButtonVisible; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isRangeShowing", {
        /**
         * Returns true when showRangeInProgress equals to true, renderMode doesn't equal to "list" and panelCount is >= 2.
         */
        get: function () {
            return (this.showRangeInProgress && this.currentIndex >= 0 && this.panelCount > 1);
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.getElementsInDesign = function (includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        return includeHidden ? [this.template] : this.templateElements;
    };
    QuestionPanelDynamicModel.prototype.prepareValueForPanelCreating = function () {
        this.addingNewPanelsValue = this.value;
        this.isAddingNewPanels = true;
        this.isNewPanelsValueChanged = false;
    };
    QuestionPanelDynamicModel.prototype.setValueAfterPanelsCreating = function () {
        this.isAddingNewPanels = false;
        if (this.isNewPanelsValueChanged) {
            this.isValueChangingInternally = true;
            this.value = this.addingNewPanelsValue;
            this.isValueChangingInternally = false;
        }
    };
    QuestionPanelDynamicModel.prototype.getValueCore = function () {
        return this.isAddingNewPanels
            ? this.addingNewPanelsValue
            : _super.prototype.getValueCore.call(this);
    };
    QuestionPanelDynamicModel.prototype.setValueCore = function (newValue) {
        if (this.isAddingNewPanels) {
            this.isNewPanelsValueChanged = true;
            this.addingNewPanelsValue = newValue;
        }
        else {
            _super.prototype.setValueCore.call(this, newValue);
        }
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelCount", {
        /**
         * The number of panels in Dynamic Panel.
         * @see minPanelCount
         * @see maxPanelCount
         */
        get: function () {
            return this.isLoadingFromJson || this.useTemplatePanel
                ? this.loadingPanelCount
                : this.panels.length;
        },
        set: function (val) {
            if (val < 0)
                return;
            if (this.isLoadingFromJson || this.useTemplatePanel) {
                this.loadingPanelCount = val;
                return;
            }
            if (val == this.panels.length || this.useTemplatePanel)
                return;
            this.updateBindings("panelCount", val);
            this.prepareValueForPanelCreating();
            for (var i = this.panelCount; i < val; i++) {
                var panel = this.createNewPanel();
                this.panels.push(panel);
                if (this.renderMode == "list" && this.panelsState != "default") {
                    if (this.panelsState === "expand") {
                        panel.expand();
                    }
                    else {
                        if (!!panel.title) {
                            panel.collapse();
                        }
                    }
                }
            }
            if (val < this.panelCount)
                this.panels.splice(val, this.panelCount - val);
            this.setValueAfterPanelsCreating();
            this.setValueBasedOnPanelCount();
            this.reRunCondition();
            this.updateFooterActions();
            this.fireCallback(this.panelCountChangedCallback);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelsState", {
        /**
         * Specifies whether users can expand and collapse panels. Applies if `renderMode` is `"list"` and the `templateTitle` property is specified.
         *
         * Possible values:
         *
         * - `"default"` (default) - All panels are displayed in full and cannot be collapsed.
         * - `"expanded"` - All panels are displayed in full and can be collapsed in the UI.
         * - `"collapsed"` - All panels display only their titles and descriptions and can be expanded in the UI.
         * - `"firstExpanded"` - Only the first panel is displayed in full; other panels are collapsed and can be expanded in the UI.
         * @see renderMode
         * @see templateTitle
         */
        get: function () {
            return this.getPropertyValue("panelsState");
        },
        set: function (val) {
            this.setPropertyValue("panelsState", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.setTemplatePanelSurveyImpl = function () {
        this.template.setSurveyImpl(this.useTemplatePanel
            ? this.surveyImpl
            : new QuestionPanelDynamicTemplateSurveyImpl(this));
    };
    QuestionPanelDynamicModel.prototype.setPanelsSurveyImpl = function () {
        for (var i = 0; i < this.panels.length; i++) {
            var panel = this.panels[i];
            if (panel == this.template)
                continue;
            panel.setSurveyImpl(panel.data);
        }
    };
    QuestionPanelDynamicModel.prototype.setPanelsState = function () {
        if (this.useTemplatePanel || this.renderMode != "list" || !this.templateTitle)
            return;
        for (var i = 0; i < this.panels.length; i++) {
            var state = this.panelsState;
            if (state === "firstExpanded") {
                state = i === 0 ? "expanded" : "collapsed";
            }
            this.panels[i].state = state;
        }
    };
    QuestionPanelDynamicModel.prototype.setValueBasedOnPanelCount = function () {
        var value = this.value;
        if (!value || !Array.isArray(value))
            value = [];
        if (value.length == this.panelCount)
            return;
        for (var i = value.length; i < this.panelCount; i++)
            value.push({});
        if (value.length > this.panelCount) {
            value.splice(this.panelCount, value.length - this.panelCount);
        }
        this.isValueChangingInternally = true;
        this.value = value;
        this.isValueChangingInternally = false;
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "minPanelCount", {
        /**
         * A minimum number of panels in Dynamic Panel. Users cannot delete panels if `panelCount` equals `minPanelCount`.
         *
         * Default value: 0
         * @see panelCount
         * @see maxPanelCount
         * @see allowRemovePanel
         */
        get: function () {
            return this.getPropertyValue("minPanelCount");
        },
        set: function (val) {
            if (val < 0)
                val = 0;
            if (val == this.minPanelCount)
                return;
            this.setPropertyValue("minPanelCount", val);
            if (val > this.maxPanelCount)
                this.maxPanelCount = val;
            if (this.panelCount < val)
                this.panelCount = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "maxPanelCount", {
        /**
         * A maximum number of panels in Dynamic Panel. Users cannot add new panels if `panelCount` equals `maxPanelCount`.
         *
         * Default value: 100 (inherited from [`settings.panelMaximumPanelCount`](https://surveyjs.io/form-library/documentation/settings#panelMaximumPanelCount))
         * @see panelCount
         * @see minPanelCount
         * @see allowAddPanel
         */
        get: function () {
            return this.getPropertyValue("maxPanelCount");
        },
        set: function (val) {
            if (val <= 0)
                return;
            if (val > _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].panelMaximumPanelCount)
                val = _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].panelMaximumPanelCount;
            if (val == this.maxPanelCount)
                return;
            this.setPropertyValue("maxPanelCount", val);
            if (val < this.minPanelCount)
                this.minPanelCount = val;
            if (this.panelCount > val)
                this.panelCount = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "allowAddPanel", {
        /**
         * Specifies whether users are allowed to add new panels.
         *
         * Default value: `true`
         * @see canAddPanel
         * @see allowRemovePanel
         */
        get: function () {
            return this.getPropertyValue("allowAddPanel");
        },
        set: function (val) {
            this.setPropertyValue("allowAddPanel", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "allowRemovePanel", {
        /**
         * Specifies whether users are allowed to delete panels.
         *
         * Default value: `true`
         * @see canRemovePanel
         * @see allowAddPanel
         */
        get: function () {
            return this.getPropertyValue("allowRemovePanel");
        },
        set: function (val) {
            this.setPropertyValue("allowRemovePanel", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "templateTitleLocation", {
        /**
         * Gets or sets the location of question titles within the template panel relative to their input fields.
         *
         * - `"default"` (default) - Inherits the setting from the Dynamic Panel's `titleLocation` property, which in turn inherits the [`questionTitleLocation`](https://surveyjs.io/form-library/documentation/surveymodel#questionTitleLocation) property value specified for the Dynamic Panel's container (page or survey).
         * - `"top"` - Displays question titles above input fields.
         * - `"bottom"` - Displays question titles below input fields.
         * - `"left"` - Displays question titles to the left of input fields.
         * - `"hidden"` - Hides question titles.
         * @see titleLocation
         */
        get: function () {
            return this.getPropertyValue("templateTitleLocation");
        },
        set: function (value) {
            this.setPropertyValue("templateTitleLocation", value.toLowerCase());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "showQuestionNumbers", {
        /**
         * Use this property to show/hide the numbers in titles in questions inside a dynamic panel.
         * By default the value is "off". You may set it to "onPanel" and the first question inside a dynamic panel will start with 1 or "onSurvey" to include nested questions in dymamic panels into global survey question numbering.
         */
        get: function () {
            return this.getPropertyValue("showQuestionNumbers");
        },
        set: function (val) {
            this.setPropertyValue("showQuestionNumbers", val);
            if (!this.isLoadingFromJson && this.survey) {
                this.survey.questionVisibilityChanged(this, this.visible);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "panelRemoveButtonLocation", {
        /**
         * Specifies the location of the Delete Panel button relative to panel content.
         *
         * Possible values:
         *
         * - `"bottom"` (default) - Displays the Delete Panel button below panel content.
         * - `"right"` - Displays the Delete Panel button to the right of panel content.
         * @see panelRemoveText
         */
        get: function () {
            return this.getPropertyValue("panelRemoveButtonLocation");
        },
        set: function (val) {
            this.setPropertyValue("panelRemoveButtonLocation", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "showRangeInProgress", {
        /**
         * Shows the range from 1 to panelCount when renderMode doesn't equal to "list". Set to false to hide this element.
         * @see panelCount
         * @see renderMode
         */
        get: function () {
            return this.getPropertyValue("showRangeInProgress");
        },
        set: function (val) {
            this.setPropertyValue("showRangeInProgress", val);
            this.updateFooterActions();
            this.fireCallback(this.currentIndexChangedCallback);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "renderMode", {
        /**
         * By default the property equals to "list" and all dynamic panels are rendered one by one on the page. You may change it to: "progressTop", "progressBottom" or "progressTopBottom" to render only one dynamic panel at once. The progress and navigation elements can be rendred on top, bottom or both.
         */
        get: function () {
            return this.getPropertyValue("renderMode");
        },
        set: function (val) {
            this.setPropertyValue("renderMode", val);
            this.updateFooterActions();
            this.fireCallback(this.renderModeChangedCallback);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "isRenderModeList", {
        get: function () {
            return this.renderMode === "list";
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.setVisibleIndex = function (value) {
        if (!this.isVisible)
            return 0;
        var startIndex = this.showQuestionNumbers == "onSurvey" ? value : 0;
        for (var i = 0; i < this.panels.length; i++) {
            var counter = this.setPanelVisibleIndex(this.panels[i], startIndex, this.showQuestionNumbers != "off");
            if (this.showQuestionNumbers == "onSurvey") {
                startIndex += counter;
            }
        }
        _super.prototype.setVisibleIndex.call(this, this.showQuestionNumbers != "onSurvey" ? value : -1);
        return this.showQuestionNumbers != "onSurvey" ? 1 : startIndex - value;
    };
    QuestionPanelDynamicModel.prototype.setPanelVisibleIndex = function (panel, index, showIndex) {
        if (!showIndex) {
            panel.setVisibleIndex(-1);
            return 0;
        }
        return panel.setVisibleIndex(index);
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "canAddPanel", {
        /**
         * Indicates whether it is possible to add a new panel.
         *
         * This property returns `true` when all of the following conditions apply:
         *
         * - Users are allowed to add new panels (`allowAddPanel` is `true`).
         * - Dynamic Panel or its parent survey is not in read-only state.
         * - `panelCount` is less than `maxPanelCount`.
         * @see allowAddPanel
         * @see isReadOnly
         * @see panelCount
         * @see maxPanelCount
         * @see canRemovePanel
         */
        get: function () {
            if (this.isDesignMode)
                return false;
            if (this.isDefaultV2Theme && !this.legacyNavigation && !this.isRenderModeList && this.currentIndex < this.panelCount - 1) {
                return false;
            }
            return (this.allowAddPanel &&
                !this.isReadOnly &&
                this.panelCount < this.maxPanelCount);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "canRemovePanel", {
        /**
         * Indicates whether it is possible to delete panels.
         *
         * This property returns `true` when all of the following conditions apply:
         *
         * - Users are allowed to delete panels (`allowRemovePanel` is `true`).
         * - Dynamic Panel or its parent survey is not in read-only state.
         * - `panelCount` exceeds `minPanelCount`.
         * @see allowRemovePanel
         * @see isReadOnly
         * @see panelCount
         * @see minPanelCount
         * @see canAddPanel
         */
        get: function () {
            if (this.isDesignMode)
                return false;
            return (this.allowRemovePanel &&
                !this.isReadOnly &&
                this.panelCount > this.minPanelCount);
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.rebuildPanels = function () {
        var _a;
        if (this.isLoadingFromJson)
            return;
        this.prepareValueForPanelCreating();
        var panels = [];
        var panel;
        if (this.useTemplatePanel) {
            panel = new QuestionPanelDynamicItem(this, this.template);
            panels.push(this.template);
        }
        else {
            for (var i = 0; i < this.panelCount; i++) {
                panel = this.createNewPanel();
                panels.push(this.createNewPanel());
            }
        }
        (_a = this.panels).splice.apply(_a, __spreadArray([0, this.panels.length], panels));
        this.setValueAfterPanelsCreating();
        this.setPanelsState();
        this.reRunCondition();
        this.updateFooterActions();
        this.fireCallback(this.panelCountChangedCallback);
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "defaultPanelValue", {
        /**
         * If it is not empty, then this value is set to every new panel, including panels created initially, unless the defaultValue is not empty
         * @see defaultValue
         * @see defaultValueFromLastPanel
         */
        get: function () {
            return this.getPropertyValue("defaultPanelValue");
        },
        set: function (val) {
            this.setPropertyValue("defaultPanelValue", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "defaultValueFromLastPanel", {
        /**
         * Specifies whether default values for a new panel should be copied from the last panel.
         *
         * If you also specify `defaultValue`, it will be merged with the copied values.
         * @see defaultValue
         */
        get: function () {
            return this.getPropertyValue("defaultValueFromLastPanel", false);
        },
        set: function (val) {
            this.setPropertyValue("defaultValueFromLastPanel", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.isDefaultValueEmpty = function () {
        return (_super.prototype.isDefaultValueEmpty.call(this) && this.isValueEmpty(this.defaultPanelValue));
    };
    QuestionPanelDynamicModel.prototype.setDefaultValue = function () {
        if (this.isValueEmpty(this.defaultPanelValue) ||
            !this.isValueEmpty(this.defaultValue)) {
            _super.prototype.setDefaultValue.call(this);
            return;
        }
        if (!this.isEmpty() || this.panelCount == 0)
            return;
        var newValue = [];
        for (var i = 0; i < this.panelCount; i++) {
            newValue.push(this.defaultPanelValue);
        }
        this.value = newValue;
    };
    QuestionPanelDynamicModel.prototype.isEmpty = function () {
        var val = this.value;
        if (!val || !Array.isArray(val))
            return true;
        for (var i = 0; i < val.length; i++) {
            if (!this.isRowEmpty(val[i]))
                return false;
        }
        return true;
    };
    QuestionPanelDynamicModel.prototype.getProgressInfo = function () {
        return _survey_element__WEBPACK_IMPORTED_MODULE_1__["SurveyElement"].getProgressInfoByElements(this.panels, this.isRequired);
    };
    QuestionPanelDynamicModel.prototype.isRowEmpty = function (val) {
        for (var prop in val) {
            if (val.hasOwnProperty(prop))
                return false;
        }
        return true;
    };
    /**
     * Add a new dynamic panel based on the template Panel. It checks if canAddPanel returns true and then calls addPanel method.
     * If a renderMode is different from "list" and the current panel has erros, then
     * @see template
     * @see panelCount
     * @see panels
     * @see canAddPanel
     */
    QuestionPanelDynamicModel.prototype.addPanelUI = function () {
        if (!this.canAddPanel)
            return null;
        if (!this.canLeaveCurrentPanel())
            return null;
        var newPanel = this.addPanel();
        if (this.renderMode === "list" && this.panelsState !== "default") {
            newPanel.expand();
        }
        return newPanel;
    };
    /**
     * Add a new dynamic panel based on the template Panel.
     * @see template
     * @see panelCount
     * @see panels
     * @see renderMode
     */
    QuestionPanelDynamicModel.prototype.addPanel = function () {
        this.panelCount++;
        if (!this.isRenderModeList) {
            this.currentIndex = this.panelCount - 1;
        }
        var newValue = this.value;
        var hasModified = false;
        if (!this.isValueEmpty(this.defaultPanelValue)) {
            if (!!newValue &&
                Array.isArray(newValue) &&
                newValue.length == this.panelCount) {
                hasModified = true;
                this.copyValue(newValue[newValue.length - 1], this.defaultPanelValue);
            }
        }
        if (this.defaultValueFromLastPanel &&
            !!newValue &&
            Array.isArray(newValue) &&
            newValue.length > 1 &&
            newValue.length == this.panelCount) {
            hasModified = true;
            this.copyValue(newValue[newValue.length - 1], newValue[newValue.length - 2]);
        }
        if (hasModified) {
            this.value = newValue;
        }
        if (this.survey)
            this.survey.dynamicPanelAdded(this);
        return this.panels[this.panelCount - 1];
    };
    QuestionPanelDynamicModel.prototype.canLeaveCurrentPanel = function () {
        return !(this.renderMode !== "list" && this.currentPanel && this.currentPanel.hasErrors(true, true));
    };
    QuestionPanelDynamicModel.prototype.copyValue = function (src, dest) {
        for (var key in dest) {
            src[key] = dest[key];
        }
    };
    /**
     * Call removePanel function. Do nothing is canRemovePanel returns false. If confirmDelete set to true, it shows the confirmation dialog first.
     * @param value a panel or panel index
     * @see removePanel
     * @see confirmDelete
     * @see confirmDeleteText
     * @see canRemovePanel
     *
     */
    QuestionPanelDynamicModel.prototype.removePanelUI = function (value) {
        if (!this.canRemovePanel)
            return;
        if (!this.confirmDelete || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["confirmAction"])(this.confirmDeleteText)) {
            this.removePanel(value);
        }
    };
    /**
     * Switches Dynamic Panel to the next panel. Returns `true` in case of success, or `false` if `renderMode` is `"list"` or the current panel contains validation errors.
     * @see renderMode
     */
    QuestionPanelDynamicModel.prototype.goToNextPanel = function () {
        if (this.currentIndex < 0)
            return false;
        if (!this.canLeaveCurrentPanel())
            return false;
        this.currentIndex++;
        return true;
    };
    /**
     * Switches Dynamic Panel to the previous panel.
     */
    QuestionPanelDynamicModel.prototype.goToPrevPanel = function () {
        if (this.currentIndex < 0)
            return;
        this.currentIndex--;
    };
    /**
     * Removes a dynamic panel from the panels array.
     * @param value a panel or panel index
     * @see panels
     * @see template
     */
    QuestionPanelDynamicModel.prototype.removePanel = function (value) {
        var index = this.getPanelIndex(value);
        if (index < 0 || index >= this.panelCount)
            return;
        var panel = this.panels[index];
        if (this.survey && !this.survey.dynamicPanelRemoving(this, index, panel))
            return;
        this.panels.splice(index, 1);
        this.updateBindings("panelCount", this.panelCount);
        var value = this.value;
        if (!value || !Array.isArray(value) || index >= value.length)
            return;
        this.isValueChangingInternally = true;
        value.splice(index, 1);
        this.value = value;
        this.updateFooterActions();
        this.fireCallback(this.panelCountChangedCallback);
        if (this.survey)
            this.survey.dynamicPanelRemoved(this, index, panel);
        this.isValueChangingInternally = false;
    };
    QuestionPanelDynamicModel.prototype.getPanelIndex = function (val) {
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isNumber(val))
            return val;
        var items = this.items;
        for (var i = 0; i < this.panels.length; i++) {
            if (this.panels[i] === val || items[i] === val)
                return i;
        }
        return -1;
    };
    QuestionPanelDynamicModel.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        var panels = this.panels;
        for (var i = 0; i < panels.length; i++) {
            panels[i].locStrsChanged();
        }
    };
    QuestionPanelDynamicModel.prototype.clearIncorrectValues = function () {
        for (var i = 0; i < this.panels.length; i++) {
            this.clearIncorrectValuesInPanel(i);
        }
    };
    QuestionPanelDynamicModel.prototype.clearErrors = function () {
        _super.prototype.clearErrors.call(this);
        for (var i = 0; i < this.panels.length; i++) {
            this.panels[i].clearErrors();
        }
    };
    QuestionPanelDynamicModel.prototype.getQuestionFromArray = function (name, index) {
        if (index >= this.panelCount)
            return null;
        return this.panels[index].getQuestionByName(name);
    };
    QuestionPanelDynamicModel.prototype.clearIncorrectValuesInPanel = function (index) {
        var panel = this.panels[index];
        panel.clearIncorrectValues();
        var val = this.value;
        var values = !!val && index < val.length ? val[index] : null;
        if (!values)
            return;
        var isChanged = false;
        for (var key in values) {
            if (this.getSharedQuestionFromArray(key, index))
                continue;
            var q = panel.getQuestionByName(key);
            if (!!q)
                continue;
            if (this.iscorrectValueWithPostPrefix(panel, key, _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].commentSuffix) ||
                this.iscorrectValueWithPostPrefix(panel, key, _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].matrixTotalValuePostFix))
                continue;
            delete values[key];
            isChanged = true;
        }
        if (isChanged) {
            val[index] = values;
            this.value = val;
        }
    };
    QuestionPanelDynamicModel.prototype.iscorrectValueWithPostPrefix = function (panel, key, postPrefix) {
        if (key.indexOf(postPrefix) !== key.length - postPrefix.length)
            return false;
        return !!panel.getQuestionByName(key.substring(0, key.indexOf(postPrefix)));
    };
    QuestionPanelDynamicModel.prototype.getSharedQuestionFromArray = function (name, panelIndex) {
        return !!this.survey && !!this.valueName
            ? (this.survey.getQuestionByValueNameFromArray(this.valueName, name, panelIndex))
            : null;
    };
    QuestionPanelDynamicModel.prototype.addConditionObjectsByContext = function (objects, context) {
        var hasContext = !!context
            ? context === true || this.template.questions.indexOf(context) > -1
            : false;
        var panelObjs = new Array();
        var questions = this.template.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].addConditionObjectsByContext(panelObjs, context);
        }
        for (var index = 0; index < _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].panelDynamicMaxPanelCountInCondition; index++) {
            var indexStr = "[" + index + "].";
            var prefixName = this.getValueName() + indexStr;
            var prefixText = this.processedTitle + indexStr;
            for (var i = 0; i < panelObjs.length; i++) {
                objects.push({
                    name: prefixName + panelObjs[i].name,
                    text: prefixText + panelObjs[i].text,
                    question: panelObjs[i].question,
                });
            }
        }
        if (hasContext) {
            var prefixName = context === true ? this.getValueName() + "." : "";
            var prefixText = context === true ? this.processedTitle + "." : "";
            for (var i = 0; i < panelObjs.length; i++) {
                if (panelObjs[i].question == context)
                    continue;
                var obj = {
                    name: prefixName + "panel." + panelObjs[i].name,
                    text: prefixText + "panel." + panelObjs[i].text,
                    question: panelObjs[i].question
                };
                if (context === true) {
                    obj.context = this;
                }
                objects.push(obj);
            }
        }
    };
    QuestionPanelDynamicModel.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        if (!path)
            return _super.prototype.getConditionJson.call(this, operator, path);
        var questionName = path;
        var pos = path.indexOf(".");
        if (pos > -1) {
            questionName = path.substring(0, pos);
            path = path.substring(pos + 1);
        }
        var question = this.template.getQuestionByName(questionName);
        if (!question)
            return null;
        return question.getConditionJson(operator, path);
    };
    QuestionPanelDynamicModel.prototype.onReadOnlyChanged = function () {
        var readOnly = this.isReadOnly;
        this.template.readOnly = readOnly;
        for (var i = 0; i < this.panels.length; i++) {
            this.panels[i].readOnly = readOnly;
        }
        this.updateNoEntriesTextDefaultLoc();
        _super.prototype.onReadOnlyChanged.call(this);
    };
    QuestionPanelDynamicModel.prototype.updateNoEntriesTextDefaultLoc = function () {
        var loc = this.getLocalizableString("noEntriesText");
        if (!loc)
            return;
        loc.localizationName = this.isReadOnly ? "noEntriesReadonlyText" : "noEntriesText";
        loc.strChanged();
    };
    QuestionPanelDynamicModel.prototype.onSurveyLoad = function () {
        this.template.readOnly = this.isReadOnly;
        this.template.onSurveyLoad();
        if (this.loadingPanelCount > 0) {
            this.panelCount = this.loadingPanelCount;
        }
        if (this.useTemplatePanel) {
            this.rebuildPanels();
        }
        this.setPanelsSurveyImpl();
        this.setPanelsState();
        this.assignOnPropertyChangedToTemplate();
        if (!!this.survey) {
            for (var i = 0; i < this.panelCount; i++) {
                this.survey.dynamicPanelAdded(this);
            }
        }
        this.recalculateIsReadyValue();
        if (this.isReadOnly) {
            this.updateNoEntriesTextDefaultLoc();
        }
        _super.prototype.onSurveyLoad.call(this);
    };
    QuestionPanelDynamicModel.prototype.onFirstRendering = function () {
        this.template.onFirstRendering();
        for (var i = 0; i < this.panels.length; i++) {
            this.panels[i].onFirstRendering();
        }
        _super.prototype.onFirstRendering.call(this);
    };
    QuestionPanelDynamicModel.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        for (var i = 0; i < this.panels.length; i++) {
            this.panels[i].localeChanged();
        }
    };
    QuestionPanelDynamicModel.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        this.runPanelsCondition(values, properties);
    };
    QuestionPanelDynamicModel.prototype.reRunCondition = function () {
        if (!this.data)
            return;
        this.runCondition(this.getDataFilteredValues(), this.getDataFilteredProperties());
    };
    QuestionPanelDynamicModel.prototype.runPanelsCondition = function (values, properties) {
        var cachedValues = {};
        if (values && values instanceof Object) {
            cachedValues = JSON.parse(JSON.stringify(values));
        }
        if (!!this.parentQuestion && !!this.parent) {
            cachedValues[QuestionPanelDynamicItem.ParentItemVariableName] = this.parent.getValue();
        }
        for (var i = 0; i < this.panels.length; i++) {
            var panelValues = this.getPanelItemData(this.panels[i].data);
            //Should be unique for every panel due async expression support
            var newValues = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].createCopy(cachedValues);
            newValues[QuestionPanelDynamicItem.ItemVariableName.toLowerCase()] = panelValues;
            newValues[QuestionPanelDynamicItem.IndexVariableName.toLowerCase()] = i;
            this.panels[i].runCondition(newValues, properties);
        }
    };
    QuestionPanelDynamicModel.prototype.onAnyValueChanged = function (name) {
        _super.prototype.onAnyValueChanged.call(this, name);
        for (var i = 0; i < this.panels.length; i++) {
            this.panels[i].onAnyValueChanged(name);
            this.panels[i].onAnyValueChanged(QuestionPanelDynamicItem.ItemVariableName);
        }
    };
    QuestionPanelDynamicModel.prototype.hasKeysDuplicated = function (fireCallback, rec) {
        if (rec === void 0) { rec = null; }
        var keyValues = [];
        var res;
        for (var i = 0; i < this.panels.length; i++) {
            res =
                this.isValueDuplicated(this.panels[i], keyValues, rec, fireCallback) ||
                    res;
        }
        return res;
    };
    QuestionPanelDynamicModel.prototype.updatePanelsContainsErrors = function () {
        var question = this.changingValueQuestion;
        var parent = question.parent;
        while (!!parent) {
            parent.updateContainsErrors();
            parent = parent.parent;
        }
        this.updateContainsErrors();
    };
    QuestionPanelDynamicModel.prototype.hasErrors = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        if (this.isValueChangingInternally)
            return false;
        var res = false;
        if (!!this.changingValueQuestion) {
            var res = this.changingValueQuestion.hasErrors(fireCallback, rec);
            res = this.hasKeysDuplicated(fireCallback, rec) || res;
            this.updatePanelsContainsErrors();
            return res;
        }
        else {
            var errosInPanels = this.hasErrorInPanels(fireCallback, rec);
            return _super.prototype.hasErrors.call(this, fireCallback) || errosInPanels;
        }
    };
    QuestionPanelDynamicModel.prototype.getContainsErrors = function () {
        var res = _super.prototype.getContainsErrors.call(this);
        if (res)
            return res;
        var panels = this.panels;
        for (var i = 0; i < panels.length; i++) {
            if (panels[i].containsErrors)
                return true;
        }
        return false;
    };
    QuestionPanelDynamicModel.prototype.getIsAnswered = function () {
        if (!_super.prototype.getIsAnswered.call(this))
            return false;
        var panels = this.panels;
        for (var i = 0; i < panels.length; i++) {
            var visibleQuestions = [];
            panels[i].addQuestionsToList(visibleQuestions, true);
            for (var j = 0; j < visibleQuestions.length; j++) {
                if (!visibleQuestions[j].isAnswered)
                    return false;
            }
        }
        return true;
    };
    QuestionPanelDynamicModel.prototype.clearValueIfInvisibleCore = function () {
        for (var i = 0; i < this.panels.length; i++) {
            var questions = this.panels[i].questions;
            this.isSetPanelItemData = {};
            for (var j = 0; j < questions.length; j++) {
                var q = questions[j];
                q.clearValueIfInvisible();
                this.isSetPanelItemData[q.getValueName()] = this.maxCheckCount + 1;
            }
        }
        this.isSetPanelItemData = {};
        _super.prototype.clearValueIfInvisibleCore.call(this);
    };
    QuestionPanelDynamicModel.prototype.getIsRunningValidators = function () {
        if (_super.prototype.getIsRunningValidators.call(this))
            return true;
        for (var i = 0; i < this.panels.length; i++) {
            var questions = this.panels[i].questions;
            for (var j = 0; j < questions.length; j++) {
                if (questions[j].isRunningValidators)
                    return true;
            }
        }
        return false;
    };
    QuestionPanelDynamicModel.prototype.getAllErrors = function () {
        var result = _super.prototype.getAllErrors.call(this);
        for (var i = 0; i < this.panels.length; i++) {
            var questions = this.panels[i].questions;
            for (var j = 0; j < questions.length; j++) {
                var errors = questions[j].getAllErrors();
                if (errors && errors.length > 0) {
                    result = result.concat(errors);
                }
            }
        }
        return result;
    };
    QuestionPanelDynamicModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        var values = this.getUnbindValue(value);
        if (!values || !Array.isArray(values))
            return values;
        for (var i = 0; i < this.panels.length && i < values.length; i++) {
            var val = values[i];
            if (!val)
                continue;
            values[i] = this.getPanelDisplayValue(i, val, keysAsText);
        }
        return values;
    };
    QuestionPanelDynamicModel.prototype.getPanelDisplayValue = function (panelIndex, val, keysAsText) {
        if (!val)
            return val;
        var panel = this.panels[panelIndex];
        var keys = Object.keys(val);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var question = panel.getQuestionByValueName(key);
            if (!question) {
                question = this.getSharedQuestionFromArray(key, panelIndex);
            }
            if (!!question) {
                var qValue = question.getDisplayValue(keysAsText, val[key]);
                val[key] = qValue;
                if (keysAsText && !!question.title && question.title !== key) {
                    val[question.title] = qValue;
                    delete val[key];
                }
            }
        }
        return val;
    };
    QuestionPanelDynamicModel.prototype.hasErrorInPanels = function (fireCallback, rec) {
        var res = false;
        var panels = this.panels;
        var keyValues = [];
        for (var i = 0; i < panels.length; i++) {
            this.setOnCompleteAsyncInPanel(panels[i]);
        }
        for (var i = 0; i < panels.length; i++) {
            var pnlError = panels[i].hasErrors(fireCallback, !!rec && rec.focuseOnFirstError, rec);
            pnlError = this.isValueDuplicated(panels[i], keyValues, rec, fireCallback) || pnlError;
            if (!this.isRenderModeList && pnlError && !res) {
                this.currentIndex = i;
            }
            res = pnlError || res;
        }
        return res;
    };
    QuestionPanelDynamicModel.prototype.setOnCompleteAsyncInPanel = function (panel) {
        var _this = this;
        var questions = panel.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].onCompletedAsyncValidators = function (hasErrors) {
                _this.raiseOnCompletedAsyncValidators();
            };
        }
    };
    QuestionPanelDynamicModel.prototype.isValueDuplicated = function (panel, keyValues, rec, fireCallback) {
        if (!this.keyName)
            return false;
        var question = panel.getQuestionByValueName(this.keyName);
        if (!question || question.isEmpty())
            return false;
        var value = question.value;
        if (!!this.changingValueQuestion &&
            question != this.changingValueQuestion) {
            question.hasErrors(fireCallback, rec);
        }
        for (var i = 0; i < keyValues.length; i++) {
            if (value == keyValues[i]) {
                if (fireCallback) {
                    question.addError(new _error__WEBPACK_IMPORTED_MODULE_6__["KeyDuplicationError"](this.keyDuplicationError, this));
                }
                if (!!rec && !rec.firstErrorQuestion) {
                    rec.firstErrorQuestion = question;
                }
                return true;
            }
        }
        keyValues.push(value);
        return false;
    };
    QuestionPanelDynamicModel.prototype.getPanelActions = function (panel) {
        var _this = this;
        var actions = panel.footerActions;
        if (this.panelRemoveButtonLocation !== "right") {
            actions.push(new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
                id: "remove-panel-" + panel.id,
                component: "sv-paneldynamic-remove-btn",
                visible: new _base__WEBPACK_IMPORTED_MODULE_11__["ComputedUpdater"](function () { return [_this.canRemovePanel, panel.state !== "collapsed", _this.panelRemoveButtonLocation !== "right"].every(function (val) { return val === true; }); }),
                data: { question: this, panel: panel }
            }));
        }
        if (!!this.survey) {
            actions = this.survey.getUpdatedPanelFooterActions(panel, actions, this);
        }
        return actions;
    };
    QuestionPanelDynamicModel.prototype.createNewPanel = function () {
        var _this = this;
        var panel = this.createAndSetupNewPanelObject();
        var json = this.template.toJSON();
        new _jsonobject__WEBPACK_IMPORTED_MODULE_4__["JsonObject"]().toObject(json, panel);
        panel.renderWidth = "100%";
        panel.updateCustomWidgets();
        new QuestionPanelDynamicItem(this, panel);
        panel.onFirstRendering();
        var questions = panel.questions;
        for (var i = 0; i < questions.length; i++) {
            questions[i].setParentQuestion(this);
        }
        panel.locStrsChanged();
        panel.onGetFooterActionsCallback = function () {
            return _this.getPanelActions(panel);
        };
        panel.footerToolbarCss = this.cssClasses.panelFooter;
        return panel;
    };
    QuestionPanelDynamicModel.prototype.createAndSetupNewPanelObject = function () {
        var panel = this.createNewPanelObject();
        panel.isInteractiveDesignElement = false;
        panel.setParentQuestion(this);
        var self = this;
        panel.onGetQuestionTitleLocation = function () {
            return self.getTemplateQuestionTitleLocation();
        };
        return panel;
    };
    QuestionPanelDynamicModel.prototype.getTemplateQuestionTitleLocation = function () {
        return this.templateTitleLocation != "default"
            ? this.templateTitleLocation
            : this.getTitleLocationCore();
    };
    QuestionPanelDynamicModel.prototype.createNewPanelObject = function () {
        return _jsonobject__WEBPACK_IMPORTED_MODULE_4__["Serializer"].createClass("panel");
    };
    QuestionPanelDynamicModel.prototype.setPanelCountBasedOnValue = function () {
        if (this.isValueChangingInternally || this.useTemplatePanel)
            return;
        var val = this.value;
        var newPanelCount = val && Array.isArray(val) ? val.length : 0;
        if (newPanelCount == 0 && this.loadingPanelCount > 0) {
            newPanelCount = this.loadingPanelCount;
        }
        this.panelCount = newPanelCount;
    };
    QuestionPanelDynamicModel.prototype.setQuestionValue = function (newValue) {
        _super.prototype.setQuestionValue.call(this, newValue, false);
        this.setPanelCountBasedOnValue();
        for (var i = 0; i < this.panels.length; i++) {
            this.panelUpdateValueFromSurvey(this.panels[i]);
        }
        this.updateIsAnswered();
    };
    QuestionPanelDynamicModel.prototype.onSurveyValueChanged = function (newValue) {
        if (newValue === undefined && this.isAllPanelsEmpty())
            return;
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        for (var i = 0; i < this.panels.length; i++) {
            this.panelSurveyValueChanged(this.panels[i]);
        }
        if (newValue === undefined) {
            this.setValueBasedOnPanelCount();
        }
        this.recalculateIsReadyValue();
    };
    QuestionPanelDynamicModel.prototype.isAllPanelsEmpty = function () {
        for (var i = 0; i < this.panels.length; i++) {
            if (!_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(this.panels[i].getValue()))
                return false;
        }
        return true;
    };
    QuestionPanelDynamicModel.prototype.panelUpdateValueFromSurvey = function (panel) {
        var questions = panel.questions;
        var values = this.getPanelItemData(panel.data);
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            q.updateValueFromSurvey(values[q.getValueName()]);
            q.updateCommentFromSurvey(values[q.getValueName() + _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].commentSuffix]);
        }
    };
    QuestionPanelDynamicModel.prototype.panelSurveyValueChanged = function (panel) {
        var questions = panel.questions;
        var values = this.getPanelItemData(panel.data);
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            q.onSurveyValueChanged(values[q.getValueName()]);
        }
    };
    QuestionPanelDynamicModel.prototype.recalculateIsReadyValue = function () {
        var _this = this;
        var oldIsReady = this.isReadyValue;
        var isReady = true;
        this.panels.forEach(function (panel) {
            panel.questions.forEach(function (q) {
                if (!q.isReady) {
                    isReady = false;
                    q.onReadyChanged.add(_this.onReadyChangedCallback);
                }
                else {
                    q.onReadyChanged.remove(_this.onReadyChangedCallback);
                }
            });
        });
        this.isReadyValue = isReady;
        if (oldIsReady != this.isReadyValue) {
            this.onReadyChanged.fire(this, {
                question: this,
                oldIsReady: oldIsReady,
                isReady: this.isReadyValue
            });
        }
    };
    QuestionPanelDynamicModel.prototype.onSetData = function () {
        _super.prototype.onSetData.call(this);
        if (this.useTemplatePanel) {
            this.setTemplatePanelSurveyImpl();
            this.rebuildPanels();
        }
    };
    //IQuestionPanelDynamicData
    QuestionPanelDynamicModel.prototype.getItemIndex = function (item) {
        var res = this.items.indexOf(item);
        return res > -1 ? res : this.items.length;
    };
    QuestionPanelDynamicModel.prototype.getPanelItemData = function (item) {
        var items = this.items;
        var index = items.indexOf(item);
        var qValue = this.value;
        if (index < 0 && Array.isArray(qValue) && qValue.length > items.length) {
            index = items.length;
        }
        if (index < 0)
            return {};
        if (!qValue || !Array.isArray(qValue) || qValue.length <= index)
            return {};
        return qValue[index];
    };
    QuestionPanelDynamicModel.prototype.setPanelItemData = function (item, name, val) {
        if (this.isSetPanelItemData[name] > this.maxCheckCount)
            return;
        if (!this.isSetPanelItemData[name]) {
            this.isSetPanelItemData[name] = 0;
        }
        this.isSetPanelItemData[name]++;
        var items = this.items;
        var index = items.indexOf(item);
        if (index < 0)
            index = items.length;
        var qValue = this.getUnbindValue(this.value);
        if (!qValue || !Array.isArray(qValue)) {
            qValue = [];
        }
        if (qValue.length <= index) {
            for (var i = qValue.length; i <= index; i++) {
                qValue.push({});
            }
        }
        if (!qValue[index])
            qValue[index] = {};
        if (!this.isValueEmpty(val)) {
            qValue[index][name] = val;
        }
        else {
            delete qValue[index][name];
        }
        if (index >= 0 && index < this.panels.length) {
            this.changingValueQuestion = this.panels[index].getQuestionByValueName(name);
        }
        this.value = qValue;
        this.changingValueQuestion = null;
        if (this.survey) {
            var options = {
                question: this,
                panel: item.panel,
                name: name,
                itemIndex: index,
                itemValue: qValue[index],
                value: val,
            };
            this.survey.dynamicPanelItemValueChanged(this, options);
        }
        this.isSetPanelItemData[name]--;
        if (this.isSetPanelItemData[name] - 1) {
            delete this.isSetPanelItemData[name];
        }
    };
    QuestionPanelDynamicModel.prototype.getRootData = function () {
        return this.data;
    };
    QuestionPanelDynamicModel.prototype.getPlainData = function (options) {
        if (options === void 0) { options = {
            includeEmpty: true,
        }; }
        var questionPlainData = _super.prototype.getPlainData.call(this, options);
        if (!!questionPlainData) {
            questionPlainData.isNode = true;
            questionPlainData.data = this.panels.map(function (panel, index) {
                var panelDataItem = {
                    name: panel.name || index,
                    title: panel.title || "Panel",
                    value: panel.getValue(),
                    displayValue: panel.getValue(),
                    getString: function (val) {
                        return typeof val === "object" ? JSON.stringify(val) : val;
                    },
                    isNode: true,
                    data: panel.questions
                        .map(function (question) { return question.getPlainData(options); })
                        .filter(function (d) { return !!d; }),
                };
                (options.calculations || []).forEach(function (calculation) {
                    panelDataItem[calculation.propertyName] = panel[calculation.propertyName];
                });
                return panelDataItem;
            });
        }
        return questionPlainData;
    };
    QuestionPanelDynamicModel.prototype.updateElementCss = function (reNew) {
        _super.prototype.updateElementCss.call(this, reNew);
        for (var i = 0; i < this.panels.length; i++) {
            var el = this.panels[i];
            el.updateElementCss(reNew);
        }
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "progressText", {
        get: function () {
            var rangeMax = this.panelCount;
            return this.getLocalizationFormatString("panelDynamicProgressText", this.currentIndex + 1, rangeMax);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "progress", {
        get: function () {
            return ((this.currentIndex + 1) / this.panelCount) * 100 + "%";
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.getRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]().append(_super.prototype.getRootCss.call(this)).append(this.cssClasses.empty, this.getShowNoEntriesPlaceholder()).toString();
    };
    QuestionPanelDynamicModel.prototype.getPanelWrapperCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
            .append(this.cssClasses.panelWrapper)
            .append(this.cssClasses.panelWrapperInRow, this.panelRemoveButtonLocation === "right")
            .toString();
    };
    QuestionPanelDynamicModel.prototype.getPanelRemoveButtonCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
            .append(this.cssClasses.button)
            .append(this.cssClasses.buttonRemove)
            .append(this.cssClasses.buttonRemoveRight, this.panelRemoveButtonLocation === "right")
            .toString();
    };
    QuestionPanelDynamicModel.prototype.getAddButtonCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
            .append(this.cssClasses.button)
            .append(this.cssClasses.buttonAdd)
            .append(this.cssClasses.buttonAdd + "--list-mode", this.renderMode === "list")
            .toString();
    };
    QuestionPanelDynamicModel.prototype.getPrevButtonCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
            .append(this.cssClasses.buttonPrev)
            .append(this.cssClasses.buttonPrevDisabled, !this.isPrevButtonVisible)
            .toString();
    };
    QuestionPanelDynamicModel.prototype.getNextButtonCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_9__["CssClassBuilder"]()
            .append(this.cssClasses.buttonNext)
            .append(this.cssClasses.buttonNextDisabled, !this.isNextButtonVisible)
            .toString();
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "noEntriesText", {
        /**
         * A text displayed when Dynamic Panel contains no entries. Applies only in the Default V2 theme.
         */
        get: function () {
            return this.getLocalizableStringText("noEntriesText");
        },
        set: function (val) {
            this.setLocalizableStringText("noEntriesText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "locNoEntriesText", {
        get: function () {
            return this.getLocalizableString("noEntriesText");
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.getShowNoEntriesPlaceholder = function () {
        return !!this.cssClasses.noEntriesPlaceholder && !this.isDesignMode && this.panelCount === 0;
    };
    QuestionPanelDynamicModel.prototype.needResponsiveWidth = function () {
        var panel = this.getPanel();
        if (!!panel && panel.needResponsiveWidth())
            return true;
        return false;
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "footerToolbar", {
        get: function () {
            if (!this.footerToolbarValue) {
                this.initFooterToolbar();
            }
            return this.footerToolbarValue;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.prototype.updateFooterActions = function () {
        if (!!this.updateFooterActionsCallback) {
            this.updateFooterActionsCallback();
        }
    };
    QuestionPanelDynamicModel.prototype.initFooterToolbar = function () {
        var _this = this;
        this.footerToolbarValue = this.createActionContainer();
        var items = [];
        var prevTextBtn = new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
            id: "sv-pd-prev-btn",
            title: this.panelPrevText,
            action: function () {
                _this.goToPrevPanel();
            }
        });
        var nextTextBtn = new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
            id: "sv-pd-next-btn",
            title: this.panelNextText,
            action: function () {
                _this.goToNextPanel();
            }
        });
        var addBtn = new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
            id: "sv-pd-add-btn",
            component: "sv-paneldynamic-add-btn",
            visible: new _base__WEBPACK_IMPORTED_MODULE_11__["ComputedUpdater"](function () { return _this.canAddPanel; }),
            data: { question: this }
        });
        var prevBtnIcon = new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
            id: "sv-prev-btn-icon",
            component: "sv-paneldynamic-prev-btn",
            data: { question: this }
        });
        var progressText = new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
            id: "sv-pd-progress-text",
            component: "sv-paneldynamic-progress-text",
            data: { question: this }
        });
        var nextBtnIcon = new _actions_action__WEBPACK_IMPORTED_MODULE_10__["Action"]({
            id: "sv-pd-next-btn-icon",
            component: "sv-paneldynamic-next-btn",
            data: { question: this }
        });
        items.push(prevTextBtn, nextTextBtn, addBtn, prevBtnIcon, progressText, nextBtnIcon);
        this.updateFooterActionsCallback = function () {
            var isLegacyNavigation = _this.legacyNavigation;
            var isRenderModeList = _this.isRenderModeList;
            var isMobile = _this.isMobile;
            var showNavigation = !isLegacyNavigation && !isRenderModeList;
            prevTextBtn.visible = showNavigation && _this.currentIndex > 0;
            nextTextBtn.visible = showNavigation && _this.currentIndex < _this.panelCount - 1;
            nextTextBtn.needSpace = isMobile && nextTextBtn.visible && prevTextBtn.visible;
            addBtn.needSpace = _this.isMobile && !nextTextBtn.visible && prevTextBtn.visible;
            progressText.visible = !_this.isRenderModeList && !isMobile;
            progressText.needSpace = !isLegacyNavigation && !_this.isMobile;
            var showLegacyNavigation = isLegacyNavigation && !isRenderModeList;
            prevBtnIcon.visible = showLegacyNavigation;
            nextBtnIcon.visible = showLegacyNavigation;
            prevBtnIcon.needSpace = showLegacyNavigation;
        };
        this.updateFooterActionsCallback();
        this.footerToolbarValue.setItems(items);
    };
    Object.defineProperty(QuestionPanelDynamicModel.prototype, "showLegacyNavigation", {
        get: function () {
            return !this.isDefaultV2Theme;
        },
        enumerable: false,
        configurable: true
    });
    QuestionPanelDynamicModel.maxCheckCount = 3;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_4__["property"])({ defaultValue: false, onSet: function (_, target) { target.updateFooterActions(); } })
    ], QuestionPanelDynamicModel.prototype, "legacyNavigation", void 0);
    return QuestionPanelDynamicModel;
}(_question__WEBPACK_IMPORTED_MODULE_3__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_4__["Serializer"].addClass("paneldynamic", [
    { name: "showCommentArea:switch", layout: "row", visible: true, category: "general" },
    {
        name: "templateElements",
        alternativeName: "questions",
        baseClassName: "question",
        visible: false,
        isLightSerializable: false
    },
    { name: "templateTitle:text", serializationProperty: "locTemplateTitle" },
    {
        name: "templateDescription:text",
        serializationProperty: "locTemplateDescription",
    },
    { name: "minWidth", defaultFunc: function () { return "auto"; } },
    { name: "noEntriesText:text", serializationProperty: "locNoEntriesText" },
    { name: "allowAddPanel:boolean", default: true },
    { name: "allowRemovePanel:boolean", default: true },
    {
        name: "panelCount:number",
        isBindable: true,
        default: 0,
        choices: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    },
    { name: "minPanelCount:number", default: 0, minValue: 0 },
    {
        name: "maxPanelCount:number",
        default: _settings__WEBPACK_IMPORTED_MODULE_7__["settings"].panelMaximumPanelCount,
    },
    "defaultPanelValue:panelvalue",
    "defaultValueFromLastPanel:boolean",
    {
        name: "panelsState",
        default: "default",
        choices: ["default", "collapsed", "expanded", "firstExpanded"],
    },
    { name: "keyName" },
    {
        name: "keyDuplicationError",
        serializationProperty: "locKeyDuplicationError",
    },
    { name: "confirmDelete:boolean" },
    {
        name: "confirmDeleteText",
        serializationProperty: "locConfirmDeleteText",
    },
    { name: "panelAddText", serializationProperty: "locPanelAddText" },
    { name: "panelRemoveText", serializationProperty: "locPanelRemoveText" },
    { name: "panelPrevText", serializationProperty: "locPanelPrevText" },
    { name: "panelNextText", serializationProperty: "locPanelNextText" },
    {
        name: "showQuestionNumbers",
        default: "off",
        choices: ["off", "onPanel", "onSurvey"],
    },
    { name: "showRangeInProgress:boolean", default: true },
    {
        name: "renderMode",
        default: "list",
        choices: ["list", "progressTop", "progressBottom", "progressTopBottom"],
    },
    {
        name: "templateTitleLocation",
        default: "default",
        choices: ["default", "top", "bottom", "left"],
    },
    {
        name: "panelRemoveButtonLocation",
        default: "bottom",
        choices: ["bottom", "right"],
    },
], function () {
    return new QuestionPanelDynamicModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_5__["QuestionFactory"].Instance.registerQuestion("paneldynamic", function (name) {
    return new QuestionPanelDynamicModel(name);
});


/***/ }),

/***/ "./src/question_radiogroup.ts":
/*!************************************!*\
  !*** ./src/question_radiogroup.ts ***!
  \************************************/
/*! exports provided: QuestionRadiogroupModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionRadiogroupModel", function() { return QuestionRadiogroupModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_baseselect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question_baseselect */ "./src/question_baseselect.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base */ "./src/base.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * A class that describes the Radiogroup question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-radiogroup/ (linkStyle))
 */
var QuestionRadiogroupModel = /** @class */ (function (_super) {
    __extends(QuestionRadiogroupModel, _super);
    function QuestionRadiogroupModel(name) {
        return _super.call(this, name) || this;
    }
    QuestionRadiogroupModel.prototype.getDefaultItemComponent = function () {
        return "survey-radiogroup-item";
    };
    QuestionRadiogroupModel.prototype.getType = function () {
        return "radiogroup";
    };
    Object.defineProperty(QuestionRadiogroupModel.prototype, "ariaRole", {
        get: function () {
            return "radiogroup";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRadiogroupModel.prototype, "titleAriaLabel", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    QuestionRadiogroupModel.prototype.getFirstInputElementId = function () {
        return this.inputId + "_0";
    };
    Object.defineProperty(QuestionRadiogroupModel.prototype, "selectedItem", {
        /**
         * Returns the selected choice item. If no item is selected, returns `null`.
         */
        get: function () {
            var selectedItemValues = this.selectedItemValues;
            if (this.isEmpty())
                return null;
            var itemValue = _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"].getItemByValue(this.visibleChoices, this.value);
            if (!itemValue && !selectedItemValues) {
                this.updateSelectedItemValues();
            }
            return itemValue || selectedItemValues || new _itemvalue__WEBPACK_IMPORTED_MODULE_3__["ItemValue"](this.value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRadiogroupModel.prototype, "showClearButton", {
        /**
         * Specifies whether to display a button that clears the question value.
         *
         * Default value: `false`
         */
        get: function () {
            return this.getPropertyValue("showClearButton");
        },
        set: function (val) {
            this.setPropertyValue("showClearButton", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRadiogroupModel.prototype, "canShowClearButton", {
        get: function () {
            return this.showClearButton && !this.isReadOnly;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRadiogroupModel.prototype, "clearButtonCaption", {
        get: function () {
            return this.getLocalizationString("clearCaption");
        },
        enumerable: false,
        configurable: true
    });
    QuestionRadiogroupModel.prototype.supportGoNextPageAutomatic = function () {
        return true;
    };
    Object.defineProperty(QuestionRadiogroupModel.prototype, "showClearButtonInContent", {
        get: function () {
            return !this.isDefaultV2Theme && this.canShowClearButton;
        },
        enumerable: false,
        configurable: true
    });
    QuestionRadiogroupModel.prototype.clickItemHandler = function (item) {
        this.renderedValue = item.value;
    };
    QuestionRadiogroupModel.prototype.getDefaultTitleActions = function () {
        var _this = this;
        var actions = [];
        if (this.isDefaultV2Theme && !this.isDesignMode) {
            var clearAction = new _actions_action__WEBPACK_IMPORTED_MODULE_4__["Action"]({
                title: this.clearButtonCaption,
                id: "sv-clr-btn-" + this.id,
                action: function () { _this.clearValue(); },
                innerCss: this.cssClasses.clearButton,
                visible: new _base__WEBPACK_IMPORTED_MODULE_5__["ComputedUpdater"](function () { return _this.canShowClearButton; })
            });
            actions.push(clearAction);
        }
        return actions;
    };
    return QuestionRadiogroupModel;
}(_question_baseselect__WEBPACK_IMPORTED_MODULE_2__["QuestionCheckboxBase"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("radiogroup", [{ name: "showClearButton:boolean", default: false },
    { name: "separateSpecialChoices", visible: true },
    { name: "itemComponent", visible: false, default: "survey-radiogroup-item" }
], function () {
    return new QuestionRadiogroupModel("");
}, "checkboxbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("radiogroup", function (name) {
    var q = new QuestionRadiogroupModel(name);
    q.choices = _questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].DefaultChoices;
    return q;
});


/***/ }),

/***/ "./src/question_ranking.ts":
/*!*********************************!*\
  !*** ./src/question_ranking.ts ***!
  \*********************************/
/*! exports provided: QuestionRankingModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionRankingModel", function() { return QuestionRankingModel; });
/* harmony import */ var _dragdrop_ranking_choices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dragdrop/ranking-choices */ "./src/dragdrop/ranking-choices.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question_checkbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./question_checkbox */ "./src/question_checkbox.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _utils_devices__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/devices */ "./src/utils/devices.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _src_settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../src/settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








/**
 * A class that describes the Ranking question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-ranking/ (linkStyle))
 */
var QuestionRankingModel = /** @class */ (function (_super) {
    __extends(QuestionRankingModel, _super);
    function QuestionRankingModel(name) {
        var _this = _super.call(this, name) || this;
        _this.domNode = null;
        _this.onVisibleChoicesChanged = function () {
            _super.prototype.onVisibleChoicesChanged.call(_this);
            // ranking question with only one choice doesn't make sense
            if (_this.visibleChoices.length === 1) {
                _this.value = [];
                _this.updateRankingChoices();
                return;
            }
            if (_this.isEmpty()) {
                _this.updateRankingChoices();
                return;
            }
            if (_this.visibleChoices.length > _this.value.length)
                _this.addToValueByVisibleChoices();
            if (_this.visibleChoices.length < _this.value.length)
                _this.removeFromValueByVisibleChoices();
            _this.updateRankingChoices();
        };
        _this.localeChanged = function () {
            _super.prototype.localeChanged.call(_this);
            _this.updateRankingChoices();
        };
        _this.handlePointerDown = function (event, choice, node) {
            var target = event.target;
            if (!_this.isDragStartNodeValid(target))
                return;
            if (_this.allowStartDrag) {
                _this.dragDropRankingChoices.startDrag(event, choice, _this, node);
            }
        };
        _this.handleKeydown = function (event, choice) {
            if (!_this.isDesignMode) {
                var key = event.key;
                var index = _this.rankingChoices.indexOf(choice);
                if (key === "ArrowUp" && index) {
                    _this.handleArrowUp(index, choice);
                    event.preventDefault();
                }
                if (key === "ArrowDown" && index !== _this.rankingChoices.length - 1) {
                    _this.handleArrowDown(index, choice);
                    event.preventDefault();
                }
            }
        };
        _this.handleArrowUp = function (index, choice) {
            var choices = _this.rankingChoices;
            choices.splice(index, 1);
            choices.splice(index - 1, 0, choice);
            _this.setValue();
            setTimeout(function () {
                _this.focusItem(index - 1);
            }, 1);
        };
        _this.handleArrowDown = function (index, choice) {
            var choices = _this.rankingChoices;
            choices.splice(index, 1);
            choices.splice(index + 1, 0, choice);
            _this.setValue();
            setTimeout(function () {
                _this.focusItem(index + 1);
            }, 1);
        };
        _this.focusItem = function (index) {
            var itemsNodes = _this.domNode.querySelectorAll("." + _this.cssClasses.item);
            itemsNodes[index].focus();
        };
        _this.setValue = function () {
            var value = [];
            _this.rankingChoices.forEach(function (choice) {
                value.push(choice.value);
            });
            _this.value = value;
        };
        _this.createNewArray("rankingChoices");
        return _this;
    }
    QuestionRankingModel.prototype.getDefaultItemComponent = function () {
        return "";
    };
    QuestionRankingModel.prototype.getType = function () {
        return "ranking";
    };
    QuestionRankingModel.prototype.getItemTabIndex = function (item) {
        return this.isDesignMode ? undefined : 0;
    };
    Object.defineProperty(QuestionRankingModel.prototype, "rootClass", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
                .append(this.cssClasses.root)
                .append(this.cssClasses.rootMobileMod, _utils_devices__WEBPACK_IMPORTED_MODULE_5__["IsMobile"])
                .append(this.cssClasses.rootDisabled, this.isReadOnly)
                .append(this.cssClasses.rootDesignMode, !!this.isDesignMode)
                .append(this.cssClasses.itemOnError, this.errors.length > 0)
                .append(this.cssClasses.rootDragHandleAreaIcon, _src_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].rankingDragHandleArea === "icon")
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    QuestionRankingModel.prototype.getItemClassCore = function (item, options) {
        var itemIndex = this.rankingChoices.indexOf(item);
        var dropTargetIndex = this.rankingChoices.indexOf(this.currentDropTarget);
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(_super.prototype.getItemClassCore.call(this, item, options))
            .append(this.cssClasses.itemGhostMod, this.currentDropTarget === item)
            .append("sv-dragdrop-movedown", itemIndex === dropTargetIndex + 1 && this.dropTargetNodeMove === "down")
            .append("sv-dragdrop-moveup", itemIndex === dropTargetIndex - 1 && this.dropTargetNodeMove === "up")
            .toString();
    };
    QuestionRankingModel.prototype.isItemCurrentDropTarget = function (item) {
        return this.dragDropRankingChoices.dropTarget === item;
    };
    Object.defineProperty(QuestionRankingModel.prototype, "ghostPositionCssClass", {
        get: function () {
            if (this.ghostPosition === "top")
                return this.cssClasses.dragDropGhostPositionTop;
            if (this.ghostPosition === "bottom")
                return this.cssClasses.dragDropGhostPositionBottom;
            return "";
        },
        enumerable: false,
        configurable: true
    });
    QuestionRankingModel.prototype.getItemIndexClasses = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(this.cssClasses.itemIndex)
            .append(this.cssClasses.itemIndexEmptyMode, this.isEmpty())
            .toString();
    };
    QuestionRankingModel.prototype.getNumberByIndex = function (index) {
        return this.isEmpty() ? "" : index + 1 + "";
    };
    QuestionRankingModel.prototype.setSurveyImpl = function (value, isLight) {
        _super.prototype.setSurveyImpl.call(this, value, isLight);
        this.updateRankingChoices();
    };
    QuestionRankingModel.prototype.isAnswerCorrect = function () {
        return _helpers__WEBPACK_IMPORTED_MODULE_6__["Helpers"].isArraysEqual(this.value, this.correctAnswer, false);
    };
    QuestionRankingModel.prototype.onSurveyValueChanged = function (newValue) {
        _super.prototype.onSurveyValueChanged.call(this, newValue);
        if (this.isLoadingFromJson)
            return;
        this.updateRankingChoices();
    };
    QuestionRankingModel.prototype.addToValueByVisibleChoices = function () {
        var newValue = this.value.slice();
        this.visibleChoices.forEach(function (choice) {
            if (newValue.indexOf(choice.value) === -1) {
                newValue.push(choice.value);
            }
        });
        this.value = newValue;
    };
    QuestionRankingModel.prototype.removeFromValueByVisibleChoices = function () {
        var _this = this;
        var newValue = this.value.slice();
        this.value.forEach(function (valueItem, index) {
            var isValueItemToRemove = true;
            _this.visibleChoices.forEach(function (choice) {
                if (choice.value === valueItem)
                    isValueItemToRemove = false;
            });
            isValueItemToRemove && newValue.splice(index, 1);
        });
        this.value = newValue;
    };
    Object.defineProperty(QuestionRankingModel.prototype, "rankingChoices", {
        get: function () {
            return this.getPropertyValue("rankingChoices", []);
        },
        enumerable: false,
        configurable: true
    });
    QuestionRankingModel.prototype.updateRankingChoices = function (forceUpdate) {
        var _this = this;
        if (forceUpdate === void 0) { forceUpdate = false; }
        var newRankingChoices = [];
        // ranking question with only one choice doesn't make sense
        if (this.visibleChoices.length === 1) {
            this.setPropertyValue("rankingChoices", newRankingChoices);
            return;
        }
        if (forceUpdate)
            this.setPropertyValue("rankingChoices", []);
        if (this.isEmpty()) {
            this.setPropertyValue("rankingChoices", this.visibleChoices);
            return;
        }
        this.value.forEach(function (valueItem) {
            _this.visibleChoices.forEach(function (choice) {
                if (choice.value === valueItem)
                    newRankingChoices.push(choice);
            });
        });
        this.setPropertyValue("rankingChoices", newRankingChoices);
    };
    QuestionRankingModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.dragDropRankingChoices = new _dragdrop_ranking_choices__WEBPACK_IMPORTED_MODULE_0__["DragDropRankingChoices"](this.survey, null, this.longTap);
    };
    QuestionRankingModel.prototype.isDragStartNodeValid = function (target) {
        if (_src_settings__WEBPACK_IMPORTED_MODULE_7__["settings"].rankingDragHandleArea === "icon") {
            return target.classList.contains(this.cssClasses.itemIconHoverMod);
        }
        return true;
    };
    Object.defineProperty(QuestionRankingModel.prototype, "allowStartDrag", {
        get: function () {
            return !this.isReadOnly && !this.isDesignMode;
        },
        enumerable: false,
        configurable: true
    });
    //cross framework initialization
    QuestionRankingModel.prototype.afterRenderQuestionElement = function (el) {
        this.domNode = el;
        _super.prototype.afterRenderQuestionElement.call(this, el);
    };
    //cross framework destroy
    QuestionRankingModel.prototype.beforeDestroyQuestionElement = function (el) {
        _super.prototype.beforeDestroyQuestionElement.call(this, el);
    };
    QuestionRankingModel.prototype.supportSelectAll = function () {
        return false;
    };
    QuestionRankingModel.prototype.supportOther = function () {
        return false;
    };
    QuestionRankingModel.prototype.supportNone = function () {
        return false;
    };
    QuestionRankingModel.prototype.getIconHoverCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(this.cssClasses.itemIcon)
            .append(this.cssClasses.itemIconHoverMod)
            .toString();
    };
    QuestionRankingModel.prototype.getIconFocusCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(this.cssClasses.itemIcon)
            .append(this.cssClasses.itemIconFocusMod)
            .toString();
    };
    Object.defineProperty(QuestionRankingModel.prototype, "longTap", {
        /**
         * Specifies whether to use a long tap (press and hold) gesture to start dragging.
         *
         * Default value: `true`
         *
         * Disable this property if you want to start dragging when users perform a scroll gesture.
        */
        get: function () {
            return this.getPropertyValue("longTap");
        },
        set: function (val) {
            this.setPropertyValue("longTap", val);
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: null })
    ], QuestionRankingModel.prototype, "currentDropTarget", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: null })
    ], QuestionRankingModel.prototype, "dropTargetNodeMove", void 0);
    return QuestionRankingModel;
}(_question_checkbox__WEBPACK_IMPORTED_MODULE_3__["QuestionCheckboxModel"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("ranking", [
    { name: "showOtherItem", visible: false, isSerializable: false },
    { name: "otherText", visible: false, isSerializable: false },
    { name: "otherErrorText", visible: false, isSerializable: false },
    { name: "storeOthersAsComment", visible: false, isSerializable: false },
    { name: "showNoneItem", visible: false, isSerializable: false },
    { name: "noneText", visible: false, isSerializable: false },
    { name: "showSelectAllItem", visible: false, isSerializable: false },
    { name: "selectAllText", visible: false, isSerializable: false },
    { name: "colCount:number", visible: false, isSerializable: false },
    { name: "maxSelectedChoices", visible: false, isSerializable: false },
    { name: "separateSpecialChoices", visible: false, isSerializable: false },
    {
        name: "longTap",
        default: true,
        visible: false,
        isSerializable: false,
    },
    { name: "itemComponent", visible: false, default: "" }
], function () {
    return new QuestionRankingModel("");
}, "checkbox");
_questionfactory__WEBPACK_IMPORTED_MODULE_2__["QuestionFactory"].Instance.registerQuestion("ranking", function (name) {
    var q = new QuestionRankingModel(name);
    q.choices = _questionfactory__WEBPACK_IMPORTED_MODULE_2__["QuestionFactory"].DefaultChoices;
    return q;
});


/***/ }),

/***/ "./src/question_rating.ts":
/*!********************************!*\
  !*** ./src/question_rating.ts ***!
  \********************************/
/*! exports provided: RenderedRatingItem, QuestionRatingModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderedRatingItem", function() { return RenderedRatingItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionRatingModel", function() { return QuestionRatingModel; });
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









var RenderedRatingItem = /** @class */ (function (_super) {
    __extends(RenderedRatingItem, _super);
    function RenderedRatingItem(itemValue, locString) {
        if (locString === void 0) { locString = null; }
        var _this = _super.call(this) || this;
        _this.itemValue = itemValue;
        _this.locString = locString;
        return _this;
    }
    Object.defineProperty(RenderedRatingItem.prototype, "value", {
        get: function () {
            return this.itemValue.getPropertyValue("value");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RenderedRatingItem.prototype, "locText", {
        get: function () {
            return this.locString || this.itemValue.locText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RenderedRatingItem.prototype, "text", {
        get: function () {
            return this.itemValue.text;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "" })
    ], RenderedRatingItem.prototype, "highlight", void 0);
    return RenderedRatingItem;
}(_base__WEBPACK_IMPORTED_MODULE_7__["Base"]));

/**
 * A Model for a rating question.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-rating/ (linkStyle))
 */
var QuestionRatingModel = /** @class */ (function (_super) {
    __extends(QuestionRatingModel, _super);
    function QuestionRatingModel(name) {
        var _this = _super.call(this, name) || this;
        _this.createItemValues("rateValues");
        _this.createRenderedRateItems();
        _this.createLocalizableString("ratingOptionsCaption", _this, false, true);
        _this.registerFunctionOnPropertiesValueChanged(["rateValues", "rateMin", "rateMax",
            "minRateDescription", "maxRateDescription", "rateStep", "displayRateDescriptionsAsExtremeItems"], function () { return _this.createRenderedRateItems(); });
        _this.createLocalizableString("minRateDescription", _this, true);
        _this.createLocalizableString("maxRateDescription", _this, true);
        return _this;
    }
    QuestionRatingModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.hasMinRateDescription = !!this.minRateDescription;
        this.hasMaxRateDescription = !!this.maxRateDescription;
        this.createRenderedRateItems();
    };
    Object.defineProperty(QuestionRatingModel.prototype, "rateValues", {
        /**
         * A list of rate values.
         *
         * This property accepts an array of objects with the following structure:
         *
         * ```js
         * {
         *   "value": any, // A value to be saved in survey results
         *   "text": String, // A display text. This property supports Markdown. When `text` is undefined, `value` is used.
         *   "customProperty": any // Any property that you find useful.
         * }
         * ```
         *
         * If you add custom properties, refer to the following help topic to learn how to serialize them into JSON: [Add Custom Properties to Property Grid](https://surveyjs.io/survey-creator/documentation/property-grid#add-custom-properties-to-the-property-grid).
         *
         * To enable Markdown support for the `text` property, implement Markdown-to-HTML conversion in the [onTextMarkdown](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onTextMarkdown) event handler. For an example, refer to the following demo: [Convert Markdown to HTML with Showdown](https://surveyjs.io/form-library/examples/edit-survey-questions-markdown/).
         *
         * If you need to specify only the `value` property, you can set the `rateValues` property to an array of numbers, for example, `[ 3, 6, 10 ]`. These values are both saved in survey results and used as display text.
         *
         * If you do not specify the `rateValues` property, rate values are generated automatically based upon the `rateMin`, `rateMax`, and `rateStep` property values.
         * @see rateMin
         * @see rateMax
         * @see rateStep
         */
        get: function () {
            return this.getPropertyValue("rateValues");
        },
        set: function (val) {
            this.setPropertyValue("rateValues", val);
            this.createRenderedRateItems();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "rateMin", {
        /**
         * Specifies the first rate value in the generated sequence of rate values. Applies if the `rateValues` array is empty.
         *
         * Default value: 1
         * @see rateValues
         * @see rateMax
         * @see rateStep
         */
        get: function () {
            return this.getPropertyValue("rateMin");
        },
        set: function (val) {
            this.setPropertyValue("rateMin", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "rateMax", {
        /**
         * Specifies the last rate value in the generated sequence of rate values. Applies if the `rateValues` array is empty.
         *
         * Default value: 5
         * @see rateValues
         * @see rateMin
         * @see rateStep
         */
        get: function () {
            return this.getPropertyValue("rateMax");
        },
        set: function (val) {
            this.setPropertyValue("rateMax", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "rateStep", {
        /**
         * Specifies a step with which to generate rate values. Applies if the `rateValues` array is empty.
         *
         * Default value: 1
         * @see rateValues
         * @see rateMin
         * @see rateMax
         */
        get: function () {
            return this.getPropertyValue("rateStep");
        },
        set: function (val) {
            this.setPropertyValue("rateStep", val);
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.getDisplayValueCore = function (keysAsText, value) {
        var res = _itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].getTextOrHtmlByValue(this.visibleRateValues, value);
        return !!res ? res : value;
    };
    Object.defineProperty(QuestionRatingModel.prototype, "visibleRateValues", {
        get: function () {
            return this.renderedRateItems.map(function (i) { return i.itemValue; });
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.itemValuePropertyChanged = function (item, name, oldValue, newValue) {
        if (this.rateValues.length === 0 && newValue !== undefined)
            this.setPropertyValue("rateValues", this.visibleRateValues);
        _super.prototype.itemValuePropertyChanged.call(this, item, name, oldValue, newValue);
    };
    QuestionRatingModel.prototype.createRenderedRateItems = function () {
        var _this = this;
        var rateValues = [];
        if (this.rateValues.length > 0) {
            rateValues = this.rateValues;
        }
        else {
            var res = [];
            var value = this.rateMin;
            var step = this.rateStep;
            while (value <= this.rateMax &&
                res.length < _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].ratingMaximumRateValueCount) {
                var item = new _itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"](value);
                item.locOwner = this;
                item.ownerPropertyName = "rateValues";
                res.push(item);
                value = this.correctValue(value + step, step);
            }
            rateValues = res;
        }
        this.renderedRateItems = rateValues.map(function (v, i) {
            if (_this.displayRateDescriptionsAsExtremeItems) {
                if (i == 0)
                    return new RenderedRatingItem(v, _this.minRateDescription && _this.locMinRateDescription || v.locText);
                if (i == rateValues.length - 1)
                    return new RenderedRatingItem(v, _this.maxRateDescription && _this.locMaxRateDescription || v.locText);
            }
            return new RenderedRatingItem(v);
        });
    };
    QuestionRatingModel.prototype.correctValue = function (value, step) {
        if (!value)
            return value;
        if (Math.round(value) == value)
            return value;
        var fr = 0;
        while (Math.round(step) != step) {
            step *= 10;
            fr++;
        }
        return parseFloat(value.toFixed(fr));
    };
    QuestionRatingModel.prototype.getType = function () {
        return "rating";
    };
    QuestionRatingModel.prototype.getFirstInputElementId = function () {
        return this.inputId + "_0";
    };
    QuestionRatingModel.prototype.getInputId = function (index) {
        return this.inputId + "_" + index;
    };
    QuestionRatingModel.prototype.supportGoNextPageAutomatic = function () {
        return true;
    };
    QuestionRatingModel.prototype.supportOther = function () {
        return false;
    };
    Object.defineProperty(QuestionRatingModel.prototype, "minRateDescription", {
        /**
         * Specifies a description for the minimum (first) rate value.
         * @see rateValues
         * @see rateMin
         * @see displayRateDescriptionsAsExtremeItems
         */
        get: function () {
            return this.getLocalizableStringText("minRateDescription");
        },
        set: function (val) {
            this.setLocalizableStringText("minRateDescription", val);
            this.hasMinRateDescription = !!this.minRateDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "locMinRateDescription", {
        get: function () {
            return this.getLocalizableString("minRateDescription");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "maxRateDescription", {
        /**
         * Specifies a description for the maximum (last) rate value.
         * @see rateValues
         * @see rateMax
         * @see displayRateDescriptionsAsExtremeItems
         */
        get: function () {
            return this.getLocalizableStringText("maxRateDescription");
        },
        set: function (val) {
            this.setLocalizableStringText("maxRateDescription", val);
            this.hasMaxRateDescription = !!this.maxRateDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "locMaxRateDescription", {
        get: function () {
            return this.getLocalizableString("maxRateDescription");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "hasMinLabel", {
        get: function () {
            return !this.displayRateDescriptionsAsExtremeItems && !!this.hasMinRateDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "hasMaxLabel", {
        get: function () {
            return !this.displayRateDescriptionsAsExtremeItems && !!this.hasMaxRateDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "isStar", {
        get: function () {
            return this.rateType == "stars";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "itemComponentName", {
        get: function () {
            if (this.isStar)
                return "sv-rating-item-star";
            return "sv-rating-item";
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.valueToData = function (val) {
        if (this.rateValues.length > 0) {
            var item = _itemvalue__WEBPACK_IMPORTED_MODULE_0__["ItemValue"].getItemByValue(this.rateValues, val);
            return !!item ? item.value : val;
        }
        return !isNaN(val) ? parseFloat(val) : val;
    };
    QuestionRatingModel.prototype.setValueFromClick = function (value) {
        if (this.value === parseFloat(value)) {
            this.clearValue();
        }
        else {
            this.value = value;
        }
    };
    QuestionRatingModel.prototype.onItemMouseIn = function (item) {
        if (this.isReadOnly || !item.itemValue.isEnabled)
            return;
        var high = true;
        var selected = this.value != null;
        for (var i = 0; i < this.renderedRateItems.length; i++) {
            this.renderedRateItems[i].highlight = high && !selected && "highlighted" || !high && selected && "unhighlighted" || "none";
            if (this.renderedRateItems[i] == item)
                high = false;
            if (this.renderedRateItems[i].itemValue.value == this.value)
                selected = false;
        }
    };
    QuestionRatingModel.prototype.onItemMouseOut = function (item) {
        this.renderedRateItems.forEach(function (item) { return item.highlight = "none"; });
    };
    Object.defineProperty(QuestionRatingModel.prototype, "ratingRootCss", {
        get: function () {
            return ((this.displayMode == "buttons" || (!!this.survey && this.survey.isDesignMode)) && this.cssClasses.rootWrappable) ?
                this.cssClasses.rootWrappable : this.cssClasses.root;
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.getItemClass = function (item, highlight) {
        if (highlight === void 0) { highlight = "none"; }
        var isSelected = this.isStar ? this.value >= item.value : this.value == item.value;
        var isDisabled = this.isReadOnly || !item.isEnabled;
        var allowHover = !isDisabled && (this.value != item.value) && !(!!this.survey && this.survey.isDesignMode);
        var renderedItem = this.renderedRateItems.filter(function (i) { return i.itemValue == item; })[0];
        var isHighlighted = this.isStar && (renderedItem === null || renderedItem === void 0 ? void 0 : renderedItem.highlight) == "highlighted";
        var isUnhighlighted = this.isStar && (renderedItem === null || renderedItem === void 0 ? void 0 : renderedItem.highlight) == "unhighlighted";
        var itemClass = this.cssClasses.item;
        var itemSelectedClass = this.cssClasses.selected;
        var itemDisabledClass = this.cssClasses.itemDisabled;
        var itemHoverClass = this.cssClasses.itemHover;
        var itemitemOnErrorClass = this.cssClasses.itemOnError;
        var itemHighlightedClass = null;
        var itemUnhighlightedClass = null;
        if (this.isStar) {
            itemClass = this.cssClasses.itemStar;
            itemSelectedClass = this.cssClasses.itemStarSelected;
            itemDisabledClass = this.cssClasses.itemStarDisabled;
            itemHoverClass = this.cssClasses.itemStarHover;
            itemitemOnErrorClass = this.cssClasses.itemStarOnError;
            itemHighlightedClass = this.cssClasses.itemStarHighlighted;
            itemUnhighlightedClass = this.cssClasses.itemStarUnhighlighted;
        }
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_6__["CssClassBuilder"]()
            .append(itemClass)
            .append(itemSelectedClass, isSelected)
            .append(itemDisabledClass, this.isReadOnly)
            .append(itemHoverClass, allowHover)
            .append(itemHighlightedClass, isHighlighted)
            .append(itemUnhighlightedClass, isUnhighlighted)
            .append(itemitemOnErrorClass, this.errors.length > 0)
            .toString();
    };
    //methods for mobile view
    QuestionRatingModel.prototype.getControlClass = function () {
        this.isEmpty();
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_6__["CssClassBuilder"]()
            .append(this.cssClasses.control)
            .append(this.cssClasses.controlEmpty, this.isEmpty())
            .append(this.cssClasses.onError, this.errors.length > 0)
            .append(this.cssClasses.controlDisabled, this.isReadOnly)
            .toString();
    };
    Object.defineProperty(QuestionRatingModel.prototype, "placeholder", {
        get: function () {
            return this.getLocalizableStringText("ratingOptionsCaption");
        },
        set: function (val) {
            this.setLocalizableStringText("ratingOptionsCaption", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "locPlaceholder", {
        get: function () {
            return this.getLocalizableString("ratingOptionsCaption");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "allowClear", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "searchEnabled", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "renderedValue", {
        get: function () {
            return this.value;
        },
        set: function (val) {
            this.value = val;
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.isItemSelected = function (item) {
        return item.value == this.value;
    };
    Object.defineProperty(QuestionRatingModel.prototype, "visibleChoices", {
        get: function () {
            return this.visibleRateValues;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionRatingModel.prototype, "readOnlyText", {
        get: function () {
            return (this.displayValue || this.placeholder);
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.needResponsiveWidth = function () {
        var rateValues = this.getPropertyValue("rateValues");
        var rateStep = this.getPropertyValue("rateStep");
        var rateMax = this.getPropertyValue("rateMax");
        var rateMin = this.getPropertyValue("rateMin");
        return this.displayMode != "dropdown" && !!(this.hasMinRateDescription ||
            this.hasMaxRateDescription ||
            (rateStep && (rateMax - rateMin) / rateStep > 9));
    };
    // TODO: return responsiveness after design improvement
    QuestionRatingModel.prototype.supportResponsiveness = function () {
        return true;
    };
    QuestionRatingModel.prototype.getCompactRenderAs = function () {
        return (this.displayMode == "buttons") ? "default" : "dropdown";
    };
    QuestionRatingModel.prototype.getDesktopRenderAs = function () {
        return (this.displayMode == "dropdown") ? "dropdown" : "default";
    };
    Object.defineProperty(QuestionRatingModel.prototype, "dropdownListModel", {
        get: function () {
            return this.dropdownListModelValue;
        },
        set: function (val) {
            this.dropdownListModelValue = val;
            this.updateElementCss();
        },
        enumerable: false,
        configurable: true
    });
    QuestionRatingModel.prototype.updateCssClasses = function (res, css) {
        _super.prototype.updateCssClasses.call(this, res, css);
        if (!!this.dropdownListModel) {
            var listCssClasses = {};
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["mergeValues"])(css.list, listCssClasses);
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_8__["mergeValues"])(res.list, listCssClasses);
            res["list"] = listCssClasses;
        }
    };
    QuestionRatingModel.prototype.calcCssClasses = function (css) {
        var classes = _super.prototype.calcCssClasses.call(this, css);
        if (this.dropdownListModel) {
            this.dropdownListModel.updateCssClasses(classes.popup, classes.list);
        }
        return classes;
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["propertyArray"])()
    ], QuestionRatingModel.prototype, "renderedRateItems", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: false })
    ], QuestionRatingModel.prototype, "hasMinRateDescription", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: false })
    ], QuestionRatingModel.prototype, "hasMaxRateDescription", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: false })
    ], QuestionRatingModel.prototype, "displayRateDescriptionsAsExtremeItems", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({
            defaultValue: "auto",
            onSet: function (val, target) {
                if (!target.isDesignMode) {
                    if (val === "dropdown") {
                        target.renderAs = "dropdown";
                    }
                    else {
                        target.renderAs = "default";
                    }
                }
            }
        })
    ], QuestionRatingModel.prototype, "displayMode", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "number" })
    ], QuestionRatingModel.prototype, "rateType", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: "monochrome" })
    ], QuestionRatingModel.prototype, "smileysColorMode", void 0);
    return QuestionRatingModel;
}(_question__WEBPACK_IMPORTED_MODULE_1__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("rating", [
    { name: "showCommentArea:switch", layout: "row", visible: true, category: "general" },
    {
        name: "rateValues:itemvalue[]",
        baseValue: function () {
            return _surveyStrings__WEBPACK_IMPORTED_MODULE_5__["surveyLocalization"].getString("choices_Item");
        },
    },
    {
        name: "rateMin:number", default: 1,
        onSettingValue: function (obj, val) {
            return val > obj.rateMax - obj.rateStep ? obj.rateMax - obj.rateStep : val;
        }
    },
    {
        name: "rateMax:number", default: 5,
        onSettingValue: function (obj, val) {
            return val < obj.rateMin + obj.rateStep ? obj.rateMin + obj.rateStep : val;
        }
    },
    {
        name: "rateStep:number", default: 1, minValue: 0.1,
        onSettingValue: function (obj, val) {
            if (val <= 0)
                val = 1;
            if (val > obj.rateMax - obj.rateMin)
                val = obj.rateMax - obj.rateMin;
            return val;
        }
    },
    {
        name: "minRateDescription",
        alternativeName: "mininumRateDescription",
        serializationProperty: "locMinRateDescription",
    },
    {
        name: "maxRateDescription",
        alternativeName: "maximumRateDescription",
        serializationProperty: "locMaxRateDescription",
    },
    { name: "displayRateDescriptionsAsExtremeItems:boolean", default: false },
    {
        name: "displayMode",
        default: "auto",
        choices: ["auto", "buttons", "dropdown"],
    },
    {
        name: "rateType",
        visible: false,
        default: "number",
        choices: ["numbers", "labels", "stars", "smileys"],
    }
], function () {
    return new QuestionRatingModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_3__["QuestionFactory"].Instance.registerQuestion("rating", function (name) {
    return new QuestionRatingModel(name);
});


/***/ }),

/***/ "./src/question_signaturepad.ts":
/*!**************************************!*\
  !*** ./src/question_signaturepad.ts ***!
  \**************************************/
/*! exports provided: QuestionSignaturePadModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionSignaturePadModel", function() { return QuestionSignaturePadModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var signature_pad__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! signature_pad */ "./node_modules/signature_pad/dist/signature_pad.mjs");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var defaultWidth = 300;
var defaultHeight = 200;
function resizeCanvas(canvas) {
    var context = canvas.getContext("2d");
    var devicePixelRatio = window.devicePixelRatio || 1;
    var backingStoreRatio = context.webkitBackingStorePixelRatio ||
        context.mozBackingStorePixelRatio ||
        context.msBackingStorePixelRatio ||
        context.oBackingStorePixelRatio ||
        context.backingStorePixelRatio ||
        1;
    var ratio = devicePixelRatio / backingStoreRatio;
    var oldWidth = canvas.width;
    var oldHeight = canvas.height;
    canvas.width = oldWidth * ratio;
    canvas.height = oldHeight * ratio;
    canvas.style.width = oldWidth + "px";
    canvas.style.height = oldHeight + "px";
    context.scale(ratio, ratio);
}
/**
 * A class that describes the Signature Page question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/signature-pad-widget-javascript/ (linkStyle))
 */
var QuestionSignaturePadModel = /** @class */ (function (_super) {
    __extends(QuestionSignaturePadModel, _super);
    function QuestionSignaturePadModel(name) {
        return _super.call(this, name) || this;
    }
    QuestionSignaturePadModel.prototype.getCssRoot = function (cssClasses) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_4__["CssClassBuilder"]()
            .append(_super.prototype.getCssRoot.call(this, cssClasses))
            .append(cssClasses.small, this.signatureWidth.toString() === "300")
            .toString();
    };
    QuestionSignaturePadModel.prototype.updateValue = function () {
        if (this.signaturePad) {
            var data = this.signaturePad.toDataURL(this.dataFormat);
            this.value = data;
        }
    };
    QuestionSignaturePadModel.prototype.getType = function () {
        return "signaturepad";
    };
    QuestionSignaturePadModel.prototype.afterRenderQuestionElement = function (el) {
        if (!!el) {
            this.initSignaturePad(el);
        }
        _super.prototype.afterRenderQuestionElement.call(this, el);
    };
    QuestionSignaturePadModel.prototype.beforeDestroyQuestionElement = function (el) {
        if (!!el) {
            this.destroySignaturePad(el);
        }
    };
    QuestionSignaturePadModel.prototype.initSignaturePad = function (el) {
        var _this = this;
        var canvas = el.getElementsByTagName("canvas")[0];
        var signaturePad = new signature_pad__WEBPACK_IMPORTED_MODULE_3__["default"](canvas, { backgroundColor: "#ffffff" });
        if (this.isInputReadOnly) {
            signaturePad.off();
        }
        this.readOnlyChangedCallback = function () {
            if (_this.isInputReadOnly) {
                signaturePad.off();
            }
            else {
                signaturePad.on();
            }
        };
        signaturePad.penColor = this.penColor;
        signaturePad.backgroundColor = this.backgroundColor;
        signaturePad.onBegin = function () {
            _this.isDrawingValue = true;
            canvas.focus();
        };
        signaturePad.onEnd = function () {
            _this.isDrawingValue = false;
            _this.updateValue();
        };
        var updateValueHandler = function () {
            var data = _this.value;
            canvas.width = _this.signatureWidth || defaultWidth;
            canvas.height = _this.signatureHeight || defaultHeight;
            resizeCanvas(canvas);
            if (!data) {
                signaturePad.clear();
            }
            else {
                signaturePad.fromDataURL(data);
            }
        };
        updateValueHandler();
        this.readOnlyChangedCallback();
        this.signaturePad = signaturePad;
        var propertyChangedHandler = function (sender, options) {
            if (options.name === "signatureWidth" || options.name === "signatureHeight" || options.name === "value") {
                updateValueHandler();
            }
        };
        this.onPropertyChanged.add(propertyChangedHandler);
        this.signaturePad.propertyChangedHandler = propertyChangedHandler;
    };
    QuestionSignaturePadModel.prototype.destroySignaturePad = function (el) {
        if (this.signaturePad) {
            this.onPropertyChanged.remove(this.signaturePad.propertyChangedHandler);
            this.signaturePad.off();
        }
        this.readOnlyChangedCallback = null;
        this.signaturePad = null;
    };
    Object.defineProperty(QuestionSignaturePadModel.prototype, "signatureWidth", {
        /**
         * Specifies the width of the signature area. Accepts positive integer numbers.
         */
        get: function () {
            return this.getPropertyValue("signatureWidth");
        },
        set: function (val) {
            this.setPropertyValue("signatureWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "signatureHeight", {
        /**
         * Specifies the height of the signature area. Accepts positive integer numbers.
         */
        get: function () {
            return this.getPropertyValue("signatureHeight");
        },
        set: function (val) {
            this.setPropertyValue("signatureHeight", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "height", {
        //todo: need to remove this property
        get: function () {
            return this.getPropertyValue("height");
        },
        set: function (val) {
            this.setPropertyValue("height", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "allowClear", {
        /**
         * Specifies whether to display a button that clears the signature area.
         *
         * Default value: `true`
         */
        get: function () {
            return this.getPropertyValue("allowClear");
        },
        set: function (val) {
            this.setPropertyValue("allowClear", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "canShowClearButton", {
        get: function () {
            return !this.isInputReadOnly && this.allowClear;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "penColor", {
        /**
         * Specifies a color for the pen. Accepts hexadecimal colors (`"#FF0000"`), RGB colors (`"rgb(255,0,0)"`), or color names (`"red"`).
         * @see backgroundColor
         */
        get: function () {
            return this.getPropertyValue("penColor");
        },
        set: function (val) {
            this.setPropertyValue("penColor", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "backgroundColor", {
        /**
         * Specifies a color for the signature area background.  Accepts hexadecimal colors (`"#FF0000"`), RGB colors (`"rgb(255,0,0)"`), or color names (`"red"`).
         * @see penColor
         */
        get: function () {
            return this.getPropertyValue("backgroundColor");
        },
        set: function (val) {
            this.setPropertyValue("backgroundColor", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionSignaturePadModel.prototype, "clearButtonCaption", {
        get: function () {
            return this.getLocalizationString("clearCaption");
        },
        enumerable: false,
        configurable: true
    });
    QuestionSignaturePadModel.prototype.needShowPlaceholder = function () {
        return !this.isDrawingValue && this.isEmpty();
    };
    Object.defineProperty(QuestionSignaturePadModel.prototype, "placeHolderText", {
        get: function () {
            return this.getLocalizationString("signaturePlaceHolder");
        },
        enumerable: false,
        configurable: true
    });
    QuestionSignaturePadModel.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        //todo: need to remove this code
        if (this.signatureWidth === 300 && !!this.width && typeof this.width === "number" && this.width) {
            // eslint-disable-next-line no-console
            console.warn("Use signatureWidth property to set width for the signature pad");
            this.signatureWidth = this.width;
            this.width = undefined;
        }
        if (this.signatureHeight === 200 && !!this.height) {
            // eslint-disable-next-line no-console
            console.warn("Use signatureHeight property to set width for the signature pad");
            this.signatureHeight = this.height;
            this.height = undefined;
        }
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionSignaturePadModel.prototype, "isDrawingValue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: "" })
    ], QuestionSignaturePadModel.prototype, "dataFormat", void 0);
    return QuestionSignaturePadModel;
}(_question__WEBPACK_IMPORTED_MODULE_2__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("signaturepad", [
    {
        name: "signatureWidth:number",
        category: "general",
        default: 300,
    },
    {
        name: "signatureHeight:number",
        category: "general",
        default: 200,
    },
    //need to remove this property
    {
        name: "height:number",
        category: "general",
        visible: false
    },
    {
        name: "allowClear:boolean",
        category: "general",
        default: true,
    },
    {
        name: "penColor:color",
        category: "general",
        default: "#1ab394",
    },
    {
        name: "backgroundColor:color",
        category: "general",
        default: "#ffffff",
    },
    {
        name: "dataFormat",
        category: "general",
        default: "",
        choices: [
            { value: "", text: "PNG" },
            { value: "image/jpeg", text: "JPEG" },
            { value: "image/svg+xml", text: "SVG" },
        ],
    },
    { name: "defaultValue", visible: false },
    { name: "correctAnswer", visible: false },
], function () {
    return new QuestionSignaturePadModel("");
}, "question");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("signaturepad", function (name) {
    return new QuestionSignaturePadModel(name);
});


/***/ }),

/***/ "./src/question_tagbox.ts":
/*!********************************!*\
  !*** ./src/question_tagbox.ts ***!
  \********************************/
/*! exports provided: QuestionTagboxModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionTagboxModel", function() { return QuestionTagboxModel; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _question_checkbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./question_checkbox */ "./src/question_checkbox.ts");
/* harmony import */ var _dropdownMultiSelectListModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dropdownMultiSelectListModel */ "./src/dropdownMultiSelectListModel.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _itemvalue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./itemvalue */ "./src/itemvalue.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







/**
 * A Model for a tagbox question
 *
 * [View Demo](https://surveyjs.io/form-library/examples/how-to-create-multiselect-tag-box/ (linkStyle))
 */
var QuestionTagboxModel = /** @class */ (function (_super) {
    __extends(QuestionTagboxModel, _super);
    function QuestionTagboxModel(name) {
        var _this = _super.call(this, name) || this;
        _this.itemDisplayNameMap = {};
        _this.onOpened = _this.addEvent();
        _this.createLocalizableString("placeholder", _this, false, true);
        _this.createLocalizableString("clearCaption", _this, false, true);
        return _this;
    }
    QuestionTagboxModel.prototype.getDefaultItemComponent = function () {
        return "";
    };
    Object.defineProperty(QuestionTagboxModel.prototype, "readOnlyText", {
        get: function () {
            return this.displayValue || this.placeholder;
        },
        enumerable: false,
        configurable: true
    });
    QuestionTagboxModel.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        if (!this.dropdownListModel) {
            this.dropdownListModel = new _dropdownMultiSelectListModel__WEBPACK_IMPORTED_MODULE_4__["DropdownMultiSelectListModel"](this);
        }
    };
    Object.defineProperty(QuestionTagboxModel.prototype, "placeholder", {
        /**
         * A text displayed in the input field when it doesn't have a value.
         */
        get: function () {
            return this.getLocalizableStringText("placeholder");
        },
        set: function (val) {
            this.setLocalizableStringText("placeholder", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTagboxModel.prototype, "locPlaceholder", {
        get: function () {
            return this.getLocalizableString("placeholder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTagboxModel.prototype, "clearCaption", {
        get: function () {
            return this.getLocalizableStringText("clearCaption");
        },
        set: function (value) {
            this.setLocalizableStringText("clearCaption", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTagboxModel.prototype, "locClearCaption", {
        get: function () {
            return this.getLocalizableString("clearCaption");
        },
        enumerable: false,
        configurable: true
    });
    QuestionTagboxModel.prototype.getType = function () {
        return "tagbox";
    };
    Object.defineProperty(QuestionTagboxModel.prototype, "ariaRole", {
        get: function () {
            return "combobox";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTagboxModel.prototype, "popupModel", {
        get: function () {
            var _a;
            return (_a = this.dropdownListModel) === null || _a === void 0 ? void 0 : _a.popupModel;
        },
        enumerable: false,
        configurable: true
    });
    QuestionTagboxModel.prototype.getControlClass = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_2__["CssClassBuilder"]()
            .append(this.cssClasses.control)
            .append(this.cssClasses.controlEmpty, this.isEmpty())
            .append(this.cssClasses.onError, this.errors.length > 0)
            .append(this.cssClasses.controlDisabled, this.isReadOnly)
            .toString();
    };
    QuestionTagboxModel.prototype.onOpenedCallBack = function () {
        this.onOpened.fire(this, { question: this, choices: this.choices });
    };
    QuestionTagboxModel.prototype.hasUnknownValue = function (val, includeOther, isFilteredChoices, checkEmptyValue) {
        if (this.choicesLazyLoadEnabled) {
            return false;
        }
        return _super.prototype.hasUnknownValue.call(this, val, includeOther, isFilteredChoices, checkEmptyValue);
    };
    QuestionTagboxModel.prototype.onVisibleChoicesChanged = function () {
        _super.prototype.onVisibleChoicesChanged.call(this);
        if (this.popupModel) {
            this.dropdownListModel.updateItems();
        }
    };
    QuestionTagboxModel.prototype.validateItemValues = function (itemValues) {
        var _this = this;
        this.updateItemDisplayNameMap();
        var val = this.renderedValue;
        if (!!itemValues.length && itemValues.length === val.length)
            return itemValues;
        var selectedItemValues = this.selectedItemValues;
        if (!itemValues.length && !!selectedItemValues && !!selectedItemValues.length) {
            this.defaultSelectedItemValues = [].concat(selectedItemValues);
            return selectedItemValues;
        }
        var itemValueValues = itemValues.map(function (iV) { return iV.value; });
        val.filter(function (item) { return itemValueValues.indexOf(item) === -1; }).forEach(function (item) {
            itemValues.push(new _itemvalue__WEBPACK_IMPORTED_MODULE_6__["ItemValue"](item, _this.itemDisplayNameMap[item]));
        });
        itemValues.sort(function (a, b) { return val.indexOf(a.value) - val.indexOf(b.value); });
        return itemValues;
    };
    QuestionTagboxModel.prototype.updateItemDisplayNameMap = function () {
        var _this = this;
        var func = function (item) { _this.itemDisplayNameMap[item.value] = item.text; };
        (this.defaultSelectedItemValues || []).forEach(func);
        (this.selectedItemValues || []).forEach(func);
        this.visibleChoices.forEach(func);
    };
    QuestionTagboxModel.prototype.getFirstInputElementId = function () {
        return this.inputId + (this.searchEnabled ? "_0" : "");
    };
    QuestionTagboxModel.prototype.getInputId = function () {
        return this.inputId + "_0";
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], QuestionTagboxModel.prototype, "allowClear", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({
            defaultValue: true,
            onSet: function (newValue, target) {
                if (!!target.dropdownListModel) {
                    target.dropdownListModel.setSearchEnabled(newValue);
                }
            }
        })
    ], QuestionTagboxModel.prototype, "searchEnabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({
            defaultValue: false,
            onSet: function (newValue, target) {
                if (!!target.dropdownListModel) {
                    target.dropdownListModel.setHideSelectedItems(newValue);
                }
            }
        })
    ], QuestionTagboxModel.prototype, "hideSelectedItems", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], QuestionTagboxModel.prototype, "choicesLazyLoadEnabled", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: 25 })
    ], QuestionTagboxModel.prototype, "choicesLazyLoadPageSize", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ getDefaultValue: function () { return _settings__WEBPACK_IMPORTED_MODULE_5__["settings"].tagboxCloseOnSelect; } })
    ], QuestionTagboxModel.prototype, "closeOnSelect", void 0);
    return QuestionTagboxModel;
}(_question_checkbox__WEBPACK_IMPORTED_MODULE_3__["QuestionCheckboxModel"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_0__["Serializer"].addClass("tagbox", [
    { name: "placeholder", serializationProperty: "locPlaceholder" },
    { name: "allowClear:boolean", default: true },
    { name: "searchEnabled:boolean", default: true },
    { name: "choicesLazyLoadEnabled:boolean", default: false, visible: false },
    { name: "choicesLazyLoadPageSize:number", default: 25, visible: false },
    { name: "hideSelectedItems:boolean", default: false },
    { name: "closeOnSelect:boolean" },
    { name: "itemComponent", visible: false, default: "" }
], function () {
    return new QuestionTagboxModel("");
}, "checkbox");
_questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].Instance.registerQuestion("tagbox", function (name) {
    var q = new QuestionTagboxModel(name);
    q.choices = _questionfactory__WEBPACK_IMPORTED_MODULE_1__["QuestionFactory"].DefaultChoices;
    return q;
});


/***/ }),

/***/ "./src/question_text.ts":
/*!******************************!*\
  !*** ./src/question_text.ts ***!
  \******************************/
/*! exports provided: QuestionTextModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionTextModel", function() { return QuestionTextModel; });
/* harmony import */ var _questionfactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./questionfactory */ "./src/questionfactory.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validator */ "./src/validator.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _question_textbase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./question_textbase */ "./src/question_textbase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








/**
 * A class that describes the Text question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-text/ (linkStyle))
 */
var QuestionTextModel = /** @class */ (function (_super) {
    __extends(QuestionTextModel, _super);
    function QuestionTextModel(name) {
        var _this = _super.call(this, name) || this;
        //web-based methods
        _this._isWaitingForEnter = false;
        _this.onCompositionUpdate = function (event) {
            if (_this.isInputTextUpdate) {
                setTimeout(function () {
                    _this.updateValueOnEvent(event);
                }, 1);
            }
            _this.updateRemainingCharacterCounter(event.target.value);
        };
        _this.onKeyUp = function (event) {
            if (_this.isInputTextUpdate) {
                if (!_this._isWaitingForEnter || event.keyCode === 13) {
                    _this.updateValueOnEvent(event);
                    _this._isWaitingForEnter = false;
                }
            }
            else {
                if (event.keyCode === 13) {
                    _this.updateValueOnEvent(event);
                }
            }
            _this.updateRemainingCharacterCounter(event.target.value);
        };
        _this.onKeyDown = function (event) {
            if (_this.isInputTextUpdate) {
                _this._isWaitingForEnter = event.keyCode === 229;
            }
        };
        _this.onChange = function (event) {
            if (event.target === document.activeElement) {
                if (_this.isInputTextUpdate) {
                    _this.updateValueOnEvent(event);
                }
            }
            else {
                _this.updateValueOnEvent(event);
            }
            _this.updateRemainingCharacterCounter(event.target.value);
        };
        _this.onBlur = function (event) {
            _this.updateValueOnEvent(event);
            _this.updateRemainingCharacterCounter(event.target.value);
        };
        _this.createLocalizableString("minErrorText", _this, true, "minError");
        _this.createLocalizableString("maxErrorText", _this, true, "maxError");
        _this.locDataListValue = new _localizablestring__WEBPACK_IMPORTED_MODULE_2__["LocalizableStrings"](_this);
        _this.locDataListValue.onValueChanged = function (oldValue, newValue) {
            _this.propertyValueChanged("dataList", oldValue, newValue);
        };
        _this.registerPropertyChangedHandlers(["min", "max", "inputType", "minValueExpression", "maxValueExpression"], function () {
            _this.setRenderedMinMax();
        });
        _this.registerPropertyChangedHandlers(["inputType", "size"], function () {
            _this.updateInputSize();
            _this.calcRenderedPlaceholder();
        });
        return _this;
    }
    QuestionTextModel.prototype.isTextValue = function () {
        return ["text", "number", "password"].indexOf(this.inputType) > -1;
    };
    QuestionTextModel.prototype.getType = function () {
        return "text";
    };
    QuestionTextModel.prototype.onSurveyLoad = function () {
        _super.prototype.onSurveyLoad.call(this);
        this.setRenderedMinMax();
        this.updateInputSize();
    };
    Object.defineProperty(QuestionTextModel.prototype, "inputType", {
        /**
         * A value passed on to the [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types) attribute of the underlying `<input>` element.
         */
        get: function () {
            return this.getPropertyValue("inputType");
        },
        set: function (val) {
            val = val.toLowerCase();
            if (val == "datetime_local")
                val = "datetime-local";
            this.setPropertyValue("inputType", val.toLowerCase());
            if (!this.isLoadingFromJson) {
                this.min = undefined;
                this.max = undefined;
                this.step = undefined;
            }
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.runCondition = function (values, properties) {
        _super.prototype.runCondition.call(this, values, properties);
        if (!!this.minValueExpression || !!this.maxValueExpression) {
            this.setRenderedMinMax(values, properties);
        }
    };
    QuestionTextModel.prototype.getValidators = function () {
        var validators = _super.prototype.getValidators.call(this);
        if (this.inputType === "email" &&
            !this.validators.some(function (v) { return v.getType() === "emailvalidator"; })) {
            validators.push(new _validator__WEBPACK_IMPORTED_MODULE_4__["EmailValidator"]());
        }
        return validators;
    };
    QuestionTextModel.prototype.isLayoutTypeSupported = function (layoutType) {
        return true;
    };
    Object.defineProperty(QuestionTextModel.prototype, "size", {
        /**
         * A value passed on to the [`size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size) attribute of the underlying `<input>` element.
         */
        get: function () {
            return this.getPropertyValue("size");
        },
        set: function (val) {
            this.setPropertyValue("size", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "isTextInput", {
        get: function () {
            return (["text", "search", "tel", "url", "email", "password"].indexOf(this.inputType) > -1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "inputSize", {
        get: function () {
            return this.getPropertyValue("inputSize", 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "renderedInputSize", {
        get: function () {
            return this.getPropertyValue("inputSize") || null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "inputWidth", {
        get: function () {
            return this.getPropertyValue("inputWidth");
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.updateInputSize = function () {
        var size = this.isTextInput && this.size > 0 ? this.size : 0;
        if (this.isTextInput &&
            size < 1 &&
            this.parent &&
            !!this.parent["itemSize"]) {
            size = this.parent["itemSize"];
        }
        this.setPropertyValue("inputSize", size);
        this.setPropertyValue("inputWidth", size > 0 ? "auto" : "");
    };
    Object.defineProperty(QuestionTextModel.prototype, "autocomplete", {
        /**
         * A value passed on to the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attribute of the underlying `<input>` element.
         */
        get: function () {
            return this.getPropertyValue("autocomplete", "");
        },
        set: function (val) {
            this.setPropertyValue("autocomplete", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "min", {
        /**
         * A value passed on to the [`min`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min) attribute of the underlying `<input>` element.
         * @see minValueExpression
         */
        get: function () {
            return this.getPropertyValue("min");
        },
        set: function (val) {
            if (this.isValueExpression(val)) {
                this.minValueExpression = val.substring(1);
                return;
            }
            this.setPropertyValue("min", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "max", {
        /**
         * A value passed on to the [`max`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max) attribute of the underlying `<input>` element.
         * @see maxValueExpression
         */
        get: function () {
            return this.getPropertyValue("max");
        },
        set: function (val) {
            if (this.isValueExpression(val)) {
                this.maxValueExpression = val.substring(1);
                return;
            }
            this.setPropertyValue("max", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "minValueExpression", {
        /**
         * The minimum value specified as an expression. For example, `"minValueExpression": "today(-1)"` sets the minimum value to yesterday.
         * @see min
         */
        get: function () {
            return this.getPropertyValue("minValueExpression", "");
        },
        set: function (val) {
            this.setPropertyValue("minValueExpression", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "maxValueExpression", {
        /**
         * The maximum value specified as an expression. For example, `"maxValueExpression": "today(1)"` sets the maximum value to tomorrow.
         * @see max
         */
        get: function () {
            return this.getPropertyValue("maxValueExpression", "");
        },
        set: function (val) {
            this.setPropertyValue("maxValueExpression", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "renderedMin", {
        get: function () {
            return this.getPropertyValue("renderedMin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "renderedMax", {
        get: function () {
            return this.getPropertyValue("renderedMax");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "minErrorText", {
        /**
         * An error message to display when the question value is less than the minimum accepted value.
         * @see min
         * @see minValueExpression
         */
        get: function () {
            return this.getLocalizableStringText("minErrorText");
        },
        set: function (val) {
            this.setLocalizableStringText("minErrorText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "locMinErrorText", {
        get: function () {
            return this.getLocalizableString("minErrorText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "maxErrorText", {
        /**
         * An error message to display when the question value exceeds the maximum accepted value.
         * @see max
         * @see maxValueExpression
         */
        get: function () {
            return this.getLocalizableStringText("maxErrorText");
        },
        set: function (val) {
            this.setLocalizableStringText("maxErrorText", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "locMaxErrorText", {
        get: function () {
            return this.getLocalizableString("maxErrorText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "isMinMaxType", {
        /**
         * Returns `true` if the specified `inputType` supports the `min` and `max` properties.
         * @see inputType
         * @see min
         * @see max
         */
        get: function () {
            return isMinMaxType(this);
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.onCheckForErrors = function (errors, isOnValueChanged) {
        var _this = this;
        _super.prototype.onCheckForErrors.call(this, errors, isOnValueChanged);
        if (isOnValueChanged)
            return;
        if (this.isValueLessMin) {
            var minError = new _error__WEBPACK_IMPORTED_MODULE_5__["CustomError"](this.getMinMaxErrorText(this.minErrorText, this.getCalculatedMinMax(this.renderedMin)), this);
            minError.onUpdateErrorTextCallback = function (err) {
                err.text = _this.getMinMaxErrorText(_this.minErrorText, _this.getCalculatedMinMax(_this.renderedMin));
            };
            errors.push(minError);
        }
        if (this.isValueGreaterMax) {
            var maxError = new _error__WEBPACK_IMPORTED_MODULE_5__["CustomError"](this.getMinMaxErrorText(this.maxErrorText, this.getCalculatedMinMax(this.renderedMax)), this);
            maxError.onUpdateErrorTextCallback = function (err) {
                err.text = _this.getMinMaxErrorText(_this.maxErrorText, _this.getCalculatedMinMax(_this.renderedMax));
            };
            errors.push(maxError);
        }
    };
    QuestionTextModel.prototype.canSetValueToSurvey = function () {
        if (!this.isMinMaxType)
            return true;
        var isValid = !this.isValueLessMin && !this.isValueGreaterMax;
        if (this.inputType === "number" && !!this.survey &&
            (this.survey.isValidateOnValueChanging || this.survey.isValidateOnValueChanged)) {
            this.hasErrors();
        }
        return isValid;
    };
    QuestionTextModel.prototype.convertFuncValuetoQuestionValue = function (val) {
        var inpuType = this.inputType.replace("-local", "");
        return _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].convertValToQuestionVal(val, inpuType);
    };
    QuestionTextModel.prototype.getMinMaxErrorText = function (errorText, value) {
        if (_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isValueEmpty(value))
            return errorText;
        var errorValue = value.toString();
        if (this.inputType === "date" && !!value.toDateString) {
            errorValue = value.toDateString();
        }
        return errorText.replace("{0}", errorValue);
    };
    Object.defineProperty(QuestionTextModel.prototype, "isValueLessMin", {
        get: function () {
            return (!this.isValueEmpty(this.renderedMin) &&
                this.getCalculatedMinMax(this.value) <
                    this.getCalculatedMinMax(this.renderedMin));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "isValueGreaterMax", {
        get: function () {
            return (!this.isValueEmpty(this.renderedMax) &&
                this.getCalculatedMinMax(this.value) >
                    this.getCalculatedMinMax(this.renderedMax));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "isDateInputType", {
        get: function () {
            return this.inputType === "date" || this.inputType === "datetime-local";
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.getCalculatedMinMax = function (minMax) {
        if (this.isValueEmpty(minMax))
            return minMax;
        return this.isDateInputType ? new Date(minMax) : minMax;
    };
    QuestionTextModel.prototype.setRenderedMinMax = function (values, properties) {
        var _this = this;
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        this.minValueRunner = this.getDefaultRunner(this.minValueRunner, this.minValueExpression);
        this.setValueAndRunExpression(this.minValueRunner, this.min, function (val) {
            if (!val && _this.isDateInputType && !!_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].minDate) {
                val = _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].minDate;
            }
            _this.setPropertyValue("renderedMin", val);
        }, values, properties);
        this.maxValueRunner = this.getDefaultRunner(this.maxValueRunner, this.maxValueExpression);
        this.setValueAndRunExpression(this.maxValueRunner, this.max, function (val) {
            if (!val && _this.isDateInputType) {
                val = !!_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].maxDate ? _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].maxDate : "2999-12-31";
            }
            _this.setPropertyValue("renderedMax", val);
        }, values, properties);
    };
    Object.defineProperty(QuestionTextModel.prototype, "step", {
        /**
         * A value passed on to the [`step`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step) attribute of the underlying `<input>` element.
         */
        get: function () {
            return this.getPropertyValue("step");
        },
        set: function (val) {
            this.setPropertyValue("step", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "renderedStep", {
        get: function () {
            if (this.isValueEmpty(this.step)) {
                return this.inputType !== "number" ? undefined : "any";
            }
            return this.step;
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.supportGoNextPageAutomatic = function () {
        return ["date", "datetime", "datetime-local"].indexOf(this.inputType) < 0;
    };
    QuestionTextModel.prototype.supportGoNextPageError = function () {
        return ["date", "datetime", "datetime-local"].indexOf(this.inputType) < 0;
    };
    Object.defineProperty(QuestionTextModel.prototype, "dataList", {
        /**
         * An array of predefined options from which users can select. This property configures an HTML [`<datalist>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist) element and associates it with the underlying `input` element.
         */
        get: function () {
            return this.locDataList.value;
        },
        set: function (val) {
            this.locDataList.value = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "locDataList", {
        get: function () {
            return this.locDataListValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextModel.prototype, "dataListId", {
        get: function () {
            return this.locDataList.hasValue() ? this.id + "_datalist" : undefined;
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.canRunValidators = function (isOnValueChanged) {
        return (this.errors.length > 0 ||
            !isOnValueChanged ||
            this.supportGoNextPageError());
    };
    QuestionTextModel.prototype.setNewValue = function (newValue) {
        newValue = this.correctValueType(newValue);
        _super.prototype.setNewValue.call(this, newValue);
    };
    QuestionTextModel.prototype.correctValueType = function (newValue) {
        if (!newValue)
            return newValue;
        if (this.inputType == "number" || this.inputType == "range") {
            return _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isNumber(newValue) ? _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].getNumber(newValue) : "";
        }
        return newValue;
    };
    QuestionTextModel.prototype.hasPlaceHolder = function () {
        return !this.isReadOnly && this.inputType !== "range";
    };
    QuestionTextModel.prototype.isReadOnlyRenderDiv = function () {
        return this.isReadOnly && _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].readOnlyTextRenderMode === "div";
    };
    Object.defineProperty(QuestionTextModel.prototype, "inputStyle", {
        get: function () {
            var style = {};
            style.width = this.inputWidth;
            return style;
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextModel.prototype.updateValueOnEvent = function (event) {
        var newValue = event.target.value;
        if (!_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isTwoValueEquals(this.value, newValue)) {
            this.value = newValue;
        }
    };
    return QuestionTextModel;
}(_question_textbase__WEBPACK_IMPORTED_MODULE_7__["QuestionTextBase"]));

var minMaxTypes = [
    "number",
    "range",
    "date",
    "datetime",
    "datetime-local",
    "month",
    "time",
    "week",
];
function isMinMaxType(obj) {
    var t = !!obj ? obj.inputType : "";
    if (!t)
        return false;
    return minMaxTypes.indexOf(t) > -1;
}
function getWeekTimeNumber(str, delimiter) {
    var strs = str.split(delimiter);
    if (strs.length !== 2)
        return -1;
    if (!_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isNumber(strs[0]) || !_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isNumber(strs[1]))
        return -1;
    return parseFloat(strs[0]) * 60 + parseFloat(strs[1]);
}
function isMinBiggerWeekTime(minStr, maxStr, delimiter) {
    var min = getWeekTimeNumber(minStr, delimiter);
    var max = getWeekTimeNumber(maxStr, delimiter);
    if (min < 0 || max < 0)
        return false;
    return min > max;
}
function getCorrectMinMax(obj, min, max, isMax) {
    var val = isMax ? max : min;
    if (!isMinMaxType(obj))
        return val;
    if (_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isValueEmpty(min) || _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isValueEmpty(max))
        return val;
    if (obj.inputType.indexOf("date") === 0 || obj.inputType === "month") {
        var isMonth = obj.inputType === "month";
        var dMin = new Date(isMonth ? min + "-1" : min);
        var dMax = new Date(isMonth ? max + "-1" : max);
        if (!dMin || !dMax)
            return val;
        if (dMin > dMax)
            return isMax ? min : max;
    }
    if (obj.inputType === "week" || obj.inputType === "time") {
        var delimiter = obj.inputType === "week" ? "-W" : ":";
        if (isMinBiggerWeekTime(min, max, delimiter))
            return isMax ? min : max;
        return val;
    }
    if (obj.inputType === "number") {
        if (!_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isNumber(min) || !_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isNumber(max))
            return val;
        if (_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].getNumber(min) > _helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].getNumber(max))
            return isMax ? min : max;
    }
    if (typeof min === "string" || typeof max === "string")
        return val;
    if (min > max)
        return isMax ? min : max;
    return val;
}
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("text", [
    {
        name: "inputType",
        default: "text",
        choices: _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].questions.inputTypes,
    },
    {
        name: "size:number",
        minValue: 0,
        dependsOn: "inputType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.isTextInput;
        },
    },
    {
        name: "textUpdateMode",
        default: "default",
        choices: ["default", "onBlur", "onTyping"],
        dependsOn: "inputType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.isTextInput;
        },
    },
    {
        name: "autocomplete",
        alternativeName: "autoComplete",
        choices: _settings__WEBPACK_IMPORTED_MODULE_6__["settings"].questions.dataList,
    },
    {
        name: "min",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            return isMinMaxType(obj);
        },
        onPropertyEditorUpdate: function (obj, propertyEditor) {
            if (!!obj && !!obj.inputType) {
                propertyEditor.inputType = obj.inputType !== "range" ? obj.inputType : "number";
            }
        },
        onSettingValue: function (obj, val) {
            return getCorrectMinMax(obj, val, obj.max, false);
        },
    },
    {
        name: "max",
        dependsOn: "inputType",
        nextToProperty: "*min",
        visibleIf: function (obj) {
            return isMinMaxType(obj);
        },
        onSettingValue: function (obj, val) {
            return getCorrectMinMax(obj, obj.min, val, true);
        },
        onPropertyEditorUpdate: function (obj, propertyEditor) {
            if (!!obj && !!obj.inputType) {
                propertyEditor.inputType = obj.inputType !== "range" ? obj.inputType : "number";
            }
        },
    },
    {
        name: "minValueExpression:expression",
        category: "logic",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            return isMinMaxType(obj);
        },
    },
    {
        name: "maxValueExpression:expression",
        category: "logic",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            return isMinMaxType(obj);
        },
    },
    {
        name: "minErrorText",
        serializationProperty: "locMinErrorText",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            return isMinMaxType(obj);
        },
    },
    {
        name: "maxErrorText",
        serializationProperty: "locMaxErrorText",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            return isMinMaxType(obj);
        },
    },
    {
        name: "step:number",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.inputType === "number" || obj.inputType === "range";
        },
    },
    {
        name: "maxLength:number",
        default: -1,
        dependsOn: "inputType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.isTextInput;
        },
    },
    {
        name: "placeholder",
        alternativeName: "placeHolder",
        serializationProperty: "locPlaceholder",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.isTextInput;
        },
    },
    {
        name: "dataList:string[]",
        serializationProperty: "locDataList",
        dependsOn: "inputType",
        visibleIf: function (obj) {
            if (!obj)
                return false;
            return obj.inputType === "text";
        },
    },
], function () {
    return new QuestionTextModel("");
}, "textbase");
_questionfactory__WEBPACK_IMPORTED_MODULE_0__["QuestionFactory"].Instance.registerQuestion("text", function (name) {
    return new QuestionTextModel(name);
});


/***/ }),

/***/ "./src/question_textbase.ts":
/*!**********************************!*\
  !*** ./src/question_textbase.ts ***!
  \**********************************/
/*! exports provided: CharacterCounter, QuestionTextBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharacterCounter", function() { return CharacterCounter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionTextBase", function() { return QuestionTextBase; });
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base */ "./src/base.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





var CharacterCounter = /** @class */ (function (_super) {
    __extends(CharacterCounter, _super);
    function CharacterCounter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CharacterCounter.prototype.updateRemainingCharacterCounter = function (newValue, maxLength) {
        this.remainingCharacterCounter = _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].getRemainingCharacterCounterText(newValue, maxLength);
    };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], CharacterCounter.prototype, "remainingCharacterCounter", void 0);
    return CharacterCounter;
}(_base__WEBPACK_IMPORTED_MODULE_4__["Base"]));

/**
 * A base class for the [Text](https://surveyjs.io/form-library/documentation/questiontextmodel) and [Comment](https://surveyjs.io/form-library/documentation/questioncommentmodel) question types.
 */
var QuestionTextBase = /** @class */ (function (_super) {
    __extends(QuestionTextBase, _super);
    function QuestionTextBase(name) {
        var _this = _super.call(this, name) || this;
        _this.characterCounter = new CharacterCounter();
        return _this;
    }
    QuestionTextBase.prototype.isTextValue = function () {
        return true;
    };
    Object.defineProperty(QuestionTextBase.prototype, "maxLength", {
        /**
         * The maximum text length measured in characters. Assign 0 if the length should be unlimited.
         *
         * Default value: -1 (inherits the actual value from the `SurveyModel`'s [`maxTextLength`](https://surveyjs.io/form-library/documentation/surveymodel#maxTextLength) property).
         */
        get: function () {
            return this.getPropertyValue("maxLength");
        },
        set: function (val) {
            this.setPropertyValue("maxLength", val);
            this.updateRemainingCharacterCounter(this.value);
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextBase.prototype.getMaxLength = function () {
        return _helpers__WEBPACK_IMPORTED_MODULE_2__["Helpers"].getMaxLength(this.maxLength, this.survey ? this.survey.maxTextLength : -1);
    };
    QuestionTextBase.prototype.updateRemainingCharacterCounter = function (newValue) {
        this.characterCounter.updateRemainingCharacterCounter(newValue, this.getMaxLength());
    };
    Object.defineProperty(QuestionTextBase.prototype, "placeHolder", {
        get: function () { return this.placeholder; },
        set: function (val) { this.placeholder = val; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextBase.prototype, "locPlaceHolder", {
        get: function () { return this.locPlaceholder; },
        enumerable: false,
        configurable: true
    });
    QuestionTextBase.prototype.getType = function () {
        return "textbase";
    };
    QuestionTextBase.prototype.isEmpty = function () {
        return _super.prototype.isEmpty.call(this) || this.value === "";
    };
    Object.defineProperty(QuestionTextBase.prototype, "textUpdateMode", {
        /**
         * Gets or sets a value that specifies when to update the question value.
         *
         * Possible values:
         *
         * - `"onBlur"` - Updates the value after the input field loses focus.
         * - `"onTyping"` - Updates the value on every key press.
         * - `"default"` (default) - Inherits the value from the `SurveyModel`'s [`textUpdateMode`](https://surveyjs.io/form-library/documentation/surveymodel#textUpdateMode) property.
         *
         * > Do not use the `"onTyping"` mode if your survey contains many expressions. Expressions are reevaluated each time a question value is changed. In `"onTyping"` mode, the question value changes frequently. This may cause performance degradation.
         */
        get: function () {
            return this.getPropertyValue("textUpdateMode");
        },
        set: function (val) {
            this.setPropertyValue("textUpdateMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextBase.prototype, "isSurveyInputTextUpdate", {
        get: function () {
            if (this.textUpdateMode == "default")
                return !!this.survey ? this.survey.isUpdateValueTextOnTyping : false;
            return this.textUpdateMode == "onTyping";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextBase.prototype, "renderedPlaceholder", {
        get: function () {
            return this.getPropertyValue("renderedPlaceholder");
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextBase.prototype.setRenderedPlaceholder = function (val) {
        this.setPropertyValue("renderedPlaceholder", val);
    };
    QuestionTextBase.prototype.onReadOnlyChanged = function () {
        _super.prototype.onReadOnlyChanged.call(this);
        this.calcRenderedPlaceholder();
    };
    QuestionTextBase.prototype.onSurveyLoad = function () {
        this.calcRenderedPlaceholder();
        _super.prototype.onSurveyLoad.call(this);
    };
    QuestionTextBase.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        this.calcRenderedPlaceholder();
    };
    QuestionTextBase.prototype.calcRenderedPlaceholder = function () {
        var res = this.placeHolder;
        if (!!res && !this.hasPlaceHolder()) {
            res = undefined;
        }
        this.setRenderedPlaceholder(res);
    };
    QuestionTextBase.prototype.hasPlaceHolder = function () {
        return !this.isReadOnly;
    };
    QuestionTextBase.prototype.setNewValue = function (newValue) {
        _super.prototype.setNewValue.call(this, newValue);
        this.updateRemainingCharacterCounter(newValue);
    };
    QuestionTextBase.prototype.getControlClass = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
            .append(this.cssClasses.root)
            .append(this.cssClasses.onError, this.errors.length > 0)
            .append(this.cssClasses.controlDisabled, this.isReadOnly)
            .toString();
    };
    Object.defineProperty(QuestionTextBase.prototype, "ariaRole", {
        get: function () {
            return "textbox";
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ localizable: true, onSet: function (val, target) { return target.calcRenderedPlaceholder(); } })
    ], QuestionTextBase.prototype, "placeholder", void 0);
    return QuestionTextBase;
}(_question__WEBPACK_IMPORTED_MODULE_0__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("textbase", [], function () {
    return new QuestionTextBase("");
}, "question");


/***/ }),

/***/ "./src/questionfactory.ts":
/*!********************************!*\
  !*** ./src/questionfactory.ts ***!
  \********************************/
/*! exports provided: QuestionFactory, ElementFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionFactory", function() { return QuestionFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementFactory", function() { return ElementFactory; });
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");


//TODO replace completely with ElementFactory
var QuestionFactory = /** @class */ (function () {
    function QuestionFactory() {
        this.creatorHash = {};
    }
    Object.defineProperty(QuestionFactory, "DefaultChoices", {
        get: function () {
            return [
                _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString("choices_Item") + "1",
                _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString("choices_Item") + "2",
                _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString("choices_Item") + "3",
            ];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFactory, "DefaultColums", {
        get: function () {
            var colName = _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString("matrix_column") + " ";
            return [colName + "1", colName + "2", colName + "3"];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFactory, "DefaultRows", {
        get: function () {
            var rowName = _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString("matrix_row") + " ";
            return [rowName + "1", rowName + "2"];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionFactory, "DefaultMutlipleTextItems", {
        get: function () {
            var itemName = _surveyStrings__WEBPACK_IMPORTED_MODULE_0__["surveyLocalization"].getString("multipletext_itemname");
            return [itemName + "1", itemName + "2"];
        },
        enumerable: false,
        configurable: true
    });
    QuestionFactory.prototype.registerQuestion = function (questionType, questionCreator) {
        this.creatorHash[questionType] = questionCreator;
    };
    QuestionFactory.prototype.unregisterElement = function (elementType) {
        delete this.creatorHash[elementType];
    };
    QuestionFactory.prototype.clear = function () {
        this.creatorHash = {};
    };
    QuestionFactory.prototype.getAllTypes = function () {
        var result = new Array();
        for (var key in this.creatorHash) {
            result.push(key);
        }
        return result.sort();
    };
    QuestionFactory.prototype.createQuestion = function (questionType, name) {
        var creator = this.creatorHash[questionType];
        if (creator == null)
            return null;
        return creator(name);
    };
    QuestionFactory.Instance = new QuestionFactory();
    return QuestionFactory;
}());

var ElementFactory = /** @class */ (function () {
    function ElementFactory() {
        this.creatorHash = {};
    }
    ElementFactory.prototype.registerElement = function (elementType, elementCreator) {
        this.creatorHash[elementType] = elementCreator;
    };
    ElementFactory.prototype.clear = function () {
        this.creatorHash = {};
    };
    ElementFactory.prototype.unregisterElement = function (elementType, removeFromSerializer) {
        if (removeFromSerializer === void 0) { removeFromSerializer = false; }
        delete this.creatorHash[elementType];
        QuestionFactory.Instance.unregisterElement(elementType);
        if (removeFromSerializer) {
            _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].removeClass(elementType);
        }
    };
    ElementFactory.prototype.getAllTypes = function () {
        var result = QuestionFactory.Instance.getAllTypes();
        for (var key in this.creatorHash) {
            result.push(key);
        }
        return result.sort();
    };
    ElementFactory.prototype.createElement = function (elementType, name) {
        var creator = this.creatorHash[elementType];
        if (creator == null)
            return QuestionFactory.Instance.createQuestion(elementType, name);
        return creator(name);
    };
    ElementFactory.Instance = new ElementFactory();
    return ElementFactory;
}());



/***/ }),

/***/ "./src/questionnonvalue.ts":
/*!*********************************!*\
  !*** ./src/questionnonvalue.ts ***!
  \*********************************/
/*! exports provided: QuestionNonValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionNonValue", function() { return QuestionNonValue; });
/* harmony import */ var _question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./question */ "./src/question.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * A base class for question types that cannot have a value ([Html](https://surveyjs.io/form-library/documentation/questionhtmlmodel), [Image](https://surveyjs.io/form-library/documentation/questionimagemodel)).
 *
 * This class does not implement new functionality&mdash;it only redefines default values of certain properties inherited from the [`Question`](https://surveyjs.io/form-library/documentation/question) class.
 */
var QuestionNonValue = /** @class */ (function (_super) {
    __extends(QuestionNonValue, _super);
    function QuestionNonValue(name) {
        return _super.call(this, name) || this;
    }
    QuestionNonValue.prototype.getType = function () {
        return "nonvalue";
    };
    Object.defineProperty(QuestionNonValue.prototype, "hasInput", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionNonValue.prototype, "hasTitle", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionNonValue.prototype.getTitleLocation = function () {
        return "";
    };
    Object.defineProperty(QuestionNonValue.prototype, "hasComment", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    QuestionNonValue.prototype.hasErrors = function (fireCallback, rec) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (rec === void 0) { rec = null; }
        return false;
    };
    QuestionNonValue.prototype.getAllErrors = function () {
        return [];
    };
    QuestionNonValue.prototype.supportGoNextPageAutomatic = function () {
        return false;
    };
    QuestionNonValue.prototype.addConditionObjectsByContext = function (objects, context) { };
    QuestionNonValue.prototype.getConditionJson = function (operator, path) {
        if (operator === void 0) { operator = null; }
        if (path === void 0) { path = null; }
        return null;
    };
    return QuestionNonValue;
}(_question__WEBPACK_IMPORTED_MODULE_0__["Question"]));

_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("nonvalue", [
    { name: "title", visible: false },
    { name: "description", visible: false },
    { name: "valueName", visible: false },
    { name: "enableIf", visible: false },
    { name: "defaultValue", visible: false },
    { name: "correctAnswer", visible: false },
    { name: "clearIfInvisible", visible: false },
    { name: "isRequired", visible: false, isSerializable: false },
    { name: "requiredErrorText", visible: false },
    { name: "readOnly", visible: false },
    { name: "requiredIf", visible: false },
    { name: "validators", visible: false },
    { name: "titleLocation", visible: false },
    { name: "showCommentArea", visible: false },
    { name: "useDisplayValuesInDynamicTexts", alternativeName: "useDisplayValuesInTitle", visible: false },
], function () {
    return new QuestionNonValue("");
}, "question");


/***/ }),

/***/ "./src/rendererFactory.ts":
/*!********************************!*\
  !*** ./src/rendererFactory.ts ***!
  \********************************/
/*! exports provided: RendererFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererFactory", function() { return RendererFactory; });
var RendererFactory = /** @class */ (function () {
    function RendererFactory() {
        this.renderersHash = {};
    }
    RendererFactory.prototype.unregisterRenderer = function (questionType, rendererAs) {
        delete this.renderersHash[questionType][rendererAs];
    };
    RendererFactory.prototype.registerRenderer = function (questionType, renderAs, renderer) {
        if (!this.renderersHash[questionType]) {
            this.renderersHash[questionType] = {};
        }
        this.renderersHash[questionType][renderAs] = renderer;
    };
    RendererFactory.prototype.getRenderer = function (questionType, renderAs) {
        return ((this.renderersHash[questionType] &&
            this.renderersHash[questionType][renderAs]) ||
            "default");
    };
    RendererFactory.prototype.getRendererByQuestion = function (question) {
        return this.getRenderer(question.getType(), question.renderAs);
    };
    RendererFactory.prototype.clear = function () {
        this.renderersHash = {};
    };
    RendererFactory.Instance = new RendererFactory();
    return RendererFactory;
}());



/***/ }),

/***/ "./src/settings.ts":
/*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/
/*! exports provided: settings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settings", function() { return settings; });
/**
 * Global settings that apply to all surveys on the page. To specify one of the settings, use the code below:
 *
 * ```js
 * import { settings } from "survey-core";
 *
 * settings.settingName = "value";
 * ```
 */
var settings = {
    /**
     * An object that configures string comparison.
     *
     * Nested properties:
     *
     * - `trimStrings`: `Boolean`\
     * Specifies whether to remove whitespace from both ends of a string before the comparison. Default value: `true`.
     *
     * - `caseSensitive`: `Boolean`\
     * Specifies whether to differentiate between capital and lower-case letters. Default value: `false`.
     */
    comparator: {
        trimStrings: true,
        caseSensitive: false
    },
    expressionDisableConversionChar: "#",
    /**
     * Disable this property if you want internal SurveyJS functions to use methods that work with UTC date and time (`setUTCDate()` `setUTCHours()`, etc.) instead of methods that work with local date and time (`setYear`, `setHours()`, etc.).
     *
     * Default value: `true`
     */
    useLocalTimeZone: true,
    get commentPrefix() { return settings.commentSuffix; },
    set commentPrefix(val) { settings.commentSuffix = val; },
    /**
     * A suffix added to the name of the property that stores comments.
     *
     * Default value: "-Comment"
     *
     * You can specify this setting for an individual survey: [`commentSuffix`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#commentSuffix).
     */
    commentSuffix: "-Comment",
    /**
     * Specifies whether to encode URL parameters when you access a web service.
     *
     * Default value: `true`
     */
    webserviceEncodeParameters: true,
    /**
     * Specifies whether to cache choices loaded from a web service.
     *
     * Default value: `true`
     * @see settings.disableOnGettingChoicesFromWeb
     */
    useCachingForChoicesRestful: true,
    get useCachingForChoicesRestfull() {
        return settings.useCachingForChoicesRestful;
    },
    set useCachingForChoicesRestfull(val) {
        settings.useCachingForChoicesRestful = val;
    },
    /**
     * The URL of the SurveyJS Service API endpoint.
     */
    surveyServiceUrl: "https://api.surveyjs.io/public/v1/Survey",
    /**
     * A separator used in a shorthand notation that specifies a value and display text for an [`ItemValue`](https://surveyjs.io/form-library/documentation/api-reference/itemvalue) object: `"value|text"`.
     *
     * Default value: `"|"`
     */
    itemValueSeparator: "|",
    /**
     * Enable this property if you want to serialize [`ItemValue`](https://surveyjs.io/form-library/documentation/api-reference/itemvalue) instances as objects even when they include only the `value` property.
     *
     * ```js
     * import { ItemValue, settings } from "survey-core";
     *
     * settings.itemValueAlwaysSerializeAsObject = true;
     * const item = new ItemValue(5);
     * const itemString = item.toJSON(); // Produces { value: 5 } instead of 5
     * ```
     *
     * @see settings.serializeLocalizableStringAsObject
     */
    itemValueAlwaysSerializeAsObject: false,
    /**
     * Enable this property if you want to serialize the `text` property of [`ItemValue`](https://surveyjs.io/form-library/documentation/api-reference/itemvalue) objects even when it is empty or equal to the `value` property.
     *
     * ```js
     * import { ItemValue, settings } from "survey-core";
     *
     * settings.itemValueAlwaysSerializeText = true;
     * const item = new ItemValue("item1");
     * const itemString = item.toJSON(); // Produces { value: "item1", text: "item1" } instead of "item1"
     * ```
     */
    itemValueAlwaysSerializeText: false,
    /**
     * Specifies a property key that stores a translation for the default locale.
     *
     * Default value: `"default"`
     * @see storeDuplicatedTranslations
     */
    defaultLocaleName: "default",
    /**
     * Specifies whether surveys should store translation strings that equal the translation string specified by the `"default"` key.
     *
     * Default value: `false`
     * @see settings.defaultLocaleName
     */
    storeDuplicatedTranslations: false,
    /**
     * Specifies a property key that stores an object with default cell values in [Single-Choice Matrix](https://surveyjs.io/form-library/documentation/api-reference/matrix-table-question-model) questions.
     *
     * Default value: "default"
     */
    matrixDefaultRowName: "default",
    /**
     * The default type of matrix cells in the [Multiple-Choice Matrix](https://surveyjs.io/form-library/documentation/api-reference/matrix-table-with-dropdown-list) and [Dynamic Matrix](https://surveyjs.io/form-library/documentation/api-reference/dynamic-matrix-table-question-model) question types.
     *
     * Default value: `"dropdown"`
     *
     * You can specify this setting for individual questions or matrix columns: [`cellType`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-matrix-table-question-model#cellType). Refer to the `cellType` property description for information on possible values.
     */
    matrixDefaultCellType: "dropdown",
    /**
     * A suffix added to the name of the property that stores total values. The resulting property name consists of the matrix name and the suffix.
     *
     * Default value: `"-total"`
     */
    matrixTotalValuePostFix: "-total",
    /**
     * A maximum number of rows in a [Dynamic Matrix](https://surveyjs.io/form-library/documentation/api-reference/dynamic-matrix-table-question-model).
     *
     * Default value: 1000
     *
     * You can specify this setting for an individual Dynamic Matrix: [`maxRowCount`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-matrix-table-question-model#maxRowCount).
     */
    matrixMaximumRowCount: 1000,
    /**
     * A maximum number of matrix rows included in the Condition drop-down menu in Survey Creator. This menu is used to configure conditional survey logic.
     *
     * Default value: 1
     *
     * If you set this property to 0, the Condition menu does not include any matrix rows. Users still can specify conditions that use matrix rows but only with Manual Entry.
     */
    matrixMaxRowCountInCondition: 1,
    /**
     * A maximum number of panels from [Dynamic Panel](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model) included in the Condition drop-down menu in Survey Creator. This menu is used to configure conditional survey logic.
     *
     * Default value: 1
     *
     * If you set this property to 0, the Condition menu does not include any panel questions. Users still can specify conditions that use panel questions but only with Manual Entry.
     */
    panelDynamicMaxPanelCountInCondition: 1,
    /**
     * Disable this property if you want to render the Remove action in Dynamic Matrix as a button. Otherwise, the action is rendered as an icon.
     *
     * Default value: `true`
     */
    matrixRenderRemoveAsIcon: true,
    /**
     * A maximum number of panels in [Dynamic Panel](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model).
     *
     * Default value: 100
     *
     * You can specify this setting for an individual Dynamic Panel: [`maxPanelCount`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model#maxPanelCount).
     */
    panelMaximumPanelCount: 100,
    /**
     * A maximum number of rate values in a [Rating](https://surveyjs.io/form-library/documentation/api-reference/rating-scale-question-model) question.
     *
     * Default value: 20
     */
    ratingMaximumRateValueCount: 20,
    /**
     * Specifies whether to close the drop-down menu of a [TagBox](https://surveyjs.io/form-library/examples/how-to-create-multiselect-tag-box/) question after a user selects a value.
     *
     * This setting applies to all TagBox questions on a page. You can use the [closeOnSelect](https://surveyjs.io/form-library/documentation/api-reference/dropdown-tag-box-model#closeOnSelect) property to specify the same setting for an individual TagBox question.
     */
    tagboxCloseOnSelect: false,
    /**
     * Disables the question while choices are being loaded from a web service.
     *
     * Default value: `false`
     * @see settings.useCachingForChoicesRestful
     */
    disableOnGettingChoicesFromWeb: false,
    /**
     * Enable this property if you want to serialize [`LocalizableString`](https://surveyjs.io/form-library/documentation/api-reference/localizablestring) instances as objects even when they include only a translation string for the default locale. For example, `"Custom String"` will be serialized as `{ default: "Custom String" }`.
     *
     * Default value: `false`
     * @see settings.itemValueAlwaysSerializeAsObject
     */
    serializeLocalizableStringAsObject: false,
    /**
     * Specifies whether to display an empty title for pages and panels when they are being designed in Survey Creator.
     *
     * Default value: `true`
     */
    allowShowEmptyTitleInDesignMode: true,
    /**
     * Specifies whether to display an empty description for pages and panels when they are being designed in Survey Creator.
     *
     * Default value: `true`
     */
    allowShowEmptyDescriptionInDesignMode: true,
    /**
     * Specifies whether to re-evaluate an expression associated with the [Complete trigger](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#complete) immediately when a question value changes. If the expression evaluates to `true`, the trigger is executed.
     *
     * Keep this property set to `false` if you want to re-evaluate the Complete trigger's expression only when the respondents navigate to another page.
     *
     * Default value: `false`
     * @see settings.changeNavigationButtonsOnCompleteTrigger
     */
    executeCompleteTriggerOnValueChanged: false,
    /**
     * Specifies whether to replace the Next button with the Complete button when the [Complete trigger](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#complete) is going to be executed.
     *
     * Default value: `true`
     * @see settings.executeCompleteTriggerOnValueChanged
     */
    changeNavigationButtonsOnCompleteTrigger: true,
    /**
     * Specifies whether to re-evaluate an expression associated with the [Skip trigger](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#skip) immediately when a question value changes. If the expression evaluates to `true`, the trigger is executed.
     *
     * Disable this property if you want to re-evaluate the Skip trigger's expression only when the respondents navigate to another page.
     *
     * Default value: `true`
     */
    executeSkipTriggerOnValueChanged: true,
    /**
     * Specifies how to render the input field of [Comment](https://surveyjs.io/form-library/documentation/api-reference/comment-field-model) questions in [read-only](https://surveyjs.io/form-library/documentation/api-reference/comment-field-model#readOnly) mode.
     *
     * Possible values:
     *
     * - `"textarea"` (default) - Renders the input field as a disabled `<textarea>` element.
     * - `"div"` - Renders the input field as a `<div>` element with a non-editable question value within it.
     */
    readOnlyCommentRenderMode: "textarea",
    /**
     * Specifies how to render the input field of [Text](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model) questions in [read-only](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#readOnly) mode.
     *
     * Possible values:
     *
     * - `"input"` (default) - Renders the input field as a disabled `<input>` element.
     * - `"div"` - Renders the input field as a `<div>` element with a non-editable question value within it.
     */
    readOnlyTextRenderMode: "input",
    /**
     * A property that allows you to display a custom confirm dialog instead of the standard browser dialog. Set this property to a function that renders your custom dialog window.
     * @param message A message to be displayed in the confirm dialog window.
     */
    confirmActionFunc: function (message) {
        return confirm(message);
    },
    /**
     * A minimum width value for all survey elements.
     *
     * Default value: `"300px"`
     *
     * You can override this setting for individual elements: [`minWidth`](https://surveyjs.io/form-library/documentation/api-reference/surveyelement#minWidth).
     */
    minWidth: "300px",
    /**
     * A maximum width value for all survey elements.
     *
     * Default value: `"100%"`
     *
     * You can override this setting for individual elements: [`maxWidth`](https://surveyjs.io/form-library/documentation/api-reference/surveyelement#maxWidth).
     */
    maxWidth: "100%",
    /**
     * Specifies how many times surveys can re-evaluate expressions when a question value changes. This limit helps avoid recursions in expressions.
     *
     * Default value: 10
     */
    maximumConditionRunCountOnValueChanged: 10,
    /**
     * Specifies whether to number questions whose [`titleLocation`](https://surveyjs.io/form-library/documentation/api-reference/question#titleLocation) property is set to `"hidden"`.
     *
     * Default value: `false`
     */
    setQuestionVisibleIndexForHiddenTitle: false,
    /**
     * Specifies whether to number questions whose [`hideNumber`](https://surveyjs.io/form-library/documentation/api-reference/question#hideNumber) property is enabled.
     *
     * Default value: `false`
     */
    setQuestionVisibleIndexForHiddenNumber: false,
    /**
     * Specifies whether to add questions to the DOM only when they get into the viewport.
     *
     * Default value: `false`
     *
     * > This is an experimental feature that may not work as expected in all use cases.
     */
    lazyRowsRendering: false,
    lazyRowsRenderingStartRow: 3,
    /**
     * An object that configures notifications.
     *
     * Nested properties:
     *
     * - `lifetime`: `Number`\
     * Specifies a time period during which a notification is displayed; measured in milliseconds.
     */
    notifications: {
        lifetime: 2000
    },
    /**
     * Specifies the direction in which to lay out Checkbox and Radiogroup items. This setting affects the resulting UI when items are arranged in [more than one column](https://surveyjs.io/form-library/documentation/api-reference/checkbox-question-model#colCount).
     *
     * Possible values:
     *
     * - `"row"` (default) - Items fill the current row, then move on to the next row.
     * - `"column"` - Items fill the current column, then move on to the next column.
     */
    showItemsInOrder: "default",
    /**
     * A value to save in survey results when respondents select the None choice item.
     *
     * Default value: `"none"`
     */
    noneItemValue: "none",
    /**
     * A list of supported validators by question type.
     */
    supportedValidators: {
        question: ["expression"],
        comment: ["text", "regex"],
        text: ["numeric", "text", "regex", "email"],
        checkbox: ["answercount"],
        imagepicker: ["answercount"],
    },
    /**
     * Specifies a minimum date that users can enter into a [Text](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model) question with [`inputType`](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#inputType) set to `"date"`, `"datetime"`, or `"datetime-local"`. Set this property to a string with the folllowing format: `"yyyy-mm-dd"`.
     */
    minDate: "",
    /**
     * Specifies a maximum date that users can enter into a [Text](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model) question with [`inputType`](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#inputType) set to `"date"`, `"datetime"`, or `"datetime-local"`. Set this property to a string with the folllowing format: `"yyyy-mm-dd"`.
     */
    maxDate: "",
    showModal: undefined,
    supportCreatorV2: false,
    showDefaultItemsInCreatorV2: true,
    /**
     * An object that specifies icon replacements. Object keys are built-in icon names. To use a custom icon, assign its name to the key of the icon you want to replace:
     *
     * ```js
     * import { settings } from "survey-core";
     *
     * settings.customIcons["icon-redo"] = "custom-redo-icon";
     * ```
     *
     * For more information about icons in SurveyJS, refer to the following help topic: [UI Icons](https://surveyjs.io/form-library/documentation/icons).
     */
    customIcons: {},
    /**
     * Specifies which part of a choice item responds to a drag gesture in Ranking questions.
     *
     * Possible values:
     *
     * - `"entireItem"` (default) - Users can use the entire choice item as a drag handle.
     * - `"icon"` - Users can only use the choice item icon as a drag handle.
     */
    rankingDragHandleArea: "entireItem",
    titleTags: {
        survey: "h3",
        page: "h4",
        panel: "h4",
        question: "h5",
    },
    questions: {
        inputTypes: [
            "color",
            "date",
            "datetime",
            "datetime-local",
            "email",
            "month",
            "number",
            "password",
            "range",
            "tel",
            "text",
            "time",
            "url",
            "week",
        ],
        dataList: [
            "",
            "name",
            "honorific-prefix",
            "given-name",
            "additional-name",
            "family-name",
            "honorific-suffix",
            "nickname",
            "organization-title",
            "username",
            "new-password",
            "current-password",
            "organization",
            "street-address",
            "address-line1",
            "address-line2",
            "address-line3",
            "address-level4",
            "address-level3",
            "address-level2",
            "address-level1",
            "country",
            "country-name",
            "postal-code",
            "cc-name",
            "cc-given-name",
            "cc-additional-name",
            "cc-family-name",
            "cc-number",
            "cc-exp",
            "cc-exp-month",
            "cc-exp-year",
            "cc-csc",
            "cc-type",
            "transaction-currency",
            "transaction-amount",
            "language",
            "bday",
            "bday-day",
            "bday-month",
            "bday-year",
            "sex",
            "url",
            "photo",
            "tel",
            "tel-country-code",
            "tel-national",
            "tel-area-code",
            "tel-local",
            "tel-local-prefix",
            "tel-local-suffix",
            "tel-extension",
            "email",
            "impp",
        ]
    }
};


/***/ }),

/***/ "./src/stylesmanager.ts":
/*!******************************!*\
  !*** ./src/stylesmanager.ts ***!
  \******************************/
/*! exports provided: modernThemeColors, defaultThemeColors, orangeThemeColors, darkblueThemeColors, darkroseThemeColors, stoneThemeColors, winterThemeColors, winterstoneThemeColors, StylesManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modernThemeColors", function() { return modernThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultThemeColors", function() { return defaultThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orangeThemeColors", function() { return orangeThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "darkblueThemeColors", function() { return darkblueThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "darkroseThemeColors", function() { return darkroseThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stoneThemeColors", function() { return stoneThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "winterThemeColors", function() { return winterThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "winterstoneThemeColors", function() { return winterstoneThemeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StylesManager", function() { return StylesManager; });
/* harmony import */ var _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultCss/defaultV2Css */ "./src/defaultCss/defaultV2Css.ts");

var modernThemeColors = {
    "$main-color": "#1ab394",
    "$add-button-color": "#1948b3",
    "$remove-button-color": "#ff1800",
    "$disable-color": "#dbdbdb",
    "$progress-text-color": "#9d9d9d",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-slider-color": "#cfcfcf",
    "$error-color": "#d52901",
    "$text-color": "#404040",
    "$light-text-color": "#fff",
    "$checkmark-color": "#fff",
    "$progress-buttons-color": "#8dd9ca",
    "$inputs-background-color": "transparent",
    "$main-hover-color": "#9f9f9f",
    "$body-container-background-color": "#f4f4f4",
    "$text-border-color": "#d4d4d4",
    "$disabled-text-color": "rgba(64, 64, 64, 0.5)",
    "$border-color": "rgb(64, 64, 64, 0.5)",
    "$header-background-color": "#e7e7e7",
    "$answer-background-color": "rgba(26, 179, 148, 0.2)",
    "$error-background-color": "rgba(213, 41, 1, 0.2)",
    "$radio-checked-color": "#404040",
    "$clean-button-color": "#1948b3",
    "$body-background-color": "#ffffff",
    "$foreground-light": "#909090",
};
var defaultThemeColors = {
    "$header-background-color": "#e7e7e7",
    "$body-container-background-color": "#f4f4f4",
    "$main-color": "#1ab394",
    "$main-hover-color": "#0aa384",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#6d7072",
    "$text-input-color": "#6d7072",
    "$header-color": "#6d7072",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$progress-text-color": "#9d9d9d",
    "$disable-color": "#dbdbdb",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#8dd9ca",
    "$progress-buttons-line-color": "#d4d4d4"
};
var orangeThemeColors = {
    "$header-background-color": "#4a4a4a",
    "$body-container-background-color": "#f8f8f8",
    "$main-color": "#f78119",
    "$main-hover-color": "#e77109",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#4a4a4a",
    "$text-input-color": "#4a4a4a",
    "$header-color": "#f78119",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$progress-text-color": "#9d9d9d",
    "$disable-color": "#dbdbdb",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#f7b781",
    "$progress-buttons-line-color": "#d4d4d4"
};
var darkblueThemeColors = {
    "$header-background-color": "#d9d8dd",
    "$body-container-background-color": "#f6f7f2",
    "$main-color": "#3c4f6d",
    "$main-hover-color": "#2c3f5d",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#4a4a4a",
    "$text-input-color": "#4a4a4a",
    "$header-color": "#6d7072",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$progress-text-color": "#9d9d9d",
    "$disable-color": "#dbdbdb",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#839ec9",
    "$progress-buttons-line-color": "#d4d4d4"
};
var darkroseThemeColors = {
    "$header-background-color": "#ddd2ce",
    "$body-container-background-color": "#f7efed",
    "$main-color": "#68656e",
    "$main-hover-color": "#58555e",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#4a4a4a",
    "$text-input-color": "#4a4a4a",
    "$header-color": "#6d7072",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$progress-text-color": "#9d9d9d",
    "$disable-color": "#dbdbdb",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#c6bed4",
    "$progress-buttons-line-color": "#d4d4d4"
};
var stoneThemeColors = {
    "$header-background-color": "#cdccd2",
    "$body-container-background-color": "#efedf4",
    "$main-color": "#0f0f33",
    "$main-hover-color": "#191955",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#0f0f33",
    "$text-input-color": "#0f0f33",
    "$header-color": "#0f0f33",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$progress-text-color": "#9d9d9d",
    "$disable-color": "#dbdbdb",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#747491",
    "$progress-buttons-line-color": "#d4d4d4"
};
var winterThemeColors = {
    "$header-background-color": "#82b8da",
    "$body-container-background-color": "#dae1e7",
    "$main-color": "#3c3b40",
    "$main-hover-color": "#1e1d20",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#000",
    "$text-input-color": "#000",
    "$header-color": "#000",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$disable-color": "#dbdbdb",
    "$progress-text-color": "#9d9d9d",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#d1c9f5",
    "$progress-buttons-line-color": "#d4d4d4"
};
var winterstoneThemeColors = {
    "$header-background-color": "#323232",
    "$body-container-background-color": "#f8f8f8",
    "$main-color": "#5ac8fa",
    "$main-hover-color": "#06a1e7",
    "$body-background-color": "white",
    "$inputs-background-color": "white",
    "$text-color": "#000",
    "$text-input-color": "#000",
    "$header-color": "#000",
    "$border-color": "#e7e7e7",
    "$error-color": "#ed5565",
    "$error-background-color": "#fcdfe2",
    "$disable-color": "#dbdbdb",
    "$progress-text-color": "#9d9d9d",
    "$disabled-label-color": "rgba(64, 64, 64, 0.5)",
    "$slider-color": "white",
    "$disabled-switch-color": "#9f9f9f",
    "$disabled-slider-color": "#cfcfcf",
    "$foreground-light": "#909090",
    "$foreground-disabled": "#161616",
    "$background-dim": "#f3f3f3",
    "$progress-buttons-color": "#acdcf2",
    "$progress-buttons-line-color": "#d4d4d4"
};
function setCssVariables(vars, element) {
    Object.keys(vars || {}).forEach(function (sassVarName) {
        var name = sassVarName.substring(1);
        element.style.setProperty("--" + name, vars[sassVarName]);
    });
}
var StylesManager = /** @class */ (function () {
    function StylesManager() {
        StylesManager.autoApplyTheme();
    }
    StylesManager.autoApplyTheme = function () {
        if (_defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"].currentType === "bootstrap" || _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"].currentType === "bootstrapmaterial") {
            return;
        }
        var includedThemeCss = StylesManager.getIncludedThemeCss();
        if (includedThemeCss.length === 1) {
            StylesManager.applyTheme(includedThemeCss[0].name);
        }
    };
    StylesManager.getAvailableThemes = function () {
        var themeMapper = _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"].getAvailableThemes()
            .filter(function (themeName) { return ["defaultV2", "default", "modern"].indexOf(themeName) !== -1; })
            .map(function (themeName) { return { name: themeName, theme: _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"][themeName] }; });
        return themeMapper;
    };
    StylesManager.getIncludedThemeCss = function () {
        var themeMapper = StylesManager.getAvailableThemes();
        if (!!document && !!document.body) {
            var styles_1 = getComputedStyle(document.body);
            if (styles_1.length) {
                return themeMapper.filter(function (item) { return item.theme.variables && styles_1.getPropertyValue(item.theme.variables.themeMark); });
            }
        }
        return [];
    };
    StylesManager.findSheet = function (styleSheetId) {
        if (typeof document === "undefined")
            return null;
        for (var i = 0; i < document.styleSheets.length; i++) {
            if (!!document.styleSheets[i].ownerNode && document.styleSheets[i].ownerNode["id"] === styleSheetId) {
                return document.styleSheets[i];
            }
        }
        return null;
    };
    StylesManager.createSheet = function (styleSheetId) {
        var style = document.createElement("style");
        style.id = styleSheetId;
        // Add a media (and/or media query) here if you'd like!
        // style.setAttribute("media", "screen")
        // style.setAttribute("media", "only screen and (max-width : 1024px)")
        style.appendChild(document.createTextNode(""));
        document.head.appendChild(style);
        if (!!StylesManager.Logger) {
            StylesManager.Logger.log("style sheet " + styleSheetId + " created");
        }
        return style.sheet;
    };
    StylesManager.applyTheme = function (themeName, themeSelector) {
        if (themeName === void 0) { themeName = "default"; }
        _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"].currentType = themeName;
        if (StylesManager.Enabled) {
            if (themeName !== "bootstrap" && themeName !== "bootstrapmaterial") {
                setCssVariables(StylesManager.ThemeColors[themeName], document.body);
                if (!!StylesManager.Logger) {
                    StylesManager.Logger.log("apply theme " + themeName + " completed");
                }
                return;
            }
            var themeCss_1 = StylesManager.ThemeCss[themeName];
            if (!themeCss_1) {
                _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_0__["surveyCss"].currentType = "defaultV2";
                return;
            }
            StylesManager.insertStylesRulesIntoDocument();
            var currentThemeSelector_1 = themeSelector || StylesManager.ThemeSelector[themeName] || StylesManager.ThemeSelector["default"];
            var styleSheetId = (themeName + currentThemeSelector_1).trim();
            var sheet_1 = StylesManager.findSheet(styleSheetId);
            if (!sheet_1) {
                sheet_1 = StylesManager.createSheet(styleSheetId);
                var themeColors_1 = StylesManager.ThemeColors[themeName] || StylesManager.ThemeColors["default"];
                Object.keys(themeCss_1).forEach(function (selector) {
                    var cssRuleText = themeCss_1[selector];
                    Object.keys(themeColors_1 || {}).forEach(function (colorVariableName) { return (cssRuleText = cssRuleText.replace(new RegExp("\\" + colorVariableName, "g"), themeColors_1[colorVariableName])); });
                    try {
                        if (selector.indexOf("body") === 0) {
                            sheet_1.insertRule(selector + " { " + cssRuleText + " }", 0);
                        }
                        else {
                            sheet_1.insertRule(currentThemeSelector_1 + selector + " { " + cssRuleText + " }", 0);
                        }
                    }
                    catch (e) { }
                });
            }
        }
        if (!!StylesManager.Logger) {
            StylesManager.Logger.log("apply theme " + themeName + " completed");
        }
    };
    StylesManager.insertStylesRulesIntoDocument = function () {
        if (StylesManager.Enabled) {
            var sheet_2 = StylesManager.findSheet(StylesManager.SurveyJSStylesSheetId);
            if (!sheet_2) {
                sheet_2 = StylesManager.createSheet(StylesManager.SurveyJSStylesSheetId);
            }
            if (Object.keys(StylesManager.Styles).length) {
                Object.keys(StylesManager.Styles).forEach(function (selector) {
                    try {
                        sheet_2.insertRule(selector + " { " + StylesManager.Styles[selector] + " }", 0);
                    }
                    catch (e) { }
                });
            }
            if (Object.keys(StylesManager.Media).length) {
                Object.keys(StylesManager.Media).forEach(function (selector) {
                    try {
                        sheet_2.insertRule(StylesManager.Media[selector].media +
                            " { " +
                            selector +
                            " { " +
                            StylesManager.Media[selector].style +
                            " } }", 0);
                    }
                    catch (e) { }
                });
            }
        }
    };
    StylesManager.SurveyJSStylesSheetId = "surveyjs-styles";
    StylesManager.Styles = {};
    StylesManager.Media = {};
    StylesManager.ThemeColors = {
        "modern": modernThemeColors,
        "default": defaultThemeColors,
        "orange": orangeThemeColors,
        "darkblue": darkblueThemeColors,
        "darkrose": darkroseThemeColors,
        "stone": stoneThemeColors,
        "winter": winterThemeColors,
        "winterstone": winterstoneThemeColors,
    };
    StylesManager.ThemeCss = {};
    StylesManager.ThemeSelector = {
        "default": ".sv_main ",
        "modern": ".sv-root-modern "
    };
    StylesManager.Enabled = true;
    return StylesManager;
}());



/***/ }),

/***/ "./src/survey-element.ts":
/*!*******************************!*\
  !*** ./src/survey-element.ts ***!
  \*******************************/
/*! exports provided: SurveyElementCore, DragTypeOverMeEnum, SurveyElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyElementCore", function() { return SurveyElementCore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragTypeOverMeEnum", function() { return DragTypeOverMeEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyElement", function() { return SurveyElement; });
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _actions_adaptive_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions/adaptive-container */ "./src/actions/adaptive-container.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






/**
 * A base class for the [`SurveyElement`](https://surveyjs.io/form-library/documentation/surveyelement) and [`SurveyModel`](https://surveyjs.io/form-library/documentation/surveymodel) classes.
 */
var SurveyElementCore = /** @class */ (function (_super) {
    __extends(SurveyElementCore, _super);
    function SurveyElementCore() {
        var _this = _super.call(this) || this;
        _this.createLocTitleProperty();
        return _this;
    }
    SurveyElementCore.prototype.createLocTitleProperty = function () {
        return this.createLocalizableString("title", this, true);
    };
    Object.defineProperty(SurveyElementCore.prototype, "title", {
        /**
         * A title for the survey element. If `title` is undefined, the `name` property value is displayed instead.
         *
         * Empty pages and panels do not display their titles or names.
         *
         * @see [Configure Question Titles](https://surveyjs.io/form-library/documentation/design-survey-question-titles)
        */
        get: function () {
            return this.getLocalizableStringText("title", this.getDefaultTitleValue());
        },
        set: function (val) {
            this.setLocalizableStringText("title", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "locTitle", {
        get: function () {
            return this.getLocalizableString("title");
        },
        enumerable: false,
        configurable: true
    });
    SurveyElementCore.prototype.getDefaultTitleValue = function () { return undefined; };
    SurveyElementCore.prototype.updateDescriptionVisibility = function (newDescription) {
        this.hasDescription = !!newDescription;
    };
    Object.defineProperty(SurveyElementCore.prototype, "locDescription", {
        get: function () {
            return this.getLocalizableString("description");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "titleTagName", {
        get: function () {
            var titleTagName = this.getDefaultTitleTagName();
            var survey = this.getSurvey();
            return !!survey ? survey.getElementTitleTagName(this, titleTagName) : titleTagName;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElementCore.prototype.getDefaultTitleTagName = function () {
        return _settings__WEBPACK_IMPORTED_MODULE_4__["settings"].titleTags[this.getType()];
    };
    Object.defineProperty(SurveyElementCore.prototype, "hasTitle", {
        get: function () { return this.title.length > 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "hasTitleActions", {
        get: function () { return false; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "hasTitleEvents", {
        get: function () {
            return this.hasTitleActions;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElementCore.prototype.getTitleToolbar = function () { return null; };
    SurveyElementCore.prototype.getTitleOwner = function () { return undefined; };
    Object.defineProperty(SurveyElementCore.prototype, "isTitleOwner", {
        get: function () { return !!this.getTitleOwner(); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "isTitleRenderedAsString", {
        get: function () { return this.getIsTitleRenderedAsString(); },
        enumerable: false,
        configurable: true
    });
    SurveyElementCore.prototype.toggleState = function () { return undefined; };
    Object.defineProperty(SurveyElementCore.prototype, "cssClasses", {
        get: function () { return {}; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "cssTitle", {
        get: function () { return ""; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "ariaTitleId", {
        get: function () { return undefined; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "titleTabIndex", {
        get: function () { return undefined; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "titleAriaExpanded", {
        get: function () { return undefined; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "ariaLabel", {
        get: function () {
            return this.locTitle.renderedHtml;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElementCore.prototype, "titleAriaLabel", {
        get: function () {
            return this.ariaLabel;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElementCore.prototype.getIsTitleRenderedAsString = function () { return !this.isTitleOwner; };
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], SurveyElementCore.prototype, "hasDescription", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({
            localizable: true,
            onSet: function (newDescription, self) {
                self.updateDescriptionVisibility(self, newDescription);
            }
        })
    ], SurveyElementCore.prototype, "description", void 0);
    return SurveyElementCore;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));

var DragTypeOverMeEnum;
(function (DragTypeOverMeEnum) {
    DragTypeOverMeEnum[DragTypeOverMeEnum["InsideEmptyPanel"] = 1] = "InsideEmptyPanel";
    DragTypeOverMeEnum[DragTypeOverMeEnum["MultilineRight"] = 2] = "MultilineRight";
    DragTypeOverMeEnum[DragTypeOverMeEnum["MultilineLeft"] = 3] = "MultilineLeft";
})(DragTypeOverMeEnum || (DragTypeOverMeEnum = {}));
/**
 * A base class for all survey elements.
 */
var SurveyElement = /** @class */ (function (_super) {
    __extends(SurveyElement, _super);
    function SurveyElement(name) {
        var _this = _super.call(this) || this;
        _this.selectedElementInDesignValue = _this;
        _this.disableDesignActions = SurveyElement.CreateDisabledDesignElements;
        _this.parentQuestionValue = null;
        _this.isContentElement = false;
        _this.isEditableTemplateElement = false;
        _this.isInteractiveDesignElement = true;
        _this.isSingleInRow = true;
        _this.name = name;
        _this.createNewArray("errors");
        _this.createNewArray("titleActions");
        _this.registerPropertyChangedHandlers(["isReadOnly"], function () { _this.onReadOnlyChanged(); });
        _this.registerPropertyChangedHandlers(["errors"], function () { _this.updateVisibleErrors(); });
        _this.registerPropertyChangedHandlers(["isSingleInRow"], function () { _this.updateElementCss(false); });
        return _this;
    }
    SurveyElement.getProgressInfoByElements = function (children, isRequired) {
        var info = _base__WEBPACK_IMPORTED_MODULE_1__["Base"].createProgressInfo();
        for (var i = 0; i < children.length; i++) {
            if (!children[i].isVisible)
                continue;
            var childInfo = children[i].getProgressInfo();
            info.questionCount += childInfo.questionCount;
            info.answeredQuestionCount += childInfo.answeredQuestionCount;
            info.requiredQuestionCount += childInfo.requiredQuestionCount;
            info.requiredAnsweredQuestionCount +=
                childInfo.requiredAnsweredQuestionCount;
        }
        if (isRequired && info.questionCount > 0) {
            if (info.requiredQuestionCount == 0)
                info.requiredQuestionCount = 1;
            if (info.answeredQuestionCount > 0)
                info.requiredAnsweredQuestionCount = 1;
        }
        return info;
    };
    SurveyElement.ScrollElementToTop = function (elementId) {
        if (!elementId || typeof document === "undefined")
            return false;
        var el = document.getElementById(elementId);
        if (!el || !el.scrollIntoView)
            return false;
        var elemTop = el.getBoundingClientRect().top;
        if (elemTop < 0)
            el.scrollIntoView();
        return elemTop < 0;
    };
    SurveyElement.GetFirstNonTextElement = function (elements, removeSpaces) {
        if (removeSpaces === void 0) { removeSpaces = false; }
        if (!elements || !elements.length || elements.length == 0)
            return null;
        if (removeSpaces) {
            var tEl = elements[0];
            if (tEl.nodeName === "#text")
                tEl.data = "";
            tEl = elements[elements.length - 1];
            if (tEl.nodeName === "#text")
                tEl.data = "";
        }
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].nodeName != "#text" && elements[i].nodeName != "#comment")
                return elements[i];
        }
        return null;
    };
    SurveyElement.FocusElement = function (elementId) {
        if (!elementId || typeof document === "undefined")
            return false;
        var res = SurveyElement.focusElementCore(elementId);
        if (!res) {
            setTimeout(function () {
                SurveyElement.focusElementCore(elementId);
            }, 10);
        }
        return res;
    };
    SurveyElement.focusElementCore = function (elementId) {
        if (!document)
            return false;
        var el = document.getElementById(elementId);
        if (el && !el["disabled"]) {
            el.focus();
            return true;
        }
        return false;
    };
    SurveyElement.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (name === "state") {
            this.updateElementCss(false);
            if (this.stateChangedCallback)
                this.stateChangedCallback();
        }
    };
    SurveyElement.prototype.getSkeletonComponentNameCore = function () {
        if (this.survey) {
            return this.survey.getSkeletonComponentName(this);
        }
        return "";
    };
    Object.defineProperty(SurveyElement.prototype, "parentQuestion", {
        /**
         * A Dynamic Panel, Dynamic Matrix, or Dropdown Matrix that includes the current question.
         *
         * This property is `null` for standalone questions.
         */
        get: function () {
            return this.parentQuestionValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.setParentQuestion = function (val) {
        this.parentQuestionValue = val;
        this.onParentQuestionChanged();
    };
    SurveyElement.prototype.onParentQuestionChanged = function () { };
    Object.defineProperty(SurveyElement.prototype, "skeletonComponentName", {
        get: function () {
            return this.getSkeletonComponentNameCore();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "state", {
        /**
         * Gets and sets the survey element's expand state.
         *
         * Possible values:
         *
         * - `"default"` (default) - The survey element is displayed in full and cannot be collapsed in the UI.
         * - `"expanded"` - The survey element is displayed in full and can be collapsed in the UI.
         * - `"collapsed"` - The survey element displays only `title` and `description` and can be expanded in the UI.
         *
         * @see toggleState
         * @see collapse
         * @see expand
         * @see isCollapsed
         * @see isExpanded
         */
        get: function () {
            return this.getPropertyValue("state");
        },
        set: function (val) {
            this.setPropertyValue("state", val);
            this.notifyStateChanged();
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.notifyStateChanged = function () {
        if (this.survey) {
            this.survey.elementContentVisibilityChanged(this);
        }
    };
    Object.defineProperty(SurveyElement.prototype, "isCollapsed", {
        /**
         * Returns `true` if the survey element is collapsed.
         * @see state
         * @see toggleState
         * @see collapse
         * @see expand
         * @see isExpanded
         */
        get: function () {
            if (this.isDesignMode)
                return;
            return this.state === "collapsed";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "isExpanded", {
        /**
         * Returns `true` if the survey element is expanded.
         * @see state
         * @see toggleState
         * @see collapse
         * @see expand
         * @see isCollapsed
         */
        get: function () {
            return this.state === "expanded";
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Collapses the survey element.
     *
     * In collapsed state, the element displays only `title` and `description`.
     * @see title
     * @see description
     * @see state
     * @see toggleState
     * @see expand
     * @see isCollapsed
     * @see isExpanded
     */
    SurveyElement.prototype.collapse = function () {
        if (this.isDesignMode)
            return;
        this.state = "collapsed";
    };
    /**
     * Expands the survey element.
     * @see state
     * @see toggleState
     * @see collapse
     * @see isCollapsed
     * @see isExpanded
     */
    SurveyElement.prototype.expand = function () {
        this.state = "expanded";
    };
    /**
     * Toggles the survey element's `state` between collapsed and expanded.
     * @see state
     * @see collapse
     * @see expand
     * @see isCollapsed
     * @see isExpanded
     */
    SurveyElement.prototype.toggleState = function () {
        if (this.isCollapsed) {
            this.expand();
            return true;
        }
        if (this.isExpanded) {
            this.collapse();
            return false;
        }
        return true;
    };
    Object.defineProperty(SurveyElement.prototype, "hasStateButton", {
        get: function () {
            return this.isExpanded || this.isCollapsed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "shortcutText", {
        get: function () {
            return this.title || this.name;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getTitleToolbar = function () {
        if (!this.titleToolbarValue) {
            this.titleToolbarValue = this.createActionContainer(true);
            this.titleToolbarValue.containerCss = (this.isPanel ? this.cssClasses.panel.titleBar : this.cssClasses.titleBar) || "sv-action-title-bar";
            this.titleToolbarValue.setItems(this.getTitleActions());
        }
        return this.titleToolbarValue;
    };
    SurveyElement.prototype.createActionContainer = function (allowAdaptiveActions) {
        var actionContainer = allowAdaptiveActions ? new _actions_adaptive_container__WEBPACK_IMPORTED_MODULE_2__["AdaptiveActionContainer"]() : new _actions_container__WEBPACK_IMPORTED_MODULE_5__["ActionContainer"]();
        if (this.survey && !!this.survey.getCss().actionBar) {
            actionContainer.cssClasses = this.survey.getCss().actionBar;
        }
        return actionContainer;
    };
    Object.defineProperty(SurveyElement.prototype, "titleActions", {
        get: function () {
            return this.getPropertyValue("titleActions");
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getTitleActions = function () {
        if (!this.isTitleActionRequested) {
            this.updateTitleActions();
            this.isTitleActionRequested = true;
        }
        return this.titleActions;
    };
    SurveyElement.prototype.getDefaultTitleActions = function () {
        return [];
    };
    SurveyElement.prototype.updateTitleActions = function () {
        var actions = this.getDefaultTitleActions();
        if (!!this.survey) {
            actions = this.survey.getUpdatedElementTitleActions(this, actions);
        }
        this.setPropertyValue("titleActions", actions);
    };
    Object.defineProperty(SurveyElement.prototype, "hasTitleActions", {
        get: function () {
            return this.getTitleActions().length > 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "hasTitleEvents", {
        get: function () {
            return this.state !== undefined && this.state !== "default";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "titleTabIndex", {
        get: function () {
            return !this.isPage && this.state !== "default" ? 0 : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "titleAriaExpanded", {
        get: function () {
            if (this.isPage || this.state === "default")
                return undefined;
            return this.state === "expanded" ? "true" : "false";
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.setSurveyImpl = function (value, isLight) {
        this.surveyImplValue = value;
        if (!this.surveyImplValue) {
            this.setSurveyCore(null);
            this.surveyDataValue = null;
        }
        else {
            this.surveyDataValue = this.surveyImplValue.getSurveyData();
            this.setSurveyCore(this.surveyImplValue.getSurvey());
            this.textProcessorValue = this.surveyImplValue.getTextProcessor();
            this.onSetData();
        }
        if (!!this.survey) {
            this.clearCssClasses();
        }
    };
    SurveyElement.prototype.canRunConditions = function () {
        return _super.prototype.canRunConditions.call(this) && !!this.data;
    };
    SurveyElement.prototype.getDataFilteredValues = function () {
        return !!this.data ? this.data.getFilteredValues() : null;
    };
    SurveyElement.prototype.getDataFilteredProperties = function () {
        var props = !!this.data ? this.data.getFilteredProperties() : {};
        props.question = this;
        return props;
    };
    Object.defineProperty(SurveyElement.prototype, "surveyImpl", {
        get: function () {
            return this.surveyImplValue;
        },
        enumerable: false,
        configurable: true
    });
    /* You shouldn't use this method ever */
    SurveyElement.prototype.__setData = function (data) {
        if (_settings__WEBPACK_IMPORTED_MODULE_4__["settings"].supportCreatorV2) {
            this.surveyDataValue = data;
        }
    };
    Object.defineProperty(SurveyElement.prototype, "data", {
        get: function () {
            return this.surveyDataValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "survey", {
        /**
         * Returns the survey object.
         */
        get: function () {
            return this.getSurvey();
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        if (!!this.surveyValue)
            return this.surveyValue;
        if (!!this.surveyImplValue) {
            this.setSurveyCore(this.surveyImplValue.getSurvey());
        }
        return this.surveyValue;
    };
    SurveyElement.prototype.setSurveyCore = function (value) {
        this.surveyValue = value;
        if (!!this.surveyChangedCallback) {
            this.surveyChangedCallback();
        }
    };
    Object.defineProperty(SurveyElement.prototype, "isInternal", {
        get: function () {
            return this.isContentElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "areInvisibleElementsShowing", {
        get: function () {
            return (!!this.survey &&
                this.survey.areInvisibleElementsShowing &&
                !this.isContentElement);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "isVisible", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "isReadOnly", {
        /**
         * Returns `true` if the survey element or its parent element is read-only.
         *
         * If you want to switch a survey element to the read-only state based on a condition, specify the [`enableIf`](https://surveyjs.io/form-library/documentation/question#enableIf) property. Refer to the following help topic for information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see readOnly
         */
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "readOnly", {
        /**
         * Makes the survey element read-only.
         *
         * If you want to switch a survey element to the read-only state based on a condition, specify the [`enableIf`](https://surveyjs.io/form-library/documentation/question#enableIf) property. Refer to the following help topic for information: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#conditional-visibility).
         * @see isReadOnly
         */
        get: function () {
            return this.getPropertyValue("readOnly", false);
        },
        set: function (val) {
            if (this.readOnly == val)
                return;
            this.setPropertyValue("readOnly", val);
            if (!this.isLoadingFromJson) {
                this.setPropertyValue("isReadOnly", this.isReadOnly);
            }
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.onReadOnlyChanged = function () {
        if (!!this.readOnlyChangedCallback) {
            this.readOnlyChangedCallback();
        }
    };
    Object.defineProperty(SurveyElement.prototype, "css", {
        get: function () {
            return !!this.survey ? this.survey.getCss() : {};
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.ensureCssClassesValue = function () {
        if (!this.cssClassesValue) {
            this.cssClassesValue = this.calcCssClasses(this.css);
            this.updateElementCssCore(this.cssClassesValue);
        }
    };
    Object.defineProperty(SurveyElement.prototype, "cssClasses", {
        /**
         * Returns an object in which keys are UI elements and values are CSS classes applied to them.
         *
         * Use the following events of the [`SurveyModel`](https://surveyjs.io/form-library/documentation/surveymodel) object to override CSS classes:
         *
         * - [`onUpdatePageCssClasses`](https://surveyjs.io/form-library/documentation/surveymodel#onUpdatePageCssClasses)
         * - [`onUpdatePanelCssClasses`](https://surveyjs.io/form-library/documentation/surveymodel#onUpdatePanelCssClasses)
         * - [`onUpdateQuestionCssClasses`](https://surveyjs.io/form-library/documentation/surveymodel#onUpdateQuestionCssClasses)
         */
        get: function () {
            if (!this.survey)
                return this.calcCssClasses(this.css);
            this.ensureCssClassesValue();
            return this.cssClassesValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.calcCssClasses = function (css) { return undefined; };
    SurveyElement.prototype.updateElementCssCore = function (cssClasses) { };
    Object.defineProperty(SurveyElement.prototype, "cssError", {
        get: function () { return ""; },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.updateElementCss = function (reNew) {
        this.clearCssClasses();
    };
    SurveyElement.prototype.clearCssClasses = function () {
        this.cssClassesValue = undefined;
    };
    SurveyElement.prototype.getIsLoadingFromJson = function () {
        if (_super.prototype.getIsLoadingFromJson.call(this))
            return true;
        return this.survey ? this.survey.isLoadingFromJson : false;
    };
    Object.defineProperty(SurveyElement.prototype, "name", {
        /**
         * A survey element identifier.
         *
         * > Question names must be unique.
         */
        get: function () {
            return this.getPropertyValue("name", "");
        },
        set: function (val) {
            var oldValue = this.name;
            this.setPropertyValue("name", this.getValidName(val));
            if (!this.isLoadingFromJson && !!oldValue) {
                this.onNameChanged(oldValue);
            }
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getValidName = function (name) {
        return name;
    };
    SurveyElement.prototype.onNameChanged = function (oldValue) { };
    SurveyElement.prototype.updateBindingValue = function (valueName, value) {
        if (!!this.data &&
            !this.isTwoValueEquals(value, this.data.getValue(valueName))) {
            this.data.setValue(valueName, value, false);
        }
    };
    Object.defineProperty(SurveyElement.prototype, "errors", {
        /**
         * Validation errors. Call the `validate()` method to validate survey element data.
         * @see validate
         */
        get: function () {
            return this.getPropertyValue("errors");
        },
        set: function (val) {
            this.setPropertyValue("errors", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.updateVisibleErrors = function () {
        var counter = 0;
        for (var i = 0; i < this.errors.length; i++) {
            if (this.errors[i].visible)
                counter++;
        }
        this.hasVisibleErrors = counter > 0;
    };
    Object.defineProperty(SurveyElement.prototype, "containsErrors", {
        /**
         * Returns `true` if the survey element or its child elements have validation errors.
         *
         * This property contains the result of the most recent validation. This result may be outdated. Call the `validate` method to get an up-to-date value.
         * @see errors
         */
        get: function () {
            return this.getPropertyValue("containsErrors", false);
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.updateContainsErrors = function () {
        this.setPropertyValue("containsErrors", this.getContainsErrors());
    };
    SurveyElement.prototype.getContainsErrors = function () {
        return this.errors.length > 0;
    };
    Object.defineProperty(SurveyElement.prototype, "selectedElementInDesign", {
        get: function () {
            return this.selectedElementInDesignValue;
        },
        set: function (val) {
            this.selectedElementInDesignValue = val;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.updateCustomWidgets = function () { };
    SurveyElement.prototype.onSurveyLoad = function () { };
    SurveyElement.prototype.onFirstRendering = function () {
        this.ensureCssClassesValue();
    };
    SurveyElement.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        if (!this.survey) {
            this.onSurveyLoad();
        }
    };
    SurveyElement.prototype.setVisibleIndex = function (index) {
        return 0;
    };
    Object.defineProperty(SurveyElement.prototype, "isPage", {
        /**
         * Returns `true` if the survey element is a page.
         * @see Base.getType
         */
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "isPanel", {
        /**
         * Returns `true` if the survey element is a panel.
         * @see Base.getType
         */
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "isQuestion", {
        /**
         * Returns `true` if the survey element is a question.
         * @see Base.getType
         */
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.delete = function () { };
    /**
     * Returns the survey's [locale](https://surveyjs.io/form-library/documentation/surveymodel#locale).
     *
     * If a default locale is used, this method returns an empty string. To get the applied locale in this case, use the following code:
     *
     * ```js
     * import { surveyLocalization } from 'survey-core';
     * const defaultLocale = surveyLocalization.defaultLocale;
     * ```
     *
     * @see [Localization & Globalization](https://surveyjs.io/form-library/documentation/localization)
     */
    SurveyElement.prototype.getLocale = function () {
        return this.survey
            ? this.survey.getLocale()
            : this.locOwner
                ? this.locOwner.getLocale()
                : "";
    };
    SurveyElement.prototype.getMarkdownHtml = function (text, name) {
        return this.survey
            ? this.survey.getSurveyMarkdownHtml(this, text, name)
            : this.locOwner
                ? this.locOwner.getMarkdownHtml(text, name)
                : undefined;
    };
    SurveyElement.prototype.getRenderer = function (name) {
        return this.survey && typeof this.survey.getRendererForString === "function"
            ? this.survey.getRendererForString(this, name)
            : this.locOwner && typeof this.locOwner.getRenderer === "function"
                ? this.locOwner.getRenderer(name)
                : null;
    };
    SurveyElement.prototype.getRendererContext = function (locStr) {
        return this.survey && typeof this.survey.getRendererContextForString === "function"
            ? this.survey.getRendererContextForString(this, locStr)
            : this.locOwner && typeof this.locOwner.getRendererContext === "function"
                ? this.locOwner.getRendererContext(locStr)
                : locStr;
    };
    SurveyElement.prototype.getProcessedText = function (text) {
        if (this.isLoadingFromJson)
            return text;
        if (this.textProcessor)
            return this.textProcessor.processText(text, this.getUseDisplayValuesInDynamicTexts());
        if (this.locOwner)
            return this.locOwner.getProcessedText(text);
        return text;
    };
    SurveyElement.prototype.getUseDisplayValuesInDynamicTexts = function () { return true; };
    SurveyElement.prototype.removeSelfFromList = function (list) {
        if (!list || !Array.isArray(list))
            return;
        var index = list.indexOf(this);
        if (index > -1) {
            list.splice(index, 1);
        }
    };
    Object.defineProperty(SurveyElement.prototype, "textProcessor", {
        get: function () {
            return this.textProcessorValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getProcessedHtml = function (html) {
        if (!html || !this.textProcessor)
            return html;
        return this.textProcessor.processText(html, true);
    };
    SurveyElement.prototype.onSetData = function () { };
    Object.defineProperty(SurveyElement.prototype, "parent", {
        get: function () {
            return this.getPropertyValue("parent", null);
        },
        set: function (val) {
            this.setPropertyValue("parent", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getPage = function (parent) {
        while (parent && parent.parent)
            parent = parent.parent;
        if (parent && parent.getType() == "page")
            return parent;
        return null;
    };
    SurveyElement.prototype.moveToBase = function (parent, container, insertBefore) {
        if (insertBefore === void 0) { insertBefore = null; }
        if (!container)
            return false;
        parent.removeElement(this);
        var index = -1;
        if (_helpers__WEBPACK_IMPORTED_MODULE_3__["Helpers"].isNumber(insertBefore)) {
            index = parseInt(insertBefore);
        }
        if (index == -1 && !!insertBefore && !!insertBefore.getType) {
            index = container.indexOf(insertBefore);
        }
        container.addElement(this, index);
        return true;
    };
    SurveyElement.prototype.setPage = function (parent, newPage) {
        var oldPage = this.getPage(parent);
        //fix for the creator v1: https://github.com/surveyjs/survey-creator/issues/1744
        if (typeof newPage === "string") {
            var survey = this.getSurvey();
            survey.pages.forEach(function (page) {
                if (newPage === page.name)
                    newPage = page;
            });
        }
        if (oldPage === newPage)
            return;
        if (parent)
            parent.removeElement(this);
        if (newPage) {
            newPage.addElement(this, -1);
        }
    };
    SurveyElement.prototype.getSearchableLocKeys = function (keys) {
        keys.push("title");
        keys.push("description");
    };
    Object.defineProperty(SurveyElement.prototype, "isDefaultV2Theme", {
        get: function () {
            return this.survey && this.survey.getCss().root == "sd-root-modern";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "isErrorsModeTooltip", {
        get: function () {
            return this.getIsErrorsModeTooltip();
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getIsErrorsModeTooltip = function () {
        return this.isDefaultV2Theme && this.hasParent && this.getIsTooltipErrorSupportedByParent();
    };
    SurveyElement.prototype.getIsTooltipErrorSupportedByParent = function () {
        var _a;
        return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getIsTooltipErrorInsideSupported();
    };
    SurveyElement.prototype.getIsTooltipErrorInsideSupported = function () {
        return false;
    };
    Object.defineProperty(SurveyElement.prototype, "hasParent", {
        get: function () {
            return (this.parent && !this.parent.isPage) || (this.parent === undefined);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "hasFrameV2", {
        get: function () {
            return !this.hasParent && this.isDefaultV2Theme && !this.isDesignMode && this.isSingleInRow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "width", {
        /**
         * Sets survey element width in CSS values.
         *
         * Default value: ""
         * @see minWidth
         * @see maxWidth
        */
        get: function () {
            return this.getPropertyValue("width", "");
        },
        set: function (val) {
            this.setPropertyValue("width", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "minWidth", {
        /**
         * Gets or sets minimum survey element width in CSS values.
         *
         * Default value: "300px" (taken from [`settings.minWidth`](https://surveyjs.io/form-library/documentation/settings#minWidth))
         * @see maxWidth
         * @see renderWidth
         * @see width
         */
        get: function () {
            return this.getPropertyValue("minWidth");
        },
        set: function (val) {
            this.setPropertyValue("minWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "maxWidth", {
        /**
         * Gets or sets maximum survey element width in CSS values.
         *
         * Default value: "100%" (taken from [`settings.maxWidth`](https://surveyjs.io/form-library/documentation/settings#maxWidth))
         * @see minWidth
         * @see renderWidth
         * @see width
         */
        get: function () {
            return this.getPropertyValue("maxWidth");
        },
        set: function (val) {
            this.setPropertyValue("maxWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "renderWidth", {
        /**
         * Returns a calculated width of the rendered survey element in CSS values.
         * @see width
         * @see minWidth
         * @see maxWidth
         */
        get: function () {
            return this.getPropertyValue("renderWidth", "");
        },
        set: function (val) {
            this.setPropertyValue("renderWidth", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "indent", {
        /**
         * Increases or decreases an indent of survey element content from the left edge. Accepts positive integer values and 0. Does not apply in the Default V2 theme.
         * @see rightIndent
         */
        get: function () {
            return this.getPropertyValue("indent");
        },
        set: function (val) {
            this.setPropertyValue("indent", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "rightIndent", {
        /**
         * Increases or decreases an indent of survey element content from the right edge. Accepts positive integer values and 0. Does not apply in the Default V2 theme.
         * @see indent
         */
        get: function () {
            return this.getPropertyValue("rightIndent", 0);
        },
        set: function (val) {
            this.setPropertyValue("rightIndent", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.getRootStyle = function () {
        var style = {};
        if (!!this.paddingLeft) {
            style["--sv-element-add-padding-left"] = this.paddingLeft;
        }
        if (!!this.paddingRight) {
            style["--sv-element-add-padding-right"] = this.paddingRight;
        }
        return style;
    };
    Object.defineProperty(SurveyElement.prototype, "paddingLeft", {
        get: function () {
            return this.getPropertyValue("paddingLeft", "");
        },
        set: function (val) {
            this.setPropertyValue("paddingLeft", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "paddingRight", {
        get: function () {
            return this.getPropertyValue("paddingRight", "");
        },
        set: function (val) {
            this.setPropertyValue("paddingRight", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "rootStyle", {
        get: function () {
            var style = {};
            if (this.allowRootStyle && this.renderWidth) {
                // style["width"] = this.renderWidth;
                style["flexGrow"] = 1;
                style["flexShrink"] = 1;
                style["flexBasis"] = this.renderWidth;
                style["minWidth"] = this.minWidth;
                style["maxWidth"] = this.maxWidth;
            }
            return style;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyElement.prototype, "clickTitleFunction", {
        get: function () {
            var _this = this;
            if (this.needClickTitleFunction()) {
                return function () {
                    return _this.processTitleClick();
                };
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    SurveyElement.prototype.needClickTitleFunction = function () {
        return this.state !== "default";
    };
    SurveyElement.prototype.processTitleClick = function () {
        if (this.state !== "default") {
            this.toggleState();
        }
    };
    SurveyElement.prototype.localeChanged = function () {
        _super.prototype.localeChanged.call(this);
        this.updateDescriptionVisibility(this.description);
        if (this.errors.length > 0) {
            this.errors.forEach(function (err) {
                err.updateText();
            });
        }
    };
    SurveyElement.CreateDisabledDesignElements = false;
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: null })
    ], SurveyElement.prototype, "dragTypeOverMe", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], SurveyElement.prototype, "isDragMe", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])()
    ], SurveyElement.prototype, "cssClassesValue", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: false })
    ], SurveyElement.prototype, "hasVisibleErrors", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], SurveyElement.prototype, "isSingleInRow", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_0__["property"])({ defaultValue: true })
    ], SurveyElement.prototype, "allowRootStyle", void 0);
    return SurveyElement;
}(SurveyElementCore));



/***/ }),

/***/ "./src/survey-error.ts":
/*!*****************************!*\
  !*** ./src/survey-error.ts ***!
  \*****************************/
/*! exports provided: SurveyError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyError", function() { return SurveyError; });
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");


var SurveyError = /** @class */ (function () {
    function SurveyError(text, errorOwner) {
        if (text === void 0) { text = null; }
        if (errorOwner === void 0) { errorOwner = null; }
        this.text = text;
        this.errorOwner = errorOwner;
        this.visible = true;
        this.onUpdateErrorTextCallback = undefined;
    }
    SurveyError.prototype.equalsTo = function (error) {
        if (!error || !error.getErrorType)
            return false;
        if (this.getErrorType() !== error.getErrorType())
            return false;
        return this.text === error.text && this.visible === error.visible;
    };
    Object.defineProperty(SurveyError.prototype, "locText", {
        get: function () {
            if (!this.locTextValue) {
                this.locTextValue = new _localizablestring__WEBPACK_IMPORTED_MODULE_0__["LocalizableString"](this.errorOwner, true);
                this.locTextValue.storeDefaultText = true;
                this.locTextValue.text = this.getText();
            }
            return this.locTextValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyError.prototype.getText = function () {
        var res = this.text;
        if (!res)
            res = this.getDefaultText();
        if (!!this.errorOwner) {
            res = this.errorOwner.getErrorCustomText(res, this);
        }
        return res;
    };
    SurveyError.prototype.getErrorType = function () {
        return "base";
    };
    SurveyError.prototype.getDefaultText = function () {
        return "";
    };
    SurveyError.prototype.getLocale = function () {
        return !!this.errorOwner ? this.errorOwner.getLocale() : "";
    };
    SurveyError.prototype.getLocalizationString = function (locStrName) {
        return _surveyStrings__WEBPACK_IMPORTED_MODULE_1__["surveyLocalization"].getString(locStrName, this.getLocale());
    };
    SurveyError.prototype.updateText = function () {
        if (this.onUpdateErrorTextCallback) {
            this.onUpdateErrorTextCallback(this);
        }
        this.locText.text = this.getText();
    };
    return SurveyError;
}());



/***/ }),

/***/ "./src/survey.ts":
/*!***********************!*\
  !*** ./src/survey.ts ***!
  \***********************/
/*! exports provided: SurveyModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyModel", function() { return SurveyModel; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _survey_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./survey-element */ "./src/survey-element.ts");
/* harmony import */ var _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaultCss/defaultV2Css */ "./src/defaultCss/defaultV2Css.ts");
/* harmony import */ var _textPreProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./textPreProcessor */ "./src/textPreProcessor.ts");
/* harmony import */ var _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./conditionProcessValue */ "./src/conditionProcessValue.ts");
/* harmony import */ var _dxSurveyService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dxSurveyService */ "./src/dxSurveyService.ts");
/* harmony import */ var _surveyStrings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./surveyStrings */ "./src/surveyStrings.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _localizablestring__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./localizablestring */ "./src/localizablestring.ts");
/* harmony import */ var _stylesmanager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stylesmanager */ "./src/stylesmanager.ts");
/* harmony import */ var _surveyTimerModel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./surveyTimerModel */ "./src/surveyTimerModel.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/utils */ "./src/utils/utils.ts");
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _actions_container__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./actions/container */ "./src/actions/container.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
/* harmony import */ var _notifier__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./notifier */ "./src/notifier.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




















/**
 * The `SurveyModel` object contains properties and methods that allow you to control the survey and access its elements.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/nps-question/ (linkStyle))
 */
var SurveyModel = /** @class */ (function (_super) {
    __extends(SurveyModel, _super);
    //#endregion
    function SurveyModel(jsonObj, renderedElement) {
        if (jsonObj === void 0) { jsonObj = null; }
        if (renderedElement === void 0) { renderedElement = null; }
        var _this = _super.call(this) || this;
        _this.valuesHash = {};
        _this.variablesHash = {};
        //#region Event declarations
        /**
         * An event that is raised after a trigger is executed.
         *
         * - `sender`: `SurveyModel`- A survey instance that raised the event.
         * - `options.trigger`: [`Trigger`](https://surveyjs.io/form-library/documentation/api-reference/trigger) - A trigger that has been executed.
         *
         * For more information about triggers, refer to the following help topic: [Conditional Survey Logic (Triggers)](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-survey-logic-triggers).
         * @see triggers
         * @see runTriggers
         */
        _this.onTriggerExecuted = _this.addEvent();
        /**
         * An event that is raised before the survey is completed. Use this event to prevent survey completion.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.allow`: `Boolean`\
         * Set this property to `false` if you want to prevent survey completion.
         * - `options.isCompleteOnTrigger`: `Boolean`\
         * Returns `true` if survey completion is caused by the ["complete" trigger](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#complete).
         * @see onComplete
         * @see doComplete
         * @see allowCompleteSurveyAutomatic
         */
        _this.onCompleting = _this.addEvent();
        /**
         * An event that is raised after the survey is completed. Use this event to send survey results to the server.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event. Use `sender.data` to access survey results.
         * - `options.isCompleteOnTrigger`: `Boolean`\
         * Returns `true` if survey completion is caused by the ["complete" trigger](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#complete).
         * - `options.showSaveInProgress(text?: string)`\
         * Call this method to indicate that the save operation is in progress. You can use the `text` parameter to display a custom message.
         * - `options.showSaveError(text?: string)`\
         * Call this method to indicate that an error occurred during the save operation. You can use the `text` parameter to display a custom error message.
         * - `options.showSaveSuccess(text?: string)`\
         * Call this method to indicate that survey results are successfully saved. You can use the `text` parameter to display a custom message.
         * - `options.clearSaveMessages()`\
         * Call this method to hide the save operation messages.
         *
         * For an example of how to use the methods described above, refer to the following help topic: [Store Survey Results in Your Own Database](https://surveyjs.io/form-library/documentation/handle-survey-results-store#store-survey-results-in-your-own-database).
         *
         * > Do not disable the [`showCompletedPage`](https://surveyjs.io/form-library/documentation/surveymodel#showCompletedPage) property if you call one of the `options.showSave...` methods. This is required because the UI that indicates data saving progress is integrated into the complete page. If you hide the complete page, the UI also becomes invisible.
         * @see onPartialSend
         * @see doComplete
         * @see allowCompleteSurveyAutomatic
         */
        _this.onComplete = _this.addEvent();
        /**
         * An event that is raised before the survey displays a [preview](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#preview-page). Use this event to cancel the preview.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.allow`: `Boolean`\
         * Set this property to `false` if you want to cancel the preview.
         * @see showPreviewBeforeComplete
         */
        _this.onShowingPreview = _this.addEvent();
        /**
         * An event that is raised before the survey navigates to a specified URL. Use this event to change the URL or cancel the navigation.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.url`: `String`\
         * A URL to which respondents should be navigated. You can modify this parameter's value.
         * - `options.allow`: `Boolean`\
         * Set this property to `false` if you want to cancel the navigation and show the [complete page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#complete-page).
         * @see navigateToUrl
         * @see navigateToUrlOnCondition
         */
        _this.onNavigateToUrl = _this.addEvent();
        /**
         * An event that is raised when the survey [`state`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#state) changes from `"starting"` to `"running"`. This occurs only if your survey includes a [start page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#start-page).
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * @see firstPageIsStarted
         */
        _this.onStarted = _this.addEvent();
        /**
         * Use this event to save incomplete survey results. Enable the [`sendResultOnPageNext`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#sendResultOnPageNext) property for this event to occur.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         *
         * Refer to the following help topic for more information on the use case: [Continue an Incomplete Survey](https://surveyjs.io/form-library/documentation/handle-survey-results-continue-incomplete).
         */
        _this.onPartialSend = _this.addEvent();
        /**
         * An event that is raised before the current page is switched.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.oldCurrentPage`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * The current page.
         * - `options.newCurrentPage`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * A page that will be current.
         * - `options.allow`: `Boolean`\
         * Set this property to `false` if you do not want to switch the current page.
         * - `options.isNextPage`: `Boolean`\
         * Returns `true` if the respondent is going forward along the survey.
         * - `options.isPrevPage`: `Boolean`\
         * Returns `true` if the respondent is going backwards, that is, `newCurrentPage` is earlier in the survey than `oldCurrentPage`.
         * @see currentPageNo
         * @see nextPage
         * @see prevPage
         **/
        _this.onCurrentPageChanging = _this.addEvent();
        /**
         * An event that is raised after the current page is switched.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.oldCurrentPage`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * A page that used to be current.
         * - `options.newCurrentPage`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * The current page.
         * - `options.isNextPage`: `Boolean`\
         * Returns `true` if the respondent is going forward along the survey.
         * - `options.isPrevPage`: `Boolean`\
         * Returns `true` if the respondent is going backwards, that is, `newCurrentPage` is earlier in the survey than `oldCurrentPage`.
         * @see currentPageNo
         * @see nextPage
         * @see prevPage
         */
        _this.onCurrentPageChanged = _this.addEvent();
        /**
         * An event that is raised before a question value is changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.name`: `String`\
         * The `name` of the question whose value is being changed. If you use the [`valueName`](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#valueName) property, this parameter contains its value.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * The question whose value is being changed. If you use `valueName` and it is the same for several questions, this parameter contains the first question.
         * - `options.oldValue`: `any`\
         * A previous value.
         * - `options.value`: `any`\
         * A new value. You can change it if required.
         * @see setValue
         */
        _this.onValueChanging = _this.addEvent();
        /**
         * An event that is raised after a question value is changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.name`: `String`\
         * The `name` of the question whose value has been changed. If you use the [`valueName`](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#valueName) property, this parameter contains its value.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * The question whose value has been changed. If you use `valueName`, and it is the same for several questions, this parameter contains the first question.
         * - `options.value`: `any`\
         * A new value.
         *
         * To handle value changes in matrix cells or panels within a [Dynamic Panel](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model), use the [`onMatrixCellValueChanged`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onMatrixCellValueChanged) or [`onDynamicPanelItemValueChanged`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onDynamicPanelItemValueChanged) event.
         * @see setValue
         */
        _this.onValueChanged = _this.addEvent();
        /**
         * An event that is raised after a [variable](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#variables) or [calculated value](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#calculated-values) is changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.name`: `String`\
         * The name of the variable or calculated value that has been changed.
         * - `options.value`: `any`\
         * A new value for the variable or calculated value.
         * @see setVariable
         * @see calculatedValues
         */
        _this.onVariableChanged = _this.addEvent();
        /**
         * An event that is raised after question visibility is changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * A question whose visibility has been changed.
         * - `options.name`: `String`\
         * The question's name.
         * - `options.visible`: `Boolean`\
         * Indicates whether the question is visible now.
         *
         * Refer to the following help topic for information on how to implement conditional visibility: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility).
         */
        _this.onQuestionVisibleChanged = _this.addEvent();
        /**
         * Obsolete. Please use onQuestionVisibleChanged event.
         * @see onQuestionVisibleChanged
         */
        _this.onVisibleChanged = _this.onQuestionVisibleChanged;
        /**
         * An event that is raised after page visibility is changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * A page whose visibility has been changed.
         * - `options.visible`: `Boolean`\
         * Indicates whether the page is visible now.
         *
         * Refer to the following help topic for information on how to implement conditional visibility: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility).
         */
        _this.onPageVisibleChanged = _this.addEvent();
        /**
         * An event that is raised after page visibility is changed.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A panel whose visibility has been changed.
         * - `options.visible`: `Boolean`\
         * Indicates whether the panel is visible now.
         *
         * Refer to the following help topic for information on how to implement conditional visibility: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility).
         */
        _this.onPanelVisibleChanged = _this.addEvent();
        /**
         * An event that is raised when the survey creates any new object derived from [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question).
         *
         * In a survey, complex elements ([Dynamic Matrix](https://surveyjs.io/form-library/examples/questiontype-matrixdynamic/), [Multiple Text](https://surveyjs.io/form-library/examples/questiontype-multipletext/), and [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/)) are composed of questions. Use this event to customize any question regardless of which survey element it belongs to.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * A created question.
         *
         * To use this event for questions loaded from JSON, create an empty survey model, add an event handler, and only then populate the model from the JSON object:
         *
         * ```js
         * import { Model } from "survey-core";
         *
         * const surveyJson = {
         *    // ...
         * };
         * // Create an empty model
         * const survey = new Model();
         * // Add an event handler
         * survey.onQuestionCreated.add((sender, options) => {
         *   //...
         * });
         * // Load the survey JSON schema
         * survey.fromJSON(surveyJson);
         * ```
         * @see onQuestionAdded
         */
        _this.onQuestionCreated = _this.addEvent();
        /**
         * An event that is raised when a new question is added to a panel or page.
         *
         * * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * A new question.
         * - `options.name`: `String`\
         * The question's name.
         * - `options.index`: `Number`\
         * The question's index within the parent container (panel or page).
         * - `options.parent`: [`PanelModelBase`](https://surveyjs.io/form-library/documentation/api-reference/panelmodelbase)\
         * The parent container (panel or page).
         * - `options.page`: [`PanelModelBase`](https://surveyjs.io/form-library/documentation/api-reference/panelmodelbase)\
         * A page that nests the added question.
         *
         * To use this event for questions loaded from JSON, create an empty survey model, add an event handler, and only then populate the model from the JSON object:
         *
         * ```js
         * import { Model } from "survey-core";
         *
         * const surveyJson = {
         *    // ...
         * };
         * // Create an empty model
         * const survey = new Model();
         * // Add an event handler
         * survey.onQuestionAdded.add((sender, options) => {
         *   //...
         * });
         * // Load the survey JSON schema
         * survey.fromJSON(surveyJson);
         * ```
         * @see onQuestionCreated
         */
        _this.onQuestionAdded = _this.addEvent();
        /**
         * An event that is raised after a question is deleted from the survey.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * A deleted question.
         * - `options.name`: `String`\
         * The question's name.
         */
        _this.onQuestionRemoved = _this.addEvent();
        /**
         *  An event that is raised when a new panel is added to a page.
         *
         * * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A new panel.
         * - `options.name`: `String`\
         * The panel's name.
         * - `options.index`: `Number`\
         * The panel's index within the parent container (panel or page).
         * - `options.parent`: [`PanelModelBase`](https://surveyjs.io/form-library/documentation/api-reference/panelmodelbase)\
         * The parent container (panel or page).
         * - `options.page`: [`PanelModelBase`](https://surveyjs.io/form-library/documentation/api-reference/panelmodelbase)\
         * A page that nests the added panel.
         */
        _this.onPanelAdded = _this.addEvent();
        /**
         * An event that is raised after a panel is deleted from the survey.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A deleted panel.
         * - `options.name`: `String`\
         * The panel's name.
         */
        _this.onPanelRemoved = _this.addEvent();
        /**
         *  An event that is raised when a new page is added to the survey.
         *
         * * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
         * A new page.
         * @see PanelModel
         */
        _this.onPageAdded = _this.addEvent();
        /**
         * An event that is raised when a question value is being validated. Use this event to specify a custom error message.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * A question being validated.
         * - `options.name`: `String`\
         * The question's name.
         * - `options.value`: `any`\
         * A question value being validated.
         * - `options.error`: `String`\
         * An error message that you should specify if validation fails.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/add-custom-input-validation/ (linkStyle))
         * @see onServerValidateQuestions
         * @see onValidatePanel
         * @see onMatrixCellValidate
         * @see onSettingQuestionErrors
         */
        _this.onValidateQuestion = _this.addEvent();
        /**
         * An event that is raised before errors are assigned to a question. You may add/remove/modify errors for a question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a validated question.
         * - `options.errors` - the list of errors. The list is empty by default and remains empty if a validated question has no errors.
         * @see onValidateQuestion
         */
        _this.onSettingQuestionErrors = _this.addEvent();
        /**
         * Use this event to validate data on your server.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.data`: `Object`\
         * Question values. You can get an individual question value as follows: `options.data["questionName"]`.
         * - `options.errors`: `Object`\
         * An object for your error messages. Set error messages as follows: `options.errors["questionName"] = "My error message"`
         * - `options.complete()`: Method\
         * A method that you should call when a request to the server has completed.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/javascript-server-side-form-validation/ (linkStyle))
         * @see onValidateQuestion
         * @see onValidatePanel
         */
        _this.onServerValidateQuestions = _this.addEvent();
        /**
         * An event that is raised when a panel is being validated. Use this event to specify a custom error message.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A panel being validated.
         * - `options.name`: `String`\
         * The panel's name.
         * - `options.error`: `String`\
         * An error message that you should specify if validation fails.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/add-custom-input-validation/ (linkStyle))
         * @see onValidateQuestion
         * @see onServerValidateQuestions
         */
        _this.onValidatePanel = _this.addEvent();
        /**
         * Use the event to change the default error text.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.text` - an error text.
         * - `options.error` - an instance of the `SurveyError` object.
         * - `options.obj` - an instance of Question, Panel or Survey object to where error is located.
         * - `options.name` - the error name. The following error names are available:
         * required, requireoneanswer, requirenumeric, exceedsize, webrequest, webrequestempty, otherempty,
         * uploadingfile, requiredinallrowserror, minrowcounterror, keyduplicationerror, custom
         */
        _this.onErrorCustomText = _this.addEvent();
        /**
         * Use the this event to be notified when the survey finished validate questions on the current page. It commonly happens when a user try to go to the next page or complete the survey
         * options.questions - the list of questions that have errors
         * options.errors - the list of errors
         * options.page - the page where question(s) are located
         */
        _this.onValidatedErrorsOnCurrentPage = _this.addEvent();
        /**
         * Use this event to modify the HTML content before rendering, for example `completeHtml` or `loadingHtml`.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.html` - an HTML that you may change before text processing and then rendering. specifies the modified HTML content.
         * @see completedHtml
         * @see loadingHtml
         * @see QuestionHtmlModel.html
         */
        _this.onProcessHtml = _this.addEvent();
        /**
         * Use this event to change a question's display text.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
         * A Question instance for which the event is raised.
         * - `options.displayValue`: `String`\
         * A question's display text. You can assign a custom value to this parameter.
         */
        _this.onGetQuestionDisplayValue = _this.addEvent();
        /**
         * Use this event to change the question title in code. If you want to remove question numbering then set showQuestionNumbers to "off".
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.title` - a calculated question title, based on question `title`, `name`.
         * - `options.question` - a question object.
         * @see showQuestionNumbers
         * @see requiredText
         */
        _this.onGetQuestionTitle = _this.addEvent();
        /**
         * Use this event to change the element title tag name that renders by default.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.element` - an element (question, panel, page and survey) that SurveyJS is going to render.
         * - `options.tagName` - an element title tagName that are used to render a title. You can change it from the default value.
         * @see showQuestionNumbers
         * @see requiredText
         */
        _this.onGetTitleTagName = _this.addEvent();
        /**
         * Use this event to change the question no in code. If you want to remove question numbering then set showQuestionNumbers to "off".
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.no` - a calculated question no, based on question `visibleIndex`, survey `.questionStartIndex` properties. You can change it.
         * - `options.question` - a question object.
         * @see showQuestionNumbers
         * @see questionStartIndex
         */
        _this.onGetQuestionNo = _this.addEvent();
        /**
         * Use this event to change the progress text in code.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.text` - a progress text, that SurveyJS will render in progress bar.
         * - `options.questionCount` - a number of questions that have input(s). We do not count html or expression questions
         * - `options.answeredQuestionCount` - a number of questions that have input(s) and an user has answered.
         * - `options.requiredQuestionCount` - a number of required questions that have input(s). We do not count html or expression questions
         * - `options.requiredAnsweredQuestionCount` - a number of required questions that have input(s) and an user has answered.
         *  @see progressBarType
         */
        _this.onProgressText = _this.addEvent();
        /**
         * Use this event to process the markdown text.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.element` - SurveyJS element (a question, panel, page, or survey) where the string is going to be rendered.
         * - `options.name` - a property name is going to be rendered.
         * - `options.text` - a text that is going to be rendered.
         * - `options.html` - an HTML content. It is `null` by default. Use this property to specify the HTML content rendered instead of `options.text`.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/edit-survey-questions-markdown/ (linkStyle))
         */
        _this.onTextMarkdown = _this.addEvent();
        /**
         * Use this event to specity render component name used for text rendering.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.element` - SurveyJS element (a question, panel, page, or survey) where the string is going to be rendered.
         * - `options.name` - a property name is going to be rendered.
         * - `options.renderAs` - a component name used for text rendering.
         */
        _this.onTextRenderAs = _this.addEvent();
        /**
         * The event fires when it gets response from the [api.surveyjs.io](https://api.surveyjs.io) service on saving survey results. Use it to find out if the results have been saved successfully.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.success` - it is `true` if the results has been sent to the service successfully.
         * - `options.response` - a response from the service.
         */
        _this.onSendResult = _this.addEvent();
        /**
         * Use it to get results after calling the `getResult` method. It returns a simple analytics from [api.surveyjs.io](https://api.surveyjs.io) service.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.success` - it is `true` if the results were got from the service successfully.
         * - `options.data` - the object `{AnswersCount, QuestionResult : {} }`. `AnswersCount` is the number of posted survey results. `QuestionResult` is an object with all possible unique answers to the question and number of these answers.
         * - `options.dataList` - an array of objects `{name, value}`, where `name` is a unique value/answer to the question and `value` is a number/count of such answers.
         * - `options.response` - the server response.
         * @see getResult
         */
        _this.onGetResult = _this.addEvent();
        /**
         * An event that is raised on uploading the file in QuestionFile when `storeDataAsText` is set to `false`. Use this event to change the uploaded file name or to prevent a particular file from being uploaded.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - the file question instance.
         * - `options.name` - the question name.
         * - `options.files` - the Javascript File objects array to upload.
         * - `options.callback` - a callback function to get the file upload status and the updloaded file content.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/questiontype-file/ (linkStyle))
         * @see uploadFiles
         * @see QuestionFileModel.storeDataAsText
         * @see onDownloadFile
         * @see onClearFiles
         */
        _this.onUploadFiles = _this.addEvent();
        /**
         * An event that is raised on downloading a file in QuestionFile. Use this event to pass the file to a preview.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `question` - the question instance.
         * - `options.name` - the question name.
         * - `options.content` - the file content.
         * - `options.fileValue` - single file question value.
         * - `options.callback` - a callback function to get the file downloading status and the downloaded file content.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/questiontype-file/ (linkStyle))
         * @see downloadFile
         * @see onClearFiles
         * @see onUploadFiles
         */
        _this.onDownloadFile = _this.addEvent();
        /**
         * This event is fired on clearing the value in a QuestionFile. Use this event to remove files stored on your server.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `question` - the question instance.
         * - `options.name` - the question name.
         * - `options.value` - the question value.
         * - `options.fileName` - a removed file's name, set it to `null` to clear all files.
         * - `options.callback` - a callback function to get the operation status.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/file-delayed-upload/ (linkStyle))
         * @see clearFiles
         * @see onDownloadFile
         * @see onUploadFiles
         */
        _this.onClearFiles = _this.addEvent();
        /**
         * An event that is raised after choices for radiogroup, checkbox, and dropdown has been loaded from a RESTful service and before they are assigned to a question.
         * You may change the choices, before they are assigned or disable/enabled make visible/invisible question, based on loaded results.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `question` - the question where loaded choices are going to be assigned.
         * - `choices` - the loaded choices. You can change the loaded choices to before they are assigned to question.
         * - `serverResult` - a result that comes from the server as it is.
         */
        _this.onLoadChoicesFromServer = _this.addEvent();
        /**
         * An event that is raised after survey is loaded from api.surveyjs.io service.
         * You can use this event to perform manipulation with the survey model after it was loaded from the web service.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * @see surveyId
         * @see loadSurveyFromService
         */
        _this.onLoadedSurveyFromService = _this.addEvent();
        /**
         * An event that is raised on processing the text when it finds a text in brackets: `{somevalue}`. By default, it uses the value of survey question values and variables.
         * For example, you may use the text processing in loading choices from the web. If your `choicesByUrl.url` equals to "UrlToServiceToGetAllCities/{country}/{state}",
         * you may set on this event `options.value` to "all" or empty string when the "state" value/question is non selected by a user.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.name` - the name of the processing value, for example, "state" in our example.
         * - `options.value` - the value of the processing text.
         * - `options.isExists` - a boolean value. Set it to `true` if you want to use the value and set it to `false` if you don't.
         */
        _this.onProcessTextValue = _this.addEvent();
        /**
         * An event that is raised before rendering a question. Use it to override the default question CSS classes.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a question for which you can change the CSS classes.
         * - `options.cssClasses` - an object with CSS classes. For example `{root: "table", button: "button"}`. You can change them to your own CSS classes.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-cssclasses/ (linkStyle))
         */
        _this.onUpdateQuestionCssClasses = _this.addEvent();
        /**
         * An event that is raised before rendering a panel. Use it to override the default panel CSS classes.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.panel` - a panel for which you can change the CSS classes.
         * - `options.cssClasses` - an object with CSS classes. For example `{title: "sv_p_title", description: "small"}`. You can change them to your own CSS classes.
         */
        _this.onUpdatePanelCssClasses = _this.addEvent();
        /**
         * An event that is raised before rendering a page. Use it to override the default page CSS classes.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.page` - a page for which you can change the CSS classes.
         * - `options.cssClasses` - an object with CSS classes. For example `{title: "sv_p_title", description: "small"}`. You can change them to your own CSS classes.
         */
        _this.onUpdatePageCssClasses = _this.addEvent();
        /**
         * An event that is raised before rendering a choice item in radiogroup, checkbox or dropdown questions. Use it to override the default choice item css.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a question where choice item is rendered.
         * - `options.item` - a choice item of ItemValue type. You can get value or text choice properties as options.item.value or options.choice.text
         * - `options.css` - a string with css classes divided by space. You can change it.
         */
        _this.onUpdateChoiceItemCss = _this.addEvent();
        /**
         * An event that is raised right after survey is rendered in DOM.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.htmlElement` - a root HTML element bound to the survey object.
         */
        _this.onAfterRenderSurvey = _this.addEvent();
        /**
         * An event that is raised right after a page is rendered in DOM. Use it to modify HTML elements.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.htmlElement` - an HTML element bound to the survey header object.
         */
        _this.onAfterRenderHeader = _this.addEvent();
        /**
         * An event that is raised right after a page is rendered in DOM. Use it to modify HTML elements.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.page` - a page object for which the event is fired. Typically the current/active page.
         * - `options.htmlElement` - an HTML element bound to the page object.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-afterrender/ (linkStyle))
         */
        _this.onAfterRenderPage = _this.addEvent();
        /**
         * An event that is raised right after a question is rendered in DOM. Use it to modify HTML elements.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a question object for which the event is fired.
         * - `options.htmlElement` - an HTML element bound to the question object.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-afterrender/ (linkStyle))
         */
        _this.onAfterRenderQuestion = _this.addEvent();
        /**
         * An event that is raised right after a non-composite question (text, comment, dropdown, radiogroup, checkbox) is rendered in DOM. Use it to modify HTML elements.
         * This event is not fired for matrices, panels, multiple text and image picker.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a question object for which the event is fired.
         * - `options.htmlElement` - an HTML element bound to the question object.
         */
        _this.onAfterRenderQuestionInput = _this.addEvent();
        /**
         * An event that is raised right after a panel is rendered in DOM. Use it to modify HTML elements.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.panel` - a panel object for which the event is fired
         * - `options.htmlElement` - an HTML element bound to the panel object
         */
        _this.onAfterRenderPanel = _this.addEvent();
        /**
         * The event occurs when an element within a question gets focus.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - A [question](https://surveyjs.io/Documentation/Library?id=Question) whose child element gets focus.
         * @see onFocusInPanel
         */
        _this.onFocusInQuestion = _this.addEvent();
        /**
         * The event occurs when an element within a panel gets focus.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.panel` - A [panel](https://surveyjs.io/Documentation/Library?id=PanelModelBase) whose child element gets focus.
         * @see onFocusInQuestion
         */
        _this.onFocusInPanel = _this.addEvent();
        /**
         * Use this event to change the visibility of an individual choice item in [Checkbox](https://surveyjs.io/Documentation/Library?id=questioncheckboxmodel), [Dropdown](https://surveyjs.io/Documentation/Library?id=questiondropdownmodel), [Radiogroup](https://surveyjs.io/Documentation/Library?id=questionradiogroupmodel), and other similar question types.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`\
         * A Question instance to which the choice item belongs.
         * - `options.item`\
         * The choice item as specified in the [choices](https://surveyjs.io/Documentation/Library?id=QuestionSelectBase#choices) array.
         * - `options.visible`\
         * A Boolean value that specifies item visibility. Set it to `false` to hide the item.
         */
        _this.onShowingChoiceItem = _this.addEvent();
        /**
         * Use this event to load choice items in [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel) and [Tag Box](https://surveyjs.io/form-library/documentation/questiontagboxmodel) questions on demand.
         *
         * This event is raised only for those questions that have the [`choicesLazyLoadEnabled`](https://surveyjs.io/form-library/documentation/questiondropdownmodel#choicesLazyLoadEnabled) property set to `true`.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`\
         * A Question instance for which the event is raised.
         * - `options.skip`: `Number`\
         * The number of choice items to skip.
         * - `options.take`: `Number`\
         * The number of choice items to load. You can use the question's [`choicesLazyLoadPageSize`](https://surveyjs.io/form-library/documentation/questiondropdownmodel#choicesLazyLoadPageSize) property to change this number.
         * - `options.filter`\
         * A search string used to filter choices.
         * - `options.setItems(items: Array<any>, totalCount: Number)`\
         * A method that you should call to assign loaded items to the question. Item objects should be structured as specified in the [`choices`](https://surveyjs.io/form-library/documentation/api-reference/dropdown-menu-model#choices) property description. If their structure is different, [map their properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to bring them to the required structure.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/lazy-loading-dropdown/ (linkStyle))
         */
        _this.onChoicesLazyLoad = _this.addEvent();
        /**
         * Use this event to load a display text for the [default choice item](https://surveyjs.io/form-library/documentation/questiondropdownmodel#defaultValue) in [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel) and [Tag Box](https://surveyjs.io/form-library/documentation/questiontagboxmodel) questions.
         *
         * If you load choices from a server (use [`choicesByUrl`](https://surveyjs.io/form-library/documentation/questiondropdownmodel#choicesByUrl) or [`onChoicesLazyLoad`](https://surveyjs.io/form-library/documentation/surveymodel#onChoicesLazyLoad)), display texts become available only when data is loaded, which does not happen until a user opens the drop-down menu. However, a display text for a default choice item is required before that. In this case, you can load data individually for the default item within the `onGetChoiceDisplayValue` event handler.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`\
         * A Question instance for which the event is raised.
         * - `options.values`\
         * An array of one (in Dropdown) or more (in Tag Box) default values.
         * - `options.setItems(displayValues: Array<string>)`\
         * A method that you should call to assign display texts to the question.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/lazy-loading-dropdown/ (linkStyle))
         */
        _this.onGetChoiceDisplayValue = _this.addEvent();
        /**
         * An event that is raised on adding a new row in Matrix Dynamic question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a matrix question.
         * - `options.row` - a new added row.
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDynamicModel.visibleRows
         */
        _this.onMatrixRowAdded = _this.addEvent();
        /**
         * An event that is raised before adding a new row in Matrix Dynamic question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a matrix question.
         * - `options.canAddRow` - specifies whether a new row can be added
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDynamicModel.visibleRows
         */
        _this.onMatrixBeforeRowAdded = _this.addEvent();
        /**
         * An event that is raised before removing a row from Matrix Dynamic question. You can disable removing and clear the data instead.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a matrix question.
         * - `options.rowIndex` - a row index.
         * - `options.row` - a row object.
         * - `options.allow` - a boolean property. Set it to `false` to disable the row removing.
         * @see QuestionMatrixDynamicModel
         * @see onMatrixRowRemoved
         * @see onMatrixAllowRemoveRow
         */
        _this.onMatrixRowRemoving = _this.addEvent();
        /**
         * An event that is raised on removing a row from Matrix Dynamic question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a matrix question
         * - `options.rowIndex` - a removed row index
         * - `options.row` - a removed row object
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDynamicModel.visibleRows
         * @see onMatrixRowRemoving
         * @see onMatrixAllowRemoveRow
         */
        _this.onMatrixRowRemoved = _this.addEvent();
        /**
         * An event that is raised before rendering "Remove" button for removing a row from Matrix Dynamic question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a matrix question.
         * - `options.rowIndex` - a row index.
         * - `options.row` - a row object.
         * - `options.allow` - a boolean property. Set it to `false` to disable the row removing.
         * @see QuestionMatrixDynamicModel
         * @see onMatrixRowRemoving
         * @see onMatrixRowRemoved
         */
        _this.onMatrixAllowRemoveRow = _this.addEvent();
        /**
         * An event that is raised before creating cell question in the matrix. You can change the cell question type by setting different options.cellType.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - the matrix question.
         * - `options.cellType` - the cell question type. You can change it.
         * - `options.rowValue` - the value of the current row. To access a particular column's value within the current row, use: `options.rowValue["columnValue"]`.
         * - `options.column` - the matrix column object.
         * - `options.columnName` - the matrix column name.
         * - `options.row` - the matrix row object.
         * @see onMatrixBeforeRowAdded
         * @see onMatrixCellCreated
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDropdownModel
         */
        _this.onMatrixCellCreating = _this.addEvent();
        /**
          * An event that is raised for every cell created in Matrix Dynamic and Matrix Dropdown questions.
          * - `sender`: `SurveyModel` - A survey instance that raised the event.
          * - `options.question` - the matrix question.
          * - `options.cell` - the matrix cell.
          * - `options.cellQuestion` - the question/editor in the cell. You may customize it, change it's properties, like choices or visible.
          * - `options.rowValue` - the value of the current row. To access a particular column's value within the current row, use: `options.rowValue["columnValue"]`.
          * - `options.column` - the matrix column object.
          * - `options.columnName` - the matrix column name.
          * - `options.row` - the matrix row object.
          * @see onMatrixBeforeRowAdded
          * @see onMatrixCellCreating
          * @see onMatrixRowAdded
          * @see QuestionMatrixDynamicModel
          * @see QuestionMatrixDropdownModel
          */
        _this.onMatrixCellCreated = _this.addEvent();
        /**
         * An event that is raised for every cell after is has been rendered in DOM.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - the matrix question.
         * - `options.cell` - the matrix cell.
         * - `options.cellQuestion` - the question/editor in the cell.
         * - `options.htmlElement` - an HTML element bound to the `cellQuestion` object.
         * - `options.column` - the matrix column object.
         * - `options.row` - the matrix row object.
         * @see onMatrixCellCreated
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDropdownModel
         */
        _this.onMatrixAfterCellRender = _this.addEvent();
        /**
         * An event that is raised when cell value is changed in Matrix Dynamic and Matrix Dropdown questions.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - the matrix question.
         * - `options.columnName` - the matrix column name.
         * - `options.value` - a new value.
         * - `options.row` - the matrix row object.
         * - `options.getCellQuestion(columnName)` - the function that returns the cell question by column name.
         * @see onMatrixCellValueChanging
         * @see onMatrixBeforeRowAdded
         * @see onMatrixRowAdded
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDropdownModel
         */
        _this.onMatrixCellValueChanged = _this.addEvent();
        /**
         * An event that is raised on changing cell value in Matrix Dynamic and Matrix Dropdown questions. You may change the `options.value` property to change a cell value.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - the matrix question.
         * - `options.columnName` - the matrix column name.
         * - `options.value` - a new value.
         * - `options.oldValue` - the old value.
         * - `options.row` - the matrix row object.
         * - `options.getCellQuestion(columnName)` - the function that returns a cell question by column name.
         * @see onMatrixCellValueChanged
         * @see onMatrixBeforeRowAdded
         * @see onMatrixRowAdded
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDropdownModel
         */
        _this.onMatrixCellValueChanging = _this.addEvent();
        /**
         * An event that is raised when Matrix Dynamic and Matrix Dropdown questions validate the cell value.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.error` - an error string. It is empty by default.
         * - `options.question` - the matrix question.
         * - `options.columnName` - the matrix column name.
         * - `options.value` - a cell value.
         * - `options.row` - the matrix row object.
         * - `options.getCellQuestion(columnName)` - the function that returns the cell question by column name.
         * @see onMatrixBeforeRowAdded
         * @see onMatrixRowAdded
         * @see QuestionMatrixDynamicModel
         * @see QuestionMatrixDropdownModel
         */
        _this.onMatrixCellValidate = _this.addEvent();
        /**
         * An event that is raised on adding a new column in Matrix Dynamic or Matrix Dropdown question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a matrix question.
         * - `options.column` - a new added column.
         */
        _this.onMatrixColumnAdded = _this.addEvent();
        /**
         * An event that is raised on adding a new item in Multiple Text question.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a multiple text question.
         * - `options.item` - a new added item.
         */
        _this.onMultipleTextItemAdded = _this.addEvent();
        /**
         * An event that is raised after a new panel is added to a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`QuestionPanelDynamicModel`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model)\
         * A Dynamic Panel question.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * An added panel.
         * - `options.panelIndex`: `Number`\
         * The panel's index within Dynamic Panel.
         */
        _this.onDynamicPanelAdded = _this.addEvent();
        /**
         * An event that is raised after a panel is deleted from a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`QuestionPanelDynamicModel`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model)\
         * A Dynamic Panel question.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A deleted panel.
         * - `options.panelIndex`: `Number`\
         * The panel's index within Dynamic Panel.
         */
        _this.onDynamicPanelRemoved = _this.addEvent();
        /**
         * An event that is raised before a panel is deleted from a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question. Use this event to cancel the deletion.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`QuestionPanelDynamicModel`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model)\
         * A Dynamic Panel question.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A panel to be deleted.
         * - `options.panelIndex`: `Number`\
         * The panel's index within Dynamic Panel.
         * - `options.allow`: `Boolean`\
         * Set this property to `false` if you want to cancel the panel deletion.
         */
        _this.onDynamicPanelRemoving = _this.addEvent();
        /**
        * An event that is raised every second if the method `startTimer` has been called.
        * @see startTimer
        * @see timeSpent
        * @see Page.timeSpent
        */
        _this.onTimer = _this.addEvent();
        /**
         * An event that is raised before displaying a new information in the Timer Panel. Use it to change the default text.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.text` - the timer panel info text.
         */
        _this.onTimerPanelInfoText = _this.addEvent();
        /**
         * An event that is raised after an item value is changed in a panel within a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question.
         *
         * Parameters:
         *
         * - `sender`: `SurveyModel`\
         * A survey instance that raised the event.
         * - `options.question`: [`QuestionPanelDynamicModel`](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model)\
         * A Dynamic Panel question.
         * - `options.panel`: [`PanelModel`](https://surveyjs.io/form-library/documentation/api-reference/panel-model)\
         * A panel that nests the item with a changed value.
         * - `options.name`: `String`\
         * The item's name.
         * - `options.value`: `any`\
         * The item's new value.
         * - `options.panelIndex`: `Number`\
         * The panel's index within Dynamic Panel.
         * - `options.panelData`: `Object`\
         * The panel's data object that includes all item values.
         */
        _this.onDynamicPanelItemValueChanged = _this.addEvent();
        /**
         * Use this event to define, whether an answer to a question is correct or not.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - a question on which you have to decide if the answer is correct or not.
         * - `options.result` - returns `true`, if an answer is correct, or `false`, if the answer is not correct. Use questions' `value` and `correctAnswer` properties to return the correct value.
         * - `options.correctAnswers` - you may change the default number of correct or incorrect answers in the question, for example for matrix, where each row is a quiz question.
         * @see Question.value
         * @see Question.correctAnswer
         */
        _this.onIsAnswerCorrect = _this.addEvent();
        /**
         * Use this event to control drag&drop operations during design mode.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.allow` - set it to `false` to disable dragging.
         * - `options.target` - a target element that is dragged.
         * - `options.source` - a source element. It can be `null`, if it is a new element, dragging from toolbox.
         * - `options.parent` - a page or panel where target element is dragging.
         * - `options.insertBefore` - an element before the target element is dragging. It can be `null` if parent container (page or panel) is empty or dragging an element after the last element in a container.
         * - `options.insertAfter` - an element after the target element is dragging. It can be `null` if parent container (page or panel) is empty or dragging element to the first position within the parent container.
         * @see setDesignMode
         * @see isDesignMode
         */
        _this.onDragDropAllow = _this.addEvent();
        /**
         * Use this event to control scrolling element to top. You can cancel the default behavior by setting options.cancel property to true.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.element` - an element that is going to be scrolled on top.
         * - `options.question` - a question that is going to be scrolled on top. It can be null if options.page is not null.
         * - `options.page` - a page that is going to be scrolled on top. It can be null if options.question is not null.
         * - `options.elementId` - the unique element DOM Id.
         * - `options.cancel` - set this property to true to cancel the default scrolling.
         */
        _this.onScrollingElementToTop = _this.addEvent();
        _this.onLocaleChangedEvent = _this.addEvent();
        /**
         * Use this event to create/customize actions to be displayed in a question's title.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - A [Question](https://surveyjs.io/Documentation/Library?id=Question) object for which the event is fired.
         * - `options.titleActions` - A list of actions ([IAction](https://surveyjs.io/Documentation/Library?id=IAction) objects) associated with the processed question.
         * @see IAction
         * @see Question
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-titleactions/ (linkStyle))
         */
        _this.onGetQuestionTitleActions = _this.addEvent();
        /**
         * Use this event to create/customize actions to be displayed in a panel's title.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.panel` - A panel ([PanelModel](https://surveyjs.io/Documentation/Library?id=panelmodel) object) for which the event is fired.
         * - `options.titleActions` - A list of actions ([IAction](https://surveyjs.io/Documentation/Library?id=IAction) objects) associated with the processed panel.
         * @see IAction
         * @see PanelModel
         */
        _this.onGetPanelTitleActions = _this.addEvent();
        /**
         * Use this event to create/customize actions to be displayed in a page's title.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.page` - A page ([PageModel](https://surveyjs.io/Documentation/Library?id=pagemodel) object) for which the event is fired.
         * - `options.titleActions` - A list of actions ([IAction](https://surveyjs.io/Documentation/Library?id=IAction) objects) associated with the processed page.
         * @see IAction
         * @see PageModel
         */
        _this.onGetPageTitleActions = _this.addEvent();
        /**
         * An event that allows you to add, delete, or modify actions in the footer of a [Panel](https://surveyjs.io/form-library/documentation/panelmodel).
         *
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.panel` - A Panel whose actions are being modified.
         * - `options.actions` - An array of panel [actions](https://surveyjs.io/form-library/documentation/iaction). You can modify the entire array or individual actions within it.
         * - `options.question` - A [Dynamic Panel](https://surveyjs.io/form-library/documentation/questionpaneldynamicmodel) to which the Panel belongs. This field is `undefined` if the Panel does not belong to any Dynamic Panel.
         */
        _this.onGetPanelFooterActions = _this.addEvent();
        /**
         * Use this event to create/customize actions to be displayed in a matrix question's row.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - A matrix question ([QuestionMatrixBaseModel](https://surveyjs.io/Documentation/Library?id=questionmatrixbasemodel) object) for which the event is fired.
         * - `options.row` - A matrix row for which the event is fired.
         * - `options.actions` - A list of actions ([IAction](https://surveyjs.io/Documentation/Library?id=IAction) objects) associated with the processed matrix question and row.
         * @see IAction
         * @see QuestionMatrixDropdownModelBase
         */
        _this.onGetMatrixRowActions = _this.addEvent();
        /**
         * An event that is raised after the survey element content was collapsed or expanded.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.element` - Specifies which survey element content was collapsed or expanded.
         * @see onElementContentVisibilityChanged
         */
        _this.onElementContentVisibilityChanged = _this.addEvent();
        /**
         * An event that is raised before expression question convert it's value into display value for rendering.
         * - `sender`: `SurveyModel` - A survey instance that raised the event.
         * - `options.question` - The expression question.
         * - `options.value` - The question value.
         * - `options.displayValue` - the display value that you can change before rendering.
         */
        _this.onGetExpressionDisplayValue = _this.addEvent();
        /**
         * The list of errors on loading survey JSON. If the list is empty after loading a JSON, then the JSON is correct and has no errors.
         * @see JsonError
         */
        _this.jsonErrors = null;
        _this.cssValue = null;
        /**
         * Gets or sets whether to hide all required errors.
         */
        _this.hideRequiredErrors = false;
        //#endregion
        _this._isMobile = false;
        _this._isDesignMode = false;
        /**
         * Gets or sets whether the survey must ignore validation like required questions and others, on `nextPage` and `completeLastPage` function calls. The default is `false`.
         * @see nextPage
         * @see completeLastPage
         * @see mode
         */
        _this.ignoreValidation = false;
        _this.isNavigationButtonPressed = false;
        _this.mouseDownPage = null;
        _this.isCalculatingProgressText = false;
        _this.isFirstPageRendering = true;
        _this.isCurrentPageRendering = true;
        _this.isTriggerIsRunning = false;
        _this.triggerValues = null;
        _this.triggerKeys = null;
        _this.conditionValues = null;
        _this.isValueChangedOnRunningCondition = false;
        _this.conditionRunnerCounter = 0;
        _this.conditionUpdateVisibleIndexes = false;
        _this.conditionNotifyElementsOnAnyValueOrVariableChanged = false;
        _this.isEndLoadingFromJson = null;
        _this.questionHashes = {
            names: {},
            namesInsensitive: {},
            valueNames: {},
            valueNamesInsensitive: {},
        };
        _this.afterRenderPageTasks = [];
        _this.needRenderIcons = true;
        _this.skippedPages = [];
        _this.skeletonComponentName = "sv-skeleton";
        if (typeof document !== "undefined") {
            SurveyModel.stylesManager = new _stylesmanager__WEBPACK_IMPORTED_MODULE_11__["StylesManager"]();
        }
        var htmlCallBack = function (str) { return "<h3>" + str + "</h3>"; };
        _this.createHtmlLocString("completedHtml", "completingSurvey", htmlCallBack);
        _this.createHtmlLocString("completedBeforeHtml", "completingSurveyBefore", htmlCallBack);
        _this.createHtmlLocString("loadingHtml", "loadingSurvey", htmlCallBack);
        _this.createLocalizableString("logo", _this, false);
        _this.createLocalizableString("startSurveyText", _this, false, true);
        _this.createLocalizableString("pagePrevText", _this, false, true);
        _this.createLocalizableString("pageNextText", _this, false, true);
        _this.createLocalizableString("completeText", _this, false, true);
        _this.createLocalizableString("previewText", _this, false, true);
        _this.createLocalizableString("editText", _this, false, true);
        _this.createLocalizableString("questionTitleTemplate", _this, true);
        _this.textPreProcessor = new _textPreProcessor__WEBPACK_IMPORTED_MODULE_5__["TextPreProcessor"]();
        _this.textPreProcessor.onProcess = function (textValue) {
            _this.getProcessedTextValue(textValue);
        };
        _this.timerModelValue = new _surveyTimerModel__WEBPACK_IMPORTED_MODULE_12__["SurveyTimerModel"](_this);
        _this.timerModelValue.onTimer = function (page) {
            _this.doTimer(page);
        };
        _this.createNewArray("pages", function (value) {
            _this.doOnPageAdded(value);
        }, function (value) {
            _this.doOnPageRemoved(value);
        });
        _this.createNewArray("triggers", function (value) {
            value.setOwner(_this);
        });
        _this.createNewArray("calculatedValues", function (value) {
            value.setOwner(_this);
        });
        _this.createNewArray("completedHtmlOnCondition", function (value) {
            value.locOwner = _this;
        });
        _this.createNewArray("navigateToUrlOnCondition", function (value) {
            value.locOwner = _this;
        });
        _this.registerPropertyChangedHandlers(["locale"], function () {
            _this.onSurveyLocaleChanged();
        });
        _this.registerPropertyChangedHandlers(["firstPageIsStarted"], function () {
            _this.onFirstPageIsStartedChanged();
        });
        _this.registerPropertyChangedHandlers(["mode"], function () {
            _this.onModeChanged();
        });
        _this.registerPropertyChangedHandlers(["progressBarType"], function () {
            _this.updateProgressText();
        });
        _this.registerPropertyChangedHandlers(["questionStartIndex", "requiredText", "questionTitlePattern"], function () {
            _this.resetVisibleIndexes();
        });
        _this.registerPropertyChangedHandlers(["isLoading", "isCompleted", "isCompletedBefore", "mode", "isStartedState", "currentPage"], function () { _this.updateState(); });
        _this.registerPropertyChangedHandlers(["state", "currentPage", "showPreviewBeforeComplete"], function () { _this.onStateAndCurrentPageChanged(); });
        _this.registerPropertyChangedHandlers(["logo", "logoPosition"], function () { _this.updateHasLogo(); });
        _this.onGetQuestionNo.onCallbacksChanged = function () {
            _this.resetVisibleIndexes();
        };
        _this.onProgressText.onCallbacksChanged = function () {
            _this.updateProgressText();
        };
        _this.onTextMarkdown.onCallbacksChanged = function () {
            _this.locStrsChanged();
        };
        _this.onProcessHtml.onCallbacksChanged = function () {
            _this.locStrsChanged();
        };
        _this.onGetQuestionTitle.onCallbacksChanged = function () {
            _this.locStrsChanged();
        };
        _this.onUpdatePageCssClasses.onCallbacksChanged = function () {
            _this.currentPage && _this.currentPage.updateElementCss();
        };
        _this.onUpdatePanelCssClasses.onCallbacksChanged = function () {
            _this.currentPage && _this.currentPage.updateElementCss();
        };
        _this.onUpdateQuestionCssClasses.onCallbacksChanged = function () {
            _this.currentPage && _this.currentPage.updateElementCss();
        };
        _this.onShowingChoiceItem.onCallbacksChanged = function () {
            _this.rebuildQuestionChoices();
        };
        _this.navigationBarValue = _this.createNavigationBar();
        _this.navigationBar.locOwner = _this;
        _this.onBeforeCreating();
        if (jsonObj) {
            if (typeof jsonObj === "string" || jsonObj instanceof String) {
                jsonObj = JSON.parse(jsonObj);
            }
            if (jsonObj && jsonObj.clientId) {
                _this.clientId = jsonObj.clientId;
            }
            _this.fromJSON(jsonObj);
            if (_this.surveyId) {
                _this.loadSurveyFromService(_this.surveyId, _this.clientId);
            }
        }
        _this.onCreating();
        if (!!renderedElement) {
            _this.render(renderedElement);
        }
        _this.updateCss();
        _this.setCalculatedWidthModeUpdater();
        _this.notifier = new _notifier__WEBPACK_IMPORTED_MODULE_19__["Notifier"](_this.css.saveData);
        _this.notifier.addAction({
            id: "save-again",
            title: _this.getLocalizationString("saveAgainButton"),
            action: function () { _this.doComplete(); }
        }, "error");
        _this.layoutElements.push({
            id: "timerpanel",
            template: "survey-timerpanel",
            component: "sv-timerpanel",
            data: _this.timerModel
        });
        _this.layoutElements.push({
            id: "progress-buttons",
            component: "sv-progress-buttons",
            data: _this
        });
        _this.layoutElements.push({
            id: "progress-questions",
            component: "sv-progress-questions",
            data: _this
        });
        _this.layoutElements.push({
            id: "progress-pages",
            component: "sv-progress-pages",
            data: _this
        });
        _this.layoutElements.push({
            id: "progress-correctquestions",
            component: "sv-progress-correctquestions",
            data: _this
        });
        _this.layoutElements.push({
            id: "progress-requiredquestions",
            component: "sv-progress-requiredquestions",
            data: _this
        });
        _this.addLayoutElement({
            id: "toc-navigation",
            component: "sv-progress-toc",
            data: _this
        });
        _this.layoutElements.push({
            id: "navigationbuttons",
            component: "sv-action-bar",
            data: _this.navigationBar
        });
        return _this;
    }
    Object.defineProperty(SurveyModel, "cssType", {
        get: function () {
            return _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_4__["surveyCss"].currentType;
        },
        set: function (value) {
            _stylesmanager__WEBPACK_IMPORTED_MODULE_11__["StylesManager"].applyTheme(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "platformName", {
        get: function () {
            return SurveyModel.platform;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "commentSuffix", {
        /**
         * A suffix added to the name of the property that stores comments.
         *
         * Default value: "-Comment"
         *
         * Many question types allow respondents to leave comments. To enable this functionality, set a question's [`showCommentArea`](https://surveyjs.io/form-library/documentation/api-reference/checkbox-question-model#showCommentArea) property to `true`. Comment values are saved in a separate property. The property name is composed of the question `name` and `commentSuffix`.
         *
         * Respondents can also leave a comment when they select "Other" in a single- or multi-select question, such as Dropdown or Checkboxes. The property name for the comment value is composed according to the same rules. However, you can use the question `name` as a key to store the comment value instead. Disable the [`storeOthersAsComment`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#storeOthersAsComment) property in this case.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/create-checkboxes-question-in-javascript/ (linkStyle))
         */
        get: function () {
            return _settings__WEBPACK_IMPORTED_MODULE_14__["settings"].commentSuffix;
        },
        set: function (val) {
            _settings__WEBPACK_IMPORTED_MODULE_14__["settings"].commentSuffix = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "commentPrefix", {
        get: function () {
            return this.commentSuffix;
        },
        set: function (val) {
            this.commentSuffix = val;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.createHtmlLocString = function (name, locName, func) {
        this.createLocalizableString(name, this, false, locName).onGetLocalizationTextCallback = func;
    };
    SurveyModel.prototype.getType = function () {
        return "survey";
    };
    SurveyModel.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        if (name === "questionsOnPageMode") {
            this.onQuestionsOnPageModeChanged(oldValue);
        }
    };
    Object.defineProperty(SurveyModel.prototype, "pages", {
        /**
         * Returns a list of all pages in the survey, including invisible pages.
         * @see PageModel
         * @see visiblePages
         */
        get: function () {
            return this.getPropertyValue("pages");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.render = function (element) {
        if (element === void 0) { element = null; }
        if (this.renderCallback) {
            this.renderCallback();
        }
    };
    SurveyModel.prototype.updateSurvey = function (newProps, oldProps) {
        var _loop_1 = function () {
            if (key == "model" || key == "children")
                return "continue";
            if (key.indexOf("on") == 0 && this_1[key] && this_1[key].add) {
                var funcBody_1 = newProps[key];
                var func = function (sender, options) {
                    funcBody_1(sender, options);
                };
                this_1[key].add(func);
            }
            else {
                this_1[key] = newProps[key];
            }
        };
        var this_1 = this;
        for (var key in newProps) {
            _loop_1();
        }
        if (newProps && newProps.data)
            this.onValueChanged.add(function (sender, options) {
                newProps.data[options.name] = options.value;
            });
    };
    SurveyModel.prototype.getCss = function () {
        return this.css;
    };
    SurveyModel.prototype.updateCompletedPageCss = function () {
        this.containerCss = this.css.container;
        this.completedCss = new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]().append(this.css.body)
            .append(this.css.completedPage).toString(); // for completed page
    };
    SurveyModel.prototype.updateCss = function () {
        this.rootCss = this.getRootCss();
        this.updateNavigationCss();
        this.updateCompletedPageCss();
    };
    Object.defineProperty(SurveyModel.prototype, "css", {
        get: function () {
            if (!this.cssValue) {
                this.cssValue = {};
                this.copyCssClasses(this.cssValue, _defaultCss_defaultV2Css__WEBPACK_IMPORTED_MODULE_4__["surveyCss"].getCss());
            }
            return this.cssValue;
        },
        set: function (value) {
            this.setCss(value);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.setCss = function (value, needMerge) {
        if (needMerge === void 0) { needMerge = true; }
        if (needMerge) {
            this.mergeValues(value, this.css);
        }
        else {
            this.cssValue = value;
        }
        this.updateCss();
        this.updateElementCss(false);
    };
    Object.defineProperty(SurveyModel.prototype, "cssTitle", {
        get: function () {
            return this.css.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssNavigationComplete", {
        get: function () {
            return this.getNavigationCss(this.cssSurveyNavigationButton, this.css.navigation.complete);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssNavigationPreview", {
        get: function () {
            return this.getNavigationCss(this.cssSurveyNavigationButton, this.css.navigation.preview);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssNavigationEdit", {
        get: function () {
            return this.getNavigationCss(this.css.navigationButton, this.css.navigation.edit);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssNavigationPrev", {
        get: function () {
            return this.getNavigationCss(this.cssSurveyNavigationButton, this.css.navigation.prev);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssNavigationStart", {
        get: function () {
            return this.getNavigationCss(this.cssSurveyNavigationButton, this.css.navigation.start);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssNavigationNext", {
        get: function () {
            return this.getNavigationCss(this.cssSurveyNavigationButton, this.css.navigation.next);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cssSurveyNavigationButton", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]().append(this.css.navigationButton).append(this.css.bodyNavigationButton).toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "bodyCss", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]().append(this.css.body)
                .append(this.css.bodyWithTimer, this.showTimerPanel != "none" && this.state === "running")
                .append(this.css.body + "--" + this.calculatedWidthMode).toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "bodyContainerCss", {
        get: function () {
            return this.css.bodyContainer;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getNavigationCss = function (main, btn) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]().append(main)
            .append(btn).toString();
    };
    Object.defineProperty(SurveyModel.prototype, "lazyRendering", {
        /**
         * By default all rows are rendered no matters if they are visible or not.
         * Set it true, and survey markup rows will be rendered only if they are visible in viewport.
         * This feature is experimantal and might do not support all the use cases.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-lazy/ (linkStyle))
         */
        get: function () {
            return this.lazyRenderingValue === true;
        },
        set: function (val) {
            if (this.lazyRendering === val)
                return;
            this.lazyRenderingValue = val;
            var page = this.currentPage;
            if (!!page) {
                page.updateRows();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isLazyRendering", {
        get: function () {
            return this.lazyRendering || _settings__WEBPACK_IMPORTED_MODULE_14__["settings"].lazyRowsRendering;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateLazyRenderingRowsOnRemovingElements = function () {
        if (!this.isLazyRendering)
            return;
        var page = this.currentPage;
        if (!!page) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["scrollElementByChildId"])(page.id);
        }
    };
    Object.defineProperty(SurveyModel.prototype, "triggers", {
        /**
         * Gets or sets a list of triggers in the survey.
         * @see SurveyTrigger
         */
        get: function () {
            return this.getPropertyValue("triggers");
        },
        set: function (val) {
            this.setPropertyValue("triggers", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "calculatedValues", {
        /**
         * Gets or sets a list of calculated values in the survey.
         * @see CalculatedValue
         *
         * For more information, refer to [Calculated Values](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#calculated-values).
         *
         */
        get: function () {
            return this.getPropertyValue("calculatedValues");
        },
        set: function (val) {
            this.setPropertyValue("calculatedValues", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "surveyId", {
        /**
         * Gets or sets an identifier of a survey model loaded from the [api.surveyjs.io](https://api.surveyjs.io) service. When specified, the survey JSON is automatically loaded from [api.surveyjs.io](https://api.surveyjs.io) service.
         * @see loadSurveyFromService
         * @see onLoadedSurveyFromService
         */
        get: function () {
            return this.getPropertyValue("surveyId", "");
        },
        set: function (val) {
            this.setPropertyValue("surveyId", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "surveyPostId", {
        /**
         * Gets or sets an identifier of a survey model saved to the [api.surveyjs.io](https://api.surveyjs.io) service. When specified, the survey data is automatically saved to the [api.surveyjs.io](https://api.surveyjs.io) service.
         * @see onComplete
         * @see surveyShowDataSaving
         */
        get: function () {
            return this.getPropertyValue("surveyPostId", "");
        },
        set: function (val) {
            this.setPropertyValue("surveyPostId", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "clientId", {
        /**
         * Gets or sets user's identifier (e.g., e-mail or unique customer id) in your web application.
         * If you load survey or post survey results from/to [api.surveyjs.io](https://api.surveyjs.io) service, then the library do not allow users to run the same survey the second time.
         * On the second run, the user will see the survey complete page.
         */
        get: function () {
            return this.getPropertyValue("clientId", "");
        },
        set: function (val) {
            this.setPropertyValue("clientId", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "cookieName", {
        /**
         * Gets or sets a cookie name used to save information about completing the survey.
         * If the property is not empty, before starting the survey, the Survey library checks if the cookie with this name exists.
         * If it is `true`, the survey goes to complete mode and a user sees the survey complete page. On completing the survey the cookie with this name is created.
         */
        get: function () {
            return this.getPropertyValue("cookieName", "");
        },
        set: function (val) {
            this.setPropertyValue("cookieName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "sendResultOnPageNext", {
        /**
         * Specifies whether to save survey results when respondents swtich between pages. Handle the [`onPartialSend`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onPartialSend) event to implement the save operation.
         *
         * Refer to the following help topic for more information on the use case: [Continue an Incomplete Survey](https://surveyjs.io/form-library/documentation/handle-survey-results-continue-incomplete).
         */
        get: function () {
            return this.getPropertyValue("sendResultOnPageNext", false);
        },
        set: function (val) {
            this.setPropertyValue("sendResultOnPageNext", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "surveyShowDataSaving", {
        /**
         * Gets or sets whether to show the progress on saving/sending data into the [api.surveyjs.io](https://api.surveyjs.io) service.
         * @see surveyPostId
         */
        get: function () {
            return this.getPropertyValue("surveyShowDataSaving", false);
        },
        set: function (val) {
            this.setPropertyValue("surveyShowDataSaving", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "focusFirstQuestionAutomatic", {
        /**
         * Gets or sets whether the first input is focused on showing a next or a previous page.
         */
        get: function () {
            return this.getPropertyValue("focusFirstQuestionAutomatic");
        },
        set: function (val) {
            this.setPropertyValue("focusFirstQuestionAutomatic", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "focusOnFirstError", {
        /**
         * Gets or sets whether the first input is focused if the current page has errors.
         * Set this property to `false` (the default value is `true`) if you do not want to bring the focus to the first question that has error on the page.
         */
        get: function () {
            return this.getPropertyValue("focusOnFirstError");
        },
        set: function (val) {
            this.setPropertyValue("focusOnFirstError", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showNavigationButtons", {
        /**
         * Gets or sets the navigation buttons position.
         * Possible values: 'bottom' (default), 'top', 'both' and 'none'. Set it to 'none' to hide 'Prev', 'Next' and 'Complete' buttons.
         * It makes sense if you are going to create a custom navigation, have only a single page, or the `goNextPageAutomatic` property is set to `true`.
         * @see goNextPageAutomatic
         * @see showPrevButton
         */
        get: function () {
            return this.getPropertyValue("showNavigationButtons");
        },
        set: function (val) {
            if (val === true || val === undefined) {
                val = "bottom";
            }
            if (val === false) {
                val = "none";
            }
            this.setPropertyValue("showNavigationButtons", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showPrevButton", {
        /**
         * Gets or sets whether the Survey displays "Prev" button in its pages. Set it to `false` to prevent end-users from going back to their answers.
         * @see showNavigationButtons
         */
        get: function () {
            return this.getPropertyValue("showPrevButton");
        },
        set: function (val) {
            this.setPropertyValue("showPrevButton", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showTOC", {
        /**
         * Gets or sets the visibility of the table of contents.
         *
         * Default value: `false`
         * @see tocLocation
         */
        get: function () {
            return this.getPropertyValue("showTOC");
        },
        set: function (val) {
            this.setPropertyValue("showTOC", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "tocLocation", {
        /**
         * Gets or sets the position of the table of contents. Applies only when the table of contents is visible.
         *
         * Possible values:
         *
         * - `"left"` (default)
         * - `"right"`
         * @see showTOC
         */
        get: function () {
            return this.getPropertyValue("tocLocation");
        },
        set: function (val) {
            this.setPropertyValue("tocLocation", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showTitle", {
        /**
         * Gets or sets whether the Survey displays survey title in its pages. Set it to `false` to hide a survey title.
         * @see title
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("showTitle");
        },
        set: function (val) {
            this.setPropertyValue("showTitle", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showPageTitles", {
        /**
         * Gets or sets whether the Survey displays page titles. Set it to `false` to hide page titles.
         * @see PageModel.title
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("showPageTitles");
        },
        set: function (val) {
            this.setPropertyValue("showPageTitles", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showCompletedPage", {
        /**
         * On finishing the survey the complete page is shown. Set the property to `false`, to hide the complete page.
         * @see data
         * @see onComplete
         * @see navigateToUrl
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("showCompletedPage");
        },
        set: function (val) {
            this.setPropertyValue("showCompletedPage", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "navigateToUrl", {
        /**
         * A URL to which respondents should be navigated after survey completion.
         * @see onNavigateToUrl
         * @see navigateToUrlOnCondition
         */
        get: function () {
            return this.getPropertyValue("navigateToUrl");
        },
        set: function (val) {
            this.setPropertyValue("navigateToUrl", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "navigateToUrlOnCondition", {
        /**
         * An array of objects that allows you to navigate respondents to different URLs after survey completion.
         *
         * Each object should include the [`expression`](https://surveyjs.io/form-library/documentation/api-reference/urlconditionitem#url) and [`url`](https://surveyjs.io/form-library/documentation/api-reference/urlconditionitem#expression) properties. When `expression` evaluates to `true`, the survey navigates to the corresponding `url`. Refer to the following help topic for more information about expressions: [Expressions](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#expressions).
         * @see onNavigateToUrl
         * @see navigateToUrl
         */
        get: function () {
            return this.getPropertyValue("navigateToUrlOnCondition");
        },
        set: function (val) {
            this.setPropertyValue("navigateToUrlOnCondition", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getNavigateToUrl = function () {
        var item = this.getExpressionItemOnRunCondition(this.navigateToUrlOnCondition);
        var url = !!item ? item.url : this.navigateToUrl;
        if (!!url) {
            url = this.processText(url, false);
        }
        return url;
    };
    SurveyModel.prototype.navigateTo = function () {
        var url = this.getNavigateToUrl();
        var options = { url: url, allow: true };
        this.onNavigateToUrl.fire(this, options);
        if (!options.url || !options.allow)
            return;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["navigateToUrl"])(options.url);
    };
    Object.defineProperty(SurveyModel.prototype, "requiredText", {
        /**
         * Gets or sets the required question mark. The required question mark is a char or string that is rendered in the required questions' titles.
         * @see Question.title
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-processtext/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("requiredText", "*");
        },
        set: function (val) {
            this.setPropertyValue("requiredText", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.beforeSettingQuestionErrors = function (question, errors) {
        this.maakeRequiredErrorsInvisibgle(errors);
        this.onSettingQuestionErrors.fire(this, {
            question: question,
            errors: errors,
        });
    };
    SurveyModel.prototype.beforeSettingPanelErrors = function (question, errors) {
        this.maakeRequiredErrorsInvisibgle(errors);
    };
    SurveyModel.prototype.maakeRequiredErrorsInvisibgle = function (errors) {
        if (!this.hideRequiredErrors)
            return;
        for (var i = 0; i < errors.length; i++) {
            var erType = errors[i].getErrorType();
            if (erType == "required" || erType == "requireoneanswer") {
                errors[i].visible = false;
            }
        }
    };
    Object.defineProperty(SurveyModel.prototype, "questionStartIndex", {
        /**
         * Gets or sets the first question index. The first question index is '1' by default. You may start it from '100' or from 'A', by setting '100' or 'A' to this property.
         * You can set the start index to "(1)" or "# A)" or "a)" to render question number as (1), # A) and a) accordingly.
         * @see Question.title
         * @see requiredText
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-processtext/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("questionStartIndex", "");
        },
        set: function (val) {
            this.setPropertyValue("questionStartIndex", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "storeOthersAsComment", {
        /**
         * Gets or sets whether the "Others" option text is stored as question comment.
         *
         * By default the entered text in the "Others" input in the checkbox/radiogroup/dropdown is stored as `"question name " + "-Comment"`. The value itself is `"question name": "others"`.
         * Set this property to `false`, to store the entered text directly in the `"question name"` key.
         * @see commentSuffix
         */
        get: function () {
            return this.getPropertyValue("storeOthersAsComment");
        },
        set: function (val) {
            this.setPropertyValue("storeOthersAsComment", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "maxTextLength", {
        /**
         * Specifies the default maximum length for questions like text and comment, including matrix cell questions.
         *
         * The default value is `0`, that means that the text and comment have the same max length as the standard HTML input - 524288 characters: https://www.w3schools.com/tags/att_input_maxlength.asp.
         * @see maxOthersLength
         */
        get: function () {
            return this.getPropertyValue("maxTextLength");
        },
        set: function (val) {
            this.setPropertyValue("maxTextLength", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "maxOthersLength", {
        /**
         * Gets or sets the default maximum length for question comments and others
         *
         * The default value is `0`, that means that the question comments have the same max length as the standard HTML input - 524288 characters: https://www.w3schools.com/tags/att_input_maxlength.asp.
         * @see Question.showCommentArea
         * @see Question.showOtherItem
         * @see maxTextLength
         */
        get: function () {
            return this.getPropertyValue("maxOthersLength");
        },
        set: function (val) {
            this.setPropertyValue("maxOthersLength", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "goNextPageAutomatic", {
        /**
         * Gets or ses whether user proceeds to the next page without pressing the "Next" button after answering all page questions.
         * The available options:
         *
         * - `true` - navigate to the next page and submit survey data automatically.
         * - `autogonext` - navigate to the next page automatically but do not submit survey data.
         * - `false` - do not navigate to the next page and do not submit survey data automatically.
         *
         * > If any of the following questions is answered last, the survey won't be switched to the next page: Checkbox, Boolean (rendered as Checkbox), Comment, Signature Pad, Image Picker (with Multi Select), File, Single-Choice Matrix (not all rows are answered), Dynamic Matrix, Panel Dynamic.
         *
         * @see showNavigationButtons
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-autonextpage/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("goNextPageAutomatic", false);
        },
        set: function (val) {
            this.setPropertyValue("goNextPageAutomatic", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "allowCompleteSurveyAutomatic", {
        /**
         * Gets or sets whether a survey is automatically completed when `goNextPageAutomatic = true`. Set it to `false` if you do not want to submit survey automatically on completing the last survey page.
         * @see goNextPageAutomatic
         */
        get: function () {
            return this.getPropertyValue("allowCompleteSurveyAutomatic", true);
        },
        set: function (val) {
            this.setPropertyValue("allowCompleteSurveyAutomatic", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "checkErrorsMode", {
        /**
         * Gets or sets a value that specifies how the survey validates the question answers.
         *
         * The following options are available:
         *
         * - `onNextPage` (default) - check errors on navigating to the next page or on completing the survey.
         * - `onValueChanged` - check errors on every question value (i.e., answer) changing.
         * - `onValueChanging` - check errors before setting value into survey. If there is an error, then survey data is not changed, but question value will be keeped.
         * - `onComplete` - to validate all visible questions on complete button click. If there are errors on previous pages, then the page with the first error becomes the current.
         */
        get: function () {
            return this.getPropertyValue("checkErrorsMode");
        },
        set: function (val) {
            this.setPropertyValue("checkErrorsMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "autoGrowComment", {
        /**
         * Specifies whether the text area of [comment](https://surveyjs.io/Documentation/Library?id=questioncommentmodel) questions/elements automatically expands its height to avoid the vertical scrollbar and to display the entire multi-line contents entered by respondents.
         * Default value is false.
         * @see QuestionCommentModel.autoGrow
         */
        get: function () {
            return this.getPropertyValue("autoGrowComment");
        },
        set: function (val) {
            this.setPropertyValue("autoGrowComment", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "textUpdateMode", {
        /**
         * Gets or sets a value that specifies how the survey updates its questions' text values.
         *
         * The following options are available:
         *
         * - `onBlur` (default) - the value is updated after an input loses the focus.
         * - `onTyping` - update the value of text questions, "text" and "comment", on every key press.
         *
         * Note, that setting to "onTyping" may lead to a performance degradation, in case you have many expressions in the survey.
         */
        get: function () {
            return this.getPropertyValue("textUpdateMode");
        },
        set: function (val) {
            this.setPropertyValue("textUpdateMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "clearInvisibleValues", {
        /**
         * Gets or sets a value that specifies how the invisible data is included in survey data.
         *
         * The following options are available:
         *
         * - `none` - include the invisible values into the survey data.
         * - `onHidden` - clear the question value when it becomes invisible. If a question has value and it was invisible initially then survey clears the value on completing.
         * - `onHiddenContainer` - clear the question value when it or its parent (page or panel) becomes invisible. If a question has value and it was invisible initially then survey clears the value on completing.
         * - `onComplete` (default) - clear invisible question values on survey complete. In this case, the invisible questions will not be stored on the server.
         * @see Question.visible
         * @see onComplete
         */
        get: function () {
            return this.getPropertyValue("clearInvisibleValues");
        },
        set: function (val) {
            if (val === true)
                val = "onComplete";
            if (val === false)
                val = "none";
            this.setPropertyValue("clearInvisibleValues", val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Call this function to remove all question values from the survey, that end-user will not be able to enter.
     * For example the value that doesn't exists in a radiogroup/dropdown/checkbox choices or matrix rows/columns.
     * Please note, this function doesn't clear values for invisible questions or values that doesn't associated with questions.
     * In fact this function just call clearIncorrectValues function of all questions in the survey
     * @param removeNonExisingRootKeys - set this parameter to true to remove keys from survey.data that doesn't have corresponded questions and calculated values
     * @see Question.clearIncorrectValues
     * @see Page.clearIncorrectValues
     * @see Panel.clearIncorrectValues
     */
    SurveyModel.prototype.clearIncorrectValues = function (removeNonExisingRootKeys) {
        if (removeNonExisingRootKeys === void 0) { removeNonExisingRootKeys = false; }
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].clearIncorrectValues();
        }
        if (!removeNonExisingRootKeys)
            return;
        var data = this.data;
        var hasChanges = false;
        for (var key in data) {
            if (!!this.getQuestionByValueName(key))
                continue;
            if (this.iscorrectValueWithPostPrefix(key, _settings__WEBPACK_IMPORTED_MODULE_14__["settings"].commentSuffix) ||
                this.iscorrectValueWithPostPrefix(key, _settings__WEBPACK_IMPORTED_MODULE_14__["settings"].matrixTotalValuePostFix))
                continue;
            var calcValue = this.getCalculatedValueByName(key);
            if (!!calcValue && calcValue.includeIntoResult)
                continue;
            hasChanges = true;
            delete data[key];
        }
        if (hasChanges) {
            this.data = data;
        }
    };
    SurveyModel.prototype.iscorrectValueWithPostPrefix = function (key, postPrefix) {
        if (key.indexOf(postPrefix) !== key.length - postPrefix.length)
            return false;
        return !!this.getQuestionByValueName(key.substring(0, key.indexOf(postPrefix)));
    };
    Object.defineProperty(SurveyModel.prototype, "keepIncorrectValues", {
        /**
         * Specifies whether to keep values that cannot be assigned to questions, for example, choices unlisted in the choices array.
         *
         * > This property cannot be specified in the survey JSON schema. Use dot notation to specify it.
         * @see clearIncorrectValues
         */
        get: function () {
            return this.getPropertyValue("keepIncorrectValues", false);
        },
        set: function (val) {
            this.setPropertyValue("keepIncorrectValues", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locale", {
        /**
         * Gets or sets the survey locale. The default value it is empty, this means the 'en' locale is used.
         * You can set it to 'de' - German, 'fr' - French and so on. The library has built-in localization for several languages. The library has a multi-language support as well.
         */
        get: function () {
            return this.getPropertyValue("locale", _surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].currentLocale);
        },
        set: function (value) {
            if (value === _surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].defaultLocale && !_surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].currentLocale) {
                value = "";
            }
            this.setPropertyValue("locale", value);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.onSurveyLocaleChanged = function () {
        this.notifyElementsOnAnyValueOrVariableChanged("locale");
        this.localeChanged();
        this.onLocaleChangedEvent.fire(this, this.locale);
    };
    /**
     * Returns an array of locales that are used in the survey's translation.
     */
    SurveyModel.prototype.getUsedLocales = function () {
        var locs = new Array();
        this.addUsedLocales(locs);
        //Replace the default locale with the real one
        var index = locs.indexOf("default");
        if (index > -1) {
            var defaultLoc = _surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].defaultLocale;
            //Remove the defaultLoc
            var defIndex = locs.indexOf(defaultLoc);
            if (defIndex > -1) {
                locs.splice(defIndex, 1);
            }
            index = locs.indexOf("default");
            locs[index] = defaultLoc;
        }
        return locs;
    };
    SurveyModel.prototype.localeChanged = function () {
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].localeChanged();
        }
    };
    //ILocalizableOwner
    SurveyModel.prototype.getLocale = function () {
        return this.locale;
    };
    SurveyModel.prototype.locStrsChanged = function () {
        _super.prototype.locStrsChanged.call(this);
        if (!this.currentPage)
            return;
        if (!this.isShowStartingPage) {
            this.updateProgressText();
        }
        var page = this.activePage;
        if (!!page) {
            page.locStrsChanged();
        }
        var visPages = this.visiblePages;
        for (var i = 0; i < visPages.length; i++) {
            visPages[i].navigationLocStrChanged();
        }
        this.navigationBar.locStrsChanged();
    };
    SurveyModel.prototype.getMarkdownHtml = function (text, name) {
        return this.getSurveyMarkdownHtml(this, text, name);
    };
    SurveyModel.prototype.getRenderer = function (name) {
        return this.getRendererForString(this, name);
    };
    SurveyModel.prototype.getRendererContext = function (locStr) {
        return this.getRendererContextForString(this, locStr);
    };
    SurveyModel.prototype.getRendererForString = function (element, name) {
        var renderAs = this.getBuiltInRendererForString(element, name);
        var options = { element: element, name: name, renderAs: renderAs };
        this.onTextRenderAs.fire(this, options);
        return options.renderAs;
    };
    SurveyModel.prototype.getRendererContextForString = function (element, locStr) {
        return locStr;
    };
    SurveyModel.prototype.getExpressionDisplayValue = function (question, value, displayValue) {
        var options = {
            question: question,
            value: value,
            displayValue: displayValue,
        };
        this.onGetExpressionDisplayValue.fire(this, options);
        return options.displayValue;
    };
    SurveyModel.prototype.getBuiltInRendererForString = function (element, name) {
        if (this.isDesignMode)
            return _localizablestring__WEBPACK_IMPORTED_MODULE_10__["LocalizableString"].editableRenderer;
        return undefined;
    };
    SurveyModel.prototype.getProcessedText = function (text) {
        return this.processText(text, true);
    };
    SurveyModel.prototype.getLocString = function (str) {
        return this.getLocalizationString(str);
    };
    //ISurveyErrorOwner
    SurveyModel.prototype.getErrorCustomText = function (text, error) {
        return this.getSurveyErrorCustomText(this, text, error);
    };
    SurveyModel.prototype.getSurveyErrorCustomText = function (obj, text, error) {
        var options = {
            text: text,
            name: error.getErrorType(),
            obj: obj,
            error: error
        };
        this.onErrorCustomText.fire(this, options);
        return options.text;
    };
    SurveyModel.prototype.getQuestionDisplayValue = function (question, displayValue) {
        var options = { question: question, displayValue: displayValue };
        this.onGetQuestionDisplayValue.fire(this, options);
        return options.displayValue;
    };
    Object.defineProperty(SurveyModel.prototype, "emptySurveyText", {
        /**
         * Returns the text displayed when a survey has no visible pages and questions.
         */
        get: function () {
            return this.getLocalizationString("emptySurvey");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "logo", {
        //#region Title/Header options
        /**
         * Gets or sets a survey logo.
         * @see title
         */
        get: function () {
            return this.getLocalizableStringText("logo");
        },
        set: function (value) {
            this.setLocalizableStringText("logo", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locLogo", {
        get: function () {
            return this.getLocalizableString("logo");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "logoWidth", {
        /**
         * Gets or sets a survey logo width.
         * @see logo
         */
        get: function () {
            var width = this.getPropertyValue("logoWidth");
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["getSize"])(width);
        },
        set: function (value) {
            this.setPropertyValue("logoWidth", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "logoHeight", {
        /**
         * Gets or sets a survey logo height.
         * @see logo
         */
        get: function () {
            var height = this.getPropertyValue("logoHeight");
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["getSize"])(height);
        },
        set: function (value) {
            this.setPropertyValue("logoHeight", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "logoPosition", {
        /**
         * Gets or sets a survey logo position.
         * @see logo
         */
        get: function () {
            return this.getPropertyValue("logoPosition");
        },
        set: function (value) {
            this.setPropertyValue("logoPosition", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "hasLogo", {
        get: function () {
            return this.getPropertyValue("hasLogo", false);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateHasLogo = function () {
        this.setPropertyValue("hasLogo", !!this.logo && this.logoPosition !== "none");
    };
    Object.defineProperty(SurveyModel.prototype, "isLogoBefore", {
        get: function () {
            if (this.isDesignMode)
                return false;
            return (this.renderedHasLogo &&
                (this.logoPosition === "left" || this.logoPosition === "top"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isLogoAfter", {
        get: function () {
            if (this.isDesignMode)
                return this.renderedHasLogo;
            return (this.renderedHasLogo &&
                (this.logoPosition === "right" || this.logoPosition === "bottom"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "logoClassNames", {
        get: function () {
            var logoClasses = {
                left: "sv-logo--left",
                right: "sv-logo--right",
                top: "sv-logo--top",
                bottom: "sv-logo--bottom",
            };
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]().append(this.css.logo)
                .append(logoClasses[this.logoPosition]).toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "renderedHasTitle", {
        get: function () {
            if (this.isDesignMode)
                return this.isPropertyVisible("title");
            return !this.locTitle.isEmpty && this.showTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "renderedHasDescription", {
        get: function () {
            if (this.isDesignMode)
                return this.isPropertyVisible("description");
            return !!this.hasDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "hasTitle", {
        get: function () {
            return this.renderedHasTitle;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "renderedHasLogo", {
        get: function () {
            if (this.isDesignMode)
                return this.isPropertyVisible("logo");
            return this.hasLogo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "renderedHasHeader", {
        get: function () {
            return this.renderedHasTitle || this.renderedHasLogo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "logoFit", {
        /**
         * The logo fit mode.
         * @see logo
         */
        get: function () {
            return this.getPropertyValue("logoFit");
        },
        set: function (val) {
            this.setPropertyValue("logoFit", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.setIsMobile = function (newVal) {
        if (newVal === void 0) { newVal = true; }
        if (this.isMobile !== newVal) {
            this._isMobile = newVal;
            this.updateCss();
            this.getAllQuestions().map(function (q) { return q.isMobile = newVal; });
        }
    };
    Object.defineProperty(SurveyModel.prototype, "isMobile", {
        get: function () {
            return this._isMobile;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.isLogoImageChoosen = function () {
        return this.locLogo.renderedHtml;
    };
    Object.defineProperty(SurveyModel.prototype, "titleMaxWidth", {
        get: function () {
            if (!(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["isMobile"])() || this.isMobile) &&
                !this.isValueEmpty(this.isLogoImageChoosen()) &&
                !_settings__WEBPACK_IMPORTED_MODULE_14__["settings"].supportCreatorV2) {
                var logoWidth = this.logoWidth;
                if (this.logoPosition === "left" || this.logoPosition === "right") {
                    return "calc(100% - 5px - 2em - " + logoWidth + ")";
                }
            }
            return "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "completedHtml", {
        /**
         * Gets or sets the HTML content displayed on the complete page. Use this property to change the default complete page text.
         * @see showCompletedPage
         * @see completedHtmlOnCondition
         * @see locale
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
         */
        get: function () {
            return this.getLocalizableStringText("completedHtml");
        },
        set: function (value) {
            this.setLocalizableStringText("completedHtml", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locCompletedHtml", {
        get: function () {
            return this.getLocalizableString("completedHtml");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "completedHtmlOnCondition", {
        /**
         * The list of HTML condition items. If the expression of this item returns `true`, then a survey will use this item HTML instead of `completedHtml`.
         * @see HtmlConditionItem
         * @see completeHtml
         */
        get: function () {
            return this.getPropertyValue("completedHtmlOnCondition");
        },
        set: function (val) {
            this.setPropertyValue("completedHtmlOnCondition", val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Calculates a given expression and returns a result value.
     * @param expression
     */
    SurveyModel.prototype.runExpression = function (expression) {
        if (!expression)
            return null;
        var values = this.getFilteredValues();
        var properties = this.getFilteredProperties();
        return new _conditions__WEBPACK_IMPORTED_MODULE_13__["ExpressionRunner"](expression).run(values, properties);
    };
    /**
     * Calculates a given expression and returns `true` or `false`.
     * @param expression
     */
    SurveyModel.prototype.runCondition = function (expression) {
        if (!expression)
            return false;
        var values = this.getFilteredValues();
        var properties = this.getFilteredProperties();
        return new _conditions__WEBPACK_IMPORTED_MODULE_13__["ConditionRunner"](expression).run(values, properties);
    };
    /**
     * Run all triggers that performs on value changed and not on moving to the next page.
     */
    SurveyModel.prototype.runTriggers = function () {
        this.checkTriggers(this.getFilteredValues(), false);
    };
    Object.defineProperty(SurveyModel.prototype, "renderedCompletedHtml", {
        get: function () {
            var item = this.getExpressionItemOnRunCondition(this.completedHtmlOnCondition);
            return !!item ? item.html : this.completedHtml;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getExpressionItemOnRunCondition = function (items) {
        if (items.length == 0)
            return null;
        var values = this.getFilteredValues();
        var properties = this.getFilteredProperties();
        for (var i = 0; i < items.length; i++) {
            if (items[i].runCondition(values, properties)) {
                return items[i];
            }
        }
        return null;
    };
    Object.defineProperty(SurveyModel.prototype, "completedBeforeHtml", {
        /**
         * The HTML content displayed to an end user that has already completed the survey.
         * @see clientId
         * @see locale
         */
        get: function () {
            return this.getLocalizableStringText("completedBeforeHtml");
        },
        set: function (value) {
            this.setLocalizableStringText("completedBeforeHtml", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locCompletedBeforeHtml", {
        get: function () {
            return this.getLocalizableString("completedBeforeHtml");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "loadingHtml", {
        /**
         * The HTML that shows on loading survey Json from the [api.surveyjs.io](https://api.surveyjs.io) service.
         * @see surveyId
         * @see locale
         */
        get: function () {
            return this.getLocalizableStringText("loadingHtml");
        },
        set: function (value) {
            this.setLocalizableStringText("loadingHtml", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locLoadingHtml", {
        get: function () {
            return this.getLocalizableString("loadingHtml");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "defaultLoadingHtml", {
        /**
         * Default value for loadingHtml property
         * @see loadingHtml
         */
        get: function () {
            return "<h3>" + this.getLocalizationString("loadingSurvey") + "</h3>";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "navigationBar", {
        get: function () {
            return this.navigationBarValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds a custom navigation item similar to the Previous Page, Next Page, and Complete buttons.
     * Accepts an object described in the [IAction](https://surveyjs.io/Documentation/Library?id=IAction) help section.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-changenavigation/ (linkStyle))
    */
    SurveyModel.prototype.addNavigationItem = function (val) {
        if (!val.component) {
            val.component = "sv-nav-btn";
        }
        if (!val.innerCss) {
            val.innerCss = this.cssSurveyNavigationButton;
        }
        return this.navigationBar.addAction(val);
    };
    Object.defineProperty(SurveyModel.prototype, "startSurveyText", {
        /**
         * Gets or sets the 'Start' button caption.
         * The 'Start' button is shown on the started page. Set the `firstPageIsStarted` property to `true`, to display the started page.
         * @see firstPageIsStarted
         * @see locale
         */
        get: function () {
            return this.getLocalizableStringText("startSurveyText");
        },
        set: function (newValue) {
            this.setLocalizableStringText("startSurveyText", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locStartSurveyText", {
        get: function () {
            return this.getLocalizableString("startSurveyText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "pagePrevText", {
        /**
         * Gets or sets the 'Prev' button caption.
         * @see locale
         */
        get: function () {
            return this.getLocalizableStringText("pagePrevText");
        },
        set: function (newValue) {
            this.setLocalizableStringText("pagePrevText", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locPagePrevText", {
        get: function () {
            return this.getLocalizableString("pagePrevText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "pageNextText", {
        /**
         * Gets or sets the 'Next' button caption.
         * @see locale
         */
        get: function () {
            return this.getLocalizableStringText("pageNextText");
        },
        set: function (newValue) {
            this.setLocalizableStringText("pageNextText", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locPageNextText", {
        get: function () {
            return this.getLocalizableString("pageNextText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "completeText", {
        /**
         *  Gets or sets the 'Complete' button caption.
         * @see locale
         */
        get: function () {
            return this.getLocalizableStringText("completeText");
        },
        set: function (newValue) {
            this.setLocalizableStringText("completeText", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locCompleteText", {
        get: function () {
            return this.getLocalizableString("completeText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "previewText", {
        /**
         *  Gets or sets the 'Preview' button caption.
         * @see locale
         * @see showPreviewBeforeComplete
         * @see editText
         * @see showPreview
         */
        get: function () {
            return this.getLocalizableStringText("previewText");
        },
        set: function (newValue) {
            this.setLocalizableStringText("previewText", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locPreviewText", {
        get: function () {
            return this.getLocalizableString("previewText");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "editText", {
        /**
         *  Gets or sets the 'Edit' button caption.
         * @see locale
         * @see showPreviewBeforeComplete
         * @see previewText
         * @see cancelPreview
         */
        get: function () {
            return this.getLocalizableStringText("editText");
        },
        set: function (newValue) {
            this.setLocalizableStringText("editText", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "locEditText", {
        get: function () {
            return this.getLocalizableString("editText");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getElementTitleTagName = function (element, tagName) {
        if (this.onGetTitleTagName.isEmpty)
            return tagName;
        var options = { element: element, tagName: tagName };
        this.onGetTitleTagName.fire(this, options);
        return options.tagName;
    };
    Object.defineProperty(SurveyModel.prototype, "questionTitlePattern", {
        /**
         * Set the pattern for question title. Default is "numTitleRequire", 1. What is your name? *,
         * You can set it to numRequireTitle: 1. * What is your name?
         * You can set it to requireNumTitle: * 1. What is your name?
         * You can set it to numTitle (remove require symbol completely): 1. What is your name?
         * @see QuestionModel.title
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-processtext/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("questionTitlePattern", "numTitleRequire");
        },
        set: function (val) {
            if (val !== "numRequireTitle" &&
                val !== "requireNumTitle" &&
                val != "numTitle") {
                val = "numTitleRequire";
            }
            this.setPropertyValue("questionTitlePattern", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getQuestionTitlePatternOptions = function () {
        var res = new Array();
        var title = this.getLocalizationString("questionTitlePatternText");
        var num = !!this.questionStartIndex ? this.questionStartIndex : "1.";
        res.push({
            value: "numTitleRequire",
            text: num + " " + title + " " + this.requiredText
        });
        res.push({
            value: "numRequireTitle",
            text: num + " " + this.requiredText + " " + title
        });
        res.push({
            value: "requireNumTitle",
            text: this.requiredText + " " + num + " " + title
        });
        res.push({
            value: "numTitle",
            text: num + " " + title
        });
        return res;
    };
    Object.defineProperty(SurveyModel.prototype, "questionTitleTemplate", {
        get: function () {
            return this.getLocalizableStringText("questionTitleTemplate");
        },
        set: function (value) {
            this.setLocalizableStringText("questionTitleTemplate", value);
            this.questionTitlePattern = this.getNewTitlePattern(value);
            this.questionStartIndex = this.getNewQuestionTitleElement(value, "no", this.questionStartIndex, "1");
            this.requiredText = this.getNewQuestionTitleElement(value, "require", this.requiredText, "*");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getNewTitlePattern = function (template) {
        if (!!template) {
            var strs = [];
            while (template.indexOf("{") > -1) {
                template = template.substring(template.indexOf("{") + 1);
                var ind = template.indexOf("}");
                if (ind < 0)
                    break;
                strs.push(template.substring(0, ind));
                template = template.substring(ind + 1);
            }
            if (strs.length > 1) {
                if (strs[0] == "require")
                    return "requireNumTitle";
                if (strs[1] == "require" && strs.length == 3)
                    return "numRequireTitle";
                if (strs.indexOf("require") < 0)
                    return "numTitle";
            }
            if (strs.length == 1 && strs[0] == "title") {
                return "numTitle";
            }
        }
        return "numTitleRequire";
    };
    SurveyModel.prototype.getNewQuestionTitleElement = function (template, name, currentValue, defaultValue) {
        name = "{" + name + "}";
        if (!template || template.indexOf(name) < 0)
            return currentValue;
        var ind = template.indexOf(name);
        var prefix = "";
        var postfix = "";
        var i = ind - 1;
        for (; i >= 0; i--) {
            if (template[i] == "}")
                break;
        }
        if (i < ind - 1) {
            prefix = template.substring(i + 1, ind);
        }
        ind += name.length;
        i = ind;
        for (; i < template.length; i++) {
            if (template[i] == "{")
                break;
        }
        if (i > ind) {
            postfix = template.substring(ind, i);
        }
        i = 0;
        while (i < prefix.length && prefix.charCodeAt(i) < 33)
            i++;
        prefix = prefix.substring(i);
        i = postfix.length - 1;
        while (i >= 0 && postfix.charCodeAt(i) < 33)
            i--;
        postfix = postfix.substring(0, i + 1);
        if (!prefix && !postfix)
            return currentValue;
        var value = !!currentValue ? currentValue : defaultValue;
        return prefix + value + postfix;
    };
    Object.defineProperty(SurveyModel.prototype, "locQuestionTitleTemplate", {
        get: function () {
            return this.getLocalizableString("questionTitleTemplate");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getUpdatedQuestionTitle = function (question, title) {
        if (this.onGetQuestionTitle.isEmpty)
            return title;
        var options = { question: question, title: title };
        this.onGetQuestionTitle.fire(this, options);
        return options.title;
    };
    SurveyModel.prototype.getUpdatedQuestionNo = function (question, no) {
        if (this.onGetQuestionNo.isEmpty)
            return no;
        var options = { question: question, no: no };
        this.onGetQuestionNo.fire(this, options);
        return options.no;
    };
    Object.defineProperty(SurveyModel.prototype, "showPageNumbers", {
        /**
         * Gets or sets whether the survey displays page numbers on pages titles.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("showPageNumbers", false);
        },
        set: function (value) {
            if (value === this.showPageNumbers)
                return;
            this.setPropertyValue("showPageNumbers", value);
            this.updateVisibleIndexes();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showQuestionNumbers", {
        /**
         * Gets or sets a value that specifies how the question numbers are displayed.
         *
         * The following options are available:
         *
         * - `on` - display question numbers
         * - `onpage` - display question numbers, start numbering on every page
         * - `off` - turn off the numbering for questions titles
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("showQuestionNumbers");
        },
        set: function (value) {
            if (value === true) {
                value = "on";
            }
            if (value === false) {
                value = "off";
            }
            value = value.toLowerCase();
            value = value === "onpage" ? "onPage" : value;
            if (value === this.showQuestionNumbers)
                return;
            this.setPropertyValue("showQuestionNumbers", value);
            this.updateVisibleIndexes();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showProgressBar", {
        /**
         * Gets or sets the survey progress bar position.
         *
         * The following options are available:
         *
         * - `off` (default) - don't show progress bar
         * - `top` - show progress bar in the top
         * - `bottom` - show progress bar in the bottom
         * - `both` - show progress bar in both sides: top and bottom.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/navigation-default/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("showProgressBar");
        },
        set: function (newValue) {
            this.setPropertyValue("showProgressBar", newValue.toLowerCase());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "progressBarType", {
        /**
         * Gets or sets the type of info in the progress bar.
         *
         * The following options are available:
         *
         * - `pages` (default),
         * - `questions`,
         * - `requiredQuestions`,
         * - `correctQuestions`,
         * - `buttons`
         *
         * [View Demo](https://surveyjs.io/form-library/examples/navigation-buttons/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("progressBarType");
        },
        set: function (newValue) {
            if (newValue === "correctquestion")
                newValue = "correctQuestion";
            if (newValue === "requiredquestion")
                newValue = "requiredQuestion";
            this.setPropertyValue("progressBarType", newValue);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowProgressBarOnTop", {
        get: function () {
            if (!this.canShowProresBar())
                return false;
            return this.showProgressBar === "top" || this.showProgressBar === "both";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowProgressBarOnBottom", {
        get: function () {
            if (!this.canShowProresBar())
                return false;
            return this.showProgressBar === "bottom" || this.showProgressBar === "both";
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getProgressCssClasses = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]()
            .append(this.css.progress)
            .append(this.css.progressTop, this.isShowProgressBarOnTop)
            .append(this.css.progressBottom, this.isShowProgressBarOnBottom)
            .toString();
    };
    SurveyModel.prototype.canShowProresBar = function () {
        return (!this.isShowingPreview ||
            this.showPreviewBeforeComplete != "showAllQuestions");
    };
    Object.defineProperty(SurveyModel.prototype, "processedTitle", {
        get: function () {
            return this.locTitle.renderedHtml;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "questionTitleLocation", {
        /**
         * Gets or sets question title location relative to the input field: `"top"`, `"bottom"`, or `"left"`.
         *
         * > Certain question types (Matrix, Multiple Text) do not support the `"left"` value. For them, the `"top"` value is used.
         *
         * You can override this setting if you specify the `questionTitleLocation` property for an [individual page](https://surveyjs.io/form-library/documentation/pagemodel#questionTitleLocation) or [panel](https://surveyjs.io/form-library/documentation/panelmodel#questionTitleLocation) or set the `titleLocation` property for a [specific question](https://surveyjs.io/form-library/documentation/question#titleLocation).
         */
        get: function () {
            return this.getPropertyValue("questionTitleLocation");
        },
        set: function (value) {
            this.setPropertyValue("questionTitleLocation", value.toLowerCase());
            if (!this.isLoadingFromJson) {
                this.updateElementCss(true);
            }
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateElementCss = function (reNew) {
        if (!!this.startedPage) {
            this.startedPage.updateElementCss(reNew);
        }
        var pages = this.visiblePages;
        for (var i = 0; i < pages.length; i++) {
            pages[i].updateElementCss(reNew);
        }
    };
    Object.defineProperty(SurveyModel.prototype, "questionErrorLocation", {
        /**
         * Gets or sets the error message position.
         *
         * The following options are available:
         *
         * - `top` - to show question error(s) over the question,
         * - `bottom` - to show question error(s) under the question.
         */
        get: function () {
            return this.getPropertyValue("questionErrorLocation");
        },
        set: function (value) {
            this.setPropertyValue("questionErrorLocation", value.toLowerCase());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "questionDescriptionLocation", {
        /**
         * Gets or sets the question description position. The default value is `underTitle`.
         *
         * The following options are available:
         *
         * - `underTitle` - show question description under the question title,
         * - `underInput` - show question description under the question input instead of question title.
         */
        get: function () {
            return this.getPropertyValue("questionDescriptionLocation");
        },
        set: function (value) {
            this.setPropertyValue("questionDescriptionLocation", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "mode", {
        /**
         * Gets or sets the survey edit mode.
         *
         * The following options are available:
         *
         * - `edit` (default) - make a survey editable,
         * - `display` - make a survey read-only.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-displaymode/ (linkStyle))
         */
        get: function () {
            return this.getPropertyValue("mode");
        },
        set: function (value) {
            value = value.toLowerCase();
            if (value == this.mode)
                return;
            if (value != "edit" && value != "display")
                return;
            this.setPropertyValue("mode", value);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.onModeChanged = function () {
        for (var i = 0; i < this.pages.length; i++) {
            var page = this.pages[i];
            page.setPropertyValue("isReadOnly", page.isReadOnly);
        }
        this.updateButtonsVisibility();
        this.updateCss();
    };
    Object.defineProperty(SurveyModel.prototype, "data", {
        /**
         * Gets or sets an object with survey results. You can set this property with an object of the following structure:
         *
         * ```js
         * {
         *   question1Name: question1Value,
         *   question2Name: question2Value,
         *   // ...
         * }
         * ```
         *
         * When you set this property in code, the new object overrides the old object that may contain default question values and entered data. If you want to *merge* the new and old objects, call the [`mergeData(newDataObj)`](https://surveyjs.io/form-library/documentation/surveymodel#mergeData) method.
         *
         * If you assign a new object while a respondent takes the survey, set the [`currentPageNo`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#currentPageNo) property to 0 to start the survey from the beginning. This will also cause the survey to re-evaluate the [`visibleIf`](https://surveyjs.io/form-library/documentation/api-reference/question#visibleIf), [`enableIf`](https://surveyjs.io/form-library/documentation/api-reference/question#enableIf), and other [expressions](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#expressions).
         * @see setValue
         * @see getValue
         */
        get: function () {
            var result = {};
            var keys = this.getValuesKeys();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var dataValue = this.getDataValueCore(this.valuesHash, key);
                if (dataValue !== undefined) {
                    result[key] = dataValue;
                }
            }
            this.setCalculatedValuesIntoResult(result);
            return result;
        },
        set: function (data) {
            this.valuesHash = {};
            this.setDataCore(data);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Merges a specified data object with the object from the [`data`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#data) property.
     *
     * Refer to the following help topic for more information: [Merge Question Values](https://surveyjs.io/form-library/documentation/design-survey/merge-question-values).
     *
     * @param data A data object to merge. It should have the following structure: `{ questionName: questionValue, ... }`
     * @see setValue
     */
    SurveyModel.prototype.mergeData = function (data) {
        if (!data)
            return;
        var newData = this.data;
        this.mergeValues(data, newData);
        this.setDataCore(newData);
    };
    SurveyModel.prototype.setDataCore = function (data) {
        if (data) {
            for (var key in data) {
                this.setDataValueCore(this.valuesHash, key, data[key]);
            }
        }
        this.updateAllQuestionsValue();
        this.notifyAllQuestionsOnValueChanged();
        this.notifyElementsOnAnyValueOrVariableChanged("");
        this.runConditions();
        this.updateAllQuestionsValue();
    };
    SurveyModel.prototype.getStructuredData = function (includePages, level) {
        if (includePages === void 0) { includePages = true; }
        if (level === void 0) { level = -1; }
        if (level === 0)
            return this.data;
        var data = {};
        this.pages.forEach(function (p) {
            if (includePages) {
                var pageValues = {};
                if (p.collectValues(pageValues, level - 1)) {
                    data[p.name] = pageValues;
                }
            }
            else {
                p.collectValues(data, level);
            }
        });
        return data;
    };
    SurveyModel.prototype.setStructuredData = function (data, doMerge) {
        if (doMerge === void 0) { doMerge = false; }
        if (!data)
            return;
        var res = {};
        for (var key in data) {
            var q = this.getQuestionByValueName(key);
            if (q) {
                res[key] = data[key];
            }
            else {
                var panel = this.getPageByName(key);
                if (!panel) {
                    panel = this.getPanelByName(key);
                }
                if (panel) {
                    this.collectDataFromPanel(panel, res, data[key]);
                }
            }
        }
        if (doMerge) {
            this.mergeData(res);
        }
        else {
            this.data = res;
        }
    };
    SurveyModel.prototype.collectDataFromPanel = function (panel, output, data) {
        for (var key in data) {
            var el = panel.getElementByName(key);
            if (!el)
                continue;
            if (el.isPanel) {
                this.collectDataFromPanel(el, output, data[key]);
            }
            else {
                output[key] = data[key];
            }
        }
    };
    Object.defineProperty(SurveyModel.prototype, "editingObj", {
        get: function () {
            return this.editingObjValue;
        },
        set: function (val) {
            var _this = this;
            if (this.editingObj == val)
                return;
            if (!!this.editingObj) {
                this.editingObj.onPropertyChanged.remove(this.onEditingObjPropertyChanged);
            }
            this.editingObjValue = val;
            if (this.isDisposed)
                return;
            if (!val) {
                var questions = this.getAllQuestions();
                for (var i = 0; i < questions.length; i++) {
                    questions[i].unbindValue();
                }
            }
            if (!!this.editingObj) {
                this.setDataCore({});
                this.onEditingObjPropertyChanged = function (sender, options) {
                    if (!_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].hasOriginalProperty(_this.editingObj, options.name))
                        return;
                    _this.updateOnSetValue(options.name, _this.editingObj[options.name], options.oldValue);
                };
                this.editingObj.onPropertyChanged.add(this.onEditingObjPropertyChanged);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isEditingSurveyElement", {
        get: function () {
            return !!this.editingObj;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.setCalculatedValuesIntoResult = function (result) {
        for (var i = 0; i < this.calculatedValues.length; i++) {
            var calValue = this.calculatedValues[i];
            if (calValue.includeIntoResult &&
                !!calValue.name &&
                this.getVariable(calValue.name) !== undefined) {
                result[calValue.name] = this.getVariable(calValue.name);
            }
        }
    };
    SurveyModel.prototype.getAllValues = function () {
        return this.data;
    };
    /**
     * Returns survey results as an array of objects in which the question name, title, value, and other parameters are stored as individual properties.
     *
     * If a question can have more than one value (Matrix, Multiple Text), its object enables the `isNode` flag and stores information about these values in the `data` property. Refer to the following help topic for more information: [Access Full Survey Results](https://surveyjs.io/form-library/documentation/handle-survey-results-access#access-full-survey-results).
     *
     * If you want to skip empty answers, pass an object with the `includeEmpty` property set to `false`.
     */
    SurveyModel.prototype.getPlainData = function (options) {
        if (!options) {
            options = { includeEmpty: true, includeQuestionTypes: false, includeValues: false };
        }
        var result = [];
        var questionValueNames = [];
        this.getAllQuestions().forEach(function (question) {
            var resultItem = question.getPlainData(options);
            if (!!resultItem) {
                result.push(resultItem);
                questionValueNames.push(question.valueName || question.name);
            }
        });
        if (!!options.includeValues) {
            var keys = this.getValuesKeys();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (questionValueNames.indexOf(key) == -1) {
                    var dataValue = this.getDataValueCore(this.valuesHash, key);
                    if (!!dataValue) {
                        result.push({
                            name: key,
                            title: key,
                            value: dataValue,
                            displayValue: dataValue,
                            isNode: false,
                            getString: function (val) {
                                return typeof val === "object" ? JSON.stringify(val) : val;
                            },
                        });
                    }
                }
            }
        }
        return result;
    };
    SurveyModel.prototype.getFilteredValues = function () {
        var values = {};
        for (var key in this.variablesHash)
            values[key] = this.variablesHash[key];
        this.addCalculatedValuesIntoFilteredValues(values);
        var keys = this.getValuesKeys();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            values[key] = this.getDataValueCore(this.valuesHash, key);
        }
        return values;
    };
    SurveyModel.prototype.addCalculatedValuesIntoFilteredValues = function (values) {
        var caclValues = this.calculatedValues;
        for (var i = 0; i < caclValues.length; i++)
            values[caclValues[i].name] = caclValues[i].value;
    };
    SurveyModel.prototype.getFilteredProperties = function () {
        return { survey: this };
    };
    SurveyModel.prototype.getValuesKeys = function () {
        if (!this.editingObj)
            return Object.keys(this.valuesHash);
        var props = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getPropertiesByObj(this.editingObj);
        var res = [];
        for (var i = 0; i < props.length; i++) {
            res.push(props[i].name);
        }
        return res;
    };
    SurveyModel.prototype.getDataValueCore = function (valuesHash, key) {
        if (!!this.editingObj)
            return _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].getObjPropertyValue(this.editingObj, key);
        return this.getDataFromValueHash(valuesHash, key);
    };
    SurveyModel.prototype.setDataValueCore = function (valuesHash, key, value) {
        if (!!this.editingObj) {
            _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].setObjPropertyValue(this.editingObj, key, value);
        }
        else {
            this.setDataToValueHash(valuesHash, key, value);
        }
    };
    SurveyModel.prototype.deleteDataValueCore = function (valuesHash, key) {
        if (!!this.editingObj) {
            this.editingObj[key] = null;
        }
        else {
            this.deleteDataFromValueHash(valuesHash, key);
        }
    };
    SurveyModel.prototype.getDataFromValueHash = function (valuesHash, key) {
        if (!!this.valueHashGetDataCallback)
            return this.valueHashGetDataCallback(valuesHash, key);
        return valuesHash[key];
    };
    SurveyModel.prototype.setDataToValueHash = function (valuesHash, key, value) {
        if (!!this.valueHashSetDataCallback) {
            this.valueHashSetDataCallback(valuesHash, key, value);
        }
        else {
            valuesHash[key] = value;
        }
    };
    SurveyModel.prototype.deleteDataFromValueHash = function (valuesHash, key) {
        if (!!this.valueHashDeleteDataCallback) {
            this.valueHashDeleteDataCallback(valuesHash, key);
        }
        else {
            delete valuesHash[key];
        }
    };
    Object.defineProperty(SurveyModel.prototype, "comments", {
        /**
         * Returns all comments from the data.
         * @see data
         */
        get: function () {
            var result = {};
            var keys = this.getValuesKeys();
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key.indexOf(this.commentSuffix) > 0) {
                    result[key] = this.getDataValueCore(this.valuesHash, key);
                }
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "visiblePages", {
        /**
         * Returns a list of visible pages. If all pages are visible, then this property returns the same list as the `pages` property.
         * @see pages
         * @see PageModel.visible
         * @see PageModel.visibleIf
         */
        get: function () {
            if (this.isDesignMode)
                return this.pages;
            var result = new Array();
            for (var i = 0; i < this.pages.length; i++) {
                if (this.isPageInVisibleList(this.pages[i])) {
                    result.push(this.pages[i]);
                }
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.isPageInVisibleList = function (page) {
        return this.isDesignMode || page.isVisible && !page.isStartPage;
    };
    Object.defineProperty(SurveyModel.prototype, "isEmpty", {
        /**
         * Returns `true` if the survey contains no pages. The survey is empty.
         */
        get: function () {
            return this.pages.length == 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "PageCount", {
        get: function () {
            return this.pageCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "pageCount", {
        /**
         * Returns the survey page count.
         * @see visiblePageCount
         * @see pages
         */
        get: function () {
            return this.pages.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "visiblePageCount", {
        /**
         * Returns a number of visible pages within the survey.
         * @see pageCount
         * @see visiblePages
         */
        get: function () {
            return this.visiblePages.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "startedPage", {
        /**
         * Returns the started page. This property works if the `firstPageIsStarted` property is set to `true`.
         * @see firstPageIsStarted
         */
        get: function () {
            var page = this.firstPageIsStarted && this.pages.length > 1 ? this.pages[0] : null;
            if (!!page) {
                page.onFirstRendering();
                page.setWasShown(true);
            }
            return page;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "currentPage", {
        /**
         * Gets or sets the current survey page. If a survey is rendered, then this property returns a page that a user can see/edit.
         */
        get: function () {
            return this.getPropertyValue("currentPage", null);
        },
        set: function (value) {
            if (this.isLoadingFromJson)
                return;
            var newPage = this.getPageByObject(value);
            if (!!value && !newPage)
                return;
            if (!newPage && this.isCurrentPageAvailable)
                return;
            var vPages = this.visiblePages;
            if (newPage != null && vPages.indexOf(newPage) < 0)
                return;
            if (newPage == this.currentPage)
                return;
            var oldValue = this.currentPage;
            if (!this.currentPageChanging(newPage, oldValue))
                return;
            this.setPropertyValue("currentPage", newPage);
            if (!!newPage) {
                newPage.onFirstRendering();
                newPage.updateCustomWidgets();
                newPage.setWasShown(true);
            }
            this.locStrsChanged();
            this.currentPageChanged(newPage, oldValue);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateCurrentPage = function () {
        if (this.isCurrentPageAvailable)
            return;
        this.currentPage = this.firstVisiblePage;
    };
    Object.defineProperty(SurveyModel.prototype, "isCurrentPageAvailable", {
        get: function () {
            var page = this.currentPage;
            return !!page && this.isPageInVisibleList(page) && this.isPageExistsInSurvey(page);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.isPageExistsInSurvey = function (page) {
        if (this.pages.indexOf(page) > -1)
            return true;
        return !!this.onContainsPageCallback && this.onContainsPageCallback(page);
    };
    Object.defineProperty(SurveyModel.prototype, "activePage", {
        /**
         * Returns the currentPage, unless the started page is showing. In this case returns the started page.
         * @see currentPage
         * @see firstPageIsStarted
         * @see startedPage
         */
        get: function () {
            return this.getPropertyValue("activePage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowStartingPage", {
        /**
         * The started page is showing right now. survey state equals to "starting"
         */
        get: function () {
            return this.state === "starting";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowingPage", {
        /**
         * Survey is showing a page right now. It is in "running", "preview" or starting state.
         */
        get: function () {
            return this.state == "running" || this.state == "preview" || this.isShowStartingPage;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateActivePage = function () {
        var newPage = this.isShowStartingPage ? this.startedPage : this.currentPage;
        this.setPropertyValue("activePage", newPage);
    };
    SurveyModel.prototype.onStateAndCurrentPageChanged = function () {
        this.updateActivePage();
        this.updateButtonsVisibility();
    };
    SurveyModel.prototype.getPageByObject = function (value) {
        if (!value)
            return null;
        if (value.getType && value.getType() == "page")
            return value;
        if (typeof value === "string" || value instanceof String)
            return this.getPageByName(String(value));
        if (!isNaN(value)) {
            var index = Number(value);
            var vPages = this.visiblePages;
            if (value < 0 || value >= vPages.length)
                return null;
            return vPages[index];
        }
        return value;
    };
    Object.defineProperty(SurveyModel.prototype, "currentPageNo", {
        /**
         * The zero-based index of the current page in the visible pages array.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-editprevious/ (linkStyle))
         */
        get: function () {
            return this.visiblePages.indexOf(this.currentPage);
        },
        set: function (value) {
            var vPages = this.visiblePages;
            if (value < 0 || value >= vPages.length)
                return;
            this.currentPage = vPages[value];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "questionsOrder", {
        /**
         * Gets or sets the question display order. Use this property to randomize questions. You can randomize questions on a specific page.
         *
         * The following options are available:
         *
         * - `random` - randomize questions
         * - `initial` - keep questions in the same order, as in a survey model.
         * @see SurveyPage.questionsOrder
         */
        get: function () {
            return this.getPropertyValue("questionsOrder");
        },
        set: function (val) {
            this.setPropertyValue("questionsOrder", val);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the input focus to the first question with the input field.
     */
    SurveyModel.prototype.focusFirstQuestion = function () {
        if (this.isFocusingQuestion)
            return;
        var page = this.activePage;
        if (page) {
            page.scrollToTop();
            page.focusFirstQuestion();
        }
    };
    SurveyModel.prototype.scrollToTopOnPageChange = function (doScroll) {
        if (doScroll === void 0) { doScroll = true; }
        var page = this.activePage;
        if (!page)
            return;
        if (doScroll) {
            page.scrollToTop();
        }
        if (this.isCurrentPageRendering && this.focusFirstQuestionAutomatic && !this.isFocusingQuestion) {
            page.focusFirstQuestion();
            this.isCurrentPageRendering = false;
        }
    };
    Object.defineProperty(SurveyModel.prototype, "state", {
        /**
         * Returns the current survey state.
         *
         * Possible values:
         *
         * - `"loading"` - The survey is being loaded from a JSON schema.
         * - `"empty"` - The survey has no elements to display.
         * - `"starting"` - The survey displays a [start page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#start-page).
         * - `"running"` - A respondent is taking the survey.
         * - `"preview"` - A respondent is [previewing](https://surveyjs.io/form-library/examples/survey-showpreview/) answers before submitting them.
         * - `"completed"` - A respondent has completed the survey and submitted the results.
         */
        get: function () {
            return this.getPropertyValue("state", "empty");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateState = function () {
        this.setPropertyValue("state", this.calcState());
    };
    SurveyModel.prototype.calcState = function () {
        if (this.isLoading)
            return "loading";
        if (this.isCompleted)
            return "completed";
        if (this.isCompletedBefore)
            return "completedbefore";
        if (!this.isDesignMode &&
            this.isEditMode &&
            this.isStartedState &&
            this.startedPage)
            return "starting";
        if (this.isShowingPreview)
            return this.currentPage ? "preview" : "empty";
        return this.currentPage ? "running" : "empty";
    };
    Object.defineProperty(SurveyModel.prototype, "isCompleted", {
        get: function () {
            return this.getPropertyValue("isCompleted", false);
        },
        set: function (val) {
            this.setPropertyValue("isCompleted", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowingPreview", {
        get: function () {
            return this.getPropertyValue("isShowingPreview", false);
        },
        set: function (val) {
            if (this.isShowingPreview == val)
                return;
            this.setPropertyValue("isShowingPreview", val);
            this.onShowingPreviewChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isStartedState", {
        get: function () {
            return this.getPropertyValue("isStartedState", false);
        },
        set: function (val) {
            this.setPropertyValue("isStartedState", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isCompletedBefore", {
        get: function () {
            return this.getPropertyValue("isCompletedBefore", false);
        },
        set: function (val) {
            this.setPropertyValue("isCompletedBefore", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isLoading", {
        get: function () {
            return this.getPropertyValue("isLoading", false);
        },
        set: function (val) {
            this.setPropertyValue("isLoading", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "completedState", {
        get: function () {
            return this.getPropertyValue("completedState", "");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "completedStateText", {
        get: function () {
            return this.getPropertyValue("completedStateText", "");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.setCompletedState = function (value, text) {
        this.setPropertyValue("completedState", value);
        if (!text) {
            if (value == "saving")
                text = this.getLocalizationString("savingData");
            if (value == "error")
                text = this.getLocalizationString("savingDataError");
            if (value == "success")
                text = this.getLocalizationString("savingDataSuccess");
        }
        this.setPropertyValue("completedStateText", text);
        if (this.state === "completed" && this.showCompletedPage && !!this.completedState) {
            this.notify(this.completedStateText, this.completedState);
        }
    };
    SurveyModel.prototype.notify = function (message, type) {
        this.notifier.notify(message, type);
    };
    /**
     * Clears the survey data and state. If the survey has a `completed` state, it will get a `running` state.
     * @param clearData clear the data
     * @param gotoFirstPage make the first page as a current page.
     * @see data
     * @see state
     * @see currentPage
     */
    SurveyModel.prototype.clear = function (clearData, gotoFirstPage) {
        if (clearData === void 0) { clearData = true; }
        if (gotoFirstPage === void 0) { gotoFirstPage = true; }
        this.isCompleted = false;
        this.isCompletedBefore = false;
        this.isLoading = false;
        this.canBeCompletedByTrigger = false;
        if (clearData) {
            this.data = null;
            this.variablesHash = {};
        }
        this.timerModel.spent = 0;
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].timeSpent = 0;
            this.pages[i].setWasShown(false);
            this.pages[i].passed = false;
        }
        this.onFirstPageIsStartedChanged();
        if (gotoFirstPage) {
            this.currentPage = this.firstVisiblePage;
        }
        if (clearData) {
            this.updateValuesWithDefaults();
        }
    };
    SurveyModel.prototype.mergeValues = function (src, dest) {
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["mergeValues"])(src, dest);
    };
    SurveyModel.prototype.updateValuesWithDefaults = function () {
        if (this.isDesignMode || this.isLoading)
            return;
        for (var i = 0; i < this.pages.length; i++) {
            var questions = this.pages[i].questions;
            for (var j = 0; j < questions.length; j++) {
                questions[j].updateValueWithDefaults();
            }
        }
    };
    SurveyModel.prototype.updateCustomWidgets = function (page) {
        if (!page)
            return;
        page.updateCustomWidgets();
    };
    SurveyModel.prototype.currentPageChanging = function (newValue, oldValue) {
        var options = {
            oldCurrentPage: oldValue,
            newCurrentPage: newValue,
            allowChanging: true,
            allow: true,
            isNextPage: this.isNextPage(newValue, oldValue),
            isPrevPage: this.isPrevPage(newValue, oldValue),
        };
        this.onCurrentPageChanging.fire(this, options);
        var allow = options.allowChanging && options.allow;
        if (allow) {
            this.isCurrentPageRendering = true;
        }
        return allow;
    };
    SurveyModel.prototype.currentPageChanged = function (newValue, oldValue) {
        var isNextPage = this.isNextPage(newValue, oldValue);
        if (isNextPage) {
            oldValue.passed = true;
        }
        this.onCurrentPageChanged.fire(this, {
            oldCurrentPage: oldValue,
            newCurrentPage: newValue,
            isNextPage: isNextPage,
            isPrevPage: this.isPrevPage(newValue, oldValue),
        });
    };
    SurveyModel.prototype.isNextPage = function (newValue, oldValue) {
        if (!newValue || !oldValue)
            return false;
        return newValue.visibleIndex == oldValue.visibleIndex + 1;
    };
    SurveyModel.prototype.isPrevPage = function (newValue, oldValue) {
        if (!newValue || !oldValue)
            return false;
        return newValue.visibleIndex + 1 == oldValue.visibleIndex;
    };
    /**
     * Returns the progress that a user made while going through the survey.
     * It depends from progressBarType property
     * @see progressBarType
     * @see progressValue
     */
    SurveyModel.prototype.getProgress = function () {
        if (this.currentPage == null)
            return 0;
        if (this.progressBarType !== "pages") {
            var info = this.getProgressInfo();
            if (this.progressBarType === "requiredQuestions") {
                return info.requiredQuestionCount >= 1
                    ? Math.ceil((info.requiredAnsweredQuestionCount * 100) /
                        info.requiredQuestionCount)
                    : 100;
            }
            return info.questionCount >= 1
                ? Math.ceil((info.answeredQuestionCount * 100) / info.questionCount)
                : 100;
        }
        var visPages = this.visiblePages;
        var index = visPages.indexOf(this.currentPage) + 1;
        return Math.ceil((index * 100) / visPages.length);
    };
    Object.defineProperty(SurveyModel.prototype, "progressValue", {
        /**
         * Returns the progress that a user made while going through the survey.
         * It depends from progressBarType property
         * @see progressBarType
         */
        get: function () {
            return this.getPropertyValue("progressValue", 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isNavigationButtonsShowing", {
        /**
         * Returns the navigation buttons (i.e., 'Prev', 'Next', or 'Complete' and 'Preview') position.
         */
        get: function () {
            if (this.isDesignMode)
                return "none";
            var page = this.currentPage;
            if (!page)
                return "none";
            if (page.navigationButtonsVisibility === "show") {
                return "bottom";
            }
            if (page.navigationButtonsVisibility === "hide") {
                return "none";
            }
            return this.showNavigationButtons;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isNavigationButtonsShowingOnTop", {
        /**
         * Returns true if the navigation buttons (i.e., 'Prev', 'Next', or 'Complete' and 'Preview') are shows on top.
         */
        get: function () {
            return this.getIsNavigationButtonsShowingOn("top");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isNavigationButtonsShowingOnBottom", {
        /**
         * Returns true if the navigation buttons (i.e., 'Prev', 'Next', or 'Complete' and 'Preview') are shows on bottom.
         */
        get: function () {
            return this.getIsNavigationButtonsShowingOn("bottom");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getIsNavigationButtonsShowingOn = function (buttonPosition) {
        var res = this.isNavigationButtonsShowing;
        return res == "both" || res == buttonPosition;
    };
    Object.defineProperty(SurveyModel.prototype, "isEditMode", {
        /**
         * Returns `true` if the survey is in edit mode.
         * @see mode
         */
        get: function () {
            return this.mode == "edit";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isDisplayMode", {
        /**
         * Returns `true` if the survey is in display mode or in preview mode.
         * @see mode
         * @see showPreviewBeforeComplete
         */
        get: function () {
            return this.mode == "display" || this.state == "preview";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isUpdateValueTextOnTyping", {
        get: function () {
            return this.textUpdateMode == "onTyping";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isDesignMode", {
        /**
         * Returns `true` if the survey is in design mode. It is used by SurveyJS Editor.
         * @see setDesignMode
         */
        get: function () {
            return this._isDesignMode;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the survey into design mode.
     * @param value use true to set the survey into the design mode.
     */
    SurveyModel.prototype.setDesignMode = function (value) {
        this._isDesignMode = value;
        this.onQuestionsOnPageModeChanged("standard");
    };
    Object.defineProperty(SurveyModel.prototype, "showInvisibleElements", {
        /**
         * Gets or sets whether to show all elements in the survey, regardless their visibility. The default value is `false`.
         */
        get: function () {
            return this.getPropertyValue("showInvisibleElements", false);
        },
        set: function (val) {
            var visPages = this.visiblePages;
            this.setPropertyValue("showInvisibleElements", val);
            if (this.isLoadingFromJson)
                return;
            this.runConditions();
            this.updateAllElementsVisibility(visPages);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateAllElementsVisibility = function (visPages) {
        for (var i = 0; i < this.pages.length; i++) {
            var page = this.pages[i];
            page.updateElementVisibility();
            if (visPages.indexOf(page) > -1 != page.isVisible) {
                this.onPageVisibleChanged.fire(this, {
                    page: page,
                    visible: page.isVisible,
                });
            }
        }
    };
    Object.defineProperty(SurveyModel.prototype, "areInvisibleElementsShowing", {
        get: function () {
            return this.isDesignMode || this.showInvisibleElements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "areEmptyElementsHidden", {
        get: function () {
            return (this.isShowingPreview &&
                this.showPreviewBeforeComplete == "showAnsweredQuestions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "hasCookie", {
        /**
         * Returns `true`, if a user has already completed the survey in this browser and there is a cookie about it. Survey goes to `completed` state if the function returns `true`.
         * @see cookieName
         * @see setCookie
         * @see deleteCookie
         * @see state
         */
        get: function () {
            if (!this.cookieName || typeof document === "undefined")
                return false;
            var cookies = document.cookie;
            return cookies && cookies.indexOf(this.cookieName + "=true") > -1;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Set the cookie with `cookieName` in user's browser. It is done automatically on survey complete if the `cookieName` property value is not empty.
     * @see cookieName
     * @see hasCookie
     * @see deleteCookie
     */
    SurveyModel.prototype.setCookie = function () {
        if (!this.cookieName || typeof document === "undefined")
            return;
        document.cookie =
            this.cookieName + "=true; expires=Fri, 31 Dec 9999 0:0:0 GMT";
    };
    /**
     * Deletes the cookie with `cookieName` from the browser.
     * @see cookieName
     * @see hasCookie
     * @see setCookie
     */
    SurveyModel.prototype.deleteCookie = function () {
        if (!this.cookieName)
            return;
        document.cookie = this.cookieName + "=;";
    };
    /**
     * Navigates user to the next page.
     *
     * Returns `false` in the following cases:
     *
     * - if the current page is the last page.
     * - if the current page contains errors (for example, a required question is empty).
     * @see isCurrentPageValid
     * @see prevPage
     * @see completeLastPage
     */
    SurveyModel.prototype.nextPage = function () {
        if (this.isLastPage)
            return false;
        return this.doCurrentPageComplete(false);
    };
    SurveyModel.prototype.hasErrorsOnNavigate = function (doComplete) {
        var _this = this;
        if (this.ignoreValidation || !this.isEditMode)
            return false;
        var func = function (hasErrors) {
            if (!hasErrors) {
                _this.doCurrentPageCompleteCore(doComplete);
            }
        };
        if (this.checkErrorsMode === "onComplete") {
            if (!this.isLastPage)
                return false;
            return this.validate(true, true, func) !== true;
        }
        return this.validateCurrentPage(func) !== true;
    };
    SurveyModel.prototype.checkForAsyncQuestionValidation = function (questions, func) {
        var _this = this;
        this.clearAsyncValidationQuesitons();
        var _loop_2 = function () {
            if (questions[i].isRunningValidators) {
                var q_1 = questions[i];
                q_1.onCompletedAsyncValidators = function (hasErrors) {
                    _this.onCompletedAsyncQuestionValidators(q_1, func, hasErrors);
                };
                this_2.asyncValidationQuesitons.push(questions[i]);
            }
        };
        var this_2 = this;
        for (var i = 0; i < questions.length; i++) {
            _loop_2();
        }
        return this.asyncValidationQuesitons.length > 0;
    };
    SurveyModel.prototype.clearAsyncValidationQuesitons = function () {
        if (!!this.asyncValidationQuesitons) {
            var asynQuestions = this.asyncValidationQuesitons;
            for (var i = 0; i < asynQuestions.length; i++) {
                asynQuestions[i].onCompletedAsyncValidators = null;
            }
        }
        this.asyncValidationQuesitons = [];
    };
    SurveyModel.prototype.onCompletedAsyncQuestionValidators = function (question, func, hasErrors) {
        if (hasErrors) {
            this.clearAsyncValidationQuesitons();
            func(true);
            if (this.focusOnFirstError && !!question && !!question.page && question.page === this.currentPage) {
                var questions = this.currentPage.questions;
                for (var i_1 = 0; i_1 < questions.length; i_1++) {
                    if (questions[i_1] !== question && questions[i_1].errors.length > 0)
                        return;
                }
                question.focus(true);
            }
            return;
        }
        var asynQuestions = this.asyncValidationQuesitons;
        for (var i = 0; i < asynQuestions.length; i++) {
            if (asynQuestions[i].isRunningValidators)
                return;
        }
        func(false);
    };
    Object.defineProperty(SurveyModel.prototype, "isCurrentPageHasErrors", {
        get: function () {
            return this.checkIsCurrentPageHasErrors();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isCurrentPageValid", {
        /**
         * Returns `true` if the current page does not contain errors.
         * @see currentPage
         */
        get: function () {
            return !this.checkIsCurrentPageHasErrors();
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.hasCurrentPageErrors = function (onAsyncValidation) {
        return this.hasPageErrors(undefined, onAsyncValidation);
    };
    /**
     * Validates all questions on the current page and returns `false` if the validation fails.
     *
     * If you use validation expressions and at least one of them calls an async function, the `validateCurrentPage` method returns `undefined`. In this case, you should pass a callback function as the `onAsyncValidation` parameter. The function's `hasErrors` Boolean parameter will contain the validation result.
     * @param onAsyncValidation *Optional.* Pass a callback function. It accepts a Boolean `hasErrors` parameter that equals `true` if the validation fails or `false` otherwise.
     * @see currentPage
     * @see validate
     * @see validateCurrentPage
     */
    SurveyModel.prototype.validateCurrentPage = function (onAsyncValidation) {
        return this.validatePage(undefined, onAsyncValidation);
    };
    SurveyModel.prototype.hasPageErrors = function (page, onAsyncValidation) {
        var res = this.validatePage(page, onAsyncValidation);
        if (res === undefined)
            return res;
        return !res;
    };
    /**
     * Validates all questions on a specified page and returns `false` if the validation fails.
     *
     * If you use validation expressions and at least one of them calls an async function, the `validatePage` method returns `undefined`. In this case, you should pass a callback function as the `onAsyncValidation` parameter. The function's `hasErrors` Boolean parameter will contain the validation result.
     * @param page Pass the `PageModel` that you want to validate. You can pass `undefined` to validate the [`activePage`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#activePage).
     * @param onAsyncValidation *Optional.* Pass a callback function. It accepts a Boolean `hasErrors` parameter that equals `true` if the validation fails or `false` otherwise.
     * @see validate
     * @see validateCurrentPage
     */
    SurveyModel.prototype.validatePage = function (page, onAsyncValidation) {
        if (!page) {
            page = this.activePage;
        }
        if (!page)
            return true;
        if (this.checkIsPageHasErrors(page))
            return false;
        if (!onAsyncValidation)
            return true;
        return this.checkForAsyncQuestionValidation(page.questions, function (hasErrors) { return onAsyncValidation(hasErrors); })
            ? undefined
            : true;
    };
    SurveyModel.prototype.hasErrors = function (fireCallback, focusOnFirstError, onAsyncValidation) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (focusOnFirstError === void 0) { focusOnFirstError = false; }
        var res = this.validate(fireCallback, focusOnFirstError, onAsyncValidation);
        if (res === undefined)
            return res;
        return !res;
    };
    /**
     * Validates all questions and returns `false` if the validation fails.
     *
     * If you use validation expressions and at least one of them calls an async function, the `validate` method returns `undefined`. In this case, you should pass a callback function as the `onAsyncValidation` parameter. The function's `hasErrors` Boolean parameter will contain the validation result.
     * @param fireCallback *Optional.* Pass `false` if you do not want to show validation errors in the UI.
     * @param focusOnFirstError *Optional.* Pass `true` if you want to focus the first question with a validation error. The survey will be switched to the page that contains this question if required.
     * @param onAsyncValidation *Optional.* Pass a callback function. It accepts a Boolean `hasErrors` parameter that equals `true` if the validation fails or `false` otherwise.
     * @see validateCurrentPage
     * @see validatePage
     */
    SurveyModel.prototype.validate = function (fireCallback, focusOnFirstError, onAsyncValidation) {
        if (fireCallback === void 0) { fireCallback = true; }
        if (focusOnFirstError === void 0) { focusOnFirstError = false; }
        if (!!onAsyncValidation) {
            fireCallback = true;
        }
        var visPages = this.visiblePages;
        var firstErrorPage = null;
        var res = true;
        for (var i = 0; i < visPages.length; i++) {
            if (!visPages[i].validate(fireCallback, false)) {
                if (!firstErrorPage)
                    firstErrorPage = visPages[i];
                res = false;
            }
        }
        if (focusOnFirstError && !!firstErrorPage) {
            this.currentPage = firstErrorPage;
            var questions = firstErrorPage.questions;
            for (var i = 0; i < questions.length; i++) {
                if (questions[i].errors.length > 0) {
                    questions[i].focus(true);
                    break;
                }
            }
        }
        if (!res || !onAsyncValidation)
            return res;
        return this.checkForAsyncQuestionValidation(this.getAllQuestions(), function (hasErrors) { return onAsyncValidation(hasErrors); })
            ? undefined
            : true;
    };
    /**
     * Checks whether survey elements (pages, panels, and questions) have unique question names.
     * You can check for unique names for individual page and panel (and all their elements) or a question.
     * If the parameter is not specified, then a survey checks that all its elements have unique names.
     * @param element page, panel or question, it is `null` by default, that means all survey elements will be checked
     */
    SurveyModel.prototype.ensureUniqueNames = function (element) {
        if (element === void 0) { element = null; }
        if (element == null) {
            for (var i = 0; i < this.pages.length; i++) {
                this.ensureUniqueName(this.pages[i]);
            }
        }
        else {
            this.ensureUniqueName(element);
        }
    };
    SurveyModel.prototype.ensureUniqueName = function (element) {
        if (element.isPage) {
            this.ensureUniquePageName(element);
        }
        if (element.isPanel) {
            this.ensureUniquePanelName(element);
        }
        if (element.isPage || element.isPanel) {
            var elements = element.elements;
            for (var i = 0; i < elements.length; i++) {
                this.ensureUniqueNames(elements[i]);
            }
        }
        else {
            this.ensureUniqueQuestionName(element);
        }
    };
    SurveyModel.prototype.ensureUniquePageName = function (element) {
        var _this = this;
        return this.ensureUniqueElementName(element, function (name) {
            return _this.getPageByName(name);
        });
    };
    SurveyModel.prototype.ensureUniquePanelName = function (element) {
        var _this = this;
        return this.ensureUniqueElementName(element, function (name) {
            return _this.getPanelByName(name);
        });
    };
    SurveyModel.prototype.ensureUniqueQuestionName = function (element) {
        var _this = this;
        return this.ensureUniqueElementName(element, function (name) {
            return _this.getQuestionByName(name);
        });
    };
    SurveyModel.prototype.ensureUniqueElementName = function (element, getElementByName) {
        var existingElement = getElementByName(element.name);
        if (!existingElement || existingElement == element)
            return;
        var newName = this.getNewName(element.name);
        while (!!getElementByName(newName)) {
            var newName = this.getNewName(element.name);
        }
        element.name = newName;
    };
    SurveyModel.prototype.getNewName = function (name) {
        var pos = name.length;
        while (pos > 0 && name[pos - 1] >= "0" && name[pos - 1] <= "9") {
            pos--;
        }
        var base = name.substring(0, pos);
        var num = 0;
        if (pos < name.length) {
            num = parseInt(name.substring(pos));
        }
        num++;
        return base + num;
    };
    SurveyModel.prototype.checkIsCurrentPageHasErrors = function (isFocuseOnFirstError) {
        if (isFocuseOnFirstError === void 0) { isFocuseOnFirstError = undefined; }
        return this.checkIsPageHasErrors(this.activePage, isFocuseOnFirstError);
    };
    SurveyModel.prototype.checkIsPageHasErrors = function (page, isFocuseOnFirstError) {
        if (isFocuseOnFirstError === void 0) { isFocuseOnFirstError = undefined; }
        if (isFocuseOnFirstError === undefined) {
            isFocuseOnFirstError = this.focusOnFirstError;
        }
        if (!page)
            return true;
        var res = !page.validate(true, isFocuseOnFirstError);
        this.fireValidatedErrorsOnPage(page);
        return res;
    };
    SurveyModel.prototype.fireValidatedErrorsOnPage = function (page) {
        if (this.onValidatedErrorsOnCurrentPage.isEmpty || !page)
            return;
        var questionsOnPage = page.questions;
        var questions = new Array();
        var errors = new Array();
        for (var i = 0; i < questionsOnPage.length; i++) {
            var q = questionsOnPage[i];
            if (q.errors.length > 0) {
                questions.push(q);
                for (var j = 0; j < q.errors.length; j++) {
                    errors.push(q.errors[j]);
                }
            }
        }
        this.onValidatedErrorsOnCurrentPage.fire(this, {
            questions: questions,
            errors: errors,
            page: page,
        });
    };
    /**
     * Navigates user to a previous page. If the current page is the first page, `prevPage` returns `false`. `prevPage` does not perform any checks, required questions can be empty.
     * @see isFirstPage
     */
    SurveyModel.prototype.prevPage = function () {
        var _this = this;
        if (this.isFirstPage || this.state === "starting")
            return false;
        this.resetNavigationButton();
        var skipped = this.skippedPages.find(function (sp) { return sp.to == _this.currentPage; });
        if (skipped) {
            this.currentPage = skipped.from;
            this.skippedPages.splice(this.skippedPages.indexOf(skipped), 1);
        }
        else {
            var vPages = this.visiblePages;
            var index = vPages.indexOf(this.currentPage);
            this.currentPage = vPages[index - 1];
        }
        return true;
    };
    /**
     * Completes the survey, if the current page is the last one. It returns `false` if the last page has errors.
     * If the last page has no errors, `completeLastPage` calls `doComplete` and returns `true`.
     * @see isCurrentPageValid
     * @see nextPage
     * @see doComplete
     */
    SurveyModel.prototype.completeLastPage = function () {
        var res = this.doCurrentPageComplete(true);
        if (res) {
            this.cancelPreview();
        }
        return res;
    };
    SurveyModel.prototype.navigationMouseDown = function () {
        this.isNavigationButtonPressed = true;
        return true;
    };
    SurveyModel.prototype.resetNavigationButton = function () {
        this.isNavigationButtonPressed = false;
    };
    SurveyModel.prototype.nextPageUIClick = function () {
        if (!!this.mouseDownPage && this.mouseDownPage !== this.activePage)
            return;
        this.mouseDownPage = null;
        this.nextPage();
    };
    SurveyModel.prototype.nextPageMouseDown = function () {
        this.mouseDownPage = this.activePage;
        return this.navigationMouseDown();
    };
    /**
     * Shows preview for the survey. Switches the survey to the "preview" state.
     *
     * Details: [Preview State](https://surveyjs.io/Documentation/Library#states-preview)
     * @see showPreviewBeforeComplete
     * @see cancelPreview
     * @see state
     * @see previewText
     * @see editText
     */
    SurveyModel.prototype.showPreview = function () {
        this.resetNavigationButton();
        if (this.hasErrorsOnNavigate(true))
            return false;
        if (this.doServerValidation(true, true))
            return false;
        this.showPreviewCore();
        return true;
    };
    SurveyModel.prototype.showPreviewCore = function () {
        var options = { allowShowPreview: true, allow: true };
        this.onShowingPreview.fire(this, options);
        this.isShowingPreview = options.allowShowPreview && options.allow;
    };
    /**
     * Cancels preview and switches back to the "running" state.
     *
     * Details: [Preview State](https://surveyjs.io/Documentation/Library#states-preview)
     * @param curPage - A new current page. If the parameter is undefined then the last page becomes the current.
     * @see showPreviewBeforeComplete
     * @see showPreview
     * @see state
     */
    SurveyModel.prototype.cancelPreview = function (curPage) {
        if (curPage === void 0) { curPage = null; }
        if (!this.isShowingPreview)
            return;
        this.isShowingPreview = false;
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(curPage) && this.visiblePageCount > 0) {
            curPage = this.visiblePageCount - 1;
        }
        if (curPage !== null) {
            this.currentPage = curPage;
        }
    };
    SurveyModel.prototype.cancelPreviewByPage = function (panel) {
        this.cancelPreview(panel["originalPage"]);
    };
    SurveyModel.prototype.doCurrentPageComplete = function (doComplete) {
        if (this.isValidatingOnServer)
            return false;
        this.resetNavigationButton();
        if (this.hasErrorsOnNavigate(doComplete))
            return false;
        return this.doCurrentPageCompleteCore(doComplete);
    };
    SurveyModel.prototype.doCurrentPageCompleteCore = function (doComplete) {
        if (this.doServerValidation(doComplete))
            return false;
        if (doComplete) {
            this.currentPage.passed = true;
            return this.doComplete();
        }
        this.doNextPage();
        return true;
    };
    Object.defineProperty(SurveyModel.prototype, "isSinglePage", {
        get: function () {
            return this.questionsOnPageMode == "singlePage";
        },
        set: function (val) {
            this.questionsOnPageMode = val ? "singlePage" : "standard";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "questionsOnPageMode", {
        /**
         * Gets or sets a value that specifies how the survey combines questions, panels, and pages.
         *
         * The following options are available:
         *
         * - `singlePage` - combine all survey pages in a single page. Pages will be converted to panels.
         * - `questionPerPage` - show one question per page. Survey will create a separate page for every question.
         */
        get: function () {
            return this.getPropertyValue("questionsOnPageMode");
        },
        set: function (val) {
            this.setPropertyValue("questionsOnPageMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "firstPageIsStarted", {
        /**
         * Gets or sets whether the first survey page is a start page. Set this property to `true`, to make the first page a starting page.
         * An end user cannot navigate to the start page and the start page does not affect a survey progress.
         */
        get: function () {
            return this.getPropertyValue("firstPageIsStarted", false);
        },
        set: function (val) {
            this.setPropertyValue("firstPageIsStarted", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.isPageStarted = function (page) {
        return (this.firstPageIsStarted && this.pages.length > 1 && this.pages[0] === page);
    };
    Object.defineProperty(SurveyModel.prototype, "showPreviewBeforeComplete", {
        /**
         * Allows respondents to preview answers before they are submitted.
         *
         * Possible values:
         *
         * - `"showAllQuestions"` - Displays all questions in the preview.
         * - `"showAnsweredQuestions"` - Displays only answered questions in the preview.
         * - `"noPreview"` (default) - Hides the preview.
         *
         * [View Demo](https://surveyjs.io/form-library/examples/survey-showpreview/ (linkStyle))
         * @see showPreview
         * @see cancelPreview
         */
        get: function () {
            return this.getPropertyValue("showPreviewBeforeComplete");
        },
        set: function (val) {
            this.setPropertyValue("showPreviewBeforeComplete", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowPreviewBeforeComplete", {
        get: function () {
            var preview = this.showPreviewBeforeComplete;
            return preview == "showAllQuestions" || preview == "showAnsweredQuestions";
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.onFirstPageIsStartedChanged = function () {
        this.isStartedState = this.firstPageIsStarted && this.pages.length > 1;
        this.pageVisibilityChanged(this.pages[0], !this.isStartedState);
    };
    SurveyModel.prototype.onShowingPreviewChanged = function () {
        if (this.isDesignMode)
            return;
        if (this.isShowingPreview) {
            this.runningPages = this.pages.slice(0, this.pages.length);
            this.setupPagesForPageModes(true);
        }
        else {
            if (this.runningPages) {
                this.restoreOrigionalPages(this.runningPages);
            }
            this.runningPages = undefined;
        }
        this.runConditions();
        this.updateAllElementsVisibility(this.pages);
        this.updateVisibleIndexes();
        this.currentPageNo = 0;
    };
    SurveyModel.prototype.onQuestionsOnPageModeChanged = function (oldValue) {
        if (this.isShowingPreview)
            return;
        if (this.questionsOnPageMode == "standard" || this.isDesignMode) {
            if (this.origionalPages) {
                this.restoreOrigionalPages(this.origionalPages);
            }
            this.origionalPages = undefined;
        }
        else {
            if (!oldValue || oldValue == "standard") {
                this.origionalPages = this.pages.slice(0, this.pages.length);
            }
            this.setupPagesForPageModes(this.isSinglePage);
        }
        this.runConditions();
        this.updateVisibleIndexes();
    };
    SurveyModel.prototype.restoreOrigionalPages = function (originalPages) {
        this.questionHashesClear();
        this.pages.splice(0, this.pages.length);
        for (var i = 0; i < originalPages.length; i++) {
            this.pages.push(originalPages[i]);
        }
    };
    SurveyModel.prototype.getPageStartIndex = function () {
        return this.firstPageIsStarted && this.pages.length > 0 ? 1 : 0;
    };
    SurveyModel.prototype.setupPagesForPageModes = function (isSinglePage) {
        this.questionHashesClear();
        var startIndex = this.getPageStartIndex();
        _super.prototype.startLoadingFromJson.call(this);
        var newPages = this.createPagesForQuestionOnPageMode(isSinglePage, startIndex);
        var deletedLen = this.pages.length - startIndex;
        this.pages.splice(startIndex, deletedLen);
        for (var i = 0; i < newPages.length; i++) {
            this.pages.push(newPages[i]);
        }
        _super.prototype.endLoadingFromJson.call(this);
        for (var i = 0; i < newPages.length; i++) {
            newPages[i].setSurveyImpl(this, true);
        }
        this.doElementsOnLoad();
        this.updateCurrentPage();
    };
    SurveyModel.prototype.createPagesForQuestionOnPageMode = function (isSinglePage, startIndex) {
        if (isSinglePage) {
            return [this.createSinglePage(startIndex)];
        }
        return this.createPagesForEveryQuestion(startIndex);
    };
    SurveyModel.prototype.createSinglePage = function (startIndex) {
        var single = this.createNewPage("all");
        single.setSurveyImpl(this);
        for (var i = startIndex; i < this.pages.length; i++) {
            var page = this.pages[i];
            var panel = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("panel");
            panel.originalPage = page;
            single.addPanel(panel);
            var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(page);
            new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, panel);
            if (!this.showPageTitles) {
                panel.title = "";
            }
        }
        return single;
    };
    SurveyModel.prototype.createPagesForEveryQuestion = function (startIndex) {
        var res = [];
        for (var i = startIndex; i < this.pages.length; i++) {
            var originalPage = this.pages[i];
            // Initialize randomization
            originalPage.setWasShown(true);
            for (var j = 0; j < originalPage.elements.length; j++) {
                var originalElement = originalPage.elements[j];
                var element = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(originalElement.getType());
                if (!element)
                    continue;
                var jsonObj = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]();
                //Deserialize page properties only, excluding elements
                jsonObj.lightSerializing = true;
                var pageJson = jsonObj.toJsonObject(originalPage);
                var page = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass(originalPage.getType());
                page.fromJSON(pageJson);
                page.name = originalElement.name;
                page.setSurveyImpl(this);
                res.push(page);
                var json = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toJsonObject(originalElement);
                page.addElement(element);
                new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]().toObject(json, element);
                for (var k = 0; k < page.questions.length; k++) {
                    this.questionHashesAdded(page.questions[k]);
                }
            }
        }
        return res;
    };
    Object.defineProperty(SurveyModel.prototype, "isFirstPage", {
        /**
         * Gets whether the current page is the first one.
         */
        get: function () {
            return this.getPropertyValue("isFirstPage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isLastPage", {
        /**
         * Gets whether the current page is the last one.
         */
        get: function () {
            return this.getPropertyValue("isLastPage");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateButtonsVisibility = function () {
        this.updateIsFirstLastPageState();
        this.setPropertyValue("isShowPrevButton", this.calcIsShowPrevButton());
        this.setPropertyValue("isShowNextButton", this.calcIsShowNextButton());
        this.setPropertyValue("isCompleteButtonVisible", this.calcIsCompleteButtonVisible());
        this.setPropertyValue("isPreviewButtonVisible", this.calcIsPreviewButtonVisible());
        this.setPropertyValue("isCancelPreviewButtonVisible", this.calcIsCancelPreviewButtonVisible());
    };
    Object.defineProperty(SurveyModel.prototype, "isShowPrevButton", {
        get: function () {
            return this.getPropertyValue("isShowPrevButton");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isShowNextButton", {
        get: function () {
            return this.getPropertyValue("isShowNextButton");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isCompleteButtonVisible", {
        get: function () {
            return this.getPropertyValue("isCompleteButtonVisible");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isPreviewButtonVisible", {
        get: function () {
            return this.getPropertyValue("isPreviewButtonVisible");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isCancelPreviewButtonVisible", {
        get: function () {
            return this.getPropertyValue("isCancelPreviewButtonVisible");
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateIsFirstLastPageState = function () {
        var curPage = this.currentPage;
        this.setPropertyValue("isFirstPage", !!curPage && curPage === this.firstVisiblePage);
        this.setPropertyValue("isLastPage", !!curPage && curPage === this.lastVisiblePage);
    };
    SurveyModel.prototype.calcIsShowPrevButton = function () {
        if (this.isFirstPage || !this.showPrevButton || this.state !== "running")
            return false;
        var page = this.visiblePages[this.currentPageNo - 1];
        return this.getPageMaxTimeToFinish(page) <= 0;
    };
    SurveyModel.prototype.calcIsShowNextButton = function () {
        return this.state === "running" && !this.isLastPage && !this.canBeCompletedByTrigger;
    };
    SurveyModel.prototype.calcIsCompleteButtonVisible = function () {
        var state = this.state;
        return this.isEditMode && (this.state === "running" &&
            (this.isLastPage && !this.isShowPreviewBeforeComplete || this.canBeCompletedByTrigger)
            || state === "preview");
    };
    SurveyModel.prototype.calcIsPreviewButtonVisible = function () {
        return (this.isEditMode &&
            this.isShowPreviewBeforeComplete &&
            this.state == "running" && this.isLastPage);
    };
    SurveyModel.prototype.calcIsCancelPreviewButtonVisible = function () {
        return (this.isEditMode &&
            this.isShowPreviewBeforeComplete &&
            this.state == "preview");
    };
    Object.defineProperty(SurveyModel.prototype, "firstVisiblePage", {
        get: function () {
            var pages = this.pages;
            for (var i = 0; i < pages.length; i++) {
                if (this.isPageInVisibleList(pages[i]))
                    return pages[i];
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "lastVisiblePage", {
        get: function () {
            var pages = this.pages;
            for (var i = pages.length - 1; i >= 0; i--) {
                if (this.isPageInVisibleList(pages[i]))
                    return pages[i];
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Completes the survey.
     *
     * Calling this function performs the following tasks:
     *
     * - writes cookie if the `cookieName` property is not empty
     * - sets the survey into `completed` state
     * - fires the `onComplete` event
     * - calls `sendResult` function.
     *
     * Calling the `doComplete` function does not perform any validation, unlike the `completeLastPage` function.
     * The function can return false, if you set options.allowComplete to false in onCompleting event. Otherwise it returns true.
     * It calls `navigateToUrl` after calling `onComplete` event.
     * In case calling `options.showSaveInProgress` callback in the `onComplete` event, `navigateToUrl` is used on calling `options.showSaveSuccess` callback.
     * @see completeLastPage
     * @see onCompleting
     * @see cookieName
     * @see state
     * @see onComplete
     * @see surveyPostId
     * @see completeLastPage
     * @see navigateToUrl
     * @see navigateToUrlOnCondition
     */
    SurveyModel.prototype.doComplete = function (isCompleteOnTrigger) {
        var _this = this;
        if (isCompleteOnTrigger === void 0) { isCompleteOnTrigger = false; }
        if (this.isCompleted)
            return;
        if (!this.checkOnCompletingEvent(isCompleteOnTrigger)) {
            this.isCompleted = false;
            return false;
        }
        var previousCookie = this.hasCookie;
        this.stopTimer();
        this.isCompleted = true;
        this.clearUnusedValues();
        this.setCookie();
        var showSaveInProgress = function (text) {
            savingDataStarted = true;
            _this.setCompletedState("saving", text);
        };
        var showSaveError = function (text) {
            _this.setCompletedState("error", text);
        };
        var showSaveSuccess = function (text) {
            _this.setCompletedState("success", text);
            _this.navigateTo();
        };
        var clearSaveMessages = function (text) {
            _this.setCompletedState("", "");
        };
        var savingDataStarted = false;
        var onCompleteOptions = {
            isCompleteOnTrigger: isCompleteOnTrigger,
            showSaveInProgress: showSaveInProgress,
            showSaveError: showSaveError,
            showSaveSuccess: showSaveSuccess,
            clearSaveMessages: clearSaveMessages,
            //Obsolete functions
            showDataSaving: showSaveInProgress,
            showDataSavingError: showSaveError,
            showDataSavingSuccess: showSaveSuccess,
            showDataSavingClear: clearSaveMessages
        };
        this.onComplete.fire(this, onCompleteOptions);
        if (!previousCookie && this.surveyPostId) {
            this.sendResult();
        }
        if (!savingDataStarted) {
            this.navigateTo();
        }
        return true;
    };
    SurveyModel.prototype.checkOnCompletingEvent = function (isCompleteOnTrigger) {
        var options = {
            allowComplete: true,
            allow: true,
            isCompleteOnTrigger: isCompleteOnTrigger,
        };
        this.onCompleting.fire(this, options);
        return options.allowComplete && options.allow;
    };
    /**
     * Starts the survey. Changes the survey mode from "starting" to "running". Call this function if your survey has a start page, otherwise this function does nothing.
     * @see firstPageIsStarted
     */
    SurveyModel.prototype.start = function () {
        if (!this.firstPageIsStarted)
            return false;
        if (this.checkIsPageHasErrors(this.startedPage, true))
            return false;
        this.isStartedState = false;
        this.startTimerFromUI();
        this.onStarted.fire(this, {});
        this.updateVisibleIndexes();
        if (!!this.currentPage) {
            this.currentPage.locStrsChanged();
        }
        return true;
    };
    Object.defineProperty(SurveyModel.prototype, "isValidatingOnServer", {
        /**
         * Gets whether the question values on the current page are validating on the server at the current moment.
         * @see onServerValidateQuestions
         */
        get: function () {
            return this.getPropertyValue("isValidatingOnServer", false);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.setIsValidatingOnServer = function (val) {
        if (val == this.isValidatingOnServer)
            return;
        this.setPropertyValue("isValidatingOnServer", val);
        this.onIsValidatingOnServerChanged();
    };
    SurveyModel.prototype.createServerValidationOptions = function (doComplete, isPreview) {
        var self = this;
        var options = {
            data: {},
            errors: {},
            survey: this,
            complete: function () {
                self.completeServerValidation(options, isPreview);
            },
        };
        if (doComplete && this.checkErrorsMode === "onComplete") {
            options.data = this.data;
        }
        else {
            var questions = this.activePage.questions;
            for (var i = 0; i < questions.length; i++) {
                var question = questions[i];
                if (!question.visible)
                    continue;
                var value = this.getValue(question.getValueName());
                if (!this.isValueEmpty(value))
                    options.data[question.getValueName()] = value;
            }
        }
        return options;
    };
    SurveyModel.prototype.onIsValidatingOnServerChanged = function () { };
    SurveyModel.prototype.doServerValidation = function (doComplete, isPreview) {
        var _this = this;
        if (isPreview === void 0) { isPreview = false; }
        if (!this.onServerValidateQuestions ||
            this.onServerValidateQuestions.isEmpty)
            return false;
        if (!doComplete && this.checkErrorsMode === "onComplete")
            return false;
        this.setIsValidatingOnServer(true);
        var isFunc = typeof this.onServerValidateQuestions === "function";
        this.serverValidationEventCount = !isFunc ? this.onServerValidateQuestions.length : 1;
        if (isFunc) {
            this.onServerValidateQuestions(this, this.createServerValidationOptions(doComplete, isPreview));
        }
        else {
            this.onServerValidateQuestions.fireByCreatingOptions(this, function () { return _this.createServerValidationOptions(doComplete, isPreview); });
        }
        return true;
    };
    SurveyModel.prototype.completeServerValidation = function (options, isPreview) {
        if (this.serverValidationEventCount > 1) {
            this.serverValidationEventCount--;
            if (!!options && !!options.errors && Object.keys(options.errors).length === 0)
                return;
        }
        this.serverValidationEventCount = 0;
        this.setIsValidatingOnServer(false);
        if (!options && !options.survey)
            return;
        var self = options.survey;
        var hasErrors = false;
        if (options.errors) {
            var hasToFocus = this.focusOnFirstError;
            for (var name in options.errors) {
                var question = self.getQuestionByName(name);
                if (question && question["errors"]) {
                    hasErrors = true;
                    question.addError(new _error__WEBPACK_IMPORTED_MODULE_9__["CustomError"](options.errors[name], this));
                    if (hasToFocus) {
                        hasToFocus = false;
                        if (!!question.page) {
                            this.currentPage = question.page;
                        }
                        question.focus(true);
                    }
                }
            }
            this.fireValidatedErrorsOnPage(this.currentPage);
        }
        if (!hasErrors) {
            if (isPreview) {
                this.showPreviewCore();
            }
            else {
                if (self.isLastPage)
                    self.doComplete();
                else
                    self.doNextPage();
            }
        }
    };
    SurveyModel.prototype.doNextPage = function () {
        var curPage = this.currentPage;
        this.checkOnPageTriggers();
        if (!this.isCompleted) {
            if (this.sendResultOnPageNext) {
                this.sendResult(this.surveyPostId, this.clientId, true);
            }
            if (curPage === this.currentPage) {
                var vPages = this.visiblePages;
                var index = vPages.indexOf(this.currentPage);
                this.currentPage = vPages[index + 1];
            }
        }
        else {
            this.doComplete(true);
        }
    };
    SurveyModel.prototype.setCompleted = function () {
        this.doComplete(true);
    };
    SurveyModel.prototype.canBeCompleted = function () {
        if (!_settings__WEBPACK_IMPORTED_MODULE_14__["settings"].changeNavigationButtonsOnCompleteTrigger)
            return;
        if (!this.canBeCompletedByTrigger) {
            this.canBeCompletedByTrigger = true;
            this.updateButtonsVisibility();
        }
    };
    Object.defineProperty(SurveyModel.prototype, "processedCompletedHtml", {
        /**
         * Returns the HTML content for the complete page.
         * @see completedHtml
         */
        get: function () {
            var html = this.renderedCompletedHtml;
            return !!html ? this.processHtml(html) : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "processedCompletedBeforeHtml", {
        /**
         * Returns the HTML content, that is shown to a user that had completed the survey before.
         * @see completedHtml
         * @see cookieName
         */
        get: function () {
            return this.processHtml(this.completedBeforeHtml);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "processedLoadingHtml", {
        /**
         * Returns the HTML content, that is shows when a survey loads the survey JSON.
         */
        get: function () {
            return this.processHtml(this.loadingHtml);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getProgressInfo = function () {
        var pages = this.isDesignMode ? this.pages : this.visiblePages;
        return _survey_element__WEBPACK_IMPORTED_MODULE_3__["SurveyElement"].getProgressInfoByElements(pages, false);
    };
    Object.defineProperty(SurveyModel.prototype, "progressText", {
        /**
         * Returns the text for the current progress.
         */
        get: function () {
            var res = this.getPropertyValue("progressText", "");
            if (!res) {
                this.updateProgressText();
                res = this.getPropertyValue("progressText", "");
            }
            return res;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.updateProgressText = function (onValueChanged) {
        if (onValueChanged === void 0) { onValueChanged = false; }
        if (this.isCalculatingProgressText)
            return;
        if (onValueChanged &&
            this.progressBarType == "pages" &&
            this.onProgressText.isEmpty)
            return;
        this.isCalculatingProgressText = true;
        this.setPropertyValue("progressText", this.getProgressText());
        this.setPropertyValue("progressValue", this.getProgress());
        this.isCalculatingProgressText = false;
    };
    SurveyModel.prototype.getProgressText = function () {
        if (!this.isDesignMode && this.currentPage == null)
            return "";
        var options = {
            questionCount: 0,
            answeredQuestionCount: 0,
            requiredQuestionCount: 0,
            requiredAnsweredQuestionCount: 0,
            text: "",
        };
        var type = this.progressBarType.toLowerCase();
        if (type === "questions" ||
            type === "requiredquestions" ||
            type === "correctquestions" ||
            !this.onProgressText.isEmpty) {
            var info = this.getProgressInfo();
            options.questionCount = info.questionCount;
            options.answeredQuestionCount = info.answeredQuestionCount;
            options.requiredQuestionCount = info.requiredQuestionCount;
            options.requiredAnsweredQuestionCount =
                info.requiredAnsweredQuestionCount;
        }
        options.text = this.getProgressTextCore(options);
        this.onProgressText.fire(this, options);
        return options.text;
    };
    SurveyModel.prototype.getProgressTextCore = function (info) {
        var type = this.progressBarType.toLowerCase();
        if (type === "questions") {
            return this.getLocalizationFormatString("questionsProgressText", info.answeredQuestionCount, info.questionCount);
        }
        if (type === "requiredquestions") {
            return this.getLocalizationFormatString("questionsProgressText", info.requiredAnsweredQuestionCount, info.requiredQuestionCount);
        }
        if (type === "correctquestions") {
            var correctAnswersCount = this.getCorrectedAnswerCount();
            return this.getLocalizationFormatString("questionsProgressText", correctAnswersCount, info.questionCount);
        }
        var vPages = this.isDesignMode ? this.pages : this.visiblePages;
        var index = vPages.indexOf(this.currentPage) + 1;
        return this.getLocalizationFormatString("progressText", index, vPages.length);
    };
    SurveyModel.prototype.getRootCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_18__["CssClassBuilder"]()
            .append(this.css.root)
            .append(this.css.rootMobile, this.isMobile)
            .append(this.css.rootReadOnly, this.mode === "display")
            .toString();
    };
    SurveyModel.prototype.afterRenderSurvey = function (htmlElement) {
        var _this = this;
        this.destroyResizeObserver();
        if (Array.isArray(htmlElement)) {
            htmlElement = _survey_element__WEBPACK_IMPORTED_MODULE_3__["SurveyElement"].GetFirstNonTextElement(htmlElement);
        }
        var observedElement = htmlElement;
        var cssVariables = this.css.variables;
        if (!!cssVariables) {
            var mobileWidth_1 = Number.parseFloat(window.getComputedStyle(observedElement).getPropertyValue(cssVariables.mobileWidth));
            if (!!mobileWidth_1) {
                var isProcessed_1 = false;
                this.resizeObserver = new ResizeObserver(function () {
                    if (isProcessed_1 || !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_15__["isContainerVisible"])(observedElement)) {
                        isProcessed_1 = false;
                    }
                    else {
                        isProcessed_1 = _this.processResponsiveness(observedElement.offsetWidth, mobileWidth_1);
                    }
                });
                this.resizeObserver.observe(observedElement);
            }
        }
        this.onAfterRenderSurvey.fire(this, {
            survey: this,
            htmlElement: htmlElement,
        });
    };
    SurveyModel.prototype.processResponsiveness = function (width, mobileWidth) {
        var isMobile = width < mobileWidth;
        if (this.isMobile === isMobile) {
            return false;
        }
        else {
            this.setIsMobile(isMobile);
            return true;
        }
    };
    SurveyModel.prototype.destroyResizeObserver = function () {
        if (!!this.resizeObserver) {
            this.resizeObserver.disconnect();
            this.resizeObserver = undefined;
        }
    };
    SurveyModel.prototype.updateQuestionCssClasses = function (question, cssClasses) {
        this.onUpdateQuestionCssClasses.fire(this, {
            question: question,
            cssClasses: cssClasses,
        });
    };
    SurveyModel.prototype.updatePanelCssClasses = function (panel, cssClasses) {
        this.onUpdatePanelCssClasses.fire(this, {
            panel: panel,
            cssClasses: cssClasses,
        });
    };
    SurveyModel.prototype.updatePageCssClasses = function (page, cssClasses) {
        this.onUpdatePageCssClasses.fire(this, {
            page: page,
            cssClasses: cssClasses,
        });
    };
    SurveyModel.prototype.updateChoiceItemCss = function (question, options) {
        options.question = question;
        this.onUpdateChoiceItemCss.fire(this, options);
    };
    SurveyModel.prototype.afterRenderPage = function (htmlElement) {
        var _this = this;
        if (!this.isDesignMode && !this.isFocusingQuestion) {
            setTimeout(function () { return _this.scrollToTopOnPageChange(!_this.isFirstPageRendering); }, 1);
        }
        while (this.afterRenderPageTasks.length > 0) {
            this.afterRenderPageTasks.shift()();
        }
        this.isFirstPageRendering = false;
        if (this.onAfterRenderPage.isEmpty)
            return;
        this.onAfterRenderPage.fire(this, {
            page: this.activePage,
            htmlElement: htmlElement,
        });
    };
    SurveyModel.prototype.afterRenderHeader = function (htmlElement) {
        if (this.onAfterRenderHeader.isEmpty)
            return;
        this.onAfterRenderHeader.fire(this, {
            htmlElement: htmlElement,
        });
    };
    SurveyModel.prototype.afterRenderQuestion = function (question, htmlElement) {
        this.onAfterRenderQuestion.fire(this, {
            question: question,
            htmlElement: htmlElement,
        });
    };
    SurveyModel.prototype.afterRenderQuestionInput = function (question, htmlElement) {
        if (this.onAfterRenderQuestionInput.isEmpty)
            return;
        var id = question.inputId;
        if (!!id && htmlElement.id !== id && typeof document !== "undefined") {
            var el = document.getElementById(id);
            if (!!el) {
                htmlElement = el;
            }
        }
        this.onAfterRenderQuestionInput.fire(this, {
            question: question,
            htmlElement: htmlElement,
        });
    };
    SurveyModel.prototype.afterRenderPanel = function (panel, htmlElement) {
        this.onAfterRenderPanel.fire(this, {
            panel: panel,
            htmlElement: htmlElement,
        });
    };
    SurveyModel.prototype.whenQuestionFocusIn = function (question) {
        this.onFocusInQuestion.fire(this, {
            question: question
        });
    };
    SurveyModel.prototype.whenPanelFocusIn = function (panel) {
        this.onFocusInPanel.fire(this, {
            panel: panel
        });
    };
    SurveyModel.prototype.rebuildQuestionChoices = function () {
        this.getAllQuestions().forEach(function (q) { return q.surveyChoiceItemVisibilityChange(); });
    };
    SurveyModel.prototype.canChangeChoiceItemsVisibility = function () {
        return !this.onShowingChoiceItem.isEmpty;
    };
    SurveyModel.prototype.getChoiceItemVisibility = function (question, item, val) {
        var options = { question: question, item: item, visible: val };
        this.onShowingChoiceItem.fire(this, options);
        return options.visible;
    };
    SurveyModel.prototype.loadQuestionChoices = function (options) {
        this.onChoicesLazyLoad.fire(this, options);
    };
    SurveyModel.prototype.getChoiceDisplayValue = function (options) {
        this.onGetChoiceDisplayValue.fire(this, options);
    };
    SurveyModel.prototype.matrixBeforeRowAdded = function (options) {
        this.onMatrixBeforeRowAdded.fire(this, options);
    };
    SurveyModel.prototype.matrixRowAdded = function (question, row) {
        this.onMatrixRowAdded.fire(this, { question: question, row: row });
    };
    SurveyModel.prototype.matrixColumnAdded = function (question, column) {
        this.onMatrixColumnAdded.fire(this, { question: question, column: column });
    };
    SurveyModel.prototype.multipleTextItemAdded = function (question, item) {
        this.onMultipleTextItemAdded.fire(this, { question: question, item: item });
    };
    SurveyModel.prototype.getQuestionByValueNameFromArray = function (valueName, name, index) {
        var questions = this.getQuestionsByValueName(valueName);
        if (!questions)
            return;
        for (var i = 0; i < questions.length; i++) {
            var res = questions[i].getQuestionFromArray(name, index);
            if (!!res)
                return res;
        }
        return null;
    };
    SurveyModel.prototype.matrixRowRemoved = function (question, rowIndex, row) {
        this.onMatrixRowRemoved.fire(this, {
            question: question,
            rowIndex: rowIndex,
            row: row,
        });
    };
    SurveyModel.prototype.matrixRowRemoving = function (question, rowIndex, row) {
        var options = {
            question: question,
            rowIndex: rowIndex,
            row: row,
            allow: true,
        };
        this.onMatrixRowRemoving.fire(this, options);
        return options.allow;
    };
    SurveyModel.prototype.matrixAllowRemoveRow = function (question, rowIndex, row) {
        var options = {
            question: question,
            rowIndex: rowIndex,
            row: row,
            allow: true,
        };
        this.onMatrixAllowRemoveRow.fire(this, options);
        return options.allow;
    };
    SurveyModel.prototype.matrixCellCreating = function (question, options) {
        options.question = question;
        this.onMatrixCellCreating.fire(this, options);
    };
    SurveyModel.prototype.matrixCellCreated = function (question, options) {
        options.question = question;
        this.onMatrixCellCreated.fire(this, options);
    };
    SurveyModel.prototype.matrixAfterCellRender = function (question, options) {
        options.question = question;
        this.onMatrixAfterCellRender.fire(this, options);
    };
    SurveyModel.prototype.matrixCellValueChanged = function (question, options) {
        options.question = question;
        this.onMatrixCellValueChanged.fire(this, options);
    };
    SurveyModel.prototype.matrixCellValueChanging = function (question, options) {
        options.question = question;
        this.onMatrixCellValueChanging.fire(this, options);
    };
    Object.defineProperty(SurveyModel.prototype, "isValidateOnValueChanging", {
        get: function () {
            return this.checkErrorsMode === "onValueChanging";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isValidateOnValueChanged", {
        get: function () {
            return this.checkErrorsMode === "onValueChanged";
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.matrixCellValidate = function (question, options) {
        options.question = question;
        this.onMatrixCellValidate.fire(this, options);
        return options.error ? new _error__WEBPACK_IMPORTED_MODULE_9__["CustomError"](options.error, this) : null;
    };
    SurveyModel.prototype.dynamicPanelAdded = function (question, panelIndex, panel) {
        if (!this.isLoadingFromJson) {
            this.updateVisibleIndexes();
        }
        if (this.onDynamicPanelAdded.isEmpty)
            return;
        var panels = question.panels;
        if (panelIndex === undefined) {
            panelIndex = panels.length - 1;
            panel = panels[panelIndex];
        }
        this.onDynamicPanelAdded.fire(this, { question: question, panel: panel, panelIndex: panelIndex });
    };
    SurveyModel.prototype.dynamicPanelRemoved = function (question, panelIndex, panel) {
        var questions = !!panel ? panel.questions : [];
        for (var i = 0; i < questions.length; i++) {
            questions[i].clearOnDeletingContainer();
        }
        this.updateVisibleIndexes();
        this.onDynamicPanelRemoved.fire(this, {
            question: question,
            panelIndex: panelIndex,
            panel: panel,
        });
    };
    SurveyModel.prototype.dynamicPanelRemoving = function (question, panelIndex, panel) {
        var options = {
            question: question,
            panelIndex: panelIndex,
            panel: panel,
            allow: true
        };
        this.onDynamicPanelRemoving.fire(this, options);
        return options.allow;
    };
    SurveyModel.prototype.dynamicPanelItemValueChanged = function (question, options) {
        options.question = question;
        options.panelIndex = options.itemIndex;
        options.panelData = options.itemValue;
        this.onDynamicPanelItemValueChanged.fire(this, options);
    };
    SurveyModel.prototype.dragAndDropAllow = function (options) {
        options.allow = true;
        this.onDragDropAllow.fire(this, options);
        return options.allow;
    };
    SurveyModel.prototype.elementContentVisibilityChanged = function (element) {
        if (this.currentPage) {
            this.currentPage.ensureRowsVisibility();
        }
        this.onElementContentVisibilityChanged.fire(this, { element: element });
    };
    SurveyModel.prototype.getUpdatedPanelFooterActions = function (panel, actions, question) {
        var options = {
            question: question,
            panel: panel,
            actions: actions,
        };
        this.onGetPanelFooterActions.fire(this, options);
        return options.actions;
    };
    SurveyModel.prototype.getUpdatedElementTitleActions = function (element, titleActions) {
        if (element.isPage)
            return this.getUpdatedPageTitleActions(element, titleActions);
        if (element.isPanel)
            return this.getUpdatedPanelTitleActions(element, titleActions);
        return this.getUpdatedQuestionTitleActions(element, titleActions);
    };
    SurveyModel.prototype.getUpdatedQuestionTitleActions = function (question, titleActions) {
        var options = {
            question: question,
            titleActions: titleActions,
        };
        this.onGetQuestionTitleActions.fire(this, options);
        return options.titleActions;
    };
    SurveyModel.prototype.getUpdatedPanelTitleActions = function (panel, titleActions) {
        var options = {
            panel: panel,
            titleActions: titleActions,
        };
        this.onGetPanelTitleActions.fire(this, options);
        return options.titleActions;
    };
    SurveyModel.prototype.getUpdatedPageTitleActions = function (page, titleActions) {
        var options = {
            page: page,
            titleActions: titleActions,
        };
        this.onGetPageTitleActions.fire(this, options);
        return options.titleActions;
    };
    SurveyModel.prototype.getUpdatedMatrixRowActions = function (question, row, actions) {
        var options = {
            question: question,
            actions: actions,
            row: row,
        };
        this.onGetMatrixRowActions.fire(this, options);
        return options.actions;
    };
    SurveyModel.prototype.scrollElementToTop = function (element, question, page, id) {
        var options = {
            element: element,
            question: question,
            page: page,
            elementId: id,
            cancel: false,
        };
        this.onScrollingElementToTop.fire(this, options);
        if (!options.cancel) {
            _survey_element__WEBPACK_IMPORTED_MODULE_3__["SurveyElement"].ScrollElementToTop(options.elementId);
        }
    };
    /**
     * Uploads a file to server.
     * @param question a file question object
     * @param name a question name
     * @param files files to upload
     * @param uploadingCallback a call back function to get the status on uploading the files
     */
    SurveyModel.prototype.uploadFiles = function (question, name, files, uploadingCallback) {
        if (this.onUploadFiles.isEmpty) {
            uploadingCallback("error", files);
        }
        else {
            this.onUploadFiles.fire(this, {
                question: question,
                name: name,
                files: files || [],
                callback: uploadingCallback,
            });
        }
        if (this.surveyPostId) {
            this.uploadFilesCore(name, files, uploadingCallback);
        }
    };
    /**
     * Downloads a file from server
     * @param name a question name
     * @param fileValue a single file question value
     * @param callback a call back function to get the status on downloading the file and the downloaded file content
     */
    SurveyModel.prototype.downloadFile = function (question, questionName, fileValue, callback) {
        if (this.onDownloadFile.isEmpty) {
            !!callback && callback("success", fileValue.content || fileValue);
        }
        this.onDownloadFile.fire(this, {
            question: question,
            name: questionName,
            content: fileValue.content || fileValue,
            fileValue: fileValue,
            callback: callback,
        });
    };
    /**
     * Clears files from server.
     * @param question question
     * @param name question name
     * @param value file question value
     * @param callback call back function to get the status of the clearing operation
     */
    SurveyModel.prototype.clearFiles = function (question, name, value, fileName, callback) {
        if (this.onClearFiles.isEmpty) {
            !!callback && callback("success", value);
        }
        this.onClearFiles.fire(this, {
            question: question,
            name: name,
            value: value,
            fileName: fileName,
            callback: callback,
        });
    };
    SurveyModel.prototype.updateChoicesFromServer = function (question, choices, serverResult) {
        var options = {
            question: question,
            choices: choices,
            serverResult: serverResult,
        };
        this.onLoadChoicesFromServer.fire(this, options);
        return options.choices;
    };
    SurveyModel.prototype.loadedChoicesFromServer = function (question) {
        this.locStrsChanged();
    };
    SurveyModel.prototype.createSurveyService = function () {
        return new _dxSurveyService__WEBPACK_IMPORTED_MODULE_7__["dxSurveyService"]();
    };
    SurveyModel.prototype.uploadFilesCore = function (name, files, uploadingCallback) {
        var _this = this;
        var responses = [];
        files.forEach(function (file) {
            if (uploadingCallback)
                uploadingCallback("uploading", file);
            _this.createSurveyService().sendFile(_this.surveyPostId, file, function (success, response) {
                if (success) {
                    responses.push({ content: response, file: file });
                    if (responses.length === files.length) {
                        if (uploadingCallback)
                            uploadingCallback("success", responses);
                    }
                }
                else {
                    if (uploadingCallback)
                        uploadingCallback("error", {
                            response: response,
                            file: file,
                        });
                }
            });
        });
    };
    SurveyModel.prototype.getPage = function (index) {
        return this.pages[index];
    };
    /**
     * Adds an existing page to the survey.
     * @param page a newly added page
     * @param index - a page index to where insert a page. It is -1 by default and the page will be added into the end.
     * @see addNewPage
     */
    SurveyModel.prototype.addPage = function (page, index) {
        if (index === void 0) { index = -1; }
        if (page == null)
            return;
        if (index < 0 || index >= this.pages.length) {
            this.pages.push(page);
        }
        else {
            this.pages.splice(index, 0, page);
        }
    };
    /**
     * Creates a new page and adds it to a survey. Generates a new name if the `name` parameter is not specified.
     * @param name a page name
     * @param index - a page index to where insert a new page. It is -1 by default and the page will be added into the end.
     * @see addPage
     */
    SurveyModel.prototype.addNewPage = function (name, index) {
        if (name === void 0) { name = null; }
        if (index === void 0) { index = -1; }
        var page = this.createNewPage(name);
        this.addPage(page, index);
        return page;
    };
    /**
     * Removes a page from a survey.
     * @param page
     */
    SurveyModel.prototype.removePage = function (page) {
        var index = this.pages.indexOf(page);
        if (index < 0)
            return;
        this.pages.splice(index, 1);
        if (this.currentPage == page) {
            this.currentPage = this.pages.length > 0 ? this.pages[0] : null;
        }
    };
    /**
     * Returns a question by its name.
     * @param name a question name
     * @param caseInsensitive
     * @see getQuestionByValueName
     */
    SurveyModel.prototype.getQuestionByName = function (name, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        if (!name)
            return null;
        if (caseInsensitive) {
            name = name.toLowerCase();
        }
        var hash = !!caseInsensitive
            ? this.questionHashes.namesInsensitive
            : this.questionHashes.names;
        var res = hash[name];
        if (!res)
            return null;
        return res[0];
    };
    SurveyModel.prototype.findQuestionByName = function (name) {
        return this.getQuestionByName(name);
    };
    /**
     * Returns a question by its value name
     * @param valueName a question name
     * @param caseInsensitive
     * @see getQuestionByName
     * @see getQuestionsByValueName
     * @see Question.valueName
     */
    SurveyModel.prototype.getQuestionByValueName = function (valueName, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        var res = this.getQuestionsByValueName(valueName, caseInsensitive);
        return !!res ? res[0] : null;
    };
    /**
     * Returns all questions by their valueName. name property is used if valueName property is empty.
     * @param valueName a question name
     * @param caseInsensitive
     * @see getQuestionByName
     * @see getQuestionByValueName
     * @see Question.valueName
     */
    SurveyModel.prototype.getQuestionsByValueName = function (valueName, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        var hash = !!caseInsensitive
            ? this.questionHashes.valueNamesInsensitive
            : this.questionHashes.valueNames;
        var res = hash[valueName];
        if (!res)
            return null;
        return res;
    };
    SurveyModel.prototype.getCalculatedValueByName = function (name) {
        for (var i = 0; i < this.calculatedValues.length; i++) {
            if (name == this.calculatedValues[i].name)
                return this.calculatedValues[i];
        }
        return null;
    };
    /**
     * Gets a list of questions by their names.
     * @param names an array of question names
     * @param caseInsensitive
     */
    SurveyModel.prototype.getQuestionsByNames = function (names, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        var result = [];
        if (!names)
            return result;
        for (var i = 0; i < names.length; i++) {
            if (!names[i])
                continue;
            var question = this.getQuestionByName(names[i], caseInsensitive);
            if (question)
                result.push(question);
        }
        return result;
    };
    /**
     * Returns a page on which an element (question or panel) is placed.
     * @param element Question or Panel
     */
    SurveyModel.prototype.getPageByElement = function (element) {
        for (var i = 0; i < this.pages.length; i++) {
            var page = this.pages[i];
            if (page.containsElement(element))
                return page;
        }
        return null;
    };
    /**
     * Returns a page on which a question is located.
     * @param question
     */
    SurveyModel.prototype.getPageByQuestion = function (question) {
        return this.getPageByElement(question);
    };
    /**
     * Returns a page by it's name.
     * @param name
     */
    SurveyModel.prototype.getPageByName = function (name) {
        for (var i = 0; i < this.pages.length; i++) {
            if (this.pages[i].name == name)
                return this.pages[i];
        }
        return null;
    };
    /**
     * Returns a list of pages by their names.
     * @param names a list of page names
     */
    SurveyModel.prototype.getPagesByNames = function (names) {
        var result = [];
        if (!names)
            return result;
        for (var i = 0; i < names.length; i++) {
            if (!names[i])
                continue;
            var page = this.getPageByName(names[i]);
            if (page)
                result.push(page);
        }
        return result;
    };
    /**
     * Returns a list of all questions in a survey.
     * @param visibleOnly set it `true`, if you want to get only visible questions
     */
    SurveyModel.prototype.getAllQuestions = function (visibleOnly, includingDesignTime) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        if (includingDesignTime === void 0) { includingDesignTime = false; }
        var result = new Array();
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].addQuestionsToList(result, visibleOnly, includingDesignTime);
        }
        return result;
    };
    /**
     * Returns quiz questions. All visible questions that has input(s) widgets.
     * @see getQuizQuestionCount
     */
    SurveyModel.prototype.getQuizQuestions = function () {
        var result = new Array();
        var startIndex = this.getPageStartIndex();
        for (var i = startIndex; i < this.pages.length; i++) {
            if (!this.pages[i].isVisible)
                continue;
            var questions = this.pages[i].questions;
            for (var j = 0; j < questions.length; j++) {
                var q = questions[j];
                if (q.quizQuestionCount > 0) {
                    result.push(q);
                }
            }
        }
        return result;
    };
    /**
     * Returns a panel by its name.
     * @param name a panel name
     * @param caseInsensitive
     * @see getQuestionByName
     */
    SurveyModel.prototype.getPanelByName = function (name, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        var panels = this.getAllPanels();
        if (caseInsensitive)
            name = name.toLowerCase();
        for (var i = 0; i < panels.length; i++) {
            var panelName = panels[i].name;
            if (caseInsensitive)
                panelName = panelName.toLowerCase();
            if (panelName == name)
                return panels[i];
        }
        return null;
    };
    /**
     * Returns a list of all survey's panels.
     */
    SurveyModel.prototype.getAllPanels = function (visibleOnly, includingDesignTime) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        if (includingDesignTime === void 0) { includingDesignTime = false; }
        var result = new Array();
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].addPanelsIntoList(result, visibleOnly, includingDesignTime);
        }
        return result;
    };
    /**
     * Creates and returns a new page, but do not add it into the survey.
     * You can use addPage(page) function to add it into survey later.
     * @see addPage
     * @see addNewPage
     */
    SurveyModel.prototype.createNewPage = function (name) {
        var page = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].createClass("page");
        page.name = name;
        return page;
    };
    SurveyModel.prototype.questionOnValueChanging = function (valueName, newValue) {
        if (!!this.editingObj) {
            var prop = _jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].findProperty(this.editingObj.getType(), valueName);
            if (!!prop)
                newValue = prop.settingValue(this.editingObj, newValue);
        }
        if (this.onValueChanging.isEmpty)
            return newValue;
        var options = {
            name: valueName,
            question: this.getQuestionByValueName(valueName),
            value: this.getUnbindValue(newValue),
            oldValue: this.getValue(valueName),
        };
        this.onValueChanging.fire(this, options);
        return options.value;
    };
    SurveyModel.prototype.updateQuestionValue = function (valueName, newValue) {
        if (this.isLoadingFromJson)
            return;
        var questions = this.getQuestionsByValueName(valueName);
        if (!!questions) {
            for (var i = 0; i < questions.length; i++) {
                var qValue = questions[i].value;
                if ((qValue === newValue && Array.isArray(qValue) && !!this.editingObj) ||
                    !this.isTwoValueEquals(qValue, newValue)) {
                    questions[i].updateValueFromSurvey(newValue);
                }
            }
        }
    };
    SurveyModel.prototype.checkQuestionErrorOnValueChanged = function (question) {
        if (!this.isNavigationButtonPressed &&
            (this.checkErrorsMode === "onValueChanged" ||
                question.getAllErrors().length > 0)) {
            this.checkQuestionErrorOnValueChangedCore(question);
        }
    };
    SurveyModel.prototype.checkQuestionErrorOnValueChangedCore = function (question) {
        var oldErrorCount = question.getAllErrors().length;
        var res = !question.validate(true, {
            isOnValueChanged: !this.isValidateOnValueChanging,
        });
        var isCheckErrorOnChanged = this.checkErrorsMode.indexOf("Value") > -1;
        if (!!question.page && isCheckErrorOnChanged &&
            (oldErrorCount > 0 || question.getAllErrors().length > 0)) {
            this.fireValidatedErrorsOnPage(question.page);
        }
        return res;
    };
    SurveyModel.prototype.checkErrorsOnValueChanging = function (valueName, newValue) {
        if (this.isLoadingFromJson)
            return false;
        var questions = this.getQuestionsByValueName(valueName);
        if (!questions)
            return false;
        var res = false;
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            if (!this.isTwoValueEquals(q.valueForSurvey, newValue)) {
                q.value = newValue;
            }
            if (this.checkQuestionErrorOnValueChangedCore(q))
                res = true;
            res = res || q.errors.length > 0;
        }
        return res;
    };
    SurveyModel.prototype.notifyQuestionOnValueChanged = function (valueName, newValue) {
        if (this.isLoadingFromJson)
            return;
        var questions = this.getQuestionsByValueName(valueName);
        if (!!questions) {
            for (var i = 0; i < questions.length; i++) {
                var question = questions[i];
                this.checkQuestionErrorOnValueChanged(question);
                question.onSurveyValueChanged(newValue);
                this.onValueChanged.fire(this, {
                    name: valueName,
                    question: question,
                    value: newValue,
                });
            }
        }
        else {
            this.onValueChanged.fire(this, {
                name: valueName,
                question: null,
                value: newValue,
            });
        }
        if (this.isDisposed)
            return;
        this.checkElementsBindings(valueName, newValue);
        this.notifyElementsOnAnyValueOrVariableChanged(valueName);
    };
    SurveyModel.prototype.checkElementsBindings = function (valueName, newValue) {
        this.isRunningElementsBindings = true;
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].checkBindings(valueName, newValue);
        }
        this.isRunningElementsBindings = false;
        if (this.updateVisibleIndexAfterBindings) {
            this.updateVisibleIndexes();
            this.updateVisibleIndexAfterBindings = false;
        }
    };
    SurveyModel.prototype.notifyElementsOnAnyValueOrVariableChanged = function (name) {
        if (this.isEndLoadingFromJson === "processing")
            return;
        if (this.isRunningConditions) {
            this.conditionNotifyElementsOnAnyValueOrVariableChanged = true;
            return;
        }
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].onAnyValueChanged(name);
        }
        if (!this.isEndLoadingFromJson) {
            this.locStrsChanged();
        }
    };
    SurveyModel.prototype.updateAllQuestionsValue = function () {
        var questions = this.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            var valName = q.getValueName();
            q.updateValueFromSurvey(this.getValue(valName));
            if (q.requireUpdateCommentValue) {
                q.updateCommentFromSurvey(this.getComment(valName));
            }
        }
    };
    SurveyModel.prototype.notifyAllQuestionsOnValueChanged = function () {
        var questions = this.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            questions[i].onSurveyValueChanged(this.getValue(questions[i].getValueName()));
        }
    };
    SurveyModel.prototype.checkOnPageTriggers = function () {
        var questions = this.getCurrentPageQuestions(true);
        var values = {};
        for (var i = 0; i < questions.length; i++) {
            var question = questions[i];
            var name = question.getValueName();
            values[name] = this.getValue(name);
        }
        this.addCalculatedValuesIntoFilteredValues(values);
        this.checkTriggers(values, true);
    };
    SurveyModel.prototype.getCurrentPageQuestions = function (includeInvsible) {
        if (includeInvsible === void 0) { includeInvsible = false; }
        var result = [];
        var page = this.currentPage;
        if (!page)
            return result;
        for (var i = 0; i < page.questions.length; i++) {
            var question = page.questions[i];
            if ((!includeInvsible && !question.visible) || !question.name)
                continue;
            result.push(question);
        }
        return result;
    };
    SurveyModel.prototype.checkTriggers = function (key, isOnNextPage) {
        if (this.isCompleted || this.triggers.length == 0 || this.isDisplayMode)
            return;
        if (this.isTriggerIsRunning) {
            this.triggerValues = this.getFilteredValues();
            for (var k in key) {
                this.triggerKeys[k] = key[k];
            }
            return;
        }
        this.isTriggerIsRunning = true;
        this.triggerKeys = key;
        this.triggerValues = this.getFilteredValues();
        var properties = this.getFilteredProperties();
        var prevCanBeCompleted = this.canBeCompletedByTrigger;
        this.canBeCompletedByTrigger = false;
        for (var i = 0; i < this.triggers.length; i++) {
            this.triggers[i].checkExpression(isOnNextPage, this.triggerKeys, this.triggerValues, properties);
        }
        if (prevCanBeCompleted !== this.canBeCompletedByTrigger) {
            this.updateButtonsVisibility();
        }
        this.isTriggerIsRunning = false;
    };
    SurveyModel.prototype.doElementsOnLoad = function () {
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].onSurveyLoad();
        }
    };
    Object.defineProperty(SurveyModel.prototype, "isRunningConditions", {
        get: function () {
            return !!this.conditionValues;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.runConditions = function () {
        if (this.isCompleted ||
            this.isEndLoadingFromJson === "processing" ||
            this.isRunningConditions)
            return;
        this.conditionValues = this.getFilteredValues();
        var properties = this.getFilteredProperties();
        var oldCurrentPageIndex = this.pages.indexOf(this.currentPage);
        this.runConditionsCore(properties);
        this.checkIfNewPagesBecomeVisible(oldCurrentPageIndex);
        this.conditionValues = null;
        if (this.isValueChangedOnRunningCondition &&
            this.conditionRunnerCounter <
                _settings__WEBPACK_IMPORTED_MODULE_14__["settings"].maximumConditionRunCountOnValueChanged) {
            this.isValueChangedOnRunningCondition = false;
            this.conditionRunnerCounter++;
            this.runConditions();
        }
        else {
            this.isValueChangedOnRunningCondition = false;
            this.conditionRunnerCounter = 0;
            if (this.conditionUpdateVisibleIndexes) {
                this.conditionUpdateVisibleIndexes = false;
                this.updateVisibleIndexes();
            }
            if (this.conditionNotifyElementsOnAnyValueOrVariableChanged) {
                this.conditionNotifyElementsOnAnyValueOrVariableChanged = false;
                this.notifyElementsOnAnyValueOrVariableChanged("");
            }
        }
    };
    SurveyModel.prototype.runConditionOnValueChanged = function (name, value) {
        if (this.isRunningConditions) {
            this.conditionValues[name] = value;
            this.isValueChangedOnRunningCondition = true;
        }
        else {
            this.runConditions();
        }
    };
    SurveyModel.prototype.runConditionsCore = function (properties) {
        var pages = this.pages;
        for (var i = 0; i < this.calculatedValues.length; i++) {
            this.calculatedValues[i].resetCalculation();
        }
        for (var i = 0; i < this.calculatedValues.length; i++) {
            this.calculatedValues[i].doCalculation(this.calculatedValues, this.conditionValues, properties);
        }
        _super.prototype.runConditionCore.call(this, this.conditionValues, properties);
        for (var i = 0; i < pages.length; i++) {
            pages[i].runCondition(this.conditionValues, properties);
        }
    };
    SurveyModel.prototype.checkIfNewPagesBecomeVisible = function (oldCurrentPageIndex) {
        var newCurrentPageIndex = this.pages.indexOf(this.currentPage);
        if (newCurrentPageIndex <= oldCurrentPageIndex + 1)
            return;
        for (var i = oldCurrentPageIndex + 1; i < newCurrentPageIndex; i++) {
            if (this.pages[i].isVisible) {
                this.currentPage = this.pages[i];
                break;
            }
        }
    };
    /**
     * Sends a survey result to the [api.surveyjs.io](https://api.surveyjs.io) service.
     * @param postId [api.surveyjs.io](https://api.surveyjs.io) service postId
     * @param clientId Typically a customer e-mail or an identifier
     * @param isPartialCompleted Set it to `true` if the survey is not completed yet and the results are intermediate
     * @see surveyPostId
     * @see clientId
     */
    SurveyModel.prototype.sendResult = function (postId, clientId, isPartialCompleted) {
        if (postId === void 0) { postId = null; }
        if (clientId === void 0) { clientId = null; }
        if (isPartialCompleted === void 0) { isPartialCompleted = false; }
        if (!this.isEditMode)
            return;
        if (isPartialCompleted && this.onPartialSend) {
            this.onPartialSend.fire(this, null);
        }
        if (!postId && this.surveyPostId) {
            postId = this.surveyPostId;
        }
        if (!postId)
            return;
        if (clientId) {
            this.clientId = clientId;
        }
        if (isPartialCompleted && !this.clientId)
            return;
        var self = this;
        if (this.surveyShowDataSaving) {
            this.setCompletedState("saving", "");
        }
        this.createSurveyService().sendResult(postId, this.data, function (success, response, request) {
            if (self.surveyShowDataSaving) {
                if (success) {
                    self.setCompletedState("success", "");
                }
                else {
                    self.setCompletedState("error", response);
                }
            }
            self.onSendResult.fire(self, {
                success: success,
                response: response,
                request: request,
            });
        }, this.clientId, isPartialCompleted);
    };
    /**
     * Calls the [api.surveyjs.io](https://api.surveyjs.io) service and, on callback, fires the `onGetResult` event with all answers that your users made for a question.
     * @param resultId [api.surveyjs.io](https://api.surveyjs.io) service resultId
     * @param name The question name
     * @see onGetResult
     */
    SurveyModel.prototype.getResult = function (resultId, name) {
        var self = this;
        this.createSurveyService().getResult(resultId, name, function (success, data, dataList, response) {
            self.onGetResult.fire(self, {
                success: success,
                data: data,
                dataList: dataList,
                response: response,
            });
        });
    };
    /**
     * Loads the survey JSON from the [api.surveyjs.io](https://api.surveyjs.io) service.
     * If `clientId` is not `null` and a user had completed a survey before, the survey switches to `completedbefore` state.
     * @param surveyId [api.surveyjs.io](https://api.surveyjs.io) service surveyId
     * @param clientId users' indentifier, for example an e-mail or a unique customer id in your web application.
     * @see state
     * @see onLoadedSurveyFromService
     */
    SurveyModel.prototype.loadSurveyFromService = function (surveyId, cliendId) {
        if (surveyId === void 0) { surveyId = null; }
        if (cliendId === void 0) { cliendId = null; }
        if (surveyId) {
            this.surveyId = surveyId;
        }
        if (cliendId) {
            this.clientId = cliendId;
        }
        var self = this;
        this.isLoading = true;
        this.onLoadingSurveyFromService();
        if (cliendId) {
            this.createSurveyService().getSurveyJsonAndIsCompleted(this.surveyId, this.clientId, function (success, json, isCompleted, response) {
                self.isLoading = false;
                if (success) {
                    self.isCompletedBefore = isCompleted == "completed";
                    self.loadSurveyFromServiceJson(json);
                }
            });
        }
        else {
            this.createSurveyService().loadSurvey(this.surveyId, function (success, result, response) {
                self.isLoading = false;
                if (success) {
                    self.loadSurveyFromServiceJson(result);
                }
            });
        }
    };
    SurveyModel.prototype.loadSurveyFromServiceJson = function (json) {
        if (!json)
            return;
        this.fromJSON(json);
        this.notifyAllQuestionsOnValueChanged();
        this.onLoadSurveyFromService();
        this.onLoadedSurveyFromService.fire(this, {});
    };
    SurveyModel.prototype.onLoadingSurveyFromService = function () { };
    SurveyModel.prototype.onLoadSurveyFromService = function () { };
    SurveyModel.prototype.resetVisibleIndexes = function () {
        var questions = this.getAllQuestions(true);
        for (var i = 0; i < questions.length; i++) {
            questions[i].setVisibleIndex(-1);
        }
        this.updateVisibleIndexes();
    };
    SurveyModel.prototype.updateVisibleIndexes = function () {
        if (this.isLoadingFromJson || !!this.isEndLoadingFromJson)
            return;
        if (this.isRunningConditions &&
            this.onQuestionVisibleChanged.isEmpty &&
            this.onPageVisibleChanged.isEmpty) {
            //Run update visible index only one time on finishing running conditions
            this.conditionUpdateVisibleIndexes = true;
            return;
        }
        if (this.isRunningElementsBindings) {
            this.updateVisibleIndexAfterBindings = true;
            return;
        }
        this.updatePageVisibleIndexes(this.showPageNumbers);
        if (this.showQuestionNumbers == "onPage") {
            var visPages = this.visiblePages;
            for (var i = 0; i < visPages.length; i++) {
                visPages[i].setVisibleIndex(0);
            }
        }
        else {
            var index = this.showQuestionNumbers == "on" ? 0 : -1;
            for (var i = 0; i < this.pages.length; i++) {
                index += this.pages[i].setVisibleIndex(index);
            }
        }
        this.updateProgressText(true);
    };
    SurveyModel.prototype.updatePageVisibleIndexes = function (showIndex) {
        this.updateButtonsVisibility();
        var index = 0;
        for (var i = 0; i < this.pages.length; i++) {
            var page = this.pages[i];
            var isPageVisible = page.isVisible && (i > 0 || !page.isStartPage);
            page.visibleIndex = isPageVisible ? index++ : -1;
            page.num = isPageVisible ? page.visibleIndex + 1 : -1;
        }
    };
    SurveyModel.prototype.fromJSON = function (json) {
        if (!json)
            return;
        this.questionHashesClear();
        this.jsonErrors = null;
        var jsonConverter = new _jsonobject__WEBPACK_IMPORTED_MODULE_1__["JsonObject"]();
        jsonConverter.toObject(json, this);
        if (jsonConverter.errors.length > 0) {
            this.jsonErrors = jsonConverter.errors;
        }
        this.onStateAndCurrentPageChanged();
        this.updateState();
    };
    SurveyModel.prototype.setJsonObject = function (jsonObj) {
        this.fromJSON(jsonObj);
    };
    SurveyModel.prototype.endLoadingFromJson = function () {
        this.isEndLoadingFromJson = "processing";
        this.onFirstPageIsStartedChanged();
        this.onQuestionsOnPageModeChanged("standard");
        _super.prototype.endLoadingFromJson.call(this);
        if (this.hasCookie) {
            this.doComplete();
        }
        this.doElementsOnLoad();
        this.isEndLoadingFromJson = "conditions";
        this.runConditions();
        this.notifyElementsOnAnyValueOrVariableChanged("");
        this.isEndLoadingFromJson = null;
        this.updateVisibleIndexes();
        this.updateHasLogo();
        this.updateCurrentPage();
        this.hasDescription = !!this.description;
        this.setCalculatedWidthModeUpdater();
    };
    SurveyModel.prototype.updateNavigationCss = function () {
        if (!!this.navigationBar) {
            this.updateNavigationBarCss();
            !!this.updateNavigationItemCssCallback && this.updateNavigationItemCssCallback();
        }
    };
    SurveyModel.prototype.updateNavigationBarCss = function () {
        var val = this.navigationBar;
        val.cssClasses = this.css.actionBar;
        val.containerCss = this.css.footer;
    };
    SurveyModel.prototype.createNavigationBar = function () {
        var res = new _actions_container__WEBPACK_IMPORTED_MODULE_17__["ActionContainer"]();
        res.setItems(this.createNavigationActions());
        return res;
    };
    SurveyModel.prototype.createNavigationActions = function () {
        var _this = this;
        var defaultComponent = "sv-nav-btn";
        var navStart = new _actions_action__WEBPACK_IMPORTED_MODULE_16__["Action"]({
            id: "sv-nav-start",
            visible: new _base__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () { return _this.isShowStartingPage; }),
            visibleIndex: 10,
            locTitle: this.locStartSurveyText,
            action: function () { return _this.start(); },
            component: defaultComponent
        });
        var navPrev = new _actions_action__WEBPACK_IMPORTED_MODULE_16__["Action"]({
            id: "sv-nav-prev",
            visible: new _base__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () { return _this.isShowPrevButton; }),
            visibleIndex: 20,
            data: {
                mouseDown: function () { return _this.navigationMouseDown(); },
            },
            locTitle: this.locPagePrevText,
            action: function () { return _this.prevPage(); },
            component: defaultComponent
        });
        var navNext = new _actions_action__WEBPACK_IMPORTED_MODULE_16__["Action"]({
            id: "sv-nav-next",
            visible: new _base__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () { return _this.isShowNextButton; }),
            visibleIndex: 30,
            data: {
                mouseDown: function () { return _this.nextPageMouseDown(); },
            },
            locTitle: this.locPageNextText,
            action: function () { return _this.nextPageUIClick(); },
            component: defaultComponent
        });
        var navPreview = new _actions_action__WEBPACK_IMPORTED_MODULE_16__["Action"]({
            id: "sv-nav-preview",
            visible: new _base__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () { return _this.isPreviewButtonVisible; }),
            visibleIndex: 40,
            data: {
                mouseDown: function () { return _this.navigationMouseDown(); },
            },
            locTitle: this.locPreviewText,
            action: function () { return _this.showPreview(); },
            component: defaultComponent
        });
        var navComplete = new _actions_action__WEBPACK_IMPORTED_MODULE_16__["Action"]({
            id: "sv-nav-complete",
            visible: new _base__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () { return _this.isCompleteButtonVisible; }),
            visibleIndex: 50,
            data: {
                mouseDown: function () { return _this.navigationMouseDown(); },
            },
            locTitle: this.locCompleteText,
            action: function () { return _this.completeLastPage(); },
            component: defaultComponent
        });
        this.updateNavigationItemCssCallback = function () {
            navStart.innerCss = _this.cssNavigationStart;
            navPrev.innerCss = _this.cssNavigationPrev;
            navNext.innerCss = _this.cssNavigationNext;
            navPreview.innerCss = _this.cssNavigationPreview;
            navComplete.innerCss = _this.cssNavigationComplete;
        };
        return [navStart, navPrev, navNext, navPreview, navComplete];
    };
    SurveyModel.prototype.onBeforeCreating = function () { };
    SurveyModel.prototype.onCreating = function () { };
    SurveyModel.prototype.getProcessedTextValue = function (textValue) {
        this.getProcessedTextValueCore(textValue);
        if (!this.onProcessTextValue.isEmpty) {
            var wasEmpty = this.isValueEmpty(textValue.value);
            this.onProcessTextValue.fire(this, textValue);
            textValue.isExists =
                textValue.isExists || (wasEmpty && !this.isValueEmpty(textValue.value));
        }
    };
    SurveyModel.prototype.getBuiltInVariableValue = function (name) {
        if (name === "pageno") {
            var page = this.currentPage;
            return page != null ? this.visiblePages.indexOf(page) + 1 : 0;
        }
        if (name === "pagecount") {
            return this.visiblePageCount;
        }
        if (name === "correctedanswers" || name === "correctanswers" || name === "correctedanswercount") {
            return this.getCorrectedAnswerCount();
        }
        if (name === "incorrectedanswers" || name === "incorrectanswers" || name === "incorrectedanswercount") {
            return this.getInCorrectedAnswerCount();
        }
        if (name === "questioncount") {
            return this.getQuizQuestionCount();
        }
        return undefined;
    };
    SurveyModel.prototype.getProcessedTextValueCore = function (textValue) {
        var name = textValue.name.toLocaleLowerCase();
        if (["no", "require", "title"].indexOf(name) !== -1) {
            return;
        }
        var builtInVar = this.getBuiltInVariableValue(name);
        if (builtInVar !== undefined) {
            textValue.isExists = true;
            textValue.value = builtInVar;
            return;
        }
        if (name === "locale") {
            textValue.isExists = true;
            textValue.value = !!this.locale
                ? this.locale
                : _surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].defaultLocale;
            return;
        }
        var variable = this.getVariable(name);
        if (variable !== undefined) {
            textValue.isExists = true;
            textValue.value = variable;
            return;
        }
        var question = this.getFirstName(name);
        if (question) {
            var questionUseDisplayText = question.useDisplayValuesInDynamicTexts;
            textValue.isExists = true;
            var firstName = question.getValueName().toLowerCase();
            name = firstName + name.substring(firstName.length);
            name = name.toLocaleLowerCase();
            var values = {};
            values[firstName] = textValue.returnDisplayValue && questionUseDisplayText
                ? question.getDisplayValue(false, undefined)
                : question.value;
            textValue.value = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__["ProcessValue"]().getValue(name, values);
            return;
        }
        this.getProcessedValuesWithoutQuestion(textValue);
    };
    SurveyModel.prototype.getProcessedValuesWithoutQuestion = function (textValue) {
        var value = this.getValue(textValue.name);
        if (value !== undefined) {
            textValue.isExists = true;
            textValue.value = value;
            return;
        }
        var processor = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__["ProcessValue"]();
        var firstName = processor.getFirstName(textValue.name);
        if (firstName === textValue.name)
            return;
        var data = {};
        var val = this.getValue(firstName);
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(val)) {
            val = this.getVariable(firstName);
        }
        if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(val))
            return;
        data[firstName] = val;
        textValue.value = processor.getValue(textValue.name, data);
        textValue.isExists = processor.hasValue(textValue.name, data);
    };
    SurveyModel.prototype.getFirstName = function (name) {
        name = name.toLowerCase();
        var question;
        do {
            question = this.getQuestionByValueName(name, true);
            name = this.reduceFirstName(name);
        } while (!question && !!name);
        return question;
    };
    SurveyModel.prototype.reduceFirstName = function (name) {
        var pos1 = name.lastIndexOf(".");
        var pos2 = name.lastIndexOf("[");
        if (pos1 < 0 && pos2 < 0)
            return "";
        var pos = Math.max(pos1, pos2);
        return name.substring(0, pos);
    };
    SurveyModel.prototype.clearUnusedValues = function () {
        var questions = this.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            questions[i].clearUnusedValues();
        }
        this.clearInvisibleQuestionValues();
    };
    SurveyModel.prototype.hasVisibleQuestionByValueName = function (valueName) {
        var questions = this.getQuestionsByValueName(valueName);
        if (!questions)
            return false;
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            if (q.isVisible && q.isParentVisible && !q.parentQuestion)
                return true;
        }
        return false;
    };
    SurveyModel.prototype.questionCountByValueName = function (valueName) {
        var questions = this.getQuestionsByValueName(valueName);
        return !!questions ? questions.length : 0;
    };
    SurveyModel.prototype.clearInvisibleQuestionValues = function () {
        var reason = this.clearInvisibleValues === "none" ? "none" : "onComplete";
        var questions = this.getAllQuestions();
        for (var i = 0; i < questions.length; i++) {
            questions[i].clearValueIfInvisible(reason);
        }
    };
    /**
     * Returns a variable value. Variable, unlike values, are not stored in the survey results.
     * @param name A variable name
     * @see SetVariable
     */
    SurveyModel.prototype.getVariable = function (name) {
        if (!name)
            return null;
        name = name.toLowerCase();
        var res = this.variablesHash[name];
        if (!this.isValueEmpty(res))
            return res;
        if (name.indexOf(".") > -1 || name.indexOf("[") > -1) {
            if (new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__["ProcessValue"]().hasValue(name, this.variablesHash))
                return new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__["ProcessValue"]().getValue(name, this.variablesHash);
        }
        return res;
    };
    /**
     * Sets a variable value. Variable, unlike values, are not stored in the survey results.
     * @param name A variable name
     * @param newValue A variable new value
     * @see GetVariable
     */
    SurveyModel.prototype.setVariable = function (name, newValue) {
        if (!name)
            return;
        name = name.toLowerCase();
        this.variablesHash[name] = newValue;
        this.notifyElementsOnAnyValueOrVariableChanged(name);
        this.runConditionOnValueChanged(name, newValue);
        this.onVariableChanged.fire(this, { name: name, value: newValue });
    };
    /**
     * Returns all variables in the survey. Use setVariable function to create a new variable.
     * @see getVariable
     * @see setVariable
     */
    SurveyModel.prototype.getVariableNames = function () {
        var res = [];
        for (var key in this.variablesHash) {
            res.push(key);
        }
        return res;
    };
    //ISurvey data
    SurveyModel.prototype.getUnbindValue = function (value) {
        if (!!this.editingObj)
            return value;
        return _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].getUnbindValue(value);
    };
    /**
     * Returns a question value (answer) by a question's name.
     * @param name A question name
     * @see data
     * @see setValue
     */
    SurveyModel.prototype.getValue = function (name) {
        if (!name || name.length == 0)
            return null;
        var value = this.getDataValueCore(this.valuesHash, name);
        return this.getUnbindValue(value);
    };
    /**
     * Sets a question value (answer). It runs all triggers and conditions (`visibleIf` properties).
     *
     * Goes to the next page if `goNextPageAutomatic` is `true` and all questions on the current page are answered correctly.
     * @param name A question name
     * @param newValue A new question value
     * @see data
     * @see getValue
     * @see PageModel.visibleIf
     * @see Question.visibleIf
     * @see goNextPageAutomatic
     */
    SurveyModel.prototype.setValue = function (name, newQuestionValue, locNotification, allowNotifyValueChanged) {
        if (locNotification === void 0) { locNotification = false; }
        if (allowNotifyValueChanged === void 0) { allowNotifyValueChanged = true; }
        var newValue = newQuestionValue;
        if (allowNotifyValueChanged) {
            newValue = this.questionOnValueChanging(name, newQuestionValue);
        }
        if (this.isValidateOnValueChanging &&
            this.checkErrorsOnValueChanging(name, newValue))
            return;
        if (!this.editingObj &&
            this.isValueEqual(name, newValue) &&
            this.isTwoValueEquals(newValue, newQuestionValue))
            return;
        var oldValue = this.getValue(name);
        if (this.isValueEmpty(newValue)) {
            this.deleteDataValueCore(this.valuesHash, name);
        }
        else {
            newValue = this.getUnbindValue(newValue);
            this.setDataValueCore(this.valuesHash, name, newValue);
        }
        this.updateOnSetValue(name, newValue, oldValue, locNotification, allowNotifyValueChanged);
    };
    SurveyModel.prototype.updateOnSetValue = function (name, newValue, oldValue, locNotification, allowNotifyValueChanged) {
        if (locNotification === void 0) { locNotification = false; }
        if (allowNotifyValueChanged === void 0) { allowNotifyValueChanged = true; }
        this.updateQuestionValue(name, newValue);
        if (locNotification === true || this.isDisposed || this.isRunningElementsBindings)
            return;
        var triggerKeys = {};
        triggerKeys[name] = { newValue: newValue, oldValue: oldValue };
        this.runConditionOnValueChanged(name, newValue);
        this.checkTriggers(triggerKeys, false);
        if (allowNotifyValueChanged)
            this.notifyQuestionOnValueChanged(name, newValue);
        if (locNotification !== "text") {
            this.tryGoNextPageAutomatic(name);
        }
    };
    SurveyModel.prototype.isValueEqual = function (name, newValue) {
        if (newValue === "" || newValue === undefined)
            newValue = null;
        var oldValue = this.getValue(name);
        if (oldValue === "" || oldValue === undefined)
            oldValue = null;
        if (newValue === null || oldValue === null)
            return newValue === oldValue;
        return this.isTwoValueEquals(newValue, oldValue);
    };
    SurveyModel.prototype.doOnPageAdded = function (page) {
        page.setSurveyImpl(this);
        if (!page.name)
            page.name = this.generateNewName(this.pages, "page");
        this.questionHashesPanelAdded(page);
        this.updateVisibleIndexes();
        if (!this.isLoadingFromJson) {
            this.updateProgressText();
            this.updateCurrentPage();
        }
        var options = { page: page };
        this.onPageAdded.fire(this, options);
    };
    SurveyModel.prototype.doOnPageRemoved = function (page) {
        page.setSurveyImpl(null);
        if (page === this.currentPage) {
            this.updateCurrentPage();
        }
        this.updateVisibleIndexes();
        this.updateProgressText();
        this.updateLazyRenderingRowsOnRemovingElements();
    };
    SurveyModel.prototype.generateNewName = function (elements, baseName) {
        var keys = {};
        for (var i = 0; i < elements.length; i++)
            keys[elements[i]["name"]] = true;
        var index = 1;
        while (keys[baseName + index])
            index++;
        return baseName + index;
    };
    SurveyModel.prototype.tryGoNextPageAutomatic = function (name) {
        if (!!this.isEndLoadingFromJson ||
            !this.goNextPageAutomatic ||
            !this.currentPage)
            return;
        var question = this.getQuestionByValueName(name);
        if (!question ||
            (!!question &&
                (!question.visible || !question.supportGoNextPageAutomatic())))
            return;
        if (!question.validate(false) && !question.supportGoNextPageError())
            return;
        var questions = this.getCurrentPageQuestions();
        if (questions.indexOf(question) < 0)
            return;
        for (var i = 0; i < questions.length; i++) {
            if (questions[i].hasInput && questions[i].isEmpty())
                return;
        }
        if (!this.checkIsCurrentPageHasErrors(false)) {
            if (!this.isLastPage) {
                this.nextPage();
            }
            else {
                if (this.goNextPageAutomatic === true &&
                    this.allowCompleteSurveyAutomatic) {
                    if (this.isShowPreviewBeforeComplete) {
                        this.showPreview();
                    }
                    else {
                        this.completeLastPage();
                    }
                }
            }
        }
    };
    /**
     * Returns the comment value.
     * @param name A comment's name.
     * @see setComment
     */
    SurveyModel.prototype.getComment = function (name) {
        var res = this.getValue(name + this.commentSuffix);
        return res || "";
    };
    /**
     * Sets a comment value.
     * @param name A comment name.
     * @param newValue A new comment value.
     * @see getComment
     */
    SurveyModel.prototype.setComment = function (name, newValue, locNotification) {
        if (locNotification === void 0) { locNotification = false; }
        if (!newValue)
            newValue = "";
        if (this.isTwoValueEquals(newValue, this.getComment(name)))
            return;
        var commentName = name + this.commentSuffix;
        if (this.isValueEmpty(newValue)) {
            this.deleteDataValueCore(this.valuesHash, commentName);
        }
        else {
            this.setDataValueCore(this.valuesHash, commentName, newValue);
        }
        var questions = this.getQuestionsByValueName(name);
        if (!!questions) {
            for (var i = 0; i < questions.length; i++) {
                questions[i].updateCommentFromSurvey(newValue);
                this.checkQuestionErrorOnValueChanged(questions[i]);
            }
        }
        if (!locNotification) {
            this.runConditionOnValueChanged(name, this.getValue(name));
        }
        if (locNotification !== "text") {
            this.tryGoNextPageAutomatic(name);
        }
        var question = this.getQuestionByName(name);
        if (question) {
            this.onValueChanged.fire(this, {
                name: commentName,
                question: question,
                value: newValue,
            });
        }
    };
    /**
     * Removes a value from the survey results.
     * @param {string} name The name of the value. Typically it is a question name.
     */
    SurveyModel.prototype.clearValue = function (name) {
        this.setValue(name, null);
        this.setComment(name, null);
    };
    Object.defineProperty(SurveyModel.prototype, "clearValueOnDisableItems", {
        /**
         * Gets or sets whether to clear value on disable items in checkbox, dropdown and radiogroup questions.
         * By default, values are not cleared on disabled the corresponded items. This property is not persisted in survey JSON and you have to set it in code.
         */
        get: function () {
            return this.getPropertyValue("clearValueOnDisableItems", false);
        },
        set: function (val) {
            this.setPropertyValue("clearValueOnDisableItems", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isClearValueOnHidden", {
        get: function () {
            return (this.clearInvisibleValues == "onHidden" ||
                this.isClearValueOnHiddenContainer);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isClearValueOnHiddenContainer", {
        get: function () {
            return (this.clearInvisibleValues == "onHiddenContainer" &&
                !this.isShowingPreview &&
                !this.runningPages);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.questionVisibilityChanged = function (question, newValue) {
        this.updateVisibleIndexes();
        this.onQuestionVisibleChanged.fire(this, {
            question: question,
            name: question.name,
            visible: newValue,
        });
    };
    SurveyModel.prototype.pageVisibilityChanged = function (page, newValue) {
        if (this.isLoadingFromJson)
            return;
        if (newValue && !this.currentPage || page === this.currentPage) {
            this.updateCurrentPage();
        }
        this.updateVisibleIndexes();
        this.onPageVisibleChanged.fire(this, {
            page: page,
            visible: newValue,
        });
    };
    SurveyModel.prototype.panelVisibilityChanged = function (panel, newValue) {
        this.updateVisibleIndexes();
        this.onPanelVisibleChanged.fire(this, {
            panel: panel,
            visible: newValue,
        });
    };
    SurveyModel.prototype.questionCreated = function (question) {
        this.onQuestionCreated.fire(this, { question: question });
    };
    SurveyModel.prototype.questionAdded = function (question, index, parentPanel, rootPanel) {
        if (!question.name) {
            question.name = this.generateNewName(this.getAllQuestions(false, true), "question");
        }
        if (!!question.page) {
            this.questionHashesAdded(question);
        }
        if (!this.currentPage) {
            this.updateCurrentPage();
        }
        this.updateVisibleIndexes();
        this.setCalculatedWidthModeUpdater();
        if (!this.isMovingQuestion || this.isDesignMode && !_settings__WEBPACK_IMPORTED_MODULE_14__["settings"].supportCreatorV2) {
            this.onQuestionAdded.fire(this, {
                question: question,
                name: question.name,
                index: index,
                parent: parentPanel,
                page: rootPanel,
                parentPanel: parentPanel,
                rootPanel: rootPanel,
            });
        }
    };
    SurveyModel.prototype.questionRemoved = function (question) {
        this.questionHashesRemoved(question, question.name, question.getValueName());
        this.updateVisibleIndexes();
        this.onQuestionRemoved.fire(this, {
            question: question,
            name: question.name,
        });
        this.updateLazyRenderingRowsOnRemovingElements();
    };
    SurveyModel.prototype.questionRenamed = function (question, oldName, oldValueName) {
        this.questionHashesRemoved(question, oldName, oldValueName);
        this.questionHashesAdded(question);
    };
    SurveyModel.prototype.questionHashesClear = function () {
        this.questionHashes.names = {};
        this.questionHashes.namesInsensitive = {};
        this.questionHashes.valueNames = {};
        this.questionHashes.valueNamesInsensitive = {};
    };
    SurveyModel.prototype.questionHashesPanelAdded = function (panel) {
        if (this.isLoadingFromJson)
            return;
        var questions = panel.questions;
        for (var i = 0; i < questions.length; i++) {
            this.questionHashesAdded(questions[i]);
        }
    };
    SurveyModel.prototype.questionHashesAdded = function (question) {
        this.questionHashAddedCore(this.questionHashes.names, question, question.name);
        this.questionHashAddedCore(this.questionHashes.namesInsensitive, question, question.name.toLowerCase());
        this.questionHashAddedCore(this.questionHashes.valueNames, question, question.getValueName());
        this.questionHashAddedCore(this.questionHashes.valueNamesInsensitive, question, question.getValueName().toLowerCase());
    };
    SurveyModel.prototype.questionHashesRemoved = function (question, name, valueName) {
        if (!!name) {
            this.questionHashRemovedCore(this.questionHashes.names, question, name);
            this.questionHashRemovedCore(this.questionHashes.namesInsensitive, question, name.toLowerCase());
        }
        if (!!valueName) {
            this.questionHashRemovedCore(this.questionHashes.valueNames, question, valueName);
            this.questionHashRemovedCore(this.questionHashes.valueNamesInsensitive, question, valueName.toLowerCase());
        }
    };
    SurveyModel.prototype.questionHashAddedCore = function (hash, question, name) {
        var res = hash[name];
        if (!!res) {
            var res = hash[name];
            if (res.indexOf(question) < 0) {
                res.push(question);
            }
        }
        else {
            hash[name] = [question];
        }
    };
    SurveyModel.prototype.questionHashRemovedCore = function (hash, question, name) {
        var res = hash[name];
        if (!res)
            return;
        var index = res.indexOf(question);
        if (index > -1) {
            res.splice(index, 1);
        }
        if (res.length == 0) {
            delete hash[name];
        }
    };
    SurveyModel.prototype.panelAdded = function (panel, index, parentPanel, rootPanel) {
        if (!panel.name) {
            panel.name = this.generateNewName(this.getAllPanels(false, true), "panel");
        }
        this.questionHashesPanelAdded(panel);
        this.updateVisibleIndexes();
        this.onPanelAdded.fire(this, {
            panel: panel,
            name: panel.name,
            index: index,
            parent: parentPanel,
            page: rootPanel,
            parentPanel: parentPanel,
            rootPanel: rootPanel,
        });
    };
    SurveyModel.prototype.panelRemoved = function (panel) {
        this.updateVisibleIndexes();
        this.onPanelRemoved.fire(this, { panel: panel, name: panel.name });
        this.updateLazyRenderingRowsOnRemovingElements();
    };
    SurveyModel.prototype.validateQuestion = function (question) {
        if (this.onValidateQuestion.isEmpty)
            return null;
        var options = {
            name: question.name,
            question: question,
            value: question.value,
            error: null,
        };
        this.onValidateQuestion.fire(this, options);
        return options.error ? new _error__WEBPACK_IMPORTED_MODULE_9__["CustomError"](options.error, this) : null;
    };
    SurveyModel.prototype.validatePanel = function (panel) {
        if (this.onValidatePanel.isEmpty)
            return null;
        var options = {
            name: panel.name,
            panel: panel,
            error: null,
        };
        this.onValidatePanel.fire(this, options);
        return options.error ? new _error__WEBPACK_IMPORTED_MODULE_9__["CustomError"](options.error, this) : null;
    };
    SurveyModel.prototype.processHtml = function (html) {
        var options = { html: html };
        this.onProcessHtml.fire(this, options);
        return this.processText(options.html, true);
    };
    SurveyModel.prototype.processText = function (text, returnDisplayValue) {
        return this.processTextEx(text, returnDisplayValue, false).text;
    };
    SurveyModel.prototype.processTextEx = function (text, returnDisplayValue, doEncoding) {
        var res = {
            text: this.processTextCore(text, returnDisplayValue, doEncoding),
            hasAllValuesOnLastRun: true,
        };
        res.hasAllValuesOnLastRun = this.textPreProcessor.hasAllValuesOnLastRun;
        return res;
    };
    SurveyModel.prototype.processTextCore = function (text, returnDisplayValue, doEncoding) {
        if (doEncoding === void 0) { doEncoding = false; }
        if (this.isDesignMode)
            return text;
        return this.textPreProcessor.process(text, returnDisplayValue, doEncoding);
    };
    SurveyModel.prototype.getSurveyMarkdownHtml = function (element, text, name) {
        var options = {
            element: element,
            text: text,
            name: name,
            html: null,
        };
        this.onTextMarkdown.fire(this, options);
        return options.html;
    };
    SurveyModel.prototype.getCorrectedAnswerCount = function () {
        return this.getCorrectedAnswerCountCore(true);
    };
    /**
     * Returns an amount of corrected quiz answers.
     */
    SurveyModel.prototype.getCorrectAnswerCount = function () {
        return this.getCorrectedAnswerCountCore(true);
    };
    /**
     * Returns quiz question number. It may be different from `getQuizQuestions.length` because some widgets like matrix may have several questions.
     * @see getQuizQuestions
     */
    SurveyModel.prototype.getQuizQuestionCount = function () {
        var questions = this.getQuizQuestions();
        var res = 0;
        for (var i = 0; i < questions.length; i++) {
            res += questions[i].quizQuestionCount;
        }
        return res;
    };
    SurveyModel.prototype.getInCorrectedAnswerCount = function () {
        return this.getCorrectedAnswerCountCore(false);
    };
    /**
     * Returns an amount of incorrect quiz answers.
     */
    SurveyModel.prototype.getInCorrectAnswerCount = function () {
        return this.getCorrectedAnswerCountCore(false);
    };
    SurveyModel.prototype.getCorrectedAnswerCountCore = function (isCorrect) {
        var questions = this.getQuizQuestions();
        var counter = 0;
        var options = {
            question: null,
            result: false,
            correctAnswers: 0,
            incorrectAnswers: 0,
        };
        for (var i = 0; i < questions.length; i++) {
            var q = questions[i];
            var quizQuestionCount = q.quizQuestionCount;
            options.question = q;
            options.correctAnswers = q.correctAnswerCount;
            options.incorrectAnswers = quizQuestionCount - options.correctAnswers;
            options.result = options.question.isAnswerCorrect();
            this.onIsAnswerCorrect.fire(this, options);
            if (isCorrect) {
                if (options.result || options.correctAnswers < quizQuestionCount) {
                    var addCount = options.correctAnswers;
                    if (addCount == 0 && options.result)
                        addCount = 1;
                    counter += addCount;
                }
            }
            else {
                if (!options.result || options.incorrectAnswers < quizQuestionCount) {
                    counter += options.incorrectAnswers;
                }
            }
        }
        return counter;
    };
    SurveyModel.prototype.getCorrectedAnswers = function () {
        return this.getCorrectedAnswerCount();
    };
    SurveyModel.prototype.getInCorrectedAnswers = function () {
        return this.getInCorrectedAnswerCount();
    };
    Object.defineProperty(SurveyModel.prototype, "showTimerPanel", {
        /**
         * Gets or sets a timer panel position. The timer panel displays information about how much time an end user spends on a survey/page.
         *
         * The available options:
         * - `top` - display timer panel in the top.
         * - `bottom` - display timer panel in the bottom.
         * - `none` - do not display a timer panel.
         *
         * If the value is not equal to 'none', the survey calls the `startTimer()` method on survey rendering.
         * @see showTimerPanelMode
         * @see startTimer
         * @see stopTimer
         */
        get: function () {
            return this.getPropertyValue("showTimerPanel");
        },
        set: function (val) {
            this.setPropertyValue("showTimerPanel", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isTimerPanelShowingOnTop", {
        get: function () {
            return this.showTimerPanel == "top";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "isTimerPanelShowingOnBottom", {
        get: function () {
            return this.showTimerPanel == "bottom";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "showTimerPanelMode", {
        /**
         * Gets or set a value that specifies whether the timer displays information for the page or for the entire survey.
         *
         * The available options:
         *
         * - `page` - show timer information for page
         * - `survey` - show timer information for survey
         *
         * Use the `onTimerPanelInfoText` event to change the default text.
         * @see showTimerPanel
         * @see onTimerPanelInfoText
         */
        get: function () {
            return this.getPropertyValue("showTimerPanelMode");
        },
        set: function (val) {
            this.setPropertyValue("showTimerPanelMode", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "widthMode", {
        /**
          * Gets or sets a value that specifies how the survey width is calculated.
          *
          * The available options:
          *
          * - `static` - A survey has a fixed width that mostly depends upon the applied theme. Resizing a browser window does not affect the survey width.
          * - `responsive` - A survey takes all available horizontal space. A survey stretches or shrinks horizonally according to the screen size.
          * - `auto` - Depends on the question type and corresponds to the static or responsive mode.
        */
        // `custom/precise` - The survey width is specified by the width property. // in-future
        get: function () {
            return this.getPropertyValue("widthMode");
        },
        set: function (val) {
            this.setPropertyValue("widthMode", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.setCalculatedWidthModeUpdater = function () {
        var _this = this;
        if (this.calculatedWidthModeUpdater)
            this.calculatedWidthModeUpdater.dispose();
        this.calculatedWidthModeUpdater = new _base__WEBPACK_IMPORTED_MODULE_2__["ComputedUpdater"](function () { return _this.calculateWidthMode(); });
        this.calculatedWidthMode = this.calculatedWidthModeUpdater;
    };
    SurveyModel.prototype.calculateWidthMode = function () {
        if (this.widthMode == "auto") {
            var isResponsive_1 = false;
            this.pages.forEach(function (page) {
                if (page.needResponsiveWidth())
                    isResponsive_1 = true;
            });
            return isResponsive_1 ? "responsive" : "static";
        }
        return this.widthMode;
    };
    Object.defineProperty(SurveyModel.prototype, "width", {
        /**
         * A survey width in CSS values.
         *
         * Default value: `undefined` (the survey inherits the width from its container)
         */
        get: function () {
            return this.getPropertyValue("width");
        },
        set: function (val) {
            this.setPropertyValue("width", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "renderedWidth", {
        get: function () {
            var width = this.getPropertyValue("width");
            if (width && !isNaN(width))
                width = width + "px";
            return this.getPropertyValue("calculatedWidthMode") == "static" && width || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "timerInfo", {
        get: function () {
            return this.getTimerInfo();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "timerClock", {
        get: function () {
            var major;
            var minor;
            if (!!this.currentPage) {
                var _a = this.getTimerInfo(), spent = _a.spent, limit = _a.limit, minorSpent = _a.minorSpent, minorLimit = _a.minorLimit;
                if (limit > 0)
                    major = this.getDisplayClockTime(limit - spent);
                else {
                    major = this.getDisplayClockTime(spent);
                }
                if (minorSpent !== undefined) {
                    if (minorLimit > 0) {
                        minor = this.getDisplayClockTime(minorLimit - minorSpent);
                    }
                    else {
                        minor = this.getDisplayClockTime(minorSpent);
                    }
                }
            }
            return { majorText: major, minorText: minor };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "timerInfoText", {
        get: function () {
            var options = { text: this.getTimerInfoText() };
            this.onTimerPanelInfoText.fire(this, options);
            var loc = new _localizablestring__WEBPACK_IMPORTED_MODULE_10__["LocalizableString"](this, true);
            loc.text = options.text;
            return loc.textOrHtml;
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getTimerInfo = function () {
        var page = this.currentPage;
        if (!page)
            return { spent: 0, limit: 0 };
        var pageSpent = page.timeSpent;
        var surveySpent = this.timeSpent;
        var pageLimitSec = this.getPageMaxTimeToFinish(page);
        var surveyLimit = this.maxTimeToFinish;
        if (this.showTimerPanelMode == "page") {
            return { spent: pageSpent, limit: pageLimitSec };
        }
        if (this.showTimerPanelMode == "survey") {
            return { spent: surveySpent, limit: surveyLimit };
        }
        else {
            if (pageLimitSec > 0 && surveyLimit > 0) {
                return { spent: pageSpent, limit: pageLimitSec, minorSpent: surveySpent, minorLimit: surveyLimit };
            }
            else if (pageLimitSec > 0) {
                return { spent: pageSpent, limit: pageLimitSec, minorSpent: surveySpent };
            }
            else if (surveyLimit > 0) {
                return { spent: surveySpent, limit: surveyLimit, minorSpent: pageSpent };
            }
            else {
                return { spent: pageSpent, minorSpent: surveySpent };
            }
        }
    };
    SurveyModel.prototype.getTimerInfoText = function () {
        var page = this.currentPage;
        if (!page)
            return "";
        var pageSpent = this.getDisplayTime(page.timeSpent);
        var surveySpent = this.getDisplayTime(this.timeSpent);
        var pageLimitSec = this.getPageMaxTimeToFinish(page);
        var pageLimit = this.getDisplayTime(pageLimitSec);
        var surveyLimit = this.getDisplayTime(this.maxTimeToFinish);
        if (this.showTimerPanelMode == "page")
            return this.getTimerInfoPageText(page, pageSpent, pageLimit);
        if (this.showTimerPanelMode == "survey")
            return this.getTimerInfoSurveyText(surveySpent, surveyLimit);
        if (this.showTimerPanelMode == "all") {
            if (pageLimitSec <= 0 && this.maxTimeToFinish <= 0) {
                return this.getLocalizationFormatString("timerSpentAll", pageSpent, surveySpent);
            }
            if (pageLimitSec > 0 && this.maxTimeToFinish > 0) {
                return this.getLocalizationFormatString("timerLimitAll", pageSpent, pageLimit, surveySpent, surveyLimit);
            }
            var pageText = this.getTimerInfoPageText(page, pageSpent, pageLimit);
            var surveyText = this.getTimerInfoSurveyText(surveySpent, surveyLimit);
            return pageText + " " + surveyText;
        }
        return "";
    };
    SurveyModel.prototype.getTimerInfoPageText = function (page, pageSpent, pageLimit) {
        return this.getPageMaxTimeToFinish(page) > 0
            ? this.getLocalizationFormatString("timerLimitPage", pageSpent, pageLimit)
            : this.getLocalizationFormatString("timerSpentPage", pageSpent, pageLimit);
    };
    SurveyModel.prototype.getTimerInfoSurveyText = function (surveySpent, surveyLimit) {
        var strName = this.maxTimeToFinish > 0 ? "timerLimitSurvey" : "timerSpentSurvey";
        return this.getLocalizationFormatString(strName, surveySpent, surveyLimit);
    };
    SurveyModel.prototype.getDisplayClockTime = function (val) {
        var min = Math.floor(val / 60);
        var sec = val % 60;
        var secStr = sec.toString();
        if (sec < 10) {
            secStr = "0" + secStr;
        }
        return min + ":" + secStr;
    };
    SurveyModel.prototype.getDisplayTime = function (val) {
        var min = Math.floor(val / 60);
        var sec = val % 60;
        var res = "";
        if (min > 0) {
            res += min + " " + this.getLocalizationString("timerMin");
        }
        if (res && sec == 0)
            return res;
        if (res)
            res += " ";
        return res + sec + " " + this.getLocalizationString("timerSec");
    };
    Object.defineProperty(SurveyModel.prototype, "timerModel", {
        get: function () { return this.timerModelValue; },
        enumerable: false,
        configurable: true
    });
    /**
     * Starts a timer that will calculate how much time end-user spends on the survey or on pages.
     * @see stopTimer
     * @see timeSpent
     */
    SurveyModel.prototype.startTimer = function () {
        this.timerModel.start();
    };
    SurveyModel.prototype.startTimerFromUI = function () {
        if (this.showTimerPanel != "none" && this.state === "running") {
            this.startTimer();
        }
    };
    /**
     * Stops the timer.
     * @see startTimer
     * @see timeSpent
     */
    SurveyModel.prototype.stopTimer = function () {
        this.timerModel.stop();
    };
    Object.defineProperty(SurveyModel.prototype, "timeSpent", {
        /**
         * Returns the time in seconds an end user spends on the survey
         * @see startTimer
         * @see PageModel.timeSpent
         */
        get: function () { return this.timerModel.spent; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "maxTimeToFinish", {
        /**
         * Gets or sets the maximum time in seconds that end user has to complete a survey. If the value is 0 or less, an end user has no time limit to finish a survey.
         * @see startTimer
         * @see maxTimeToFinishPage
         */
        get: function () {
            return this.getPropertyValue("maxTimeToFinish", 0);
        },
        set: function (val) {
            this.setPropertyValue("maxTimeToFinish", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyModel.prototype, "maxTimeToFinishPage", {
        /**
         * Gets or sets the maximum time in seconds that end user has to complete a page in the survey. If the value is 0 or less, an end user has no time limit.
         *
         * You may override this value for every page.
         * @see startTimer
         * @see maxTimeToFinish
         * @see PageModel.maxTimeToFinish
         */
        get: function () {
            return this.getPropertyValue("maxTimeToFinishPage", 0);
        },
        set: function (val) {
            this.setPropertyValue("maxTimeToFinishPage", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyModel.prototype.getPageMaxTimeToFinish = function (page) {
        if (!page || page.maxTimeToFinish < 0)
            return 0;
        return page.maxTimeToFinish > 0
            ? page.maxTimeToFinish
            : this.maxTimeToFinishPage;
    };
    SurveyModel.prototype.doTimer = function (page) {
        this.onTimer.fire(this, {});
        if (this.maxTimeToFinish > 0 && this.maxTimeToFinish == this.timeSpent) {
            this.completeLastPage();
        }
        if (page) {
            var pageLimit = this.getPageMaxTimeToFinish(page);
            if (pageLimit > 0 && pageLimit == page.timeSpent) {
                if (this.isLastPage) {
                    this.completeLastPage();
                }
                else {
                    this.nextPage();
                }
            }
        }
    };
    Object.defineProperty(SurveyModel.prototype, "inSurvey", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    //ISurveyImplementor
    SurveyModel.prototype.getSurveyData = function () {
        return this;
    };
    SurveyModel.prototype.getSurvey = function () {
        return this;
    };
    SurveyModel.prototype.getTextProcessor = function () {
        return this;
    };
    //ISurveyTriggerOwner
    SurveyModel.prototype.getObjects = function (pages, questions) {
        var result = [];
        Array.prototype.push.apply(result, this.getPagesByNames(pages));
        Array.prototype.push.apply(result, this.getQuestionsByNames(questions));
        return result;
    };
    SurveyModel.prototype.setTriggerValue = function (name, value, isVariable) {
        if (!name)
            return;
        if (isVariable) {
            this.setVariable(name, value);
        }
        else {
            var question = this.getQuestionByName(name);
            if (!!question) {
                question.value = value;
            }
            else {
                var processor = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__["ProcessValue"]();
                var firstName = processor.getFirstName(name);
                if (firstName == name) {
                    this.setValue(name, value);
                }
                else {
                    if (!this.getQuestionByName(firstName))
                        return;
                    var data = this.getUnbindValue(this.getFilteredValues());
                    processor.setValue(data, name, value);
                    this.setValue(firstName, data[firstName]);
                }
            }
        }
    };
    SurveyModel.prototype.copyTriggerValue = function (name, fromName) {
        if (!name || !fromName)
            return;
        var processor = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_6__["ProcessValue"]();
        var value = processor.getValue(fromName, this.getFilteredValues());
        this.setTriggerValue(name, value, false);
    };
    SurveyModel.prototype.triggerExecuted = function (trigger) {
        this.onTriggerExecuted.fire(this, { trigger: trigger });
    };
    SurveyModel.prototype.startMovingQuestion = function () {
        this.isMovingQuestion = true;
    };
    SurveyModel.prototype.stopMovingQuestion = function () {
        this.isMovingQuestion = false;
    };
    /**
     * Focus question by its name. If needed change the current page on the page where question is located.
     * Function returns false if there is no question with this name or question is invisible, otherwise it returns true.
     * @param name question name
     */
    SurveyModel.prototype.focusQuestion = function (name) {
        var _this = this;
        var question = this.getQuestionByName(name, true);
        if (!question || !question.isVisible || !question.page)
            return false;
        this.isFocusingQuestion = true;
        this.skippedPages.push({ from: this.currentPage, to: question.page });
        var isNeedWaitForPageRendered = this.currentPage !== question.page;
        var focusQuestionFunc = function () {
            question.focus();
            _this.isFocusingQuestion = false;
            _this.isCurrentPageRendering = false;
        };
        this.afterRenderPageTasks.push(focusQuestionFunc);
        this.currentPage = question.page;
        if (!isNeedWaitForPageRendered) {
            focusQuestionFunc();
            this.afterRenderPageTasks.splice(this.afterRenderPageTasks.indexOf(focusQuestionFunc), 1);
        }
        return true;
    };
    SurveyModel.prototype.getElementWrapperComponentName = function (element, reason) {
        if (reason === "logo-image") {
            return "sv-logo-image";
        }
        return SurveyModel.TemplateRendererComponentName;
    };
    SurveyModel.prototype.getQuestionContentWrapperComponentName = function (element) {
        return SurveyModel.TemplateRendererComponentName;
    };
    SurveyModel.prototype.getRowWrapperComponentName = function (row) {
        return SurveyModel.TemplateRendererComponentName;
    };
    SurveyModel.prototype.getElementWrapperComponentData = function (element, reason) {
        return element;
    };
    SurveyModel.prototype.getRowWrapperComponentData = function (row) {
        return row;
    };
    SurveyModel.prototype.getItemValueWrapperComponentName = function (item, question) {
        return SurveyModel.TemplateRendererComponentName;
    };
    SurveyModel.prototype.getItemValueWrapperComponentData = function (item, question) {
        return item;
    };
    SurveyModel.prototype.getMatrixCellTemplateData = function (cell) {
        return cell.question;
    };
    SurveyModel.prototype.searchText = function (text) {
        if (!!text)
            text = text.toLowerCase();
        var res = [];
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].searchText(text, res);
        }
        return res;
    };
    SurveyModel.prototype.getSkeletonComponentName = function (element) {
        return this.skeletonComponentName;
    };
    SurveyModel.prototype.addLayoutElement = function (layoutElement) {
        var existingLayoutElement = this.removeLayoutElement(layoutElement.id);
        this.layoutElements.push(layoutElement);
        return existingLayoutElement;
    };
    SurveyModel.prototype.removeLayoutElement = function (layoutElementId) {
        var layoutElement = this.layoutElements.filter(function (a) { return a.id === layoutElementId; })[0];
        if (!!layoutElement) {
            var layoutElementIndex = this.layoutElements.indexOf(layoutElement);
            this.layoutElements.splice(layoutElementIndex, 1);
        }
        return layoutElement;
    };
    SurveyModel.prototype.getContainerContent = function (container) {
        var containerLayoutElements = [];
        for (var _i = 0, _a = this.layoutElements; _i < _a.length; _i++) {
            var layoutElement = _a[_i];
            if (isStrCiEqual(layoutElement.id, "timerpanel")) {
                if (container === "header") {
                    if (this.isTimerPanelShowingOnTop && !this.isShowStartingPage) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
                if (container === "footer") {
                    if (this.isTimerPanelShowingOnBottom && !this.isShowStartingPage) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
            }
            else if (isStrCiEqual(layoutElement.id, "progress-" + this.progressBarType)) {
                if (container === "header") {
                    if (this.isShowProgressBarOnTop && !this.isShowStartingPage) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
                if (container === "contentBottom") {
                    if (this.isShowProgressBarOnBottom && !this.isShowStartingPage) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
            }
            else if (isStrCiEqual(layoutElement.id, "navigationbuttons")) {
                if (container === "contentTop") {
                    if (["top", "both"].indexOf(this.showNavigationButtons) !== -1 && this.isNavigationButtonsShowingOnTop) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
                if (container === "contentBottom") {
                    if (["bottom", "both"].indexOf(this.showNavigationButtons) !== -1 && this.isNavigationButtonsShowingOnBottom) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
            }
            else if (isStrCiEqual(layoutElement.id, "toc-navigation") && this.showTOC) {
                if (container === "left") {
                    if (["left", "both"].indexOf(this.tocLocation) !== -1) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
                if (container === "right") {
                    if (["right", "both"].indexOf(this.tocLocation) !== -1) {
                        containerLayoutElements.push(layoutElement);
                    }
                }
            }
            else {
                if (Array.isArray(layoutElement.container) && layoutElement.container.indexOf(container) !== -1 || layoutElement.container === container) {
                    containerLayoutElements.push(layoutElement);
                }
            }
        }
        return containerLayoutElements;
    };
    /**
     * Use this method to dispose survey model properly.
     */
    SurveyModel.prototype.dispose = function () {
        this.currentPage = null;
        this.destroyResizeObserver();
        _super.prototype.dispose.call(this);
        this.editingObj = null;
        if (!this.pages)
            return;
        for (var i = 0; i < this.pages.length; i++) {
            this.pages[i].setSurveyImpl(undefined);
            this.pages[i].dispose();
        }
        this.pages.splice(0, this.pages.length);
        if (this.disposeCallback) {
            this.disposeCallback();
        }
    };
    SurveyModel.TemplateRendererComponentName = "sv-template-renderer";
    SurveyModel.stylesManager = null;
    SurveyModel.platform = "unknown";
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyModel.prototype, "completedCss", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyModel.prototype, "containerCss", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])({ defaultValue: false })
    ], SurveyModel.prototype, "showBrandInfo", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyModel.prototype, "_isMobile", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyModel.prototype, "rootCss", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["property"])()
    ], SurveyModel.prototype, "calculatedWidthMode", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_1__["propertyArray"])()
    ], SurveyModel.prototype, "layoutElements", void 0);
    return SurveyModel;
}(_survey_element__WEBPACK_IMPORTED_MODULE_3__["SurveyElementCore"]));

function isStrCiEqual(a, b) {
    if (!a)
        return false;
    if (!b)
        return false;
    return a.toUpperCase() === b.toUpperCase();
}
_jsonobject__WEBPACK_IMPORTED_MODULE_1__["Serializer"].addClass("survey", [
    {
        name: "locale",
        choices: function () {
            return _surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].getLocales(true);
        },
        onGetValue: function (obj) {
            return obj.locale == _surveyStrings__WEBPACK_IMPORTED_MODULE_8__["surveyLocalization"].defaultLocale ? null : obj.locale;
        },
    },
    { name: "title", serializationProperty: "locTitle", dependsOn: "locale" },
    {
        name: "description:text",
        serializationProperty: "locDescription",
        dependsOn: "locale",
    },
    { name: "logo", serializationProperty: "locLogo" },
    { name: "logoWidth", default: "300px", minValue: 0 },
    { name: "logoHeight", default: "200px", minValue: 0 },
    {
        name: "logoFit",
        default: "contain",
        choices: ["none", "contain", "cover", "fill"],
    },
    {
        name: "logoPosition",
        default: "left",
        choices: ["none", "left", "right", "top", "bottom"],
    },
    { name: "focusFirstQuestionAutomatic:boolean", default: true },
    { name: "focusOnFirstError:boolean", default: true },
    { name: "completedHtml:html", serializationProperty: "locCompletedHtml" },
    {
        name: "completedBeforeHtml:html",
        serializationProperty: "locCompletedBeforeHtml",
    },
    {
        name: "completedHtmlOnCondition:htmlconditions",
        className: "htmlconditionitem",
    },
    { name: "loadingHtml:html", serializationProperty: "locLoadingHtml" },
    { name: "pages:surveypages", className: "page" },
    {
        name: "questions",
        alternativeName: "elements",
        baseClassName: "question",
        visible: false,
        isLightSerializable: false,
        onGetValue: function (obj) {
            return null;
        },
        onSetValue: function (obj, value, jsonConverter) {
            obj.pages.splice(0, obj.pages.length);
            var page = obj.addNewPage("");
            jsonConverter.toObject({ questions: value }, page);
        },
    },
    {
        name: "triggers:triggers",
        baseClassName: "surveytrigger",
        classNamePart: "trigger",
    },
    {
        name: "calculatedValues:calculatedvalues",
        className: "calculatedvalue",
    },
    { name: "surveyId", visible: false },
    { name: "surveyPostId", visible: false },
    { name: "surveyShowDataSaving:boolean", visible: false },
    "cookieName",
    "sendResultOnPageNext:boolean",
    {
        name: "showNavigationButtons",
        default: "bottom",
        choices: ["none", "top", "bottom", "both"],
    },
    { name: "showPrevButton:boolean", default: true },
    { name: "showTitle:boolean", default: true },
    { name: "showPageTitles:boolean", default: true },
    { name: "showCompletedPage:boolean", default: true },
    "navigateToUrl",
    {
        name: "navigateToUrlOnCondition:urlconditions",
        className: "urlconditionitem",
    },
    {
        name: "questionsOrder",
        default: "initial",
        choices: ["initial", "random"],
    },
    "showPageNumbers:boolean",
    {
        name: "showQuestionNumbers",
        default: "on",
        choices: ["on", "onPage", "off"],
    },
    {
        name: "questionTitleLocation",
        default: "top",
        choices: ["top", "bottom", "left"],
    },
    {
        name: "questionDescriptionLocation",
        default: "underTitle",
        choices: ["underInput", "underTitle"],
    },
    { name: "questionErrorLocation", default: "top", choices: ["top", "bottom"] },
    {
        name: "showProgressBar",
        default: "off",
        choices: ["off", "top", "bottom", "both"],
    },
    {
        name: "progressBarType",
        default: "pages",
        choices: [
            "pages",
            "questions",
            "requiredQuestions",
            "correctQuestions",
            "buttons",
        ],
    },
    {
        name: "showTOC:switch",
        default: false
    },
    {
        name: "tocLocation",
        default: "left",
        choices: ["left", "right"],
    },
    { name: "mode", default: "edit", choices: ["edit", "display"] },
    { name: "storeOthersAsComment:boolean", default: true },
    { name: "maxTextLength:number", default: 0, minValue: 0 },
    { name: "maxOthersLength:number", default: 0, minValue: 0 },
    {
        name: "goNextPageAutomatic:boolean",
        onSetValue: function (obj, value) {
            if (value !== "autogonext") {
                value = _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isTwoValueEquals(value, true);
            }
            obj.setPropertyValue("goNextPageAutomatic", value);
        }
    },
    {
        name: "clearInvisibleValues",
        default: "onComplete",
        choices: ["none", "onComplete", "onHidden", "onHiddenContainer"],
    },
    {
        name: "checkErrorsMode",
        default: "onNextPage",
        choices: ["onNextPage", "onValueChanged", "onValueChanging", "onComplete"],
    },
    {
        name: "textUpdateMode",
        default: "onBlur",
        choices: ["onBlur", "onTyping"],
    },
    { name: "autoGrowComment:boolean", default: false },
    { name: "startSurveyText", serializationProperty: "locStartSurveyText" },
    { name: "pagePrevText", serializationProperty: "locPagePrevText" },
    { name: "pageNextText", serializationProperty: "locPageNextText" },
    { name: "completeText", serializationProperty: "locCompleteText" },
    { name: "previewText", serializationProperty: "locPreviewText" },
    { name: "editText", serializationProperty: "locEditText" },
    { name: "requiredText", default: "*" },
    {
        name: "questionStartIndex",
        dependsOn: ["showQuestionNumbers"],
        visibleIf: function (survey) {
            return !survey || survey.showQuestionNumbers !== "off";
        },
    },
    {
        name: "questionTitlePattern",
        default: "numTitleRequire",
        dependsOn: ["questionStartIndex", "requiredText"],
        choices: function (obj) {
            if (!obj)
                return [];
            return obj.getQuestionTitlePatternOptions();
        },
    },
    {
        name: "questionTitleTemplate",
        visible: false,
        isSerializable: false,
        serializationProperty: "locQuestionTitleTemplate",
    },
    { name: "firstPageIsStarted:boolean", default: false },
    {
        name: "isSinglePage:boolean",
        default: false,
        visible: false,
        isSerializable: false,
    },
    {
        name: "questionsOnPageMode",
        default: "standard",
        choices: ["singlePage", "standard", "questionPerPage"],
    },
    {
        name: "showPreviewBeforeComplete",
        default: "noPreview",
        choices: ["noPreview", "showAllQuestions", "showAnsweredQuestions"],
    },
    { name: "maxTimeToFinish:number", default: 0, minValue: 0 },
    { name: "maxTimeToFinishPage:number", default: 0, minValue: 0 },
    {
        name: "showTimerPanel",
        default: "none",
        choices: ["none", "top", "bottom"],
    },
    {
        name: "showTimerPanelMode",
        default: "all",
        choices: ["all", "page", "survey"],
    },
    {
        name: "widthMode",
        default: "auto",
        choices: ["auto", "static", "responsive"],
    },
    "width",
    { name: "showBrandInfo:boolean", default: false, visible: false }
]);


/***/ }),

/***/ "./src/surveyProgress.ts":
/*!*******************************!*\
  !*** ./src/surveyProgress.ts ***!
  \*******************************/
/*! exports provided: SurveyProgressModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressModel", function() { return SurveyProgressModel; });
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");

var SurveyProgressModel = /** @class */ (function () {
    function SurveyProgressModel() {
    }
    SurveyProgressModel.getProgressTextInBarCss = function (css) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]()
            .append(css.progressText)
            .append(css.progressTextInBar)
            .toString();
    };
    SurveyProgressModel.getProgressTextUnderBarCss = function (css) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]()
            .append(css.progressText)
            .append(css.progressTextUnderBar)
            .toString();
    };
    return SurveyProgressModel;
}());



/***/ }),

/***/ "./src/surveyProgressButtons.ts":
/*!**************************************!*\
  !*** ./src/surveyProgressButtons.ts ***!
  \**************************************/
/*! exports provided: SurveyProgressButtonsModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyProgressButtonsModel", function() { return SurveyProgressButtonsModel; });
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");

var SurveyProgressButtonsModel = /** @class */ (function () {
    function SurveyProgressButtonsModel(survey) {
        this.survey = survey;
    }
    SurveyProgressButtonsModel.prototype.isListElementClickable = function (index) {
        if (!this.survey.onServerValidateQuestions ||
            this.survey.onServerValidateQuestions.isEmpty ||
            this.survey.checkErrorsMode === "onComplete") {
            return true;
        }
        return index <= this.survey.currentPageNo + 1;
    };
    SurveyProgressButtonsModel.prototype.getListElementCss = function (index) {
        if (index >= this.survey.visiblePages.length)
            return;
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]()
            .append(this.survey.css.progressButtonsListElementPassed, this.survey.visiblePages[index].passed)
            .append(this.survey.css.progressButtonsListElementCurrent, this.survey.currentPageNo === index)
            .append(this.survey.css.progressButtonsListElementNonClickable, !this.isListElementClickable(index))
            .toString();
    };
    SurveyProgressButtonsModel.prototype.getScrollButtonCss = function (hasScroller, isLeftScroll) {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_0__["CssClassBuilder"]()
            .append(this.survey.css.progressButtonsImageButtonLeft, isLeftScroll)
            .append(this.survey.css.progressButtonsImageButtonRight, !isLeftScroll)
            .append(this.survey.css.progressButtonsImageButtonHidden, !hasScroller)
            .toString();
    };
    SurveyProgressButtonsModel.prototype.clickListElement = function (index) {
        if (this.survey.isDesignMode)
            return;
        if (index < this.survey.currentPageNo) {
            this.survey.currentPageNo = index;
        }
        else if (index > this.survey.currentPageNo) {
            for (var i = this.survey.currentPageNo; i < index; i++) {
                if (!this.survey.nextPage())
                    break;
            }
        }
    };
    return SurveyProgressButtonsModel;
}());



/***/ }),

/***/ "./src/surveyStrings.ts":
/*!******************************!*\
  !*** ./src/surveyStrings.ts ***!
  \******************************/
/*! exports provided: surveyLocalization, surveyStrings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "surveyLocalization", function() { return surveyLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "surveyStrings", function() { return surveyStrings; });
/* harmony import */ var _localization_english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localization/english */ "./src/localization/english.ts");

var surveyLocalization = {
    currentLocaleValue: "",
    defaultLocaleValue: "en",
    locales: {},
    localeNames: {},
    supportedLocales: [],
    get currentLocale() {
        return this.currentLocaleValue === this.defaultLocaleValue ? "" : this.currentLocaleValue;
    },
    set currentLocale(val) {
        if (val === "cz")
            val = "cs";
        this.currentLocaleValue = val;
    },
    get defaultLocale() {
        return this.defaultLocaleValue;
    },
    set defaultLocale(val) {
        if (val === "cz")
            val = "cs";
        this.defaultLocaleValue = val;
    },
    getLocaleStrings: function (loc) {
        return this.locales[loc];
    },
    getCurrentStrings: function (locale) {
        var loc = locale && this.locales[locale];
        if (!loc)
            loc = this.currentLocale ? this.locales[this.currentLocale] : this.locales[this.defaultLocale];
        if (!loc)
            loc = this.locales[this.defaultLocale];
        if (!loc)
            loc = this.locales["en"];
        return loc;
    },
    getString: function (strName, locale) {
        if (locale === void 0) { locale = null; }
        var originalLocale = locale;
        locale = locale || this.currentLocale || this.defaultLocale;
        var loc = this.getCurrentStrings(locale);
        if (!!loc[strName])
            return loc[strName];
        var index = !!locale ? locale.indexOf("-") : -1;
        if (index > -1)
            return this.getString(strName, locale.substring(0, index));
        loc = this.locales[this.defaultLocale];
        var result = loc[strName];
        if (result === undefined) {
            result = this.locales["en"][strName];
        }
        if (result === undefined)
            return this.onGetExternalString(strName, originalLocale);
        return result;
    },
    getLocales: function (removeDefaultLoc) {
        if (removeDefaultLoc === void 0) { removeDefaultLoc = false; }
        var res = [];
        res.push("");
        var locs = this.locales;
        if (this.supportedLocales && this.supportedLocales.length > 0) {
            locs = {};
            for (var i = 0; i < this.supportedLocales.length; i++) {
                locs[this.supportedLocales[i]] = true;
            }
        }
        for (var key in locs) {
            if (removeDefaultLoc && key == this.defaultLocale)
                continue;
            res.push(key);
        }
        var locName = function (loc) {
            if (!loc)
                return "";
            var res = surveyLocalization.localeNames[loc];
            if (!res)
                res = loc;
            return res.toLowerCase();
        };
        res.sort(function (a, b) {
            var str1 = locName(a);
            var str2 = locName(b);
            if (str1 === str2)
                return 0;
            return str1 < str2 ? -1 : 1;
        });
        return res;
    },
    onGetExternalString: function (name, locale) { return undefined; }
};
var surveyStrings = _localization_english__WEBPACK_IMPORTED_MODULE_0__["englishStrings"];
surveyLocalization.locales["en"] = _localization_english__WEBPACK_IMPORTED_MODULE_0__["englishStrings"];
surveyLocalization.localeNames["en"] = "english";


/***/ }),

/***/ "./src/surveyTimerModel.ts":
/*!*********************************!*\
  !*** ./src/surveyTimerModel.ts ***!
  \*********************************/
/*! exports provided: SurveyTimerModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTimerModel", function() { return SurveyTimerModel; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _surveytimer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./surveytimer */ "./src/surveytimer.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cssClassBuilder */ "./src/utils/cssClassBuilder.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var SurveyTimerModel = /** @class */ (function (_super) {
    __extends(SurveyTimerModel, _super);
    function SurveyTimerModel(survey) {
        var _this = _super.call(this) || this;
        _this.timerFunc = null;
        _this.surveyValue = survey;
        _this.onCreating();
        return _this;
    }
    Object.defineProperty(SurveyTimerModel.prototype, "survey", {
        get: function () { return this.surveyValue; },
        enumerable: false,
        configurable: true
    });
    SurveyTimerModel.prototype.onCreating = function () { };
    SurveyTimerModel.prototype.start = function () {
        var _this = this;
        if (!this.survey)
            return;
        if (this.isRunning || this.isDesignMode)
            return;
        this.survey.onCurrentPageChanged.add(function () {
            _this.update();
        });
        this.timerFunc = function () { _this.doTimer(); };
        this.setIsRunning(true);
        this.update();
        _surveytimer__WEBPACK_IMPORTED_MODULE_1__["SurveyTimer"].instance.start(this.timerFunc);
    };
    SurveyTimerModel.prototype.stop = function () {
        if (!this.isRunning)
            return;
        this.setIsRunning(false);
        _surveytimer__WEBPACK_IMPORTED_MODULE_1__["SurveyTimer"].instance.stop(this.timerFunc);
    };
    Object.defineProperty(SurveyTimerModel.prototype, "isRunning", {
        get: function () {
            return this.getPropertyValue("isRunning", false);
        },
        enumerable: false,
        configurable: true
    });
    SurveyTimerModel.prototype.setIsRunning = function (val) {
        this.setPropertyValue("isRunning", val);
    };
    SurveyTimerModel.prototype.update = function () {
        this.updateText();
        this.updateProgress();
    };
    SurveyTimerModel.prototype.doTimer = function () {
        var page = this.survey.currentPage;
        if (page) {
            page.timeSpent = page.timeSpent + 1;
        }
        this.spent = this.spent + 1;
        this.update();
        if (this.onTimer) {
            this.onTimer(page);
        }
    };
    SurveyTimerModel.prototype.updateProgress = function () {
        var _this = this;
        var _a = this.survey.timerInfo, spent = _a.spent, limit = _a.limit;
        if (!limit) {
            this.progress = undefined;
        }
        else {
            if (spent == 0) {
                this.progress = 0;
                setTimeout(function () {
                    _this.progress = Math.floor((spent + 1) / limit * 100) / 100;
                }, 0);
            }
            else if (spent !== limit) {
                this.progress = Math.floor((spent + 1) / limit * 100) / 100;
            }
        }
    };
    SurveyTimerModel.prototype.updateText = function () {
        var timerClock = this.survey.timerClock;
        this.clockMajorText = timerClock.majorText;
        this.clockMinorText = timerClock.minorText;
        this.text = this.survey.timerInfoText;
    };
    Object.defineProperty(SurveyTimerModel.prototype, "showProgress", {
        get: function () {
            return this.progress !== undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTimerModel.prototype, "showTimerAsClock", {
        get: function () {
            return !!this.survey.getCss().clockTimerRoot;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTimerModel.prototype, "rootCss", {
        get: function () {
            return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
                .append(this.survey.getCss().clockTimerRoot)
                .append(this.survey.getCss().clockTimerRootTop, this.survey.isTimerPanelShowingOnTop)
                .append(this.survey.getCss().clockTimerRootBottom, this.survey.isTimerPanelShowingOnBottom)
                .toString();
        },
        enumerable: false,
        configurable: true
    });
    SurveyTimerModel.prototype.getProgressCss = function () {
        return new _utils_cssClassBuilder__WEBPACK_IMPORTED_MODULE_3__["CssClassBuilder"]()
            .append(this.survey.getCss().clockTimerProgress)
            .append(this.survey.getCss().clockTimerProgressAnimation, this.progress > 0)
            .toString();
    };
    Object.defineProperty(SurveyTimerModel.prototype, "textContainerCss", {
        get: function () {
            return this.survey.getCss().clockTimerTextContainer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTimerModel.prototype, "minorTextCss", {
        get: function () {
            return this.survey.getCss().clockTimerMinorText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTimerModel.prototype, "majorTextCss", {
        get: function () {
            return this.survey.getCss().clockTimerMajorText;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], SurveyTimerModel.prototype, "text", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], SurveyTimerModel.prototype, "progress", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], SurveyTimerModel.prototype, "clockMajorText", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])()
    ], SurveyTimerModel.prototype, "clockMinorText", void 0);
    __decorate([
        Object(_jsonobject__WEBPACK_IMPORTED_MODULE_2__["property"])({ defaultValue: 0 })
    ], SurveyTimerModel.prototype, "spent", void 0);
    return SurveyTimerModel;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));



/***/ }),

/***/ "./src/surveyToc.ts":
/*!**************************!*\
  !*** ./src/surveyToc.ts ***!
  \**************************/
/*! exports provided: tryNavigateToPage, createTOCListModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryNavigateToPage", function() { return tryNavigateToPage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTOCListModel", function() { return createTOCListModel; });
/* harmony import */ var _actions_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions/action */ "./src/actions/action.ts");
/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./list */ "./src/list.ts");


function tryNavigateToPage(survey, index) {
    if (survey.isDesignMode)
        return;
    if (index < survey.currentPageNo) {
        survey.currentPageNo = index;
    }
    else if (index > survey.currentPageNo) {
        for (var i = survey.currentPageNo; i < index; i++) {
            if (!survey.nextPage())
                return false;
        }
    }
    return true;
}
function createTOCListModel(survey) {
    var items = survey.pages.map(function (page, index) {
        return new _actions_action__WEBPACK_IMPORTED_MODULE_0__["Action"]({
            id: page.name,
            title: page.navigationTitle || page.title || page.name,
            action: function () {
                return tryNavigateToPage(survey, index);
            }
        });
    });
    var listModel = new _list__WEBPACK_IMPORTED_MODULE_1__["ListModel"](items, function (item) {
        if (!!item.action()) {
            listModel.allowSelection = true;
            listModel.selectedItem = item;
            listModel.allowSelection = false;
        }
    }, true, items.filter(function (i) { return i.id === survey.currentPage.name; })[0]);
    listModel.allowSelection = false;
    listModel.locOwner = survey;
    return listModel;
}


/***/ }),

/***/ "./src/surveytimer.ts":
/*!****************************!*\
  !*** ./src/surveytimer.ts ***!
  \****************************/
/*! exports provided: surveyTimerFunctions, SurveyTimer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "surveyTimerFunctions", function() { return surveyTimerFunctions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTimer", function() { return SurveyTimer; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");

var surveyTimerFunctions = {
    setTimeout: function (func) {
        if (typeof window === "undefined")
            return 0;
        return window.setTimeout(func, 1000);
    },
    clearTimeout: function (timerId) {
        if (typeof window === "undefined")
            return;
        window.clearTimeout(timerId);
    },
};
var SurveyTimer = /** @class */ (function () {
    function SurveyTimer() {
        this.listenerCounter = 0;
        this.timerId = -1;
        this.onTimer = new _base__WEBPACK_IMPORTED_MODULE_0__["Event"]();
    }
    Object.defineProperty(SurveyTimer, "instance", {
        get: function () {
            if (!SurveyTimer.instanceValue) {
                SurveyTimer.instanceValue = new SurveyTimer();
            }
            return SurveyTimer.instanceValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyTimer.prototype.start = function (func) {
        var _this = this;
        if (func === void 0) { func = null; }
        if (func) {
            this.onTimer.add(func);
        }
        if (this.timerId < 0) {
            this.timerId = surveyTimerFunctions.setTimeout(function () {
                _this.doTimer();
            });
        }
        this.listenerCounter++;
    };
    SurveyTimer.prototype.stop = function (func) {
        if (func === void 0) { func = null; }
        if (func) {
            this.onTimer.remove(func);
        }
        this.listenerCounter--;
        if (this.listenerCounter == 0 && this.timerId > -1) {
            surveyTimerFunctions.clearTimeout(this.timerId);
            this.timerId = -1;
        }
    };
    SurveyTimer.prototype.doTimer = function () {
        var _this = this;
        if (this.onTimer.isEmpty || this.listenerCounter == 0) {
            this.timerId = -1;
        }
        if (this.timerId < 0)
            return;
        var prevItem = this.timerId;
        this.onTimer.fire(this, {});
        //We have to check that we have the same timerId
        //It could be changed during events execution and it will lead to double timer events
        if (prevItem !== this.timerId)
            return;
        this.timerId = surveyTimerFunctions.setTimeout(function () {
            _this.doTimer();
        });
    };
    SurveyTimer.instanceValue = null;
    return SurveyTimer;
}());



/***/ }),

/***/ "./src/svgbundle.ts":
/*!**************************!*\
  !*** ./src/svgbundle.ts ***!
  \**************************/
/*! exports provided: SvgIconRegistry, SvgRegistry, SvgBundleViewModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgIconRegistry", function() { return SvgIconRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgRegistry", function() { return SvgRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SvgBundleViewModel", function() { return SvgBundleViewModel; });
var SvgIconData = /** @class */ (function () {
    function SvgIconData() {
    }
    return SvgIconData;
}());
var SvgIconRegistry = /** @class */ (function () {
    function SvgIconRegistry() {
        this.icons = {};
        this.iconPrefix = "icon-";
    }
    SvgIconRegistry.prototype.registerIconFromSymbol = function (iconId, iconSymbolSvg) {
        this.icons[iconId] = iconSymbolSvg;
    };
    SvgIconRegistry.prototype.registerIconFromSvgViaElement = function (iconId, iconSvg, iconPrefix) {
        if (iconPrefix === void 0) { iconPrefix = this.iconPrefix; }
        var divSvg = document.createElement("div");
        divSvg.innerHTML = iconSvg;
        var symbol = document.createElement("symbol");
        var svg = divSvg.querySelector("svg");
        symbol.innerHTML = svg.innerHTML;
        for (var i = 0; i < svg.attributes.length; i++) {
            symbol.setAttributeNS("http://www.w3.org/2000/svg", svg.attributes[i].name, svg.attributes[i].value);
        }
        symbol.id = iconPrefix + iconId;
        this.registerIconFromSymbol(iconId, symbol.outerHTML);
    };
    SvgIconRegistry.prototype.registerIconFromSvg = function (iconId, iconSvg, iconPrefix) {
        if (iconPrefix === void 0) { iconPrefix = this.iconPrefix; }
        var startStr = "<svg ";
        var endStr = "</svg>";
        iconSvg = iconSvg.trim();
        var str = iconSvg.toLowerCase();
        if (str.substring(0, startStr.length) === startStr &&
            str.substring(str.length - endStr.length, str.length) === endStr) {
            this.registerIconFromSymbol(iconId, "<symbol " +
                "id=\"" + iconPrefix + iconId + "\" " +
                iconSvg.substring(startStr.length, str.length - endStr.length) +
                "</symbol>");
            return true;
        }
        else {
            return false;
        }
    };
    SvgIconRegistry.prototype.registerIconsFromFolder = function (r) {
        var _this = this;
        r.keys().forEach(function (key) {
            _this.registerIconFromSvg(key.substring(2, key.length - 4).toLowerCase(), r(key));
        });
    };
    SvgIconRegistry.prototype.iconsRenderedHtml = function () {
        var _this = this;
        return Object.keys(this.icons).map(function (icon) { return _this.icons[icon]; }).join("");
    };
    SvgIconRegistry.prototype.renderIcons = function () {
        var containerId = "sv-icon-holder-global-container";
        if (!document.getElementById(containerId)) {
            var iconsDiv = document.createElement("div");
            iconsDiv.id = containerId;
            iconsDiv.innerHTML = "<svg>" + this.iconsRenderedHtml() + "</svg>";
            iconsDiv.style.display = "none";
            document.head.insertBefore(iconsDiv, document.head.firstChild);
        }
    };
    return SvgIconRegistry;
}());

var SvgRegistry = new SvgIconRegistry();
var SvgBundleViewModel;
var path = __webpack_require__("./src/images sync \\.svg$");
SvgRegistry.registerIconsFromFolder(path);


/***/ }),

/***/ "./src/template-renderer.ts":
/*!**********************************!*\
  !*** ./src/template-renderer.ts ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/textPreProcessor.ts":
/*!*********************************!*\
  !*** ./src/textPreProcessor.ts ***!
  \*********************************/
/*! exports provided: TextPreProcessorItem, TextPreProcessorValue, TextPreProcessor, QuestionTextProcessor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextPreProcessorItem", function() { return TextPreProcessorItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextPreProcessorValue", function() { return TextPreProcessorValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextPreProcessor", function() { return TextPreProcessor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionTextProcessor", function() { return QuestionTextProcessor; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _conditionProcessValue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conditionProcessValue */ "./src/conditionProcessValue.ts");


var TextPreProcessorItem = /** @class */ (function () {
    function TextPreProcessorItem() {
    }
    return TextPreProcessorItem;
}());

var TextPreProcessorValue = /** @class */ (function () {
    function TextPreProcessorValue(name, returnDisplayValue) {
        this.name = name;
        this.returnDisplayValue = returnDisplayValue;
        this.isExists = false;
        this.canProcess = true;
    }
    return TextPreProcessorValue;
}());

var TextPreProcessor = /** @class */ (function () {
    function TextPreProcessor() {
        this._unObservableValues = [undefined];
    }
    Object.defineProperty(TextPreProcessor.prototype, "hasAllValuesOnLastRunValue", {
        get: function () {
            return this._unObservableValues[0];
        },
        set: function (val) {
            this._unObservableValues[0] = val;
        },
        enumerable: false,
        configurable: true
    });
    TextPreProcessor.prototype.process = function (text, returnDisplayValue, doEncoding) {
        if (returnDisplayValue === void 0) { returnDisplayValue = false; }
        if (doEncoding === void 0) { doEncoding = false; }
        this.hasAllValuesOnLastRunValue = true;
        if (!text)
            return text;
        if (!this.onProcess)
            return text;
        var items = this.getItems(text);
        for (var i = items.length - 1; i >= 0; i--) {
            var item = items[i];
            var name = this.getName(text.substring(item.start + 1, item.end));
            if (!name)
                continue;
            var textValue = new TextPreProcessorValue(name, returnDisplayValue);
            this.onProcess(textValue);
            if (!textValue.isExists) {
                if (textValue.canProcess) {
                    this.hasAllValuesOnLastRunValue = false;
                }
                continue;
            }
            if (_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(textValue.value)) {
                this.hasAllValuesOnLastRunValue = false;
            }
            var replacedValue = !_helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].isValueEmpty(textValue.value)
                ? textValue.value
                : "";
            if (doEncoding) {
                replacedValue = encodeURIComponent(replacedValue);
            }
            text =
                text.substring(0, item.start) + replacedValue + text.substring(item.end + 1);
        }
        return text;
    };
    TextPreProcessor.prototype.processValue = function (name, returnDisplayValue) {
        var textValue = new TextPreProcessorValue(name, returnDisplayValue);
        if (!!this.onProcess) {
            this.onProcess(textValue);
        }
        return textValue;
    };
    Object.defineProperty(TextPreProcessor.prototype, "hasAllValuesOnLastRun", {
        get: function () {
            return !!this.hasAllValuesOnLastRunValue;
        },
        enumerable: false,
        configurable: true
    });
    TextPreProcessor.prototype.getItems = function (text) {
        var items = [];
        var length = text.length;
        var start = -1;
        var ch = "";
        for (var i = 0; i < length; i++) {
            ch = text[i];
            if (ch == "{")
                start = i;
            if (ch == "}") {
                if (start > -1) {
                    var item = new TextPreProcessorItem();
                    item.start = start;
                    item.end = i;
                    items.push(item);
                }
                start = -1;
            }
        }
        return items;
    };
    TextPreProcessor.prototype.getName = function (name) {
        if (!name)
            return;
        return name.trim();
    };
    return TextPreProcessor;
}());

var QuestionTextProcessor = /** @class */ (function () {
    function QuestionTextProcessor(variableName) {
        var _this = this;
        this.variableName = variableName;
        this.textPreProcessor = new TextPreProcessor();
        this.textPreProcessor.onProcess = function (textValue) {
            _this.getProcessedTextValue(textValue);
        };
    }
    QuestionTextProcessor.prototype.processValue = function (name, returnDisplayValue) {
        return this.textPreProcessor.processValue(name, returnDisplayValue);
    };
    Object.defineProperty(QuestionTextProcessor.prototype, "survey", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(QuestionTextProcessor.prototype, "panel", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    QuestionTextProcessor.prototype.getValues = function () {
        return !!this.panel ? this.panel.getValue() : null;
    };
    QuestionTextProcessor.prototype.getQuestionByName = function (name) {
        return !!this.panel
            ? this.panel.getQuestionByValueName(name)
            : null;
    };
    QuestionTextProcessor.prototype.getParentTextProcessor = function () { return null; };
    QuestionTextProcessor.prototype.onCustomProcessText = function (textValue) {
        return false;
    };
    QuestionTextProcessor.prototype.getQuestionDisplayText = function (question) {
        return question.displayValue;
    };
    //ITextProcessor
    QuestionTextProcessor.prototype.getProcessedTextValue = function (textValue) {
        if (!textValue)
            return;
        if (this.onCustomProcessText(textValue))
            return;
        var firstName = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_1__["ProcessValue"]().getFirstName(textValue.name);
        textValue.isExists = firstName == this.variableName;
        textValue.canProcess = textValue.isExists;
        if (!textValue.canProcess)
            return;
        //name should start with the variable name
        textValue.name = textValue.name.replace(this.variableName + ".", "");
        var firstName = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_1__["ProcessValue"]().getFirstName(textValue.name);
        var question = this.getQuestionByName(firstName);
        var values = {};
        if (question) {
            values[firstName] = textValue.returnDisplayValue
                ? this.getQuestionDisplayText(question)
                : question.value;
        }
        else {
            var allValues = !!this.panel ? this.getValues() : null;
            if (allValues) {
                values[firstName] = allValues[firstName];
            }
        }
        textValue.value = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_1__["ProcessValue"]().getValue(textValue.name, values);
    };
    QuestionTextProcessor.prototype.processText = function (text, returnDisplayValue) {
        if (this.survey && this.survey.isDesignMode)
            return text;
        text = this.textPreProcessor.process(text, returnDisplayValue);
        text = this.processTextCore(this.getParentTextProcessor(), text, returnDisplayValue);
        return this.processTextCore(this.survey, text, returnDisplayValue);
    };
    QuestionTextProcessor.prototype.processTextEx = function (text, returnDisplayValue) {
        text = this.processText(text, returnDisplayValue);
        var hasAllValuesOnLastRun = this.textPreProcessor.hasAllValuesOnLastRun;
        var res = { hasAllValuesOnLastRun: true, text: text };
        if (this.survey) {
            res = this.survey.processTextEx(text, returnDisplayValue, false);
        }
        res.hasAllValuesOnLastRun =
            res.hasAllValuesOnLastRun && hasAllValuesOnLastRun;
        return res;
    };
    QuestionTextProcessor.prototype.processTextCore = function (textProcessor, text, returnDisplayValue) {
        if (!textProcessor)
            return text;
        return textProcessor.processText(text, returnDisplayValue);
    };
    return QuestionTextProcessor;
}());



/***/ }),

/***/ "./src/trigger.ts":
/*!************************!*\
  !*** ./src/trigger.ts ***!
  \************************/
/*! exports provided: Trigger, SurveyTrigger, SurveyTriggerVisible, SurveyTriggerComplete, SurveyTriggerSetValue, SurveyTriggerSkip, SurveyTriggerRunExpression, SurveyTriggerCopyValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Trigger", function() { return Trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTrigger", function() { return SurveyTrigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerVisible", function() { return SurveyTriggerVisible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerComplete", function() { return SurveyTriggerComplete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerSetValue", function() { return SurveyTriggerSetValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerSkip", function() { return SurveyTriggerSkip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerRunExpression", function() { return SurveyTriggerRunExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTriggerCopyValue", function() { return SurveyTriggerCopyValue; });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _expressions_expressions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./expressions/expressions */ "./src/expressions/expressions.ts");
/* harmony import */ var _conditionProcessValue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./conditionProcessValue */ "./src/conditionProcessValue.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







/**
 * A base class for all triggers.
 * A trigger calls a method when the expression change the result: from false to true or from true to false.
 * Please note, it runs only one changing the expression result.
 */
var Trigger = /** @class */ (function (_super) {
    __extends(Trigger, _super);
    function Trigger() {
        var _this = _super.call(this) || this;
        _this.usedNames = [];
        _this.registerPropertyChangedHandlers(["operator", "value", "name"], function () {
            _this.oldPropertiesChanged();
        });
        _this.registerPropertyChangedHandlers(["expression"], function () { _this.onExpressionChanged(); });
        return _this;
    }
    Object.defineProperty(Trigger, "operators", {
        get: function () {
            if (Trigger.operatorsValue != null)
                return Trigger.operatorsValue;
            Trigger.operatorsValue = {
                empty: function (value, expectedValue) {
                    return !value;
                },
                notempty: function (value, expectedValue) {
                    return !!value;
                },
                equal: function (value, expectedValue) {
                    return value == expectedValue;
                },
                notequal: function (value, expectedValue) {
                    return value != expectedValue;
                },
                contains: function (value, expectedValue) {
                    return value && value["indexOf"] && value.indexOf(expectedValue) > -1;
                },
                notcontains: function (value, expectedValue) {
                    return (!value || !value["indexOf"] || value.indexOf(expectedValue) == -1);
                },
                greater: function (value, expectedValue) {
                    return value > expectedValue;
                },
                less: function (value, expectedValue) {
                    return value < expectedValue;
                },
                greaterorequal: function (value, expectedValue) {
                    return value >= expectedValue;
                },
                lessorequal: function (value, expectedValue) {
                    return value <= expectedValue;
                },
            };
            return Trigger.operatorsValue;
        },
        enumerable: false,
        configurable: true
    });
    Trigger.prototype.getType = function () {
        return "triggerbase";
    };
    Trigger.prototype.toString = function () {
        var res = this.getType().replace("trigger", "");
        var exp = !!this.expression ? this.expression : this.buildExpression();
        if (exp) {
            res += ", " + exp;
        }
        return res;
    };
    Object.defineProperty(Trigger.prototype, "operator", {
        get: function () {
            return this.getPropertyValue("operator", "equal");
        },
        set: function (value) {
            if (!value)
                return;
            value = value.toLowerCase();
            if (!Trigger.operators[value])
                return;
            this.setPropertyValue("operator", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Trigger.prototype, "value", {
        get: function () {
            return this.getPropertyValue("value", null);
        },
        set: function (val) {
            this.setPropertyValue("value", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Trigger.prototype, "name", {
        get: function () {
            return this.getPropertyValue("name", "");
        },
        set: function (val) {
            this.setPropertyValue("name", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Trigger.prototype, "expression", {
        get: function () {
            return this.getPropertyValue("expression", "");
        },
        set: function (val) {
            this.setPropertyValue("expression", val);
        },
        enumerable: false,
        configurable: true
    });
    Trigger.prototype.canBeExecuted = function (isOnNextPage) {
        return true;
    };
    Trigger.prototype.checkExpression = function (isOnNextPage, keys, values, properties) {
        if (properties === void 0) { properties = null; }
        this.isExecutingOnNextPage = isOnNextPage;
        if (!this.canBeExecuted(isOnNextPage))
            return;
        if (!this.isCheckRequired(keys))
            return;
        if (!!this.conditionRunner) {
            this.perform(values, properties);
        }
    };
    Trigger.prototype.check = function (value) {
        var triggerResult = Trigger.operators[this.operator](value, this.value);
        if (triggerResult) {
            this.onSuccess({}, null);
        }
        else {
            this.onFailure();
        }
    };
    Trigger.prototype.perform = function (values, properties) {
        var _this = this;
        this.conditionRunner.onRunComplete = function (res) {
            _this.triggerResult(res, values, properties);
        };
        this.conditionRunner.run(values, properties);
    };
    Trigger.prototype.triggerResult = function (res, values, properties) {
        if (res) {
            this.onSuccess(values, properties);
            this.onSuccessExecuted();
        }
        else {
            this.onFailure();
        }
    };
    Trigger.prototype.onSuccess = function (values, properties) { };
    Trigger.prototype.onFailure = function () { };
    Trigger.prototype.onSuccessExecuted = function () { };
    Trigger.prototype.endLoadingFromJson = function () {
        _super.prototype.endLoadingFromJson.call(this);
        this.oldPropertiesChanged();
    };
    Trigger.prototype.oldPropertiesChanged = function () {
        this.onExpressionChanged();
    };
    Trigger.prototype.onExpressionChanged = function () {
        this.usedNames = [];
        this.hasFunction = false;
        this.conditionRunner = null;
    };
    Trigger.prototype.buildExpression = function () {
        if (!this.name)
            return "";
        if (this.isValueEmpty(this.value) && this.isRequireValue)
            return "";
        return ("{" +
            this.name +
            "} " +
            this.operator +
            " " +
            _expressions_expressions__WEBPACK_IMPORTED_MODULE_4__["OperandMaker"].toOperandString(this.value));
    };
    Trigger.prototype.isCheckRequired = function (keys) {
        if (!keys)
            return false;
        this.buildUsedNames();
        if (this.hasFunction === true)
            return true;
        var processValue = new _conditionProcessValue__WEBPACK_IMPORTED_MODULE_5__["ProcessValue"]();
        for (var i = 0; i < this.usedNames.length; i++) {
            var name = this.usedNames[i];
            if (keys.hasOwnProperty(name))
                return true;
            var firstName = processValue.getFirstName(name);
            if (!keys.hasOwnProperty(firstName))
                continue;
            if (name == firstName)
                return true;
            var keyValue = keys[firstName];
            if (keyValue == undefined)
                continue;
            if (!keyValue.hasOwnProperty("oldValue") ||
                !keyValue.hasOwnProperty("newValue"))
                return true;
            var v = {};
            v[firstName] = keyValue["oldValue"];
            var oldValue = processValue.getValue(name, v);
            v[firstName] = keyValue["newValue"];
            var newValue = processValue.getValue(name, v);
            return !this.isTwoValueEquals(oldValue, newValue);
        }
        return false;
    };
    Trigger.prototype.buildUsedNames = function () {
        if (!!this.conditionRunner)
            return;
        var expression = this.expression;
        if (!expression) {
            expression = this.buildExpression();
        }
        if (!expression)
            return;
        this.conditionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_3__["ConditionRunner"](expression);
        this.hasFunction = this.conditionRunner.hasFunction();
        this.usedNames = this.conditionRunner.getVariables();
    };
    Object.defineProperty(Trigger.prototype, "isRequireValue", {
        get: function () {
            return this.operator !== "empty" && this.operator != "notempty";
        },
        enumerable: false,
        configurable: true
    });
    Trigger.operatorsValue = null;
    return Trigger;
}(_base__WEBPACK_IMPORTED_MODULE_1__["Base"]));

/**
 * It extends the Trigger base class and add properties required for SurveyJS classes.
 */
var SurveyTrigger = /** @class */ (function (_super) {
    __extends(SurveyTrigger, _super);
    function SurveyTrigger() {
        var _this = _super.call(this) || this;
        _this.ownerValue = null;
        return _this;
    }
    Object.defineProperty(SurveyTrigger.prototype, "owner", {
        get: function () {
            return this.ownerValue;
        },
        enumerable: false,
        configurable: true
    });
    SurveyTrigger.prototype.setOwner = function (owner) {
        this.ownerValue = owner;
    };
    SurveyTrigger.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        return !!this.owner && !!this.owner["getSurvey"]
            ? this.owner.getSurvey()
            : null;
    };
    SurveyTrigger.prototype.isRealExecution = function () {
        return true;
    };
    SurveyTrigger.prototype.onSuccessExecuted = function () {
        if (!!this.owner && this.isRealExecution()) {
            this.owner.triggerExecuted(this);
        }
    };
    return SurveyTrigger;
}(Trigger));

/**
 * If expression returns true, it makes questions/pages visible.
 * Ohterwise it makes them invisible.
 */
var SurveyTriggerVisible = /** @class */ (function (_super) {
    __extends(SurveyTriggerVisible, _super);
    function SurveyTriggerVisible() {
        var _this = _super.call(this) || this;
        _this.pages = [];
        _this.questions = [];
        return _this;
    }
    SurveyTriggerVisible.prototype.getType = function () {
        return "visibletrigger";
    };
    SurveyTriggerVisible.prototype.onSuccess = function (values, properties) {
        this.onTrigger(this.onItemSuccess);
    };
    SurveyTriggerVisible.prototype.onFailure = function () {
        this.onTrigger(this.onItemFailure);
    };
    SurveyTriggerVisible.prototype.onTrigger = function (func) {
        if (!this.owner)
            return;
        var objects = this.owner.getObjects(this.pages, this.questions);
        for (var i = 0; i < objects.length; i++) {
            func(objects[i]);
        }
    };
    SurveyTriggerVisible.prototype.onItemSuccess = function (item) {
        item.visible = true;
    };
    SurveyTriggerVisible.prototype.onItemFailure = function (item) {
        item.visible = false;
    };
    return SurveyTriggerVisible;
}(SurveyTrigger));

/**
 * If expression returns true, it completes the survey.
 */
var SurveyTriggerComplete = /** @class */ (function (_super) {
    __extends(SurveyTriggerComplete, _super);
    function SurveyTriggerComplete() {
        return _super.call(this) || this;
    }
    SurveyTriggerComplete.prototype.getType = function () {
        return "completetrigger";
    };
    SurveyTriggerComplete.prototype.isRealExecution = function () {
        return !_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].executeCompleteTriggerOnValueChanged === this.isExecutingOnNextPage;
    };
    SurveyTriggerComplete.prototype.onSuccess = function (values, properties) {
        if (!this.owner)
            return;
        if (this.isRealExecution()) {
            this.owner.setCompleted();
        }
        else {
            this.owner.canBeCompleted();
        }
    };
    return SurveyTriggerComplete;
}(SurveyTrigger));

/**
 * If expression returns true, the value from property **setValue** will be set to **setToName**
 */
var SurveyTriggerSetValue = /** @class */ (function (_super) {
    __extends(SurveyTriggerSetValue, _super);
    function SurveyTriggerSetValue() {
        return _super.call(this) || this;
    }
    SurveyTriggerSetValue.prototype.getType = function () {
        return "setvaluetrigger";
    };
    SurveyTriggerSetValue.prototype.canBeExecuted = function (isOnNextPage) {
        return !isOnNextPage && !!this.setToName;
    };
    SurveyTriggerSetValue.prototype.onPropertyValueChanged = function (name, oldValue, newValue) {
        _super.prototype.onPropertyValueChanged.call(this, name, oldValue, newValue);
        if (name !== "setToName")
            return;
        var survey = this.getSurvey();
        if (survey && !survey.isLoadingFromJson && survey.isDesignMode) {
            this.setValue = undefined;
        }
    };
    Object.defineProperty(SurveyTriggerSetValue.prototype, "setToName", {
        get: function () {
            return this.getPropertyValue("setToName", "");
        },
        set: function (val) {
            this.setPropertyValue("setToName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTriggerSetValue.prototype, "setValue", {
        get: function () {
            return this.getPropertyValue("setValue");
        },
        set: function (val) {
            this.setPropertyValue("setValue", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTriggerSetValue.prototype, "isVariable", {
        get: function () {
            return this.getPropertyValue("isVariable", false);
        },
        set: function (val) {
            this.setPropertyValue("isVariable", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyTriggerSetValue.prototype.onSuccess = function (values, properties) {
        if (!this.setToName || !this.owner)
            return;
        this.owner.setTriggerValue(this.setToName, this.setValue, this.isVariable);
    };
    return SurveyTriggerSetValue;
}(SurveyTrigger));

/**
 * If expression returns true, the survey go to question **gotoName** and focus it.
 */
var SurveyTriggerSkip = /** @class */ (function (_super) {
    __extends(SurveyTriggerSkip, _super);
    function SurveyTriggerSkip() {
        return _super.call(this) || this;
    }
    SurveyTriggerSkip.prototype.getType = function () {
        return "skiptrigger";
    };
    Object.defineProperty(SurveyTriggerSkip.prototype, "gotoName", {
        get: function () {
            return this.getPropertyValue("gotoName", "");
        },
        set: function (val) {
            this.setPropertyValue("gotoName", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyTriggerSkip.prototype.canBeExecuted = function (isOnNextPage) {
        return isOnNextPage === !_settings__WEBPACK_IMPORTED_MODULE_6__["settings"].executeSkipTriggerOnValueChanged;
    };
    SurveyTriggerSkip.prototype.onSuccess = function (values, properties) {
        if (!this.gotoName || !this.owner)
            return;
        this.owner.focusQuestion(this.gotoName);
    };
    return SurveyTriggerSkip;
}(SurveyTrigger));

/**
 * If expression returns true, the **runExpression** will be run. If **setToName** property is not empty then the result of **runExpression** will be set to it.
 */
var SurveyTriggerRunExpression = /** @class */ (function (_super) {
    __extends(SurveyTriggerRunExpression, _super);
    function SurveyTriggerRunExpression() {
        return _super.call(this) || this;
    }
    SurveyTriggerRunExpression.prototype.getType = function () {
        return "runexpressiontrigger";
    };
    Object.defineProperty(SurveyTriggerRunExpression.prototype, "setToName", {
        get: function () {
            return this.getPropertyValue("setToName", "");
        },
        set: function (val) {
            this.setPropertyValue("setToName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTriggerRunExpression.prototype, "runExpression", {
        get: function () {
            return this.getPropertyValue("runExpression", "");
        },
        set: function (val) {
            this.setPropertyValue("runExpression", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyTriggerRunExpression.prototype.onSuccess = function (values, properties) {
        var _this = this;
        if (!this.owner || !this.runExpression)
            return;
        var expression = new _conditions__WEBPACK_IMPORTED_MODULE_3__["ExpressionRunner"](this.runExpression);
        if (expression.canRun) {
            expression.onRunComplete = function (res) {
                _this.onCompleteRunExpression(res);
            };
            expression.run(values, properties);
        }
    };
    SurveyTriggerRunExpression.prototype.onCompleteRunExpression = function (newValue) {
        if (!!this.setToName && newValue !== undefined) {
            this.owner.setTriggerValue(this.setToName, _helpers__WEBPACK_IMPORTED_MODULE_0__["Helpers"].convertValToQuestionVal(newValue), false);
        }
    };
    return SurveyTriggerRunExpression;
}(SurveyTrigger));

/**
 * If expression returns true, the value from question **fromName** will be set into **setToName**.
 */
var SurveyTriggerCopyValue = /** @class */ (function (_super) {
    __extends(SurveyTriggerCopyValue, _super);
    function SurveyTriggerCopyValue() {
        return _super.call(this) || this;
    }
    SurveyTriggerCopyValue.prototype.canBeExecuted = function (isOnNextPage) {
        return !isOnNextPage && !!this.setToName && !!this.fromName;
    };
    Object.defineProperty(SurveyTriggerCopyValue.prototype, "setToName", {
        get: function () {
            return this.getPropertyValue("setToName", "");
        },
        set: function (val) {
            this.setPropertyValue("setToName", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyTriggerCopyValue.prototype, "fromName", {
        get: function () {
            return this.getPropertyValue("fromName", "");
        },
        set: function (val) {
            this.setPropertyValue("fromName", val);
        },
        enumerable: false,
        configurable: true
    });
    SurveyTriggerCopyValue.prototype.getType = function () {
        return "copyvaluetrigger";
    };
    SurveyTriggerCopyValue.prototype.onSuccess = function (values, properties) {
        if (!this.setToName || !this.owner)
            return;
        this.owner.copyTriggerValue(this.setToName, this.fromName);
    };
    return SurveyTriggerCopyValue;
}(SurveyTrigger));

_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("trigger", [
    { name: "operator", default: "equal", visible: false },
    { name: "value", visible: false },
    "expression:condition",
]);
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("surveytrigger", [{ name: "name", visible: false }], null, "trigger");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("visibletrigger", ["pages:pages", "questions:questions"], function () {
    return new SurveyTriggerVisible();
}, "surveytrigger");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("completetrigger", [], function () {
    return new SurveyTriggerComplete();
}, "surveytrigger");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("setvaluetrigger", [
    { name: "!setToName:questionvalue" },
    {
        name: "setValue:triggervalue",
        dependsOn: "setToName",
        visibleIf: function (obj) {
            return !!obj && !!obj["setToName"];
        },
    },
    { name: "isVariable:boolean", visible: false },
], function () {
    return new SurveyTriggerSetValue();
}, "surveytrigger");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("copyvaluetrigger", [{ name: "!fromName:questionvalue" }, { name: "!setToName:questionvalue" }], function () {
    return new SurveyTriggerCopyValue();
}, "surveytrigger");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("skiptrigger", [{ name: "!gotoName:question" }], function () {
    return new SurveyTriggerSkip();
}, "surveytrigger");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("runexpressiontrigger", [{ name: "setToName:questionvalue" }, "runExpression:expression"], function () {
    return new SurveyTriggerRunExpression();
}, "surveytrigger");


/***/ }),

/***/ "./src/utils/cssClassBuilder.ts":
/*!**************************************!*\
  !*** ./src/utils/cssClassBuilder.ts ***!
  \**************************************/
/*! exports provided: CssClassBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CssClassBuilder", function() { return CssClassBuilder; });
var CssClassBuilder = /** @class */ (function () {
    function CssClassBuilder() {
        this.classes = [];
    }
    CssClassBuilder.prototype.isEmpty = function () {
        return this.toString() === "";
    };
    CssClassBuilder.prototype.append = function (value, condition) {
        if (condition === void 0) { condition = true; }
        if (!!value && condition) {
            if (typeof value === "string") {
                value = value.trim();
            }
            this.classes.push(value);
        }
        return this;
    };
    CssClassBuilder.prototype.toString = function () {
        return this.classes.join(" ");
    };
    return CssClassBuilder;
}());



/***/ }),

/***/ "./src/utils/devices.ts":
/*!******************************!*\
  !*** ./src/utils/devices.ts ***!
  \******************************/
/*! exports provided: IsMobile, IsTouch, _setIsTouch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsMobile", function() { return IsMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsTouch", function() { return IsTouch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_setIsTouch", function() { return _setIsTouch; });
// isMobile
var _isMobile = false;
var vendor = null;
if (typeof navigator !== "undefined" &&
    typeof window !== "undefined" &&
    navigator &&
    window) {
    vendor = navigator.userAgent || navigator.vendor || window.opera;
}
(function (a) {
    if (!a)
        return;
    if ((navigator.platform === "MacIntel" && navigator.maxTouchPoints > 0) || navigator.platform === "iPad") {
        _isMobile = true;
    }
    else if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) ||
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substring(0, 4)))
        _isMobile = true;
})(vendor);
var _IPad = false;
var IsMobile = _isMobile || _IPad;
// isTouch
var _isTouch = false;
if (typeof window !== "undefined") {
    _isTouch = "ontouchstart" in window || navigator.maxTouchPoints > 0;
}
var IsTouch = IsMobile && _isTouch;
//for tests
function _setIsTouch(val) {
    IsTouch = val;
}


/***/ }),

/***/ "./src/utils/dragOrClickHelper.ts":
/*!****************************************!*\
  !*** ./src/utils/dragOrClickHelper.ts ***!
  \****************************************/
/*! exports provided: DragOrClickHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragOrClickHelper", function() { return DragOrClickHelper; });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "./src/entries/core.ts");

var DragOrClickHelper = /** @class */ (function () {
    function DragOrClickHelper(dragHandler) {
        var _this = this;
        this.dragHandler = dragHandler;
        this.onPointerUp = function (pointerUpEvent) {
            _this.clearListeners();
        };
        this.tryToStartDrag = function (pointerMoveEvent) {
            _this.currentX = pointerMoveEvent.pageX;
            _this.currentY = pointerMoveEvent.pageY;
            if (_this.isMicroMovement)
                return;
            _this.clearListeners();
            _this.dragHandler(_this.pointerDownEvent, _this.currentTarget, _this.itemModel);
            return true;
        };
    }
    DragOrClickHelper.prototype.onPointerDown = function (pointerDownEvent, itemModel) {
        if (survey_core__WEBPACK_IMPORTED_MODULE_0__["IsTouch"]) {
            this.dragHandler(pointerDownEvent, pointerDownEvent.currentTarget, itemModel); //TODO handle inside in the library's drag drop core, need refactoring
            return;
        }
        this.pointerDownEvent = pointerDownEvent;
        this.currentTarget = pointerDownEvent.currentTarget;
        this.startX = pointerDownEvent.pageX;
        this.startY = pointerDownEvent.pageY;
        document.addEventListener("pointermove", this.tryToStartDrag);
        this.currentTarget.addEventListener("pointerup", this.onPointerUp);
        this.itemModel = itemModel;
    };
    Object.defineProperty(DragOrClickHelper.prototype, "isMicroMovement", {
        // see https://stackoverflow.com/questions/6042202/how-to-distinguish-mouse-click-and-drag
        get: function () {
            var delta = 10;
            var diffX = Math.abs(this.currentX - this.startX);
            var diffY = Math.abs(this.currentY - this.startY);
            return diffX < delta && diffY < delta;
        },
        enumerable: false,
        configurable: true
    });
    DragOrClickHelper.prototype.clearListeners = function () {
        if (!this.pointerDownEvent)
            return;
        document.removeEventListener("pointermove", this.tryToStartDrag);
        this.currentTarget.removeEventListener("pointerup", this.onPointerUp);
    };
    return DragOrClickHelper;
}());



/***/ }),

/***/ "./src/utils/popup.ts":
/*!****************************!*\
  !*** ./src/utils/popup.ts ***!
  \****************************/
/*! exports provided: PopupUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupUtils", function() { return PopupUtils; });
var PopupUtils = /** @class */ (function () {
    function PopupUtils() {
    }
    PopupUtils.calculatePosition = function (targetRect, height, width, verticalPosition, horizontalPosition, showPointer, positionMode) {
        if (positionMode === void 0) { positionMode = "flex"; }
        var currentLeft = targetRect.left;
        var currentTop = targetRect.top;
        if (positionMode === "flex") {
            if (horizontalPosition == "center")
                currentLeft = (targetRect.left + targetRect.right - width) / 2;
            else if (horizontalPosition == "left")
                currentLeft = targetRect.left - width;
            else
                currentLeft = targetRect.right;
        }
        if (verticalPosition == "middle")
            currentTop = (targetRect.top + targetRect.bottom - height) / 2;
        else if (verticalPosition == "top")
            currentTop = targetRect.top - height;
        else
            currentTop = targetRect.bottom;
        if (showPointer) {
            if (horizontalPosition != "center" && verticalPosition != "middle") {
                if (verticalPosition == "top") {
                    currentTop = currentTop + targetRect.height;
                }
                else {
                    currentTop = currentTop - targetRect.height;
                }
            }
        }
        return { left: Math.round(currentLeft), top: Math.round(currentTop) };
    };
    PopupUtils.updateVerticalDimensions = function (top, height, windowHeight) {
        var result;
        if (top < 0) {
            result = { height: height + top, top: 0 };
        }
        else if (height + top > windowHeight) {
            var newHeight = Math.min(height, windowHeight - top - PopupUtils.bottomIndent);
            result = { height: newHeight, top: top };
        }
        return result;
    };
    PopupUtils.updateHorizontalDimensions = function (left, width, windowWidth, horizontalPosition, positionMode, margins) {
        if (positionMode === void 0) { positionMode = "flex"; }
        if (margins === void 0) { margins = { left: 0, right: 0 }; }
        width += (margins.left + margins.right);
        var newWidth = undefined, newLeft = left;
        if (horizontalPosition === "center") {
            if (positionMode === "fixed") {
                if (left + width > windowWidth) {
                    newWidth = windowWidth - left;
                }
                newLeft -= margins.left;
            }
            else {
                if (left < 0) {
                    newLeft = margins.left;
                    newWidth = Math.min(width, windowWidth);
                }
                else if (width + left > windowWidth) {
                    newLeft = windowWidth - width;
                    newLeft = Math.max(newLeft, margins.left);
                    newWidth = Math.min(width, windowWidth);
                }
            }
        }
        if (horizontalPosition === "left") {
            if (left < 0) {
                newLeft = margins.left;
                newWidth = Math.min(width, windowWidth);
            }
        }
        if (horizontalPosition === "right") {
            if (width + left > windowWidth) {
                newWidth = windowWidth - left;
            }
        }
        return { width: newWidth - margins.left - margins.right, left: newLeft };
    };
    PopupUtils.updateVerticalPosition = function (targetRect, height, verticalPosition, showPointer, windowHeight) {
        var deltaTop = height - (targetRect.top + (showPointer ? targetRect.height : 0));
        var deltaBottom = height +
            targetRect.bottom -
            (showPointer ? targetRect.height : 0) -
            windowHeight;
        if (deltaTop > 0 && deltaBottom <= 0 && verticalPosition == "top") {
            verticalPosition = "bottom";
        }
        else if (deltaBottom > 0 &&
            deltaTop <= 0 &&
            verticalPosition == "bottom") {
            verticalPosition = "top";
        }
        else if (deltaBottom > 0 && deltaTop > 0) {
            verticalPosition = deltaTop < deltaBottom ? "top" : "bottom";
        }
        return verticalPosition;
    };
    PopupUtils.calculatePopupDirection = function (verticalPosition, horizontalPosition) {
        var popupDirection;
        if (horizontalPosition == "center" && verticalPosition != "middle") {
            popupDirection = verticalPosition;
        }
        else if (horizontalPosition != "center") {
            popupDirection = horizontalPosition;
        }
        return popupDirection;
    };
    //called when showPointer  is true
    PopupUtils.calculatePointerTarget = function (targetRect, top, left, verticalPosition, horizontalPosition, marginLeft, marginRight) {
        if (marginLeft === void 0) { marginLeft = 0; }
        if (marginRight === void 0) { marginRight = 0; }
        var targetPos = {};
        if (horizontalPosition != "center") {
            targetPos.top = targetRect.top + targetRect.height / 2;
            targetPos.left = targetRect[horizontalPosition];
        }
        else if (verticalPosition != "middle") {
            targetPos.top = targetRect[verticalPosition];
            targetPos.left = targetRect.left + targetRect.width / 2;
        }
        targetPos.left = Math.round(targetPos.left - left);
        targetPos.top = Math.round(targetPos.top - top);
        if (horizontalPosition == "left") {
            targetPos.left -= marginLeft + marginRight;
        }
        if (horizontalPosition === "center") {
            targetPos.left -= marginLeft;
        }
        return targetPos;
    };
    PopupUtils.bottomIndent = 16;
    return PopupUtils;
}());



/***/ }),

/***/ "./src/utils/responsivity-manager.ts":
/*!*******************************************!*\
  !*** ./src/utils/responsivity-manager.ts ***!
  \*******************************************/
/*! exports provided: ResponsivityManager, VerticalResponsivityManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResponsivityManager", function() { return ResponsivityManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VerticalResponsivityManager", function() { return VerticalResponsivityManager; });
/* harmony import */ var timers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! timers */ "./node_modules/timers-browserify/main.js");
/* harmony import */ var timers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(timers__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils/utils.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ResponsivityManager = /** @class */ (function () {
    function ResponsivityManager(container, model, itemsSelector, dotsItemSize) {
        var _this = this;
        if (dotsItemSize === void 0) { dotsItemSize = null; }
        this.container = container;
        this.model = model;
        this.itemsSelector = itemsSelector;
        this.dotsItemSize = dotsItemSize;
        this.resizeObserver = undefined;
        this.isInitialized = false;
        this.minDimensionConst = 56;
        this.separatorSize = 17;
        this.separatorAddConst = 1;
        this.paddingSizeConst = 8;
        this.dotsSizeConst = 48;
        this.recalcMinDimensionConst = true;
        this.getComputedStyle = window.getComputedStyle.bind(window);
        this.model.updateCallback = function (isResetInitialized) {
            if (isResetInitialized)
                _this.isInitialized = false;
            else
                Object(timers__WEBPACK_IMPORTED_MODULE_0__["setTimeout"])(function () { _this.process(); }, 1);
        };
        if (typeof ResizeObserver !== "undefined") {
            this.resizeObserver = new ResizeObserver(function (_) { return _this.process(); });
            this.resizeObserver.observe(this.container.parentElement);
        }
    }
    ResponsivityManager.prototype.getDimensions = function (element) {
        return {
            scroll: element.scrollWidth,
            offset: element.offsetWidth,
        };
    };
    ResponsivityManager.prototype.getAvailableSpace = function () {
        var style = this.getComputedStyle(this.container);
        var space = this.container.offsetWidth;
        if (style.boxSizing === "border-box") {
            space -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        }
        return space;
    };
    ResponsivityManager.prototype.calcItemSize = function (item) {
        return item.offsetWidth;
    };
    ResponsivityManager.prototype.calcMinDimension = function (currentAction) {
        var minDimensionConst = this.minDimensionConst;
        if (currentAction.iconSize && this.recalcMinDimensionConst) {
            minDimensionConst = 2 * currentAction.iconSize + this.paddingSizeConst;
        }
        return currentAction.canShrink
            ? minDimensionConst +
                (currentAction.needSeparator ? this.separatorSize : 0)
            : currentAction.maxDimension;
    };
    ResponsivityManager.prototype.calcItemsSizes = function () {
        var _this = this;
        var actions = this.model.actions;
        this.container
            .querySelectorAll(this.itemsSelector)
            .forEach(function (item, index) {
            var currentAction = actions[index];
            _this.calcActionDimensions(currentAction, item);
        });
    };
    ResponsivityManager.prototype.calcActionDimensions = function (currentAction, item) {
        currentAction.maxDimension = this.calcItemSize(item);
        currentAction.minDimension = this.calcMinDimension(currentAction);
    };
    Object.defineProperty(ResponsivityManager.prototype, "isContainerVisible", {
        get: function () {
            return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["isContainerVisible"])(this.container);
        },
        enumerable: false,
        configurable: true
    });
    ResponsivityManager.prototype.process = function () {
        var _a;
        if (this.isContainerVisible && !this.model.isResponsivenessDisabled) {
            if (!this.isInitialized) {
                this.model.setActionsMode("large");
                this.calcItemsSizes();
                this.isInitialized = true;
            }
            var dotsItemSize = this.dotsItemSize;
            if (!this.dotsItemSize) {
                var dotsItemElement = (_a = this.container) === null || _a === void 0 ? void 0 : _a.querySelector(".sv-dots");
                dotsItemSize = dotsItemElement && this.calcItemSize(dotsItemElement) || this.dotsSizeConst;
            }
            this.model.fit(this.getAvailableSpace(), dotsItemSize);
        }
    };
    ResponsivityManager.prototype.dispose = function () {
        this.model.updateCallback = undefined;
        if (!!this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    };
    return ResponsivityManager;
}());

var VerticalResponsivityManager = /** @class */ (function (_super) {
    __extends(VerticalResponsivityManager, _super);
    function VerticalResponsivityManager(container, model, itemsSelector, dotsItemSize, minDimension) {
        if (minDimension === void 0) { minDimension = 40; }
        var _this = _super.call(this, container, model, itemsSelector, dotsItemSize) || this;
        _this.minDimensionConst = minDimension;
        _this.recalcMinDimensionConst = false;
        return _this;
    }
    VerticalResponsivityManager.prototype.getDimensions = function () {
        return {
            scroll: this.container.scrollHeight,
            offset: this.container.offsetHeight,
        };
    };
    VerticalResponsivityManager.prototype.getAvailableSpace = function () {
        var style = this.getComputedStyle(this.container);
        var space = this.container.offsetHeight;
        if (style.boxSizing === "border-box") {
            space -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
        }
        return space;
    };
    VerticalResponsivityManager.prototype.calcItemSize = function (item) {
        return item.offsetHeight;
    };
    VerticalResponsivityManager.prototype.calcActionDimensions = function (currentAction, item) {
        currentAction.maxDimension = this.calcItemSize(item);
        currentAction.minDimension = this.calcItemSize(item);
    };
    return VerticalResponsivityManager;
}(ResponsivityManager));



/***/ }),

/***/ "./src/utils/tooltip.ts":
/*!******************************!*\
  !*** ./src/utils/tooltip.ts ***!
  \******************************/
/*! exports provided: TooltipManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooltipManager", function() { return TooltipManager; });
var TooltipManager = /** @class */ (function () {
    function TooltipManager(tooltipElement) {
        var _this = this;
        this.tooltipElement = tooltipElement;
        this.onMouseMoveCallback = function (e) {
            _this.tooltipElement.style.left = e.clientX + 12 + "px";
            _this.tooltipElement.style.top = e.clientY + 12 + "px";
        };
        this.targetElement = tooltipElement.parentElement;
        this.targetElement.addEventListener("mousemove", this.onMouseMoveCallback);
    }
    TooltipManager.prototype.dispose = function () {
        this.targetElement.removeEventListener("mousemove", this.onMouseMoveCallback);
    };
    return TooltipManager;
}());



/***/ }),

/***/ "./src/utils/utils.ts":
/*!****************************!*\
  !*** ./src/utils/utils.ts ***!
  \****************************/
/*! exports provided: unwrap, getSize, doKey2ClickBlur, doKey2ClickUp, doKey2ClickDown, sanitizeEditableContent, Logger, mergeValues, getElementWidth, isContainerVisible, classesToSelector, compareVersions, confirmAction, detectIEOrEdge, detectIEBrowser, loadFileFromBase64, isMobile, isElementVisible, findScrollableParent, scrollElementByChildId, navigateToUrl, createSvg, getIconNameFromProxy, increaseHeightByContent, getOriginalEvent, preventDefaults, findParentByClassNames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return unwrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSize", function() { return getSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickBlur", function() { return doKey2ClickBlur; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickUp", function() { return doKey2ClickUp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doKey2ClickDown", function() { return doKey2ClickDown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sanitizeEditableContent", function() { return sanitizeEditableContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeValues", function() { return mergeValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementWidth", function() { return getElementWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isContainerVisible", function() { return isContainerVisible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classesToSelector", function() { return classesToSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareVersions", function() { return compareVersions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirmAction", function() { return confirmAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detectIEOrEdge", function() { return detectIEOrEdge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detectIEBrowser", function() { return detectIEBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadFileFromBase64", function() { return loadFileFromBase64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMobile", function() { return isMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isElementVisible", function() { return isElementVisible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findScrollableParent", function() { return findScrollableParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollElementByChildId", function() { return scrollElementByChildId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "navigateToUrl", function() { return navigateToUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSvg", function() { return createSvg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIconNameFromProxy", function() { return getIconNameFromProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "increaseHeightByContent", function() { return increaseHeightByContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOriginalEvent", function() { return getOriginalEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventDefaults", function() { return preventDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findParentByClassNames", function() { return findParentByClassNames; });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ "./src/settings.ts");

function compareVersions(a, b) {
    var regExStrip0 = /(\.0+)+$/;
    var segmentsA = a.replace(regExStrip0, "").split(".");
    var segmentsB = b.replace(regExStrip0, "").split(".");
    var len = Math.min(segmentsA.length, segmentsB.length);
    for (var i = 0; i < len; i++) {
        var diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
        if (diff) {
            return diff;
        }
    }
    return segmentsA.length - segmentsB.length;
}
function confirmAction(message) {
    if (!!_settings__WEBPACK_IMPORTED_MODULE_0__["settings"] && !!_settings__WEBPACK_IMPORTED_MODULE_0__["settings"].confirmActionFunc)
        return _settings__WEBPACK_IMPORTED_MODULE_0__["settings"].confirmActionFunc(message);
    return confirm(message);
}
function detectIEBrowser() {
    if (typeof window === "undefined")
        return false;
    var ua = window.navigator.userAgent;
    var oldIe = ua.indexOf("MSIE ");
    var elevenIe = ua.indexOf("Trident/");
    return oldIe > -1 || elevenIe > -1;
}
function detectIEOrEdge() {
    if (typeof window === "undefined")
        return false;
    if (typeof detectIEOrEdge.isIEOrEdge === "undefined") {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        var trident = ua.indexOf("Trident/");
        var edge = ua.indexOf("Edge/");
        detectIEOrEdge.isIEOrEdge = edge > 0 || trident > 0 || msie > 0;
    }
    return detectIEOrEdge.isIEOrEdge;
}
function loadFileFromBase64(b64Data, fileName) {
    try {
        var byteString = atob(b64Data.split(",")[1]);
        // separate out the mime component
        var mimeString = b64Data
            .split(",")[0]
            .split(":")[1]
            .split(";")[0];
        // write the bytes of the string to an ArrayBuffer
        var ab = new ArrayBuffer(byteString.length);
        var ia = new Uint8Array(ab);
        for (var i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        // write the ArrayBuffer to a blob, and you're done
        var bb = new Blob([ab], { type: mimeString });
        if (typeof window !== "undefined" &&
            window.navigator &&
            window.navigator["msSaveBlob"]) {
            window.navigator["msSaveOrOpenBlob"](bb, fileName);
        }
    }
    catch (err) { }
}
function isMobile() {
    return (typeof window !== "undefined" && typeof window.orientation !== "undefined");
}
function isElementVisible(element, threshold) {
    if (threshold === void 0) { threshold = 0; }
    if (typeof document === "undefined") {
        return false;
    }
    var elementRect = element.getBoundingClientRect();
    var viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
    var topWin = -threshold;
    var bottomWin = viewHeight + threshold;
    var topEl = elementRect.top;
    var bottomEl = elementRect.bottom;
    var maxTop = Math.max(topWin, topEl);
    var minBottom = Math.min(bottomWin, bottomEl);
    return maxTop <= minBottom;
}
function findScrollableParent(element) {
    if (!element) {
        return document.documentElement;
    }
    if (element.scrollHeight > element.clientHeight &&
        (getComputedStyle(element).overflowY === "scroll" ||
            getComputedStyle(element).overflowY === "auto")) {
        return element;
    }
    if (element.scrollWidth > element.clientWidth &&
        (getComputedStyle(element).overflowX === "scroll" ||
            getComputedStyle(element).overflowX === "auto")) {
        return element;
    }
    return findScrollableParent(element.parentElement);
}
function scrollElementByChildId(id) {
    if (!document)
        return;
    var el = document.getElementById(id);
    if (!el)
        return;
    var scrollableEl = findScrollableParent(el);
    if (!!scrollableEl) {
        scrollableEl.dispatchEvent(new CustomEvent("scroll"));
    }
}
function navigateToUrl(url) {
    if (!url || typeof window === "undefined" || !window.location)
        return;
    window.location.href = url;
}
function getIconNameFromProxy(iconName) {
    if (!iconName)
        return iconName;
    var proxyName = _settings__WEBPACK_IMPORTED_MODULE_0__["settings"].customIcons[iconName];
    return !!proxyName ? proxyName : iconName;
}
function createSvg(size, width, height, iconName, svgElem, title) {
    if (!svgElem)
        return;
    if (size !== "auto") {
        svgElem.style.width = (size || width || 16) + "px";
        svgElem.style.height = (size || height || 16) + "px";
    }
    var node = svgElem.childNodes[0];
    var realIconName = getIconNameFromProxy(iconName);
    node.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + realIconName);
    var titleElement = svgElem.getElementsByTagName("title")[0];
    if (!title) {
        if (!!titleElement) {
            svgElem.removeChild(titleElement);
        }
        return;
    }
    else {
        if (!titleElement) {
            titleElement = document.createElementNS("http://www.w3.org/2000/svg", "title");
            svgElem.appendChild(titleElement);
        }
    }
    titleElement.textContent = title;
}
function unwrap(value) {
    if (typeof value !== "function") {
        return value;
    }
    else {
        return value();
    }
}
function getSize(value) {
    if (typeof value === "number") {
        return "" + value + "px";
    }
    if (!!value && typeof value === "string" && value.length > 0) {
        var lastSymbol = value[value.length - 1];
        if ((lastSymbol >= "0" && lastSymbol <= "9") || lastSymbol == ".") {
            try {
                var num = parseFloat(value);
                return "" + num + "px";
            }
            catch (_a) { }
        }
    }
    return value;
}
var keyFocusedClassName = "sv-focused--by-key";
function doKey2ClickBlur(evt) {
    var element = evt.target;
    if (!element || !element.classList)
        return;
    element.classList.remove(keyFocusedClassName);
}
function doKey2ClickUp(evt, options) {
    if (!!evt.target && evt.target["contentEditable"] === "true") {
        return;
    }
    var element = evt.target;
    if (!element)
        return;
    var char = evt.which || evt.keyCode;
    if (char === 9) {
        if (!!element.classList && !element.classList.contains(keyFocusedClassName)) {
            element.classList.add(keyFocusedClassName);
        }
    }
    else if (char === 13 || char === 32) {
        if (element.click)
            element.click();
    }
    else if ((!options || options.processEsc) && char === 27) {
        if (element.blur)
            element.blur();
    }
}
function doKey2ClickDown(evt, options) {
    if (options === void 0) { options = { processEsc: true }; }
    if (!!evt.target && evt.target["contentEditable"] === "true") {
        return;
    }
    var char = evt.which || evt.keyCode;
    var supportedCodes = [13, 32];
    if (options.processEsc) {
        supportedCodes.push(27);
    }
    if (supportedCodes.indexOf(char) !== -1) {
        evt.preventDefault();
    }
}
function increaseHeightByContent(element, getComputedStyle) {
    if (!element)
        return;
    if (!getComputedStyle)
        getComputedStyle = function (elt) { return window.getComputedStyle(elt); };
    var style = getComputedStyle(element);
    element.style.height = "auto";
    element.style.height = (element.scrollHeight + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth)) + "px";
}
function getOriginalEvent(event) {
    return event.originalEvent || event;
}
function preventDefaults(event) {
    event.preventDefault();
    event.stopPropagation();
}
function classesToSelector(str) {
    var re = /\s*?([\w-]+)\s*?/g;
    return str.replace(re, ".$1");
}
function getElementWidth(el) {
    return !!getComputedStyle ? Number.parseFloat(getComputedStyle(el).width) : el.offsetWidth;
}
function isContainerVisible(el) {
    return !!(el.offsetWidth ||
        el.offsetHeight ||
        el.getClientRects().length);
}
function findParentByClassNames(element, classNames) {
    if (!!element) {
        if (classNames.every(function (className) { return !className || element.classList.contains(className); })) {
            return element;
        }
        else {
            return findParentByClassNames(element.parentElement, classNames);
        }
    }
}
function sanitizeEditableContent(element) {
    if (window.getSelection && document.createRange && element.childNodes.length > 0) {
        var selection = document.getSelection();
        var range = selection.getRangeAt(0);
        range.setStart(range.endContainer, range.endOffset);
        range.setEndAfter(element.lastChild);
        selection.removeAllRanges();
        selection.addRange(range);
        var tail_len = selection.toString().replace(/\n/g, "").length;
        element.innerText = element.innerText.replace(/\n/g, "");
        range = document.createRange();
        range.setStart(element.childNodes[0], element.innerText.length - tail_len);
        range.collapse(true);
        selection.removeAllRanges();
        selection.addRange(range);
    }
}
function mergeValues(src, dest) {
    if (!dest || !src)
        return;
    if (typeof dest !== "object")
        return;
    for (var key in src) {
        var value = src[key];
        if (value && typeof value === "object") {
            if (!dest[key] || typeof dest[key] !== "object")
                dest[key] = {};
            mergeValues(value, dest[key]);
        }
        else {
            dest[key] = value;
        }
    }
}
var Logger = /** @class */ (function () {
    function Logger() {
        this._result = "";
    }
    Logger.prototype.log = function (action) {
        this._result += "->" + action;
    };
    Object.defineProperty(Logger.prototype, "result", {
        get: function () {
            return this._result;
        },
        enumerable: false,
        configurable: true
    });
    return Logger;
}());




/***/ }),

/***/ "./src/validator.ts":
/*!**************************!*\
  !*** ./src/validator.ts ***!
  \**************************/
/*! exports provided: ValidatorResult, SurveyValidator, ValidatorRunner, NumericValidator, TextValidator, AnswerCountValidator, RegexValidator, EmailValidator, ExpressionValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidatorResult", function() { return ValidatorResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyValidator", function() { return SurveyValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidatorRunner", function() { return ValidatorRunner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumericValidator", function() { return NumericValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextValidator", function() { return TextValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnswerCountValidator", function() { return AnswerCountValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegexValidator", function() { return RegexValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmailValidator", function() { return EmailValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionValidator", function() { return ExpressionValidator; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/base.ts");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ "./src/error.ts");
/* harmony import */ var _jsonobject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonobject */ "./src/jsonobject.ts");
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conditions */ "./src/conditions.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers */ "./src/helpers.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var ValidatorResult = /** @class */ (function () {
    function ValidatorResult(value, error) {
        if (error === void 0) { error = null; }
        this.value = value;
        this.error = error;
    }
    return ValidatorResult;
}());

/**
 * Base SurveyJS validator class.
 */
var SurveyValidator = /** @class */ (function (_super) {
    __extends(SurveyValidator, _super);
    function SurveyValidator() {
        var _this = _super.call(this) || this;
        _this.createLocalizableString("text", _this, true);
        return _this;
    }
    SurveyValidator.prototype.getSurvey = function (live) {
        if (live === void 0) { live = false; }
        return !!this.errorOwner && !!this.errorOwner["getSurvey"]
            ? this.errorOwner.getSurvey()
            : null;
    };
    Object.defineProperty(SurveyValidator.prototype, "text", {
        get: function () {
            return this.getLocalizableStringText("text");
        },
        set: function (value) {
            this.setLocalizableStringText("text", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyValidator.prototype, "isValidateAllValues", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyValidator.prototype, "locText", {
        get: function () {
            return this.getLocalizableString("text");
        },
        enumerable: false,
        configurable: true
    });
    SurveyValidator.prototype.getErrorText = function (name) {
        if (this.text)
            return this.text;
        return this.getDefaultErrorText(name);
    };
    SurveyValidator.prototype.getDefaultErrorText = function (name) {
        return "";
    };
    SurveyValidator.prototype.validate = function (value, name, values, properties) {
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        return null;
    };
    Object.defineProperty(SurveyValidator.prototype, "isRunning", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SurveyValidator.prototype, "isAsync", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    SurveyValidator.prototype.getLocale = function () {
        return !!this.errorOwner ? this.errorOwner.getLocale() : "";
    };
    SurveyValidator.prototype.getMarkdownHtml = function (text, name) {
        return !!this.errorOwner
            ? this.errorOwner.getMarkdownHtml(text, name)
            : undefined;
    };
    SurveyValidator.prototype.getRenderer = function (name) {
        return !!this.errorOwner ? this.errorOwner.getRenderer(name) : null;
    };
    SurveyValidator.prototype.getRendererContext = function (locStr) {
        return !!this.errorOwner ? this.errorOwner.getRendererContext(locStr) : locStr;
    };
    SurveyValidator.prototype.getProcessedText = function (text) {
        return !!this.errorOwner ? this.errorOwner.getProcessedText(text) : text;
    };
    SurveyValidator.prototype.createCustomError = function (name) {
        var _this = this;
        var err = new _error__WEBPACK_IMPORTED_MODULE_1__["CustomError"](this.getErrorText(name), this.errorOwner);
        err.onUpdateErrorTextCallback = (function (err) { return err.text = _this.getErrorText(name); });
        return err;
    };
    SurveyValidator.prototype.toString = function () {
        var res = this.getType().replace("validator", "");
        if (!!this.text) {
            res += ", " + this.text;
        }
        return res;
    };
    return SurveyValidator;
}(_base__WEBPACK_IMPORTED_MODULE_0__["Base"]));

var ValidatorRunner = /** @class */ (function () {
    function ValidatorRunner() {
    }
    ValidatorRunner.prototype.run = function (owner) {
        var _this = this;
        var res = [];
        var values = null;
        var properties = null;
        this.prepareAsyncValidators();
        var asyncResults = [];
        var validators = owner.getValidators();
        for (var i = 0; i < validators.length; i++) {
            var validator = validators[i];
            if (!values && validator.isValidateAllValues) {
                values = owner.getDataFilteredValues();
                properties = owner.getDataFilteredProperties();
            }
            if (validator.isAsync) {
                this.asyncValidators.push(validator);
                validator.onAsyncCompleted = function (result) {
                    if (!!result && !!result.error)
                        asyncResults.push(result.error);
                    if (!_this.onAsyncCompleted)
                        return;
                    for (var i = 0; i < _this.asyncValidators.length; i++) {
                        if (_this.asyncValidators[i].isRunning)
                            return;
                    }
                    _this.onAsyncCompleted(asyncResults);
                };
            }
        }
        validators = owner.getValidators();
        for (var i = 0; i < validators.length; i++) {
            var validator = validators[i];
            var validatorResult = validator.validate(owner.validatedValue, owner.getValidatorTitle(), values, properties);
            if (!!validatorResult && !!validatorResult.error) {
                res.push(validatorResult.error);
            }
        }
        if (this.asyncValidators.length == 0 && !!this.onAsyncCompleted)
            this.onAsyncCompleted([]);
        return res;
    };
    ValidatorRunner.prototype.prepareAsyncValidators = function () {
        if (!!this.asyncValidators) {
            for (var i = 0; i < this.asyncValidators.length; i++) {
                this.asyncValidators[i].onAsyncCompleted = null;
            }
        }
        this.asyncValidators = [];
    };
    return ValidatorRunner;
}());

/**
 * Validate numeric values.
 */
var NumericValidator = /** @class */ (function (_super) {
    __extends(NumericValidator, _super);
    function NumericValidator(minValue, maxValue) {
        if (minValue === void 0) { minValue = null; }
        if (maxValue === void 0) { maxValue = null; }
        var _this = _super.call(this) || this;
        _this.minValue = minValue;
        _this.maxValue = maxValue;
        return _this;
    }
    NumericValidator.prototype.getType = function () {
        return "numericvalidator";
    };
    NumericValidator.prototype.validate = function (value, name, values, properties) {
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (this.isValueEmpty(value))
            return null;
        if (!_helpers__WEBPACK_IMPORTED_MODULE_4__["Helpers"].isNumber(value)) {
            return new ValidatorResult(null, new _error__WEBPACK_IMPORTED_MODULE_1__["RequreNumericError"](null, this.errorOwner));
        }
        var result = new ValidatorResult(_helpers__WEBPACK_IMPORTED_MODULE_4__["Helpers"].getNumber(value));
        if (this.minValue !== null && this.minValue > result.value) {
            result.error = this.createCustomError(name);
            return result;
        }
        if (this.maxValue !== null && this.maxValue < result.value) {
            result.error = this.createCustomError(name);
            return result;
        }
        return typeof value === "number" ? null : result;
    };
    NumericValidator.prototype.getDefaultErrorText = function (name) {
        var vName = name ? name : this.getLocalizationString("value");
        if (this.minValue !== null && this.maxValue !== null) {
            return this.getLocalizationFormatString("numericMinMax", vName, this.minValue, this.maxValue);
        }
        else {
            if (this.minValue !== null) {
                return this.getLocalizationFormatString("numericMin", vName, this.minValue);
            }
            return this.getLocalizationFormatString("numericMax", vName, this.maxValue);
        }
    };
    Object.defineProperty(NumericValidator.prototype, "minValue", {
        /**
         * The minValue property.
         */
        get: function () {
            return this.getPropertyValue("minValue");
        },
        set: function (val) {
            this.setPropertyValue("minValue", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericValidator.prototype, "maxValue", {
        /**
         * The maxValue property.
         */
        get: function () {
            return this.getPropertyValue("maxValue");
        },
        set: function (val) {
            this.setPropertyValue("maxValue", val);
        },
        enumerable: false,
        configurable: true
    });
    return NumericValidator;
}(SurveyValidator));

/**
 * Validate text values.
 */
var TextValidator = /** @class */ (function (_super) {
    __extends(TextValidator, _super);
    function TextValidator() {
        return _super.call(this) || this;
    }
    TextValidator.prototype.getType = function () {
        return "textvalidator";
    };
    TextValidator.prototype.validate = function (value, name, values, properties) {
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (this.isValueEmpty(value))
            return null;
        if (!this.allowDigits) {
            var reg = /^[A-Za-z\s\.]*$/;
            if (!reg.test(value)) {
                return new ValidatorResult(null, this.createCustomError(name));
            }
        }
        if (this.minLength > 0 && value.length < this.minLength) {
            return new ValidatorResult(null, this.createCustomError(name));
        }
        if (this.maxLength > 0 && value.length > this.maxLength) {
            return new ValidatorResult(null, this.createCustomError(name));
        }
        return null;
    };
    TextValidator.prototype.getDefaultErrorText = function (name) {
        if (this.minLength > 0 && this.maxLength > 0)
            return this.getLocalizationFormatString("textMinMaxLength", this.minLength, this.maxLength);
        if (this.minLength > 0)
            return this.getLocalizationFormatString("textMinLength", this.minLength);
        return this.getLocalizationFormatString("textMaxLength", this.maxLength);
    };
    Object.defineProperty(TextValidator.prototype, "minLength", {
        /**
         * The minLength property.
         */
        get: function () {
            return this.getPropertyValue("minLength");
        },
        set: function (val) {
            this.setPropertyValue("minLength", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextValidator.prototype, "maxLength", {
        /**
         * The maxLength property.
         */
        get: function () {
            return this.getPropertyValue("maxLength");
        },
        set: function (val) {
            this.setPropertyValue("maxLength", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextValidator.prototype, "allowDigits", {
        /**
         * The allowDigits property.
         */
        get: function () {
            return this.getPropertyValue("allowDigits");
        },
        set: function (val) {
            this.setPropertyValue("allowDigits", val);
        },
        enumerable: false,
        configurable: true
    });
    return TextValidator;
}(SurveyValidator));

/**
 * Validates the number of answers.
 */
var AnswerCountValidator = /** @class */ (function (_super) {
    __extends(AnswerCountValidator, _super);
    function AnswerCountValidator(minCount, maxCount) {
        if (minCount === void 0) { minCount = null; }
        if (maxCount === void 0) { maxCount = null; }
        var _this = _super.call(this) || this;
        _this.minCount = minCount;
        _this.maxCount = maxCount;
        return _this;
    }
    AnswerCountValidator.prototype.getType = function () {
        return "answercountvalidator";
    };
    AnswerCountValidator.prototype.validate = function (value, name, values, properties) {
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (value == null || value.constructor != Array)
            return null;
        var count = value.length;
        if (count == 0)
            return null;
        if (this.minCount && count < this.minCount) {
            return new ValidatorResult(null, this.createCustomError(this.getLocalizationFormatString("minSelectError", this.minCount)));
        }
        if (this.maxCount && count > this.maxCount) {
            return new ValidatorResult(null, this.createCustomError(this.getLocalizationFormatString("maxSelectError", this.maxCount)));
        }
        return null;
    };
    AnswerCountValidator.prototype.getDefaultErrorText = function (name) {
        return name;
    };
    Object.defineProperty(AnswerCountValidator.prototype, "minCount", {
        /**
         * The minCount property.
         */
        get: function () {
            return this.getPropertyValue("minCount");
        },
        set: function (val) {
            this.setPropertyValue("minCount", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnswerCountValidator.prototype, "maxCount", {
        /**
         * The maxCount property.
         */
        get: function () {
            return this.getPropertyValue("maxCount");
        },
        set: function (val) {
            this.setPropertyValue("maxCount", val);
        },
        enumerable: false,
        configurable: true
    });
    return AnswerCountValidator;
}(SurveyValidator));

/**
 * Use it to validate the text by regular expressions.
 */
var RegexValidator = /** @class */ (function (_super) {
    __extends(RegexValidator, _super);
    function RegexValidator(regex) {
        if (regex === void 0) { regex = null; }
        var _this = _super.call(this) || this;
        _this.regex = regex;
        return _this;
    }
    RegexValidator.prototype.getType = function () {
        return "regexvalidator";
    };
    RegexValidator.prototype.validate = function (value, name, values, properties) {
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (!this.regex || this.isValueEmpty(value))
            return null;
        var re = new RegExp(this.regex);
        if (Array.isArray(value)) {
            for (var i = 0; i < value.length; i++) {
                var res = this.hasError(re, value[i], name);
                if (res)
                    return res;
            }
        }
        return this.hasError(re, value, name);
    };
    RegexValidator.prototype.hasError = function (re, value, name) {
        if (re.test(value))
            return null;
        return new ValidatorResult(value, this.createCustomError(name));
    };
    Object.defineProperty(RegexValidator.prototype, "regex", {
        /**
         * The regex property.
         */
        get: function () {
            return this.getPropertyValue("regex");
        },
        set: function (val) {
            this.setPropertyValue("regex", val);
        },
        enumerable: false,
        configurable: true
    });
    return RegexValidator;
}(SurveyValidator));

/**
 * Validate e-mail address in the text input
 */
var EmailValidator = /** @class */ (function (_super) {
    __extends(EmailValidator, _super);
    function EmailValidator() {
        var _this = _super.call(this) || this;
        _this.re = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()=[\]\.,;:\s@\"]+\.)+[^<>()=[\]\.,;:\s@\"]{2,})$/i;
        return _this;
    }
    EmailValidator.prototype.getType = function () {
        return "emailvalidator";
    };
    EmailValidator.prototype.validate = function (value, name, values, properties) {
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (!value)
            return null;
        if (this.re.test(value))
            return null;
        return new ValidatorResult(value, this.createCustomError(name));
    };
    EmailValidator.prototype.getDefaultErrorText = function (name) {
        return this.getLocalizationString("invalidEmail");
    };
    return EmailValidator;
}(SurveyValidator));

/**
 * Show error if expression returns false
 */
var ExpressionValidator = /** @class */ (function (_super) {
    __extends(ExpressionValidator, _super);
    function ExpressionValidator(expression) {
        if (expression === void 0) { expression = null; }
        var _this = _super.call(this) || this;
        _this.conditionRunner = null;
        _this.isRunningValue = false;
        _this.expression = expression;
        return _this;
    }
    ExpressionValidator.prototype.getType = function () {
        return "expressionvalidator";
    };
    Object.defineProperty(ExpressionValidator.prototype, "isValidateAllValues", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionValidator.prototype, "isAsync", {
        get: function () {
            if (!this.ensureConditionRunner())
                return false;
            return this.conditionRunner.isAsync;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionValidator.prototype, "isRunning", {
        get: function () {
            return this.isRunningValue;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionValidator.prototype.validate = function (value, name, values, properties) {
        var _this = this;
        if (name === void 0) { name = null; }
        if (values === void 0) { values = null; }
        if (properties === void 0) { properties = null; }
        if (!this.ensureConditionRunner())
            return null;
        this.conditionRunner.onRunComplete = function (res) {
            _this.isRunningValue = false;
            if (!!_this.onAsyncCompleted) {
                _this.onAsyncCompleted(_this.generateError(res, value, name));
            }
        };
        this.isRunningValue = true;
        var res = this.conditionRunner.run(values, properties);
        if (this.conditionRunner.isAsync)
            return null;
        this.isRunningValue = false;
        return this.generateError(res, value, name);
    };
    ExpressionValidator.prototype.generateError = function (res, value, name) {
        if (!res) {
            return new ValidatorResult(value, this.createCustomError(name));
        }
        return null;
    };
    ExpressionValidator.prototype.getDefaultErrorText = function (name) {
        return this.getLocalizationFormatString("invalidExpression", this.expression);
    };
    ExpressionValidator.prototype.ensureConditionRunner = function () {
        if (!!this.conditionRunner) {
            this.conditionRunner.expression = this.expression;
            return true;
        }
        if (!this.expression)
            return false;
        this.conditionRunner = new _conditions__WEBPACK_IMPORTED_MODULE_3__["ConditionRunner"](this.expression);
        return true;
    };
    Object.defineProperty(ExpressionValidator.prototype, "expression", {
        /**
         * The expression property.
         */
        get: function () {
            return this.getPropertyValue("expression");
        },
        set: function (val) {
            this.setPropertyValue("expression", val);
        },
        enumerable: false,
        configurable: true
    });
    return ExpressionValidator;
}(SurveyValidator));

_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("surveyvalidator", [
    { name: "text", serializationProperty: "locText" },
]);
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("numericvalidator", ["minValue:number", "maxValue:number"], function () {
    return new NumericValidator();
}, "surveyvalidator");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("textvalidator", [{ name: "minLength:number", default: 0 },
    { name: "maxLength:number", default: 0 },
    { name: "allowDigits:boolean", default: true }], function () {
    return new TextValidator();
}, "surveyvalidator");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("answercountvalidator", ["minCount:number", "maxCount:number"], function () {
    return new AnswerCountValidator();
}, "surveyvalidator");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("regexvalidator", ["regex"], function () {
    return new RegexValidator();
}, "surveyvalidator");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("emailvalidator", [], function () {
    return new EmailValidator();
}, "surveyvalidator");
_jsonobject__WEBPACK_IMPORTED_MODULE_2__["Serializer"].addClass("expressionvalidator", ["expression:condition"], function () {
    return new ExpressionValidator();
}, "surveyvalidator");


/***/ })

/******/ });
});
//# sourceMappingURL=survey.core.js.map