import React, { ReactNode } from "react";
export declare type DataDict = Record<string, any>;
export declare const DataContext: React.Context<Record<string, any> | undefined>;
export declare type DataMeta = {
    hidden?: boolean;
    label?: string;
};
export declare function mkMetaName(name: string): string;
export declare function mkMetaValue(meta: Partial<DataMeta>): DataMeta;
export declare function applySelector(rawData: DataDict | undefined, selector: string | undefined): any;
export declare type SelectorDict = Record<string, string | undefined>;
export declare function useSelector(selector: string | undefined): any;
export declare function useSelectors(selectors?: SelectorDict): any;
export declare function useDataEnv(): Record<string, any> | undefined;
export interface DataProviderProps {
    /**
     * Key to set in data context.
     */
    name?: string;
    /**
     * Value to set for `name` in data context.
     */
    data?: any;
    /**
     * If true, hide this entry in studio (data binding).
     */
    hidden?: boolean;
    /**
     * Label to be shown in the studio data picker for easier navigation (data binding).
     */
    label?: string;
    children?: ReactNode;
}
export declare function DataProvider({ name, data, hidden, label, children, }: DataProviderProps): JSX.Element;
export interface PageParamsProviderProps {
    params?: Record<string, string | string[] | undefined>;
    query?: Record<string, string | string[] | undefined>;
    children?: ReactNode;
}
export declare function PageParamsProvider({ children, params, query, }: PageParamsProviderProps): JSX.Element;
export declare function DataCtxReader({ children, }: {
    children: ($ctx: DataDict | undefined) => ReactNode;
}): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)> | null;
