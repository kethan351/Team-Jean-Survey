{"version":3,"file":"host.esm.js","sources":["../src/lang-utils.ts","../src/useForceUpdate.ts","../src/canvas-host.tsx","../src/common.ts","../src/data.tsx","../src/fetcher.ts","../src/global-actions.tsx","../src/registerComponent.ts","../src/registerGlobalContext.ts","../src/registerToken.ts","../src/registerTrait.ts","../src/repeatedElement.ts","../src/version.ts","../src/index.ts"],"sourcesContent":["function isString(x: any): x is string {\n  return typeof x === \"string\";\n}\n\ntype StringGen = string | (() => string);\n\nexport function ensure<T>(x: T | null | undefined, msg: StringGen = \"\"): T {\n  if (x === null || x === undefined) {\n    debugger;\n    msg = (isString(msg) ? msg : msg()) || \"\";\n    throw new Error(\n      `Value must not be undefined or null${msg ? `- ${msg}` : \"\"}`\n    );\n  } else {\n    return x;\n  }\n}\n","import { useCallback, useState } from \"react\";\n\nexport default function useForceUpdate() {\n  const [, setTick] = useState(0);\n  const update = useCallback(() => {\n    setTick((tick) => tick + 1);\n  }, []);\n  return update;\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { ensure } from \"./lang-utils\";\nimport useForceUpdate from \"./useForceUpdate\";\nconst root = globalThis as any;\n\ndeclare global {\n  interface Window {\n    __PlasmicHostVersion: string;\n  }\n}\n\nif (root.__PlasmicHostVersion == null) {\n  root.__PlasmicHostVersion = \"2\";\n}\n\nconst rootChangeListeners: (() => void)[] = [];\nclass PlasmicRootNodeWrapper {\n  constructor(private value: null | React.ReactElement) {}\n  set = (val: null | React.ReactElement) => {\n    this.value = val;\n    rootChangeListeners.forEach((f) => f());\n  };\n  get = () => this.value;\n}\n\nconst plasmicRootNode = new PlasmicRootNodeWrapper(null);\n\nfunction getHashParams() {\n  return new URLSearchParams(location.hash.replace(/^#/, \"?\"));\n}\n\nfunction getPlasmicOrigin() {\n  const params = getHashParams();\n  return ensure(\n    params.get(\"origin\"),\n    \"Missing information from Plasmic window.\"\n  );\n}\n\nfunction getStudioHash() {\n  const hashParams = getHashParams();\n  if (hashParams.has(\"studioHash\")) {\n    return hashParams.get(\"studioHash\");\n  }\n  const urlParams = new URL(location.href).searchParams;\n  return urlParams.get(\"studio-hash\");\n}\n\nfunction renderStudioIntoIframe() {\n  const script = document.createElement(\"script\");\n  const plasmicOrigin = getPlasmicOrigin();\n  const hash = getStudioHash();\n  script.src = `${plasmicOrigin}/static/js/studio${\n    hash ? `.${hash}.js` : `.js`\n  }`;\n  document.body.appendChild(script);\n}\n\nlet renderCount = 0;\nexport function setPlasmicRootNode(node: React.ReactElement | null) {\n  // Keep track of renderCount, which we use as key to ErrorBoundary, so\n  // we can reset the error on each render\n  renderCount++;\n  plasmicRootNode.set(node);\n}\n\n/**\n * React context to detect whether the component is rendered on Plasmic editor.\n * If not, return false.\n * If so, return an object with more information about the component\n */\nexport const PlasmicCanvasContext = React.createContext<\n  | {\n      componentName: string | null;\n      globalVariants: Record<string, string>;\n      interactive?: boolean;\n    }\n  | false\n>(false);\nexport const usePlasmicCanvasContext = () =>\n  React.useContext(PlasmicCanvasContext);\n\nfunction _PlasmicCanvasHost() {\n  // If window.parent is null, then this is a window whose containing iframe\n  // has been detached from the DOM (for the top window, window.parent === window).\n  // In that case, we shouldn't do anything.  If window.parent is null, by the way,\n  // location.hash will also be null.\n  const isFrameAttached = !!window.parent;\n  const isCanvas = !!location.hash?.match(/\\bcanvas=true\\b/);\n  const isLive = !!location.hash?.match(/\\blive=true\\b/) || !isFrameAttached;\n  const shouldRenderStudio =\n    isFrameAttached &&\n    !document.querySelector(\"#plasmic-studio-tag\") &&\n    !isCanvas &&\n    !isLive;\n  const locationHash = new URLSearchParams(location.hash);\n\n  const [activeGlobalVariants, setActiveGlobalVariants] = React.useState<\n    Record<string, string>\n  >(() => JSON.parse(locationHash.get(\"globalVariants\") ?? \"{}\"));\n  const forceUpdate = useForceUpdate();\n  React.useLayoutEffect(() => {\n    rootChangeListeners.push(forceUpdate);\n    return () => {\n      const index = rootChangeListeners.indexOf(forceUpdate);\n      if (index >= 0) {\n        rootChangeListeners.splice(index, 1);\n      }\n    };\n  }, [forceUpdate]);\n  React.useEffect(() => {\n    if (shouldRenderStudio && isFrameAttached && window.parent !== window) {\n      renderStudioIntoIframe();\n    }\n  }, [shouldRenderStudio, isFrameAttached]);\n  React.useEffect(() => {\n    if (!shouldRenderStudio && !document.querySelector(\"#getlibs\") && isLive) {\n      const scriptElt = document.createElement(\"script\");\n      scriptElt.id = \"getlibs\";\n      scriptElt.src = getPlasmicOrigin() + \"/static/js/getlibs.js\";\n      scriptElt.async = false;\n      scriptElt.onload = () => {\n        (window as any).__GetlibsReadyResolver?.();\n      };\n      document.head.append(scriptElt);\n    }\n  }, [shouldRenderStudio]);\n  React.useEffect(() => {\n    const listener = (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.source === \"canvas-frame\") {\n          setActiveGlobalVariants(data.activeGlobalVariants);\n        }\n      } catch {}\n    };\n    window.addEventListener(\"message\", listener);\n    return () => window.removeEventListener(\"message\", listener);\n  }, []);\n  if (!isFrameAttached) {\n    return null;\n  }\n  if (isCanvas || isLive) {\n    let appDiv = document.querySelector(\"#plasmic-app.__wab_user-body\");\n    if (!appDiv) {\n      appDiv = document.createElement(\"div\");\n      appDiv.id = \"plasmic-app\";\n      appDiv.classList.add(\"__wab_user-body\");\n      document.body.appendChild(appDiv);\n    }\n    const plasmicContextValue = isCanvas\n      ? {\n          componentName: locationHash.get(\"componentName\"),\n          globalVariants: activeGlobalVariants,\n          interactive: !!locationHash.get(\"interactive\"),\n        }\n      : false;\n    return ReactDOM.createPortal(\n      <ErrorBoundary key={`${renderCount}`}>\n        <PlasmicCanvasContext.Provider value={plasmicContextValue}>\n          {plasmicRootNode.get()}\n        </PlasmicCanvasContext.Provider>\n      </ErrorBoundary>,\n      appDiv,\n      \"plasmic-app\"\n    );\n  }\n  if (shouldRenderStudio && window.parent === window) {\n    return (\n      <iframe\n        src={`https://docs.plasmic.app/app-content/app-host-ready#appHostUrl=${encodeURIComponent(\n          location.href\n        )}`}\n        style={{\n          width: \"100vw\",\n          height: \"100vh\",\n          border: \"none\",\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          zIndex: 99999999,\n        }}\n      ></iframe>\n    );\n  }\n  return null;\n}\n\ninterface PlasmicCanvasHostProps {\n  /**\n   * Webpack hmr uses EventSource to\tlisten to hot reloads, but that\n   * resultsin a persistent\tconnection from\teach window.  In Plasmic\n   * Studio, if a project is configured to use app-hosting with a\n   * nextjs or gatsby server running in dev mode, each artboard will\n   * be holding a persistent connection to the dev server.\n   * Because browsers\thave a limit to\thow many connections can\n   * be held\tat a time by domain, this means\tafter X\tartboards, new\n   * artboards will freeze and not load.\n   *\n   * By default, <PlasmicCanvasHost /> will globally mutate\n   * window.EventSource to avoid using EventSource for HMR, which you\n   * typically don't need for your custom host page.  If you do still\n   * want to retain HRM, then youc an pass enableWebpackHmr={true}.\n   */\n  enableWebpackHmr?: boolean;\n}\n\nexport const PlasmicCanvasHost: React.FunctionComponent<PlasmicCanvasHostProps> = (\n  props\n) => {\n  const { enableWebpackHmr } = props;\n  const [node, setNode] = React.useState<React.ReactElement<any, any> | null>(\n    null\n  );\n  React.useEffect(() => {\n    setNode(<_PlasmicCanvasHost />);\n  }, []);\n  return (\n    <>\n      {!enableWebpackHmr && <DisableWebpackHmr />}\n      {node}\n    </>\n  );\n};\n\ntype RenderErrorListener = (err: Error) => void;\nconst renderErrorListeners: RenderErrorListener[] = [];\nexport function registerRenderErrorListener(listener: RenderErrorListener) {\n  renderErrorListeners.push(listener);\n  return () => {\n    const index = renderErrorListeners.indexOf(listener);\n    if (index >= 0) {\n      renderErrorListeners.splice(index, 1);\n    }\n  };\n}\n\ninterface ErrorBoundaryProps {\n  children?: React.ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  error?: Error;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {};\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { error };\n  }\n\n  componentDidCatch(error: Error) {\n    renderErrorListeners.forEach((listener) => listener(error));\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>Error: {`${this.state.error.message}`}</div>;\n    } else {\n      return <>{this.props.children}</>;\n    }\n  }\n}\n\nfunction DisableWebpackHmr() {\n  if (process.env.NODE_ENV === \"production\") {\n    return null;\n  }\n  return (\n    <script\n      type=\"text/javascript\"\n      dangerouslySetInnerHTML={{\n        __html: `\n      if (typeof window !== \"undefined\") {\n        const RealEventSource = window.EventSource;\n        window.EventSource = function(url, config) {\n          if (/[^a-zA-Z]hmr($|[^a-zA-Z])/.test(url)) {\n            console.warn(\"Plasmic: disabled EventSource request for\", url);\n            return {\n              onerror() {}, onmessage() {}, onopen() {}, close() {}\n            };\n          } else {\n            return new RealEventSource(url, config);\n          }\n        }\n      }\n      `,\n      }}\n    ></script>\n  );\n}\n","export const tuple = <T extends any[]>(...args: T): T => args;\n","import React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n} from \"react\";\nimport { tuple } from \"./common\";\n\nexport type DataDict = Record<string, any>;\n\nexport const DataContext = createContext<DataDict | undefined>(undefined);\n\nexport type DataMeta = {\n  hidden?: boolean;\n  label?: string;\n};\n\nexport function mkMetaName(name: string) {\n  return `__plasmic_meta_${name}`;\n}\n\nexport function mkMetaValue(meta: Partial<DataMeta>): DataMeta {\n  return meta;\n}\n\nexport function applySelector(\n  rawData: DataDict | undefined,\n  selector: string | undefined\n): any {\n  if (!selector) {\n    return undefined;\n  }\n  let curData = rawData;\n  for (const key of selector.split(\".\")) {\n    curData = curData?.[key];\n  }\n  return curData;\n}\n\nexport type SelectorDict = Record<string, string | undefined>;\n\nexport function useSelector(selector: string | undefined): any {\n  const rawData = useDataEnv();\n  return applySelector(rawData, selector);\n}\n\nexport function useSelectors(selectors: SelectorDict = {}): any {\n  const rawData = useDataEnv();\n  return Object.fromEntries(\n    Object.entries(selectors)\n      .filter(([key, selector]) => !!key && !!selector)\n      .map(([key, selector]) => tuple(key, applySelector(rawData, selector)))\n  );\n}\n\nexport function useDataEnv() {\n  return useContext(DataContext);\n}\n\nexport interface DataProviderProps {\n  /**\n   * Key to set in data context.\n   */\n  name?: string;\n  /**\n   * Value to set for `name` in data context.\n   */\n  data?: any;\n  /**\n   * If true, hide this entry in studio (data binding).\n   */\n  hidden?: boolean;\n  /**\n   * Label to be shown in the studio data picker for easier navigation (data binding).\n   */\n  label?: string;\n  children?: ReactNode;\n}\n\nexport function DataProvider({\n  name,\n  data,\n  hidden,\n  label,\n  children,\n}: DataProviderProps) {\n  const existingEnv = useDataEnv() ?? {};\n  if (!name) {\n    return <>{children}</>;\n  } else {\n    return (\n      <DataContext.Provider\n        value={{\n          ...existingEnv,\n          [name]: data,\n          [mkMetaName(name)]: mkMetaValue({ hidden, label }),\n        }}\n      >\n        {children}\n      </DataContext.Provider>\n    );\n  }\n}\n\nexport interface PageParamsProviderProps {\n  params?: Record<string, string | string[] | undefined>;\n  query?: Record<string, string | string[] | undefined>;\n  children?: ReactNode;\n}\n\nexport function PageParamsProvider({\n  children,\n  params = {},\n  query = {},\n}: PageParamsProviderProps) {\n  const $ctx = useDataEnv() || {};\n  return (\n    <DataProvider\n      name={\"params\"}\n      data={{ ...$ctx.params, ...params }}\n      label={\"Page URL path params\"}\n    >\n      <DataProvider\n        name={\"query\"}\n        data={{ ...$ctx.query, ...query }}\n        label={\"Page URL query params\"}\n      >\n        {children}\n      </DataProvider>\n    </DataProvider>\n  );\n}\n\nexport function DataCtxReader({\n  children,\n}: {\n  children: ($ctx: DataDict | undefined) => ReactNode;\n}) {\n  const $ctx = useDataEnv();\n  return children($ctx) as ReactElement | null;\n}\n","import { PrimitiveType } from \"./registerComponent\";\n\nconst root = globalThis as any;\n\nexport type Fetcher = (...args: any[]) => Promise<any>;\n\nexport interface FetcherMeta {\n  /**\n   * Any unique identifying string for this fetcher.\n   */\n  name: string;\n  /**\n   * The Studio-user-friendly display name.\n   */\n  displayName?: string;\n  /**\n   * The symbol to import from the importPath.\n   */\n  importName?: string;\n  args: { name: string; type: PrimitiveType }[];\n  returns: PrimitiveType;\n  /**\n   * Either the path to the fetcher relative to `rootDir` or the npm\n   * package name\n   */\n  importPath: string;\n  /**\n   * Whether it's a default export or named export\n   */\n  isDefaultExport?: boolean;\n}\n\nexport interface FetcherRegistration {\n  fetcher: Fetcher;\n  meta: FetcherMeta;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicFetcherRegistry: FetcherRegistration[];\n  }\n}\n\nroot.__PlasmicFetcherRegistry = [];\n\nexport function registerFetcher(fetcher: Fetcher, meta: FetcherMeta) {\n  root.__PlasmicFetcherRegistry.push({ fetcher, meta });\n}\n","import React from \"react\";\n\nexport type GlobalActionDict = Record<string, Function>;\n\nexport const GlobalActionsContext = React.createContext<\n  GlobalActionDict | undefined\n>(undefined);\n\nexport function GlobalActionsProvider(props: {\n  contextName: string;\n  children?: React.ReactNode;\n  actions: GlobalActionDict;\n}) {\n  const { contextName, children, actions } = props;\n  const namespacedActions = React.useMemo(\n    () =>\n      Object.fromEntries(\n        Object.entries(actions).map(([key, val]) => [\n          `${contextName}.${key}`,\n          val,\n        ])\n      ),\n    [contextName, actions]\n  );\n  return (\n    <GlobalActionsContext.Provider value={namespacedActions}>\n      {children}\n    </GlobalActionsContext.Provider>\n  );\n}\n\nexport function useGlobalActions() {\n  return React.useContext(GlobalActionsContext) ?? {};\n}\n","import {\n  CodeComponentElement,\n  CSSProperties,\n  PlasmicElement,\n} from \"./element-types\";\n\nconst root = globalThis as any;\n\nexport interface CanvasComponentProps<Data = any> {\n  /**\n   * This prop is only provided within the canvas of Plasmic Studio.\n   * Allows the component to set data to be consumed by the props' controls.\n   */\n  setControlContextData?: (data: Data) => void;\n}\n\ntype InferDataType<P> = P extends CanvasComponentProps<infer Data> ? Data : any;\n\n/**\n * Config option that takes the context (e.g., props) of the component instance\n * to dynamically set its value.\n */\nexport type ContextDependentConfig<P, R> = (\n  props: P,\n  /**\n   * `contextData` can be `null` if the prop controls are rendering before\n   * the component instance itself (it will re-render once the component\n   * calls `setControlContextData`)\n   */\n  contextData: InferDataType<P> | null\n) => R;\n\nexport interface PropTypeBase<P> {\n  displayName?: string;\n  description?: string;\n  helpText?: string;\n  /**\n   * If the user has chosen to use a dynamic expression for this prop, provide\n   * a hint as to the expected values that the expression should evaluate to.\n   * This hint will be displayed alongside the code editor.  You may use\n   * markdown in the text here.\n   */\n  exprHint?: string;\n  hidden?: ContextDependentConfig<P, boolean>;\n  readOnly?: boolean | ContextDependentConfig<P, boolean>;\n  advanced?: boolean;\n  disableDynamicValue?: boolean;\n}\n\nexport type DefaultValueOrExpr<P, T> =\n  | {\n      defaultExpr?: undefined;\n      defaultExprHint?: undefined;\n      defaultValue?: T;\n      defaultValueHint?: T | ContextDependentConfig<P, T | undefined>;\n    }\n  | {\n      defaultValue?: undefined;\n      defaultValueHint?: undefined;\n      defaultExpr?: string;\n      defaultExprHint?: string;\n    };\n\ntype StringTypeBase<P> = PropTypeBase<P> & DefaultValueOrExpr<P, string>;\n\nexport type StringType<P> =\n  | \"string\"\n  | ((\n      | {\n          type: \"string\";\n          control?: \"default\" | \"large\";\n        }\n      | {\n          type: \"code\";\n          lang: \"css\" | \"html\" | \"javascript\" | \"json\";\n        }\n      | {\n          type: \"richText\";\n        }\n      | {\n          type: \"color\";\n          /**\n           * If specified, and the user picks a color token in the Studio, then\n           * the value passed in as prop is a css variable reference, like\n           * `var(--TOKEN_ID)`, instead of the resolved hex value of the token.\n           * You should take care in using this in the proper css context --\n           * the css token is only defined if you are rendering under some\n           * Plasmic component in the DOM tree, which is usually the case,\n           * unless you are using a React portal.\n           */\n          keepCssVar?: boolean;\n        }\n      | {\n          type: \"cardPicker\";\n          modalTitle?:\n            | React.ReactNode\n            | ContextDependentConfig<P, React.ReactNode>;\n          options:\n            | {\n                value: string;\n                label?: string;\n                imgUrl: string;\n                footer?: React.ReactNode;\n              }[]\n            | ContextDependentConfig<\n                P,\n                {\n                  value: string;\n                  label?: string;\n                  imgUrl: string;\n                  footer?: React.ReactNode;\n                }[]\n              >;\n          showInput?: boolean | ContextDependentConfig<P, boolean>;\n          onSearch?: ContextDependentConfig<\n            P,\n            ((value: string) => void) | undefined\n          >;\n        }\n    ) &\n      StringTypeBase<P>);\n\nexport type BooleanType<P> =\n  | \"boolean\"\n  | ({\n      type: \"boolean\";\n    } & DefaultValueOrExpr<P, boolean> &\n      PropTypeBase<P>);\n\ntype GraphQLValue = {\n  query: string;\n  variables?: Record<string, any>;\n};\n\nexport type GraphQLType<P> = {\n  type: \"code\";\n  lang: \"graphql\";\n  endpoint: string | ContextDependentConfig<P, string>;\n  method?: string | ContextDependentConfig<P, string>;\n  headers?: object | ContextDependentConfig<P, object>;\n} & DefaultValueOrExpr<P, GraphQLValue> &\n  PropTypeBase<P>;\n\ntype NumberTypeBase<P> = PropTypeBase<P> &\n  DefaultValueOrExpr<P, number> & {\n    type: \"number\";\n  };\n\nexport type NumberType<P> =\n  | \"number\"\n  | ((\n      | {\n          control?: \"default\";\n          min?: number | ContextDependentConfig<P, number>;\n          max?: number | ContextDependentConfig<P, number>;\n        }\n      | {\n          control: \"slider\";\n          min: number | ContextDependentConfig<P, number>;\n          max: number | ContextDependentConfig<P, number>;\n          step?: number | ContextDependentConfig<P, number>;\n        }\n    ) &\n      NumberTypeBase<P>);\n\n/**\n * Expects defaultValue to be a JSON-compatible value\n */\nexport type JSONLikeType<P> =\n  | \"object\"\n  | ({\n      type: \"object\";\n      fields?: {\n        [p: string]: PropType<P>;\n      };\n    } & DefaultValueOrExpr<P, any> &\n      PropTypeBase<P>)\n  | ({\n      type: \"array\";\n      itemType?: {\n        type: \"object\";\n        fields: {\n          [p: string]: PropType<P>;\n        };\n        /**\n         * Optional function that generates a name for this item in the array\n         */\n        nameFunc?: (item: any) => string | undefined;\n      };\n    } & DefaultValueOrExpr<P, any[]> &\n      PropTypeBase<P>)\n  | ({\n      type: \"dataSource\";\n      dataSource: \"airtable\" | \"cms\";\n    } & PropTypeBase<P>);\n\ntype DataPickerValueType = string | number | (string | number)[];\n\nexport type DataPickerType<P> =\n  | ({\n      type: \"dataSelector\";\n      data:\n        | Record<string, any>\n        | ContextDependentConfig<P, Record<string, any>>;\n      alwaysShowValuePathAsLabel?: boolean;\n    } & DefaultValueOrExpr<P, DataPickerValueType> &\n      PropTypeBase<P>)\n  | ({\n      type: \"exprEditor\";\n      data:\n        | Record<string, any>\n        | ContextDependentConfig<P, Record<string, any>>;\n    } & DefaultValueOrExpr<P, DataPickerValueType> &\n      PropTypeBase<P>);\n\ninterface ChoiceTypeBase<P> extends PropTypeBase<P> {\n  type: \"choice\";\n  options:\n    | string[]\n    | {\n        label: string;\n        value: string | number | boolean;\n      }[]\n    | ContextDependentConfig<\n        P,\n        | string[]\n        | {\n            label: string;\n            value: string | number | boolean;\n          }[]\n      >;\n  allowSearch?: boolean;\n  filterOption?: boolean;\n  onSearch?: ContextDependentConfig<P, ((value: string) => void) | undefined>;\n}\n\nexport type ChoiceType<P> = (\n  | ({\n      multiSelect?: false;\n    } & DefaultValueOrExpr<P, string | number | boolean>)\n  | ({\n      multiSelect: true;\n    } & DefaultValueOrExpr<P, (string | number | boolean)[]>)\n  | ({\n      multiSelect: ContextDependentConfig<P, boolean>;\n    } & DefaultValueOrExpr<\n      P,\n      string | number | boolean | (string | number | boolean)[]\n    >)\n) &\n  ChoiceTypeBase<P>;\n\nexport interface ModalProps {\n  show?: boolean;\n  children?: React.ReactNode;\n  onClose: () => void;\n  style?: CSSProperties;\n}\n\ninterface CustomControlProps<P> {\n  componentProps: P;\n  /**\n   * `contextData` can be `null` if the prop controls are rendering before\n   * the component instance itself (it will re-render once the component\n   * calls `setControlContextData`)\n   */\n  contextData: InferDataType<P> | null;\n  value: any;\n  /**\n   * Sets the value to be passed to the prop. Expects a JSON-compatible value.\n   */\n  updateValue: (newVal: any) => void;\n  /**\n   * Full screen modal component\n   */\n  FullscreenModal: React.ComponentType<ModalProps>;\n  /**\n   * Modal component for the side pane\n   */\n  SideModal: React.ComponentType<ModalProps>;\n\n  /**\n   * The document that the component will be rendered into; instead of using\n   * `document` directly (for, say, `document.querySelector()` etc.), you\n   * should use this instead.\n   */\n  studioDocument: typeof document;\n}\nexport type CustomControl<P> = React.ComponentType<CustomControlProps<P>>;\n\n/**\n * Expects defaultValue to be a JSON-compatible value\n */\nexport type CustomType<P> =\n  | CustomControl<P>\n  | ({\n      type: \"custom\";\n      control: CustomControl<P>;\n    } & PropTypeBase<P> &\n      DefaultValueOrExpr<P, any>);\n\ntype SlotType<P> =\n  | \"slot\"\n  | ({\n      type: \"slot\";\n      /**\n       * The unique names of all code components that can be placed in the slot\n       */\n      allowedComponents?: string[];\n      /**\n       * Whether the \"empty slot\" placeholder should be hidden in the canvas.\n       */\n      hidePlaceholder?: boolean;\n      /**\n       * Whether the slot is repeated, i.e., is rendered multiple times using\n       * repeatedElement().\n       */\n      isRepeated?: boolean;\n\n      /**\n       * If slot is a render prop (accepts a function that takes in some\n       * arguments and returns some JSX), then specify the names of the\n       * arguments expected by the render prop function.\n       */\n      renderPropParams?: string[];\n    } & Omit<\n      DefaultValueOrExpr<P, PlasmicElement | PlasmicElement[]>,\n      \"defaultValueHint\" | \"defaultExpr\" | \"defaultExprHint\"\n    >);\n\ntype ImageUrlType<P> =\n  | \"imageUrl\"\n  | ({\n      type: \"imageUrl\";\n    } & DefaultValueOrExpr<P, string> &\n      PropTypeBase<P>);\n\nexport type PrimitiveType<P = any> = Extract<\n  StringType<P> | BooleanType<P> | NumberType<P> | JSONLikeType<P>,\n  String\n>;\n\ntype ControlTypeBase =\n  | {\n      editOnly?: false;\n    }\n  | {\n      editOnly: true;\n      /**\n       * The prop where the values should be mapped to\n       */\n      uncontrolledProp?: string;\n    };\n\nexport type SupportControlled<T> =\n  | Extract<T, String | CustomControl<any>>\n  | (Exclude<T, String | CustomControl<any>> & ControlTypeBase);\n\nexport type PropType<P> =\n  | SupportControlled<\n      | StringType<P>\n      | BooleanType<P>\n      | NumberType<P>\n      | JSONLikeType<P>\n      | ChoiceType<P>\n      | ImageUrlType<P>\n      | CustomType<P>\n      | GraphQLType<P>\n      | DataPickerType<P>\n    >\n  | SlotType<P>;\n\ntype RestrictPropType<T, P> = T extends string\n  ? SupportControlled<\n      | StringType<P>\n      | ChoiceType<P>\n      | JSONLikeType<P>\n      | ImageUrlType<P>\n      | CustomType<P>\n      | DataPickerType<P>\n    >\n  : T extends boolean\n  ? SupportControlled<\n      BooleanType<P> | JSONLikeType<P> | CustomType<P> | DataPickerType<P>\n    >\n  : T extends number\n  ? SupportControlled<\n      NumberType<P> | JSONLikeType<P> | CustomType<P> | DataPickerType<P>\n    >\n  : PropType<P>;\n\nexport interface ActionProps<P> {\n  componentProps: P;\n  /**\n   * `contextData` can be `null` if the prop controls are rendering before\n   * the component instance itself (it will re-render once the component\n   * calls `setControlContextData`)\n   */\n  contextData: InferDataType<P> | null;\n  studioOps: {\n    showModal: (\n      modalProps: Omit<ModalProps, \"onClose\"> & { onClose?: () => void }\n    ) => void;\n    refreshQueryData: () => void;\n    appendToSlot: (element: PlasmicElement, slotName: string) => void;\n    removeFromSlotAt: (pos: number, slotName: string) => void;\n    updateProps: (newValues: any) => void;\n  };\n  /**\n   * The document that the component will be rendered into; instead of using\n   * `document` directly (for, say, `document.querySelector()` etc.), you\n   * should use this instead.\n   */\n  studioDocument: typeof document;\n}\n\nexport type Action<P> =\n  | {\n      type: \"button-action\";\n      label: string;\n      onClick: (props: ActionProps<P>) => void;\n    }\n  | {\n      type: \"custom-action\";\n      control: React.ComponentType<ActionProps<P>>;\n    };\n\ntype DistributedKeyOf<T> = T extends any ? keyof T : never;\n\ninterface ComponentTemplate<P>\n  extends Omit<CodeComponentElement<P>, \"type\" | \"name\"> {\n  /**\n   * A preview picture for the template.\n   */\n  previewImg?: string;\n}\n\nexport interface ComponentTemplates<P> {\n  [name: string]: ComponentTemplate<P>;\n}\ninterface $State {\n  [key: string]: any;\n}\n\ninterface $StateSpec<T> {\n  // Whether this state is private, readonly, or writable in\n  // this component\n  type: \"private\" | \"readonly\" | \"writable\";\n  // if initial value is defined by a js expression\n  initFunc?: ($props: Record<string, any>, $state: $State) => T;\n\n  // if initial value is a hard-coded value\n  initVal?: T;\n  // Whether this state is private, readonly, or writable in\n  // this component\n\n  // If writable, there should be a valueProp that maps props[valueProp]\n  // to the value of the state\n  valueProp?: string;\n\n  // If writable or readonly, there should be an onChangeProp where\n  // props[onChangeProp] is invoked whenever the value changes\n  onChangeProp?: string;\n}\n\nexport interface ComponentMeta<P> {\n  /**\n   * Any unique string name used to identify that component. Each component\n   * should be registered with a different `meta.name`, even if they have the\n   * same name in the code.\n   */\n  name: string;\n  /**\n   * The name to be displayed for the component in Studio. Optional: if not\n   * specified, `meta.name` is used.\n   */\n  displayName?: string;\n  /**\n   * The description of the component to be shown in Studio.\n   */\n  description?: string;\n  /**\n   * The javascript name to be used when generating code. Optional: if not\n   * provided, `meta.name` is used.\n   */\n  importName?: string;\n  /**\n   * An object describing the component properties to be used in Studio.\n   * For each `prop`, there should be an entry `meta.props[prop]` describing\n   * its type.\n   */\n  props: { [prop in DistributedKeyOf<P>]?: RestrictPropType<P[prop], P> } & {\n    [prop: string]: PropType<P>;\n  };\n  /**\n   * WIP: An object describing the component states to be used in Studio.\n   */\n  unstable__states?: Record<string, $StateSpec<any>>;\n  /**\n   * An array describing the component actions to be used in Studio.\n   */\n  actions?: Action<P>[];\n  /**\n   * Whether style sections should be shown in Studio. For styles to work, the\n   * component must accept a `className` prop. If unset, defaults to true.\n   */\n  styleSections?: boolean;\n  /**\n   * Whether the element can be repeated in Studio. If unset, defaults to true.\n   */\n  isRepeatable?: boolean;\n  /**\n   * The path to be used when importing the component in the generated code.\n   * It can be the name of the package that contains the component, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   *  Whether the component is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n  /**\n   * The prop that expects the CSS classes with styles to be applied to the\n   * component. Optional: if not specified, Plasmic will expect it to be\n   * `className`. Notice that if the component does not accept CSS classes, the\n   * component will not be able to receive styles from the Studio.\n   */\n  classNameProp?: string;\n  /**\n   * The prop that receives and forwards a React `ref`. Plasmic only uses `ref`\n   * to interact with components, so it's not used in the generated code.\n   * Optional: If not provided, the usual `ref` is used.\n   */\n  refProp?: string;\n  /**\n   * Default styles to start with when instantiating the component in Plasmic.\n   */\n  defaultStyles?: CSSProperties;\n  /**\n   * Component templates to start with on Plasmic.\n   */\n  templates?: ComponentTemplates<P>;\n  /**\n   * Registered name of parent component, used for grouping related components.\n   */\n  parentComponentName?: string;\n  /**\n   * Whether the component can be used as an attachment to an element.\n   */\n  isAttachment?: boolean;\n  /**\n   * Whether the component provides data to its slots using DataProvider.\n   */\n  providesData?: boolean;\n\n  /**\n   * If specified, then Figma components with the specified names will be mapped\n   * to this component when you paste Figma content into Plasmic\n   */\n  figmaMappings?: {\n    figmaComponentName: string;\n  }[];\n\n  /**\n   * If true, when an instance of this component is added, the element\n   * will always be named by the name of this component.\n   */\n  alwaysAutoName?: boolean;\n\n  unstable__refActions?: Record<string, RefActionRegistration<P>>;\n}\n\nexport interface FunctionParam<P> {\n  name: string;\n  displayName?: string;\n  type: PropType<P>;\n}\n\nexport interface RefActionRegistration<P> {\n  displayName?: string;\n  description?: string;\n  parameters: FunctionParam<P>[];\n}\n\nexport interface ComponentRegistration {\n  component: React.ComponentType<any>;\n  meta: ComponentMeta<any>;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicComponentRegistry: ComponentRegistration[];\n  }\n}\n\nif (root.__PlasmicComponentRegistry == null) {\n  root.__PlasmicComponentRegistry = [];\n}\n\nexport default function registerComponent<T extends React.ComponentType<any>>(\n  component: T,\n  meta: ComponentMeta<React.ComponentProps<T>>\n) {\n  // Check for duplicates\n  if (\n    root.__PlasmicComponentRegistry.some(\n      (r: ComponentRegistration) =>\n        r.component === component && r.meta.name === meta.name\n    )\n  ) {\n    return;\n  }\n  root.__PlasmicComponentRegistry.push({ component, meta });\n}\n","import {\n  BooleanType,\n  ChoiceType,\n  CustomType,\n  FunctionParam,\n  JSONLikeType,\n  NumberType,\n  StringType,\n  SupportControlled,\n} from \"./registerComponent\";\n\nconst root = globalThis as any;\n\nexport type PropType<P> = SupportControlled<\n  | StringType<P>\n  | BooleanType<P>\n  | NumberType<P>\n  | JSONLikeType<P>\n  | ChoiceType<P>\n  | CustomType<P>\n>;\n\ntype RestrictPropType<T, P> = T extends string\n  ? SupportControlled<\n      StringType<P> | ChoiceType<P> | JSONLikeType<P> | CustomType<P>\n    >\n  : T extends boolean\n  ? SupportControlled<BooleanType<P> | JSONLikeType<P> | CustomType<P>>\n  : T extends number\n  ? SupportControlled<NumberType<P> | JSONLikeType<P> | CustomType<P>>\n  : PropType<P>;\n\ntype DistributedKeyOf<T> = T extends any ? keyof T : never;\n\nexport interface GlobalContextMeta<P> {\n  /**\n   * Any unique string name used to identify that context. Each context\n   * should be registered with a different `meta.name`, even if they have the\n   * same name in the code.\n   */\n  name: string;\n  /**\n   * The name to be displayed for the context in Studio. Optional: if not\n   * specified, `meta.name` is used.\n   */\n  displayName?: string;\n  /**\n   * The description of the context to be shown in Studio.\n   */\n  description?: string;\n  /**\n   * The javascript name to be used when generating code. Optional: if not\n   * provided, `meta.name` is used.\n   */\n  importName?: string;\n  /**\n   * An object describing the context properties to be used in Studio.\n   * For each `prop`, there should be an entry `meta.props[prop]` describing\n   * its type.\n   */\n  props: { [prop in DistributedKeyOf<P>]?: RestrictPropType<P[prop], P> } & {\n    [prop: string]: PropType<P>;\n  };\n  /**\n   * The path to be used when importing the context in the generated code.\n   * It can be the name of the package that contains the context, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   *  Whether the context is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n  /**\n   * The prop that receives and forwards a React `ref`. Plasmic only uses `ref`\n   * to interact with components, so it's not used in the generated code.\n   * Optional: If not provided, the usual `ref` is used.\n   */\n  refProp?: string;\n  /**\n   * Whether the global context provides data to its children using DataProvider.\n   */\n  providesData?: boolean;\n\n  unstable__globalActions?: Record<string, GlobalActionRegistration<P>>;\n}\n\nexport interface GlobalContextRegistration {\n  component: React.ComponentType<any>;\n  meta: GlobalContextMeta<any>;\n}\n\nexport interface GlobalActionRegistration<P> {\n  displayName?: string;\n  description?: string;\n  parameters: FunctionParam<P>[];\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicContextRegistry: GlobalContextRegistration[];\n  }\n}\n\nif (root.__PlasmicContextRegistry == null) {\n  root.__PlasmicContextRegistry = [];\n}\n\nexport default function registerGlobalContext<\n  T extends React.ComponentType<any>\n>(component: T, meta: GlobalContextMeta<React.ComponentProps<T>>) {\n  // Check for duplicates\n  if (\n    root.__PlasmicContextRegistry.some(\n      (r: GlobalContextRegistration) =>\n        r.component === component && r.meta.name === meta.name\n    )\n  ) {\n    return;\n  }\n  root.__PlasmicContextRegistry.push({ component, meta });\n}\n","export type TokenType =\n  | \"color\"\n  | \"spacing\"\n  | \"font-family\"\n  | \"font-size\"\n  | \"line-height\"\n  | \"opacity\";\n\nexport interface TokenRegistration {\n  name: string;\n  value: string;\n  type: TokenType;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicTokenRegistry: TokenRegistration[];\n  }\n}\n\nconst root = globalThis as any;\n\nif (root.__PlasmicTokenRegistry == null) {\n  root.__PlasmicTokenRegistry = [];\n}\n\nexport default function registerToken(token: TokenRegistration) {\n  root.__PlasmicTokenRegistry.push(token);\n}\n","const root = globalThis as any;\n\nexport interface BasicTrait {\n  label?: string;\n  type: \"text\" | \"number\" | \"boolean\";\n}\n\nexport interface ChoiceTrait {\n  label?: string;\n  type: \"choice\";\n  options: string[];\n}\n\nexport type TraitMeta = BasicTrait | ChoiceTrait;\n\nexport interface TraitRegistration {\n  trait: string;\n  meta: TraitMeta;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicTraitRegistry: TraitRegistration[];\n  }\n}\n\nif (root.__PlasmicTraitRegistry == null) {\n  root.__PlasmicTraitRegistry = [];\n}\n\nexport default function registerTrait(trait: string, meta: TraitMeta) {\n  root.__PlasmicTraitRegistry.push({\n    trait,\n    meta,\n  });\n}\n","import { cloneElement, isValidElement } from \"react\";\n\n/**\n * Allows elements to be repeated in Plasmic Studio.\n * @param index The index of the copy (starting at 0).\n * @param elt the React element to be repeated (or an array of such).\n */\nexport default function repeatedElement<T>(index: number, elt: T): T;\n/**\n * Allows elements to be repeated in Plasmic Studio.\n * @param isPrimary should be true for at most one instance of the element, and\n * indicates which copy of the element will be highlighted when the element is\n * selected in Studio.\n * @param elt the React element to be repeated (or an array of such).\n */\nexport default function repeatedElement<T>(isPrimary: boolean, elt: T): T;\nexport default function repeatedElement<T>(index: boolean | number, elt: T): T {\n  return repeatedElementFn(index as any, elt);\n}\n\nlet repeatedElementFn: typeof repeatedElement = (\n  index: boolean | number,\n  elt: any\n) => {\n  if (Array.isArray(elt)) {\n    return elt.map((v) => repeatedElementFn(index as any, v)) as any;\n  }\n  if (elt && isValidElement(elt) && typeof elt !== \"string\") {\n    return cloneElement(elt) as any;\n  }\n  return elt;\n};\n\nconst root = globalThis as any;\nexport const setRepeatedElementFn: (fn: typeof repeatedElement) => void =\n  root?.__Sub?.setRepeatedElementFn ??\n  function (fn: typeof repeatedElement) {\n    repeatedElementFn = fn;\n  };\n","export const hostVersion = \"1.0.111\";\n","import * as PlasmicQuery from \"@plasmicapp/query\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { registerRenderErrorListener, setPlasmicRootNode } from \"./canvas-host\";\nimport * as hostModule from \"./exports\";\nimport { setRepeatedElementFn } from \"./repeatedElement\";\n// version.ts is automatically generated by `yarn build` and not committed.\nimport { hostVersion } from \"./version\";\n\n// All exports must come from \"./exports\"\nexport * from \"./exports\";\n\nconst root = globalThis as any;\n\nif (root.__Sub == null) {\n  // Creating a side effect here by logging, so that vite won't\n  // ignore this block for whatever reason. Hiding this for now\n  // as users are complaining; will have to check if this has\n  // been fixed with vite.\n  // console.log(\"Plasmic: Setting up app host dependencies\");\n  root.__Sub = {\n    React,\n    ReactDOM,\n    PlasmicQuery,\n    hostModule,\n    hostVersion,\n    hostUtils: {\n      setPlasmicRootNode,\n      registerRenderErrorListener,\n      setRepeatedElementFn,\n    },\n\n    // For backwards compatibility:\n    setPlasmicRootNode,\n    registerRenderErrorListener,\n    setRepeatedElementFn,\n    ...hostModule,\n  };\n}\n"],"names":["isString","x","ensure","msg","undefined","Error","useForceUpdate","useState","setTick","update","useCallback","tick","root","globalThis","__PlasmicHostVersion","rootChangeListeners","PlasmicRootNodeWrapper","value","val","forEach","f","plasmicRootNode","getHashParams","URLSearchParams","location","hash","replace","getPlasmicOrigin","params","get","getStudioHash","hashParams","has","urlParams","URL","href","searchParams","renderStudioIntoIframe","script","document","createElement","plasmicOrigin","src","body","appendChild","renderCount","setPlasmicRootNode","node","set","PlasmicCanvasContext","React","usePlasmicCanvasContext","_PlasmicCanvasHost","isFrameAttached","window","parent","isCanvas","match","isLive","shouldRenderStudio","querySelector","locationHash","JSON","parse","activeGlobalVariants","setActiveGlobalVariants","forceUpdate","push","index","indexOf","splice","scriptElt","id","async","onload","__GetlibsReadyResolver","head","append","listener","event","data","source","addEventListener","removeEventListener","appDiv","classList","add","plasmicContextValue","componentName","globalVariants","interactive","ReactDOM","ErrorBoundary","key","Provider","encodeURIComponent","style","width","height","border","position","top","left","zIndex","PlasmicCanvasHost","props","enableWebpackHmr","setNode","DisableWebpackHmr","renderErrorListeners","registerRenderErrorListener","state","getDerivedStateFromError","error","componentDidCatch","render","message","children","process","env","NODE_ENV","type","dangerouslySetInnerHTML","__html","tuple","args","DataContext","createContext","mkMetaName","name","mkMetaValue","meta","applySelector","rawData","selector","curData","split","useSelector","useDataEnv","useSelectors","selectors","Object","fromEntries","entries","filter","map","useContext","DataProvider","hidden","label","existingEnv","PageParamsProvider","query","$ctx","DataCtxReader","__PlasmicFetcherRegistry","registerFetcher","fetcher","GlobalActionsContext","GlobalActionsProvider","contextName","actions","namespacedActions","useMemo","useGlobalActions","__PlasmicComponentRegistry","registerComponent","component","some","r","__PlasmicContextRegistry","registerGlobalContext","__PlasmicTokenRegistry","registerToken","token","__PlasmicTraitRegistry","registerTrait","trait","repeatedElement","elt","repeatedElementFn","Array","isArray","v","isValidElement","cloneElement","setRepeatedElementFn","__Sub","fn","hostVersion","PlasmicQuery","hostModule","hostUtils"],"mappings":"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"}