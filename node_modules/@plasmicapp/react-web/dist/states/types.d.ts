export declare type InitFuncEnv = {
    $props: Record<string, any>;
    $state: Record<string, any>;
    $queries?: Record<string, any>;
    $ctx?: Record<string, any>;
};
export declare type DollarStateEnv = Omit<InitFuncEnv, "$state">;
export declare type NoUndefinedField<T> = {
    [P in keyof T]-?: T[P];
};
export declare type InitFunc<T> = (env: NoUndefinedField<InitFuncEnv>) => T;
export declare type DeprecatedInitFunc<T> = ($props: Record<string, any>, $state: $State, $ctx: Record<string, any>) => T;
export declare type ObjectPath = (string | number)[];
export interface $StateSpec<T> {
    path: string;
    initFunc?: InitFunc<T>;
    initVal?: T;
    type: "private" | "readonly" | "writable";
    valueProp?: string;
    onChangeProp?: string;
    isImmutable?: boolean;
    variableType: "text" | "number" | "boolean" | "array" | "object" | "variant";
}
export interface $State {
    [key: string]: any;
    registerInitFunc?: (path: string, f: InitFunc<any>, repetitonIndex?: number[]) => any;
}
export declare const ARRAY_SYMBOL: unique symbol;
export declare const PLASMIC_STATE_PROXY_SYMBOL: unique symbol;
export interface Internal$StateSpec<T> extends $StateSpec<T> {
    isRepeated: boolean;
    pathObj: (string | symbol)[];
}
export interface Internal$StateInstance {
    path: ObjectPath;
    specKey: string;
}
