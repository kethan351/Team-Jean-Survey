import { useLayoutEffect } from "react";
import { $State, ObjectPath } from "./types";
export declare function generateStateOnChangeProp($state: $State, path: ObjectPath): (val: any) => void;
export declare function generateStateValueProp($state: $State, path: ObjectPath): any;
export declare const useIsomorphicLayoutEffect: typeof useLayoutEffect;
export declare function isPlasmicStateProxy(obj: any): boolean;
export declare function getStateCellsInPlasmicProxy(obj: any): {
    realPath: ObjectPath;
    path: string;
}[];
export declare function getStateSpecInPlasmicProxy(obj: any, path: ObjectPath): {
    spec: import("./types").Internal$StateSpec<any>;
    isImplicitStateArray: boolean;
} | undefined;
export declare function shallowEqual<T>(a1: T[], a2: T[]): boolean;
/**
 * Shallow comparison of arrays.
 */
export declare function arrayEq(xs: ReadonlyArray<any>, ys: ReadonlyArray<any>): boolean;
export declare function isNum(value: string | number | symbol): value is number;
declare type StringGen = string | (() => string);
export declare function assert<T>(cond: T, msg?: StringGen): asserts cond;
/**
 * Forked from https://github.com/lukeed/dset
 * Changes: fixed setting a deep value to a proxy object
 */
export declare function set(obj: any, keys: any, val: any): void;
export {};
