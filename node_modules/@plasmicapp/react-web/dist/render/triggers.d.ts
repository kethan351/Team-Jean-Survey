import * as React from "react";
declare function useFocused(opts: {
    isTextInput?: boolean;
}): (boolean | import("@react-types/shared").DOMAttributes<import("@react-types/shared").FocusableElement>)[];
declare function useFocusVisible(opts: {
    isTextInput?: boolean;
}): (boolean | import("@react-types/shared").DOMAttributes<import("@react-types/shared").FocusableElement>)[];
declare function useFocusedWithin(opts: {
    isTextInput?: boolean;
}): (boolean | import("@react-types/shared").DOMAttributes<import("@react-types/shared").FocusableElement>)[];
declare function useFocusVisibleWithin(opts: {
    isTextInput?: boolean;
}): (boolean | import("@react-types/shared").DOMAttributes<import("@react-types/shared").FocusableElement>)[];
declare function useHover(): (boolean | {
    onMouseEnter: () => void;
    onMouseLeave: () => void;
})[];
declare function usePressed(): (boolean | {
    onMouseDown: () => void;
    onMouseUp: () => void;
})[];
declare const TRIGGER_TO_HOOK: {
    readonly useHover: typeof useHover;
    readonly useFocused: typeof useFocused;
    readonly useFocusVisible: typeof useFocusVisible;
    readonly useFocusedWithin: typeof useFocusedWithin;
    readonly useFocusVisibleWithin: typeof useFocusVisibleWithin;
    readonly usePressed: typeof usePressed;
};
declare type TriggerType = keyof typeof TRIGGER_TO_HOOK;
interface TriggerOpts {
    isTextInput?: boolean;
}
/**
 * Installs argment trigger. All the useTrigger calls must use hardcoded `trigger` arg,
 * as it's not valid to install variable React hooks!
 */
export declare function useTrigger(trigger: TriggerType, opts: TriggerOpts): [boolean, React.HTMLAttributes<HTMLElement>];
export {};
