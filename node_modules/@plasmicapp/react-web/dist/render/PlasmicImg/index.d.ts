/**
 * Responsive `<img/>` replacement, based on `next/image`
 */
import React from "react";
export interface ImageLoader {
    supportsUrl: (url: string) => boolean;
    transformUrl: (opts: {
        src: string;
        width?: number;
        quality?: number;
        format?: "webp";
    }) => string;
}
declare type ImgTagProps = Omit<React.ComponentProps<"img">, "src" | "srcSet" | "ref" | "style">;
export interface PlasmicImgProps extends ImgTagProps {
    /**
     * Either an object with the src string, and its full width and height,
     * or just a src string with unknown intrinsic dimensions.
     */
    src?: string | {
        src: string | {
            src: string;
            height: number;
            width: number;
            blurDataURL?: string;
        };
        fullHeight: number;
        fullWidth: number;
        aspectRatio?: number;
    };
    /**
     * className applied to the wrapper element if one is used.
     */
    className?: string;
    /**
     * css width
     */
    displayWidth?: number | string;
    /**
     * css height
     */
    displayHeight?: number | string;
    /**
     * css min-width
     */
    displayMinWidth?: number | string;
    /**
     * css min-height
     */
    displayMinHeight?: number | string;
    /**
     * css max-width
     */
    displayMaxWidth?: number | string;
    /**
     * css max-height
     */
    displayMaxHeight?: number | string;
    /**
     * For variable quality formats like jpg, the quality from 0 to 100
     */
    quality?: number;
    /**
     * ImageLoader to use for loading different dimensions of the image.
     * If none specified, will not attempt to load different dimensions.
     */
    loader?: "plasmic" | ImageLoader;
    /**
     * Style applied to the wrapper element. objectFit and objectPosition
     * rules are applied to the img element.
     */
    style?: React.CSSProperties;
    /**
     * Ref for the img element.  The normal <PlasmicImg ref={...} />
     * prop gives the root element instead, which may be the img element
     * or a wrapper element
     */
    imgRef?: React.Ref<HTMLImageElement>;
}
export declare const PlasmicImg: React.ForwardRefExoticComponent<PlasmicImgProps & React.RefAttributes<HTMLElement>>;
export {};
