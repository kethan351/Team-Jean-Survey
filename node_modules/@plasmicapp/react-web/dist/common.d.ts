export declare function notNil<T>(x: T | undefined | null): x is T;
export declare function pick<T extends {}>(obj: T, ...keys: (string | number | symbol)[]): Partial<T>;
export declare function pickBy<T extends {}>(obj: T, func: (key: string, val: any) => boolean): Partial<T>;
export declare function omit<T extends {}>(obj: T, ...keys: (keyof T)[]): Partial<T>;
export declare function isSubset<T>(a1: T[], a2: T[]): boolean;
export declare function chainSingleArgFuncs<A>(...funcs: ((arg: A) => A)[]): ((arg: A) => A) | undefined;
export declare function ensure<T>(x: T | null | undefined): T;
export declare function isString(x: any): x is string;
export declare function groupBy<T>(collection: T[], keyFunc: (x: T) => string): Record<string, T[]>;
export declare function mapValues<V, V2>(obj: Record<string, V>, mapper: (value: V) => V2): Record<string, V2>;
