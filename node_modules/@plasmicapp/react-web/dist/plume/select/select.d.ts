import { Placement } from "@react-types/overlays";
import { AriaLabelingProps, DOMProps, FocusableDOMProps, FocusableProps, InputBase } from "@react-types/shared";
import * as React from "react";
import { ItemJson, ItemLikeProps, SectionLikeProps } from "../collection-utils";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
import { StyleProps } from "../props-utils";
export interface BaseSelectProps extends DOMProps, AriaLabelingProps, FocusableDOMProps, InputBase, FocusableProps, StyleProps {
    /**
     * Key of the currently selected value
     */
    value?: string | null;
    /**
     * Event handler fired when currently selected value changes
     */
    onChange?: (value: string | null) => void;
    /**
     * Uncontrolled key of the default selected value
     */
    defaultValue?: string;
    /**
     * List of Select.Options
     */
    children?: React.ReactNode;
    /**
     * List of options as an array, instead of using `children` prop. If this
     * is passed in, then `children` is ignored.
     *
     * The options can be a list of strings, or a list of objects with
     * fields `value` (for the value of the option), `label` (for what's rendered
     * in the option), and `isDisabled` (if the option should be disabled).
     */
    options?: ItemJson[];
    /**
     * Whether the Select is currently open
     */
    isOpen?: boolean;
    /**
     * Event handler fired when Select's open state changes
     */
    onOpenChange?: (isOpen: boolean) => void;
    /**
     * Uncontrolled default open state
     */
    defaultOpen?: boolean;
    /**
     * Form name of the select element
     */
    name?: string;
    /**
     * By default, Select will render whatever is in Select.Option as the
     * content in the trigger button when it is selected.  You can override
     * what content by passing in `selectedContent` here.
     */
    selectedContent?: React.ReactNode;
    /**
     * Desired placement location of the Select dropdown
     */
    placement?: Placement;
    /**
     * If true, menu width will always match the trigger button width.
     * If false, then menu width will have min-width matching the
     * trigger button width.
     */
    menuMatchTriggerWidth?: boolean;
    /**
     * If set, menu width will be exactly this width, overriding
     * menuMatchTriggerWidth.
     */
    menuWidth?: number;
    /**
     * Content to display when nothing is selected.
     */
    placeholder?: React.ReactNode;
}
export declare type SelectRef = React.Ref<SelectRefValue>;
export interface SelectRefValue extends SelectState {
    getTrigger: () => HTMLElement | null;
    getRoot: () => HTMLElement | null;
    focus: () => void;
    blur: () => void;
}
interface SelectConfig<C extends AnyPlasmicClass> {
    placeholderVariant?: VariantDef<PlasmicClassVariants<C>>;
    isOpenVariant: VariantDef<PlasmicClassVariants<C>>;
    isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;
    triggerContentSlot: keyof PlasmicClassArgs<C>;
    optionsSlot: keyof PlasmicClassArgs<C>;
    placeholderSlot: keyof PlasmicClassArgs<C>;
    root: keyof PlasmicClassOverrides<C>;
    trigger: keyof PlasmicClassOverrides<C>;
    overlay: keyof PlasmicClassOverrides<C>;
    optionsContainer: keyof PlasmicClassOverrides<C>;
    OptionComponent?: React.ComponentType<ItemLikeProps>;
    OptionGroupComponent?: React.ComponentType<SectionLikeProps>;
}
interface SelectState {
    open: () => void;
    close: () => void;
    isOpen: () => boolean;
    getSelectedValue: () => string | null;
    setSelectedValue: (value: string | null) => void;
}
export declare function useSelect<P extends BaseSelectProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: SelectConfig<C>, ref?: React.Ref<SelectRefValue>): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        args: PlasmicClassArgs<C>;
        overrides: PlasmicClassOverrides<C>;
    };
    state: SelectState;
};
export {};
