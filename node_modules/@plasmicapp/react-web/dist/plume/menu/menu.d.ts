import { AriaLabelingProps, DOMProps } from "@react-types/shared";
import * as React from "react";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
import { StyleProps } from "../props-utils";
export interface BaseMenuProps extends DOMProps, AriaLabelingProps, StyleProps {
    /**
     * List of `Menu.Item`s or `Menu.Group`s that make up the menu
     */
    children?: React.ReactNode;
    /**
     * Called with the value of a `Menu.Item` when it is selected.
     */
    onAction?: (value: string) => void;
}
export declare type MenuRef = React.Ref<MenuRefValue>;
export interface MenuRefValue extends MenuState {
    getRoot: () => HTMLElement | null;
}
export interface MenuConfig<C extends AnyPlasmicClass> {
    isPlacedTopVariant?: VariantDef<PlasmicClassVariants<C>>;
    isPlacedBottomVariant?: VariantDef<PlasmicClassVariants<C>>;
    isPlacedLeftVariant?: VariantDef<PlasmicClassVariants<C>>;
    isPlacedRightVariant?: VariantDef<PlasmicClassVariants<C>>;
    itemsSlot: keyof PlasmicClassArgs<C>;
    itemsContainer: keyof PlasmicClassOverrides<C>;
    root: keyof PlasmicClassOverrides<C>;
}
export interface MenuState {
    getFocusedValue: () => string | null;
    setFocusedValue: (value: string) => void;
}
export declare function useMenu<P extends BaseMenuProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: MenuConfig<C>, ref?: MenuRef): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        args: PlasmicClassArgs<C>;
        overrides: PlasmicClassOverrides<C>;
    };
    state: MenuState;
};
