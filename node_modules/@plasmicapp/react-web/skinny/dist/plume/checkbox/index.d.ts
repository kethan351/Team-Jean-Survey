import { AriaCheckboxProps } from "@react-types/checkbox";
import * as React from "react";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
import { StyleProps } from "../props-utils";
export type CheckboxRef = React.Ref<CheckboxRefValue>;
export interface CheckboxRefValue extends CheckboxState {
    getRoot: () => HTMLElement | null;
    focus: () => void;
    blur: () => void;
}
interface CheckboxState {
    setChecked: (checked: boolean) => void;
}
export interface CheckboxProps extends Omit<AriaCheckboxProps, "isSelected" | "defaultSelected">, StyleProps {
    /**
     * Whether the Checkbox is checked or not; controlled
     */
    isChecked?: boolean;
    /**
     * Whether the Checkbox is checked by default; uncontrolled
     */
    defaultChecked?: boolean;
    /**
     * Whether the Checkbox is in an "indeterminate" state; this usually
     * refers to a "check all" that is used to check / uncheck many other
     * checkboxes, and is visually indeterminate if some of its controlled
     * checkboxes are checked and some are not.
     */
    isIndeterminate?: boolean;
}
interface CheckboxConfig<C extends AnyPlasmicClass> {
    isCheckedVariant: VariantDef<PlasmicClassVariants<C>>;
    isIndeterminateVariant?: VariantDef<PlasmicClassVariants<C>>;
    isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;
    noLabelVariant?: VariantDef<PlasmicClassVariants<C>>;
    labelSlot?: keyof PlasmicClassArgs<C>;
    root: keyof PlasmicClassOverrides<C>;
}
export declare function useCheckbox<P extends CheckboxProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: CheckboxConfig<C>, ref?: CheckboxRef): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        overrides: PlasmicClassOverrides<C>;
        args: PlasmicClassArgs<C>;
    };
    state: CheckboxState;
};
export {};
