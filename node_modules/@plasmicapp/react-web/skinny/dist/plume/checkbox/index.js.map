{"version":3,"file":"index.js","sources":["../../../../src/plume/checkbox/index.tsx"],"sourcesContent":["import { useCheckbox as useAriaCheckbox } from \"@react-aria/checkbox\";\nimport { VisuallyHidden } from \"@react-aria/visually-hidden\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { AriaCheckboxProps } from \"@react-types/checkbox\";\nimport * as React from \"react\";\nimport { pick } from \"../../common\";\nimport { mergeProps } from \"../../react-utils\";\nimport { Overrides } from \"../../render/elements\";\nimport { useEnsureSSRProvider } from \"../../render/ssr\";\nimport {\n  AnyPlasmicClass,\n  mergeVariantToggles,\n  PlasmicClassArgs,\n  PlasmicClassOverrides,\n  PlasmicClassVariants,\n  VariantDef,\n} from \"../plume-utils\";\nimport { getStyleProps, StyleProps } from \"../props-utils\";\n\nexport type CheckboxRef = React.Ref<CheckboxRefValue>;\nexport interface CheckboxRefValue extends CheckboxState {\n  getRoot: () => HTMLElement | null;\n  focus: () => void;\n  blur: () => void;\n}\n\ninterface CheckboxState {\n  setChecked: (checked: boolean) => void;\n}\n\nexport interface CheckboxProps\n  extends Omit<AriaCheckboxProps, \"isSelected\" | \"defaultSelected\">,\n    StyleProps {\n  /**\n   * Whether the Checkbox is checked or not; controlled\n   */\n  isChecked?: boolean;\n\n  /**\n   * Whether the Checkbox is checked by default; uncontrolled\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * Whether the Checkbox is in an \"indeterminate\" state; this usually\n   * refers to a \"check all\" that is used to check / uncheck many other\n   * checkboxes, and is visually indeterminate if some of its controlled\n   * checkboxes are checked and some are not.\n   */\n  isIndeterminate?: boolean;\n}\n\nfunction asAriaCheckboxProps(props: CheckboxProps) {\n  const ariaProps = {\n    ...props,\n    isSelected: props.isChecked,\n    defaultSelected: props.defaultChecked,\n  };\n  delete ariaProps[\"isChecked\"];\n  delete ariaProps[\"defaultChecked\"];\n  return ariaProps;\n}\n\ninterface CheckboxConfig<C extends AnyPlasmicClass> {\n  isCheckedVariant: VariantDef<PlasmicClassVariants<C>>;\n  isIndeterminateVariant?: VariantDef<PlasmicClassVariants<C>>;\n  isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;\n  noLabelVariant?: VariantDef<PlasmicClassVariants<C>>;\n  labelSlot?: keyof PlasmicClassArgs<C>;\n  root: keyof PlasmicClassOverrides<C>;\n}\n\nexport function useCheckbox<P extends CheckboxProps, C extends AnyPlasmicClass>(\n  plasmicClass: C,\n  props: P,\n  config: CheckboxConfig<C>,\n  ref: CheckboxRef = null\n) {\n  const { children, isDisabled, isIndeterminate } = props;\n  useEnsureSSRProvider();\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const rootRef = React.useRef<HTMLElement>(null);\n  const ariaProps = asAriaCheckboxProps(props);\n  const state = useToggleState(ariaProps);\n  const { inputProps } = useAriaCheckbox(ariaProps, state, inputRef);\n  const variants = {\n    ...pick(props, ...plasmicClass.internalVariantProps),\n    ...mergeVariantToggles(\n      {\n        def: config.isDisabledVariant,\n        active: isDisabled,\n      },\n      {\n        def: config.isCheckedVariant,\n        active: state.isSelected,\n      },\n      {\n        def: config.isIndeterminateVariant,\n        active: isIndeterminate,\n      },\n      {\n        def: config.noLabelVariant,\n        active: !children,\n      }\n    ),\n  };\n  const overrides: Overrides = {\n    [config.root]: {\n      as: \"label\",\n      props: mergeProps(getStyleProps(props), {\n        ref: rootRef,\n      }),\n      wrapChildren: (children: React.ReactNode) => (\n        <>\n          <VisuallyHidden>\n            <input {...inputProps} ref={inputRef} />\n          </VisuallyHidden>\n          {children}\n        </>\n      ),\n    },\n  };\n  const args = {\n    ...pick(props, ...plasmicClass.internalArgProps),\n    ...(config.labelSlot ? { [config.labelSlot]: children } : {}),\n  };\n\n  const plumeState: CheckboxState = React.useMemo(\n    () => ({\n      setChecked: (checked: boolean) => state.setSelected(checked),\n    }),\n    [state]\n  );\n\n  React.useImperativeHandle(\n    ref,\n    () => ({\n      getRoot: () => rootRef.current,\n      focus: () => inputRef.current?.focus(),\n      blur: () => inputRef.current?.blur(),\n      setChecked: (checked) => plumeState.setChecked(checked),\n    }),\n    [rootRef, inputRef, plumeState]\n  );\n\n  return {\n    plasmicProps: {\n      variants: variants as PlasmicClassVariants<C>,\n      overrides: overrides as PlasmicClassOverrides<C>,\n      args: args as PlasmicClassArgs<C>,\n    },\n    state: plumeState,\n  };\n}\n"],"names":["useAriaCheckbox"],"mappings":"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"}