import * as React from "react";
import { SingleChoiceArg } from "../render/elements";
export declare let PLUME_STRICT_MODE: boolean;
export declare function setPlumeStrictMode(mode: boolean): void;
type VariantArgChoices<T> = T extends (infer M)[] ? M : T extends SingleChoiceArg<infer M> ? M : never;
type VariantArgsChoices<V> = {
    [k in keyof V]-?: VariantArgChoices<V[k]>;
};
type DictValues<V extends Record<string, any>> = V[keyof V];
type DictTuples<V extends Record<string, any>> = DictValues<{
    [K in keyof V]: [K, V[K]];
}>;
export type VariantDefTuple<V> = DictTuples<VariantArgsChoices<V>>;
type DistributeTuple<T> = T extends [infer T1, infer T2] ? {
    group: T1;
    variant: T2;
} : never;
export type VariantDef<V> = DistributeTuple<VariantDefTuple<V>>;
export type PlasmicClass<V extends Record<string, any>, A extends Record<string, any>, O extends Record<string, any>> = {
    (props: {
        variants?: V;
        args?: A;
        overrides?: O;
    }): React.ReactElement | null;
    internalVariantProps: (keyof V)[];
    internalArgProps: (keyof A)[];
};
export type AnyPlasmicClass = PlasmicClass<any, any, any>;
export type PlasmicClassVariants<C extends AnyPlasmicClass> = C extends PlasmicClass<infer V, any, any> ? V : unknown;
export type PlasmicClassArgs<C extends AnyPlasmicClass> = C extends PlasmicClass<any, infer A, any> ? A : unknown;
export type PlasmicClassOverrides<C extends AnyPlasmicClass> = C extends PlasmicClass<any, any, infer O> ? O : unknown;
type BooleanLike = boolean | undefined | null;
export declare function mergeVariantToggles<V>(...toggles: {
    def?: VariantDef<V>;
    active: BooleanLike;
}[]): Record<string, any>;
export declare function noOutline(): {
    outline: string;
};
export declare function getPlumeType(child: React.ReactChild): string | undefined;
export {};
