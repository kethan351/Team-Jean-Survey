import * as React from 'react';
import { useMenuTriggerState } from '@react-stately/menu';
import { m as mergeProps } from '../../react-utils-76d05959.js';
import { T as TriggeredOverlayContext } from '../../context-034b8d25.js';
import { c as __assign, p as pick, d as __spreadArray, e as __read } from '../../common-c2744215.js';
import { useMenuTrigger as useMenuTrigger$1 } from '@react-aria/menu';
import { usePress } from '@react-aria/interactions';
import { g as getPlumeType, m as mergeVariantToggles } from '../../plume-utils-653f4b8a.js';
import { useFocusable } from '@react-aria/focus';
import { a as useEnsureSSRProvider } from '../../ssr-08aff522.js';
import { g as getStyleProps } from '../../props-utils-70c2d02a.js';
import 'classnames';
import '@plasmicapp/data-sources-context';
import '@react-aria/ssr';
import '../../render/PlasmicHead/index.js';

/**
 * A menu trigger hook that combines react-aria's useMenuTrigger, useAriaMenuTrigger,
 * useOverlayPosition, useOverlay, and usePress
 */
function useMenuTrigger(opts, state) {
    var triggerRef = opts.triggerRef, isDisabled = opts.isDisabled, placement = opts.placement, menuMatchTriggerWidth = opts.menuMatchTriggerWidth, menuWidth = opts.menuWidth, menu = opts.menu;
    var _a = useMenuTrigger$1({
        type: "menu",
        isDisabled: isDisabled
    }, state, triggerRef), triggerPressProps = _a.menuTriggerProps, menuProps = _a.menuProps;
    var triggerProps = usePress(__assign(__assign({}, triggerPressProps), { isDisabled: isDisabled })).pressProps;
    var makeMenu = function () {
        var realMenu = typeof menu === "function" ? menu() : menu;
        if (!realMenu) {
            return null;
        }
        if (getPlumeType(realMenu) !== "menu") {
            {
                throw new Error("Must use an instance of the Menu component.");
            }
        }
        return React.cloneElement(realMenu, mergeProps(realMenu.props, menuProps));
    };
    var triggerContext = React.useMemo(function () {
        var _a;
        return ({
            triggerRef: triggerRef,
            state: state,
            autoFocus: (_a = state.focusStrategy) !== null && _a !== void 0 ? _a : true,
            placement: placement,
            overlayMatchTriggerWidth: menuMatchTriggerWidth,
            overlayMinTriggerWidth: true,
            overlayWidth: menuWidth
        });
    }, [triggerRef, state, placement, menuMatchTriggerWidth, menuWidth]);
    return {
        triggerProps: triggerProps,
        makeMenu: makeMenu,
        triggerContext: triggerContext
    };
}

function DropdownMenu(props) {
    var isOpen = props.isOpen, defaultOpen = props.defaultOpen, onOpenChange = props.onOpenChange, children = props.children, placement = props.placement, menu = props.menu;
    var triggerRef = React.useRef(null);
    var state = useMenuTriggerState({
        isOpen: isOpen,
        defaultOpen: defaultOpen,
        onOpenChange: onOpenChange,
        shouldFlip: true
    });
    var _a = useMenuTrigger({
        triggerRef: triggerRef,
        placement: placement,
        menu: menu
    }, state), triggerProps = _a.triggerProps, makeMenu = _a.makeMenu, triggerContext = _a.triggerContext;
    return (React.createElement(TriggeredOverlayContext.Provider, { value: triggerContext },
        React.cloneElement(children, mergeProps(children.props, triggerProps, { ref: triggerRef })),
        state.isOpen && makeMenu()));
}

function useMenuButton(plasmicClass, props, config, outerRef) {
    var _a, _b;
    if (outerRef === void 0) { outerRef = null; }
    var placement = props.placement, isOpen = props.isOpen, defaultOpen = props.defaultOpen, onOpenChange = props.onOpenChange, isDisabled = props.isDisabled, menu = props.menu, autoFocus = props.autoFocus, menuMatchTriggerWidth = props.menuMatchTriggerWidth, menuWidth = props.menuWidth;
    useEnsureSSRProvider();
    var rootRef = React.useRef(null);
    var triggerRef = React.useRef(null);
    var state = useMenuTriggerState({
        isOpen: isOpen,
        defaultOpen: defaultOpen,
        onOpenChange: onOpenChange,
        shouldFlip: true
    });
    var _c = useMenuTrigger({
        isDisabled: isDisabled,
        triggerRef: triggerRef,
        placement: placement,
        menuMatchTriggerWidth: menuMatchTriggerWidth,
        menuWidth: menuWidth,
        menu: menu
    }, state), triggerProps = _c.triggerProps, makeMenu = _c.makeMenu, triggerContext = _c.triggerContext;
    var triggerFocusProps = useFocusable(props, triggerRef).focusableProps;
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({ def: config.isOpenVariant, active: state.isOpen }, { def: config.isDisabledVariant, active: isDisabled }));
    var args = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (_a = {}, _a[config.menuSlot] = state.isOpen ? makeMenu() : undefined, _a));
    var overrides = (_b = {},
        _b[config.root] = {
            wrapChildren: function (children) { return (React.createElement(TriggeredOverlayContext.Provider, { value: triggerContext }, children)); },
            props: {
                ref: rootRef
            }
        },
        _b[config.trigger] = {
            props: mergeProps(triggerProps, triggerFocusProps, getStyleProps(props), pick(props, "title"), {
                ref: triggerRef,
                autoFocus: autoFocus,
                disabled: !!isDisabled,
                // Make sure this button is not interpreted as submit
                type: "button"
            })
        },
        _b);
    var plumeState = React.useMemo(function () { return ({
        open: function () { return state.open(); },
        close: function () { return state.close(); },
        isOpen: function () { return state.isOpen; }
    }); }, [state]);
    React.useImperativeHandle(outerRef, function () { return ({
        getRoot: function () { return rootRef.current; },
        getTrigger: function () { return triggerRef.current; },
        focus: function () { return triggerRef.current && triggerRef.current.focus(); },
        blur: function () { return triggerRef.current && triggerRef.current.blur(); },
        open: plumeState.open,
        close: plumeState.close,
        isOpen: plumeState.isOpen
    }); }, [rootRef, triggerRef, plumeState]);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides
        },
        state: plumeState
    };
}

export { DropdownMenu, useMenuButton };
//# sourceMappingURL=index.js.map
