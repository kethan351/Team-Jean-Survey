import { Placement } from "@react-types/overlays";
import { DOMProps, FocusableProps } from "@react-types/shared";
import * as React from "react";
import { BaseMenuProps } from "../menu/menu";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
import { StyleProps } from "../props-utils";
export interface BaseMenuButtonProps extends DOMProps, FocusableProps, StyleProps, Pick<React.ComponentProps<"button">, "title"> {
    /**
     * The menu to show; can either be a Menu instance, or a function that returns a Menu
     * instance if you want to defer creating the instance till when it's opened.
     */
    menu: React.ReactElement<BaseMenuProps> | (() => React.ReactElement<BaseMenuProps>);
    /**
     * Whether the button is disabled
     */
    isDisabled?: boolean;
    /**
     * Whether the menu is currently shown.
     */
    isOpen?: boolean;
    /**
     * Uncontrolled open state
     */
    defaultOpen?: boolean;
    /**
     * Event handler fired when Menu's open state changes
     */
    onOpenChange?: (isOpen: boolean) => void;
    /**
     * Desired placement location of the Select dropdown
     */
    placement?: Placement;
    /**
     * If true, menu width will always match the trigger button width.
     * If false, then menu width will have min-width matching the
     * trigger button width.
     */
    menuMatchTriggerWidth?: boolean;
    /**
     * If set, menu width will be exactly this width, overriding
     * menuMatchTriggerWidth.
     */
    menuWidth?: number;
}
export interface MenuButtonConfig<C extends AnyPlasmicClass> {
    isOpenVariant: VariantDef<PlasmicClassVariants<C>>;
    isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;
    menuSlot: keyof PlasmicClassArgs<C>;
    root: keyof PlasmicClassOverrides<C>;
    trigger: keyof PlasmicClassOverrides<C>;
}
interface MenuButtonState {
    open: () => void;
    close: () => void;
    isOpen: () => boolean;
}
export type MenuButtonRef = React.Ref<MenuButtonRefValue>;
export interface MenuButtonRefValue extends MenuButtonState {
    getRoot: () => HTMLElement | null;
    getTrigger: () => HTMLElement | null;
    focus: () => void;
    blur: () => void;
}
export declare function useMenuButton<P extends BaseMenuButtonProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: MenuButtonConfig<C>, outerRef?: MenuButtonRef): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        args: PlasmicClassArgs<C>;
        overrides: PlasmicClassOverrides<C>;
    };
    state: MenuButtonState;
};
export {};
