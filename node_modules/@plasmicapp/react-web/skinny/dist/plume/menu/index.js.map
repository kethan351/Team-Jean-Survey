{"version":3,"file":"index.js","sources":["../../../../src/plume/menu/context.tsx","../../../../src/plume/menu/menu.tsx","../../../../src/plume/menu/menu-group.tsx","../../../../src/plume/menu/menu-item.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type { TreeState } from \"@react-stately/tree\";\nimport type { BaseMenuProps } from \"./menu\";\n\nexport interface MenuContextValue {\n  menuProps: BaseMenuProps;\n  state: TreeState<any>;\n}\n\nexport const MenuContext = React.createContext<MenuContextValue | undefined>(\n  undefined\n);\n","import { useMenu as useAriaMenu } from \"@react-aria/menu\";\nimport { useTreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { AriaLabelingProps, DOMProps } from \"@react-types/shared\";\nimport * as React from \"react\";\nimport { pick } from \"../../common\";\nimport { mergeProps } from \"../../react-utils\";\nimport { Overrides } from \"../../render/elements\";\nimport { useEnsureSSRProvider } from \"../../render/ssr\";\nimport {\n  renderAsCollectionChild,\n  renderCollectionNode,\n  useDerivedItemsFromChildren,\n} from \"../collection-utils\";\nimport {\n  AnyPlasmicClass,\n  noOutline,\n  PlasmicClassArgs,\n  PlasmicClassOverrides,\n  PlasmicClassVariants,\n  VariantDef,\n} from \"../plume-utils\";\nimport { getStyleProps, StyleProps } from \"../props-utils\";\nimport { TriggeredOverlayContext } from \"../triggered-overlay/context\";\nimport { MenuContext } from \"./context\";\n\nexport interface BaseMenuProps extends DOMProps, AriaLabelingProps, StyleProps {\n  /**\n   * List of `Menu.Item`s or `Menu.Group`s that make up the menu\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Called with the value of a `Menu.Item` when it is selected.\n   */\n  onAction?: (value: string) => void;\n}\n\nexport type MenuRef = React.Ref<MenuRefValue>;\nexport interface MenuRefValue extends MenuState {\n  getRoot: () => HTMLElement | null;\n}\n\nconst COLLECTION_OPTS = {\n  itemPlumeType: \"menu-item\",\n  sectionPlumeType: \"menu-group\",\n};\n\nexport interface MenuConfig<C extends AnyPlasmicClass> {\n  isPlacedTopVariant?: VariantDef<PlasmicClassVariants<C>>;\n  isPlacedBottomVariant?: VariantDef<PlasmicClassVariants<C>>;\n  isPlacedLeftVariant?: VariantDef<PlasmicClassVariants<C>>;\n  isPlacedRightVariant?: VariantDef<PlasmicClassVariants<C>>;\n\n  itemsSlot: keyof PlasmicClassArgs<C>;\n  itemsContainer: keyof PlasmicClassOverrides<C>;\n  root: keyof PlasmicClassOverrides<C>;\n}\n\n/**\n * Converts props from BaseMenuProps to react-aria's useMenu() props.\n */\nfunction asAriaMenuProps(props: BaseMenuProps) {\n  const { children, ...rest } = props;\n  const { items, disabledKeys } = useDerivedItemsFromChildren(children, {\n    ...COLLECTION_OPTS,\n    invalidChildError: `Can only use Menu.Item and Menu.Group as children to Menu`,\n    requireItemValue: false,\n  });\n\n  const collectionChildRenderer = React.useCallback(\n    (child: any) => renderAsCollectionChild(child, COLLECTION_OPTS),\n    []\n  );\n\n  return {\n    ariaProps: {\n      ...rest,\n      children: collectionChildRenderer,\n      items,\n      disabledKeys,\n    } as AriaMenuProps<any>,\n  };\n}\n\nexport interface MenuState {\n  getFocusedValue: () => string | null;\n  setFocusedValue: (value: string) => void;\n}\n\nexport function useMenu<P extends BaseMenuProps, C extends AnyPlasmicClass>(\n  plasmicClass: C,\n  props: P,\n  config: MenuConfig<C>,\n  ref: MenuRef = null\n) {\n  useEnsureSSRProvider();\n  const { ariaProps } = asAriaMenuProps(props);\n  const triggerContext = React.useContext(TriggeredOverlayContext);\n  const rootRef = React.useRef<HTMLElement>(null);\n\n  const state = useTreeState(ariaProps);\n\n  const menuListRef = React.useRef<HTMLUListElement>(null);\n\n  const { menuProps } = useAriaMenu(\n    {\n      ...ariaProps,\n      autoFocus: triggerContext?.autoFocus,\n    },\n    state,\n    menuListRef\n  );\n\n  const contextValue = React.useMemo(() => ({ state, menuProps: props }), [\n    state,\n    props,\n  ]);\n\n  const variants = {\n    ...pick(props, ...plasmicClass.internalVariantProps),\n  };\n\n  const overrides: Overrides = {\n    [config.root]: {\n      props: mergeProps(getStyleProps(props), {\n        ref: rootRef,\n      }),\n    },\n    [config.itemsContainer]: {\n      as: \"ul\",\n      props: mergeProps(menuProps, {\n        ref: menuListRef,\n        style: {\n          ...noOutline(),\n        },\n      }),\n    },\n  };\n\n  const args = {\n    ...pick(props, ...plasmicClass.internalArgProps),\n    [config.itemsSlot]: (\n      <MenuContext.Provider value={contextValue}>\n        {Array.from(state.collection).map((node) => renderCollectionNode(node))}\n      </MenuContext.Provider>\n    ),\n  };\n\n  const plumeState: MenuState = React.useMemo(\n    () => ({\n      getFocusedValue: () => state.selectionManager.focusedKey as string | null,\n      setFocusedValue: (value: string) =>\n        state.selectionManager.setFocusedKey(value),\n    }),\n    [state]\n  );\n\n  React.useImperativeHandle(\n    ref,\n    () => ({\n      getRoot: () => rootRef.current,\n      getFocusedValue: () => plumeState.getFocusedValue(),\n      setFocusedValue: (key) => plumeState.setFocusedValue(key),\n    }),\n    [rootRef, plumeState]\n  );\n\n  return {\n    plasmicProps: {\n      variants: variants as PlasmicClassVariants<C>,\n      args: args as PlasmicClassArgs<C>,\n      overrides: overrides as PlasmicClassOverrides<C>,\n    },\n    state: plumeState,\n  };\n}\n","import { Node } from \"@react-types/shared\";\nimport * as React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { useSeparator } from \"@react-aria/separator\";\nimport { pick } from \"../../common\";\nimport { Overrides } from \"../../render/elements\";\nimport { renderCollectionNode, SectionLikeProps } from \"../collection-utils\";\nimport {\n  AnyPlasmicClass,\n  mergeVariantToggles,\n  PlasmicClassArgs,\n  PlasmicClassOverrides,\n  PlasmicClassVariants,\n  PLUME_STRICT_MODE,\n} from \"../plume-utils\";\nimport {\n  getDefaultPlasmicProps,\n  getStyleProps,\n  StyleProps,\n} from \"../props-utils\";\nimport { MenuContext } from \"./context\";\n\nexport interface BaseMenuGroupProps extends SectionLikeProps, StyleProps {}\n\ninterface MenuGroupConfig<C extends AnyPlasmicClass> {\n  noTitleVariant: PlasmicClassVariants<C>;\n  isFirstVariant: PlasmicClassVariants<C>;\n\n  itemsSlot: keyof PlasmicClassArgs<C>;\n  titleSlot: keyof PlasmicClassArgs<C>;\n\n  root: keyof PlasmicClassOverrides<C>;\n  separator: keyof PlasmicClassOverrides<C>;\n  titleContainer: keyof PlasmicClassOverrides<C>;\n  itemsContainer: keyof PlasmicClassOverrides<C>;\n}\n\nexport function useMenuGroup<\n  P extends BaseMenuGroupProps,\n  C extends AnyPlasmicClass\n>(plasmicClass: C, props: P, config: MenuGroupConfig<C>) {\n  const context = React.useContext(MenuContext);\n\n  const node = (props as any)._node as\n    | Node<React.ReactElement<BaseMenuGroupProps>>\n    | undefined;\n\n  if (!context || !node) {\n    if (PLUME_STRICT_MODE) {\n      throw new Error(\"You can only use a Menu.Group within a Menu component.\");\n    }\n    return getDefaultPlasmicProps(plasmicClass, props);\n  }\n\n  const { headingProps, groupProps } = useMenuSection({\n    heading: props.title,\n    \"aria-label\": props[\"aria-label\"],\n  });\n\n  const { separatorProps } = useSeparator({\n    elementType: \"li\",\n  });\n\n  const variants = {\n    ...pick(props, ...plasmicClass.internalVariantProps),\n    ...mergeVariantToggles(\n      { def: config.noTitleVariant, active: !props.title },\n      {\n        def: config.isFirstVariant,\n        active: context.state.collection.getFirstKey() === node.key,\n      }\n    ),\n  };\n\n  const args = {\n    ...pick(props, ...plasmicClass.internalArgProps),\n    [config.titleSlot]: props.title,\n    [config.itemsSlot]: Array.from(node.childNodes).map((childNode) =>\n      renderCollectionNode(childNode)\n    ),\n  };\n\n  const overrides: Overrides = {\n    [config.root]: {\n      props: getStyleProps(props),\n    },\n    [config.separator]: {\n      props: {\n        ...separatorProps,\n      },\n      as: \"li\",\n    },\n    [config.titleContainer]: {\n      props: {\n        role: \"presentation\",\n        ...headingProps,\n      },\n      ...(!props.title && {\n        render: () => null,\n      }),\n    },\n    [config.itemsContainer]: {\n      props: {\n        ...groupProps,\n      },\n      as: \"ul\",\n    },\n  };\n\n  return {\n    plasmicProps: {\n      variants: variants as PlasmicClassVariants<C>,\n      args: args as PlasmicClassArgs<C>,\n      overrides: overrides as PlasmicClassOverrides<C>,\n    },\n  };\n}\n","import { Node } from \"@react-types/shared\";\nimport * as React from \"react\";\nimport { useMenuItem as useAriaMenuItem } from \"@react-aria/menu\";\nimport { pick } from \"../../common\";\nimport { mergeProps } from \"../../react-utils\";\nimport { Overrides } from \"../../render/elements\";\nimport { ItemLikeProps } from \"../collection-utils\";\nimport {\n  AnyPlasmicClass,\n  mergeVariantToggles,\n  noOutline,\n  PlasmicClassArgs,\n  PlasmicClassOverrides,\n  PlasmicClassVariants,\n  PLUME_STRICT_MODE,\n  VariantDef,\n} from \"../plume-utils\";\nimport { getDefaultPlasmicProps } from \"../props-utils\";\nimport { TriggeredOverlayContext } from \"../triggered-overlay/context\";\nimport { MenuContext } from \"./context\";\n\nexport interface BaseMenuItemProps extends ItemLikeProps {\n  /**\n   * Called when this item is selected\n   */\n  onAction?: (key: string) => void;\n}\n\ninterface MenuItemConfig<C extends AnyPlasmicClass> {\n  isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;\n  isHighlightedVariant?: VariantDef<PlasmicClassVariants<C>>;\n\n  labelSlot: keyof PlasmicClassArgs<C>;\n\n  root: keyof PlasmicClassOverrides<C>;\n  labelContainer: keyof PlasmicClassOverrides<C>;\n}\n\nexport function useMenuItem<\n  P extends BaseMenuItemProps,\n  C extends AnyPlasmicClass\n>(plasmicClass: C, props: P, config: MenuItemConfig<C>) {\n  const menuContext = React.useContext(MenuContext);\n  const triggerContext = React.useContext(TriggeredOverlayContext);\n\n  if (!menuContext) {\n    if (PLUME_STRICT_MODE) {\n      throw new Error(\"You can only use a Menu.Item within a Menu component.\");\n    }\n\n    return getDefaultPlasmicProps(plasmicClass, props);\n  }\n\n  const { children, onAction } = props;\n\n  const { state, menuProps } = menuContext;\n\n  // We pass in the Node secretly as an undocumented prop from <Select />\n  const node = (props as any)._node as Node<\n    React.ReactElement<BaseMenuItemProps>\n  >;\n\n  const isDisabled = state.disabledKeys.has(node.key);\n  const isHighlighted =\n    state.selectionManager.isFocused &&\n    state.selectionManager.focusedKey === node.key;\n\n  const ref = React.useRef<HTMLLIElement>(null);\n\n  const { menuItemProps, labelProps } = useAriaMenuItem(\n    mergeProps(\n      {\n        // We need to merge both the onAction on MenuItem and the onAction\n        // on Menu\n        onAction,\n      },\n      {\n        onAction: menuProps.onAction,\n        onClose: triggerContext?.state.close,\n      },\n      {\n        isDisabled,\n        \"aria-label\": node && node[\"aria-label\"],\n        key: node.key,\n        isVirtualized: false,\n        closeOnSelect: true,\n      }\n    ),\n    state,\n    ref\n  );\n\n  const variants = {\n    ...pick(props, ...plasmicClass.internalVariantProps),\n    ...mergeVariantToggles(\n      { def: config.isDisabledVariant, active: isDisabled },\n      { def: config.isHighlightedVariant, active: isHighlighted }\n    ),\n  };\n\n  const args = {\n    ...pick(props, ...plasmicClass.internalArgProps),\n    [config.labelSlot]: children,\n  };\n\n  const overrides: Overrides = {\n    [config.root]: {\n      as: \"li\",\n      props: mergeProps(menuItemProps, { ref, style: noOutline() }),\n    },\n    [config.labelContainer]: {\n      props: { ...labelProps },\n    },\n  };\n\n  return {\n    plasmicProps: {\n      variants: variants as PlasmicClassVariants<C>,\n      args: args as PlasmicClassArgs<C>,\n      overrides: overrides as PlasmicClassOverrides<C>,\n    },\n  };\n}\n"],"names":["useAriaMenu","useAriaMenuItem"],"mappings":"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"}