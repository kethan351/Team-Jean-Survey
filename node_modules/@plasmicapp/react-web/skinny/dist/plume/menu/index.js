import { c as __assign, p as pick, d as __spreadArray, e as __read, b as __rest } from '../../common-c2744215.js';
import { useMenu as useMenu$1, useMenuSection, useMenuItem as useMenuItem$1 } from '@react-aria/menu';
import { useTreeState } from '@react-stately/tree';
import * as React from 'react';
import { m as mergeProps } from '../../react-utils-76d05959.js';
import { a as useEnsureSSRProvider } from '../../ssr-08aff522.js';
import { r as renderCollectionNode, u as useDerivedItemsFromChildren, a as renderAsCollectionChild } from '../../collection-utils-3496fd68.js';
import { n as noOutline, m as mergeVariantToggles } from '../../plume-utils-653f4b8a.js';
import { g as getStyleProps } from '../../props-utils-70c2d02a.js';
import { T as TriggeredOverlayContext } from '../../context-034b8d25.js';
import { useSeparator } from '@react-aria/separator';
import 'classnames';
import '@plasmicapp/data-sources-context';
import '@react-aria/ssr';
import '../../render/PlasmicHead/index.js';
import '@react-stately/collections';

var MenuContext = React.createContext(undefined);

var COLLECTION_OPTS = {
    itemPlumeType: "menu-item",
    sectionPlumeType: "menu-group"
};
/**
 * Converts props from BaseMenuProps to react-aria's useMenu() props.
 */
function asAriaMenuProps(props) {
    var children = props.children, rest = __rest(props, ["children"]);
    var _a = useDerivedItemsFromChildren(children, __assign(__assign({}, COLLECTION_OPTS), { invalidChildError: "Can only use Menu.Item and Menu.Group as children to Menu", requireItemValue: false })), items = _a.items, disabledKeys = _a.disabledKeys;
    var collectionChildRenderer = React.useCallback(function (child) { return renderAsCollectionChild(child, COLLECTION_OPTS); }, []);
    return {
        ariaProps: __assign(__assign({}, rest), { children: collectionChildRenderer, items: items, disabledKeys: disabledKeys })
    };
}
function useMenu(plasmicClass, props, config, ref) {
    var _a, _b;
    if (ref === void 0) { ref = null; }
    useEnsureSSRProvider();
    var ariaProps = asAriaMenuProps(props).ariaProps;
    var triggerContext = React.useContext(TriggeredOverlayContext);
    var rootRef = React.useRef(null);
    var state = useTreeState(ariaProps);
    var menuListRef = React.useRef(null);
    var menuProps = useMenu$1(__assign(__assign({}, ariaProps), { autoFocus: triggerContext === null || triggerContext === void 0 ? void 0 : triggerContext.autoFocus }), state, menuListRef).menuProps;
    var contextValue = React.useMemo(function () { return ({ state: state, menuProps: props }); }, [
        state,
        props,
    ]);
    var variants = __assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false)));
    var overrides = (_a = {},
        _a[config.root] = {
            props: mergeProps(getStyleProps(props), {
                ref: rootRef
            })
        },
        _a[config.itemsContainer] = {
            as: "ul",
            props: mergeProps(menuProps, {
                ref: menuListRef,
                style: __assign({}, noOutline())
            })
        },
        _a);
    var args = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (_b = {}, _b[config.itemsSlot] = (React.createElement(MenuContext.Provider, { value: contextValue }, Array.from(state.collection).map(function (node) { return renderCollectionNode(node); }))), _b));
    var plumeState = React.useMemo(function () { return ({
        getFocusedValue: function () { return state.selectionManager.focusedKey; },
        setFocusedValue: function (value) {
            return state.selectionManager.setFocusedKey(value);
        }
    }); }, [state]);
    React.useImperativeHandle(ref, function () { return ({
        getRoot: function () { return rootRef.current; },
        getFocusedValue: function () { return plumeState.getFocusedValue(); },
        setFocusedValue: function (key) { return plumeState.setFocusedValue(key); }
    }); }, [rootRef, plumeState]);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides
        },
        state: plumeState
    };
}

function useMenuGroup(plasmicClass, props, config) {
    var _a, _b;
    var context = React.useContext(MenuContext);
    var node = props._node;
    if (!context || !node) {
        {
            throw new Error("You can only use a Menu.Group within a Menu component.");
        }
    }
    var _c = useMenuSection({
        heading: props.title,
        "aria-label": props["aria-label"]
    }), headingProps = _c.headingProps, groupProps = _c.groupProps;
    var separatorProps = useSeparator({
        elementType: "li"
    }).separatorProps;
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({ def: config.noTitleVariant, active: !props.title }, {
        def: config.isFirstVariant,
        active: context.state.collection.getFirstKey() === node.key
    }));
    var args = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (_a = {}, _a[config.titleSlot] = props.title, _a[config.itemsSlot] = Array.from(node.childNodes).map(function (childNode) {
        return renderCollectionNode(childNode);
    }), _a));
    var overrides = (_b = {},
        _b[config.root] = {
            props: getStyleProps(props)
        },
        _b[config.separator] = {
            props: __assign({}, separatorProps),
            as: "li"
        },
        _b[config.titleContainer] = __assign({ props: __assign({ role: "presentation" }, headingProps) }, (!props.title && {
            render: function () { return null; }
        })),
        _b[config.itemsContainer] = {
            props: __assign({}, groupProps),
            as: "ul"
        },
        _b);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides
        }
    };
}

function useMenuItem(plasmicClass, props, config) {
    var _a, _b;
    var menuContext = React.useContext(MenuContext);
    var triggerContext = React.useContext(TriggeredOverlayContext);
    if (!menuContext) {
        {
            throw new Error("You can only use a Menu.Item within a Menu component.");
        }
    }
    var children = props.children, onAction = props.onAction;
    var state = menuContext.state, menuProps = menuContext.menuProps;
    // We pass in the Node secretly as an undocumented prop from <Select />
    var node = props._node;
    var isDisabled = state.disabledKeys.has(node.key);
    var isHighlighted = state.selectionManager.isFocused &&
        state.selectionManager.focusedKey === node.key;
    var ref = React.useRef(null);
    var _c = useMenuItem$1(mergeProps({
        // We need to merge both the onAction on MenuItem and the onAction
        // on Menu
        onAction: onAction
    }, {
        onAction: menuProps.onAction,
        onClose: triggerContext === null || triggerContext === void 0 ? void 0 : triggerContext.state.close
    }, {
        isDisabled: isDisabled,
        "aria-label": node && node["aria-label"],
        key: node.key,
        isVirtualized: false,
        closeOnSelect: true
    }), state, ref), menuItemProps = _c.menuItemProps, labelProps = _c.labelProps;
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({ def: config.isDisabledVariant, active: isDisabled }, { def: config.isHighlightedVariant, active: isHighlighted }));
    var args = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (_a = {}, _a[config.labelSlot] = children, _a));
    var overrides = (_b = {},
        _b[config.root] = {
            as: "li",
            props: mergeProps(menuItemProps, { ref: ref, style: noOutline() })
        },
        _b[config.labelContainer] = {
            props: __assign({}, labelProps)
        },
        _b);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides
        }
    };
}

export { useMenu, useMenuGroup, useMenuItem };
//# sourceMappingURL=index.js.map
