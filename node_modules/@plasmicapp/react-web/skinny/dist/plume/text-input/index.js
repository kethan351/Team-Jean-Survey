import { b as __rest, c as __assign, p as pick, d as __spreadArray, e as __read, o as omit } from '../../common-c2744215.js';
import * as React from 'react';
import { m as mergeVariantToggles } from '../../plume-utils-653f4b8a.js';

function useTextInput(plasmicClass, props, config, ref) {
    var _a, _b, _c;
    if (ref === void 0) { ref = null; }
    var isDisabled = props.isDisabled, startIcon = props.startIcon, endIcon = props.endIcon, showStartIcon = props.showStartIcon, showEndIcon = props.showEndIcon, className = props.className, style = props.style, inputClassName = props.inputClassName, inputStyle = props.inputStyle, rest = __rest(props, ["isDisabled", "startIcon", "endIcon", "showStartIcon", "showEndIcon", "className", "style", "inputClassName", "inputStyle"]);
    var rootRef = React.useRef(null);
    var inputRef = React.useRef(null);
    React.useImperativeHandle(ref, function () { return ({
        focus: function () {
            var _a;
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        },
        blur: function () {
            var _a;
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
        },
        getRoot: function () {
            return rootRef.current;
        },
        getInput: function () {
            return inputRef.current;
        }
    }); }, [rootRef, inputRef]);
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({ def: config.showStartIconVariant, active: showStartIcon }, { def: config.showEndIconVariant, active: showEndIcon }, { def: config.isDisabledVariant, active: isDisabled }));
    var args = __assign(__assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (config.startIconSlot && (_a = {}, _a[config.startIconSlot] = startIcon, _a))), (config.endIconSlot && (_b = {}, _b[config.endIconSlot] = endIcon, _b)));
    var overrides = (_c = {},
        _c[config.root] = {
            props: {
                ref: rootRef,
                className: className,
                style: style
            }
        },
        _c[config.input] = {
            props: __assign(__assign({}, omit.apply(void 0, __spreadArray(__spreadArray([rest], __read(plasmicClass.internalArgProps.filter(function (prop) { return prop !== "required"; })), false), __read(plasmicClass.internalVariantProps), false))), { disabled: isDisabled, ref: inputRef, className: inputClassName, style: inputStyle })
        },
        _c);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides
        }
    };
}

export { useTextInput };
//# sourceMappingURL=index.js.map
