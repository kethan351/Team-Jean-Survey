import { b as __rest, c as __assign, p as pick, d as __spreadArray, e as __read, o as omit } from '../../common-c2744215.js';
import { m as mergeVariantToggles } from '../../plume-utils-653f4b8a.js';
import 'react';

function useButton(plasmicClass, props, config, ref) {
    var _a, _b, _c, _d;
    if (ref === void 0) { ref = null; }
    var link = props.link, isDisabled = props.isDisabled, startIcon = props.startIcon, endIcon = props.endIcon, showStartIcon = props.showStartIcon, showEndIcon = props.showEndIcon, children = props.children, rest = __rest(props, ["link", "isDisabled", "startIcon", "endIcon", "showStartIcon", "showEndIcon", "children"]);
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({ def: config.showStartIconVariant, active: showStartIcon }, { def: config.showEndIconVariant, active: showEndIcon }, { def: config.isDisabledVariant, active: isDisabled }));
    var args = __assign(__assign(__assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (config.startIconSlot && (_a = {}, _a[config.startIconSlot] = startIcon, _a))), (config.endIconSlot && (_b = {}, _b[config.endIconSlot] = endIcon, _b))), (_c = {}, _c[config.contentSlot] = children, _c));
    var overrides = (_d = {},
        _d[config.root] = {
            as: !!link ? "a" : "button",
            props: __assign(__assign(__assign({}, omit.apply(void 0, __spreadArray(__spreadArray([rest], __read(plasmicClass.internalArgProps), false), __read(plasmicClass.internalVariantProps), false))), { ref: ref, disabled: isDisabled }), (!!link && { href: link }))
        },
        _d);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides
        }
    };
}

export { useButton };
//# sourceMappingURL=index.js.map
