import * as React from "react";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
interface CommonProps {
    showStartIcon?: boolean;
    showEndIcon?: boolean;
    startIcon?: React.ReactNode;
    endIcon?: React.ReactNode;
    children?: React.ReactNode;
    isDisabled?: boolean;
}
interface HtmlButtonProps extends Omit<React.ComponentProps<"button">, "ref" | "disabled"> {
}
interface HtmlAnchorProps extends Omit<React.ComponentProps<"a">, "ref" | "href"> {
    link?: string;
}
export type BaseButtonProps = CommonProps & HtmlButtonProps & HtmlAnchorProps;
export type HtmlAnchorOnlyProps = Exclude<keyof HtmlAnchorProps, keyof HtmlButtonProps>;
export type HtmlButtonOnlyProps = Exclude<keyof HtmlButtonProps, keyof HtmlAnchorProps>;
export type ButtonRef = React.Ref<HTMLButtonElement | HTMLAnchorElement>;
interface ButtonConfig<C extends AnyPlasmicClass> {
    showStartIconVariant: VariantDef<PlasmicClassVariants<C>>;
    showEndIconVariant?: VariantDef<PlasmicClassVariants<C>>;
    isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;
    startIconSlot?: keyof PlasmicClassArgs<C>;
    endIconSlot?: keyof PlasmicClassArgs<C>;
    contentSlot: keyof PlasmicClassArgs<C>;
    root: keyof PlasmicClassOverrides<C>;
}
export declare function useButton<P extends BaseButtonProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: ButtonConfig<C>, ref?: ButtonRef): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        args: PlasmicClassArgs<C>;
        overrides: PlasmicClassOverrides<C>;
    };
};
export {};
