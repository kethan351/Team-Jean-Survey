import { c as __assign, p as pick, d as __spreadArray, e as __read } from '../../common-c2744215.js';
import { useSwitch as useSwitch$1 } from '@react-aria/switch';
import { VisuallyHidden } from '@react-aria/visually-hidden';
import { useToggleState } from '@react-stately/toggle';
import * as React from 'react';
import { m as mergeProps } from '../../react-utils-76d05959.js';
import { a as useEnsureSSRProvider } from '../../ssr-08aff522.js';
import { m as mergeVariantToggles } from '../../plume-utils-653f4b8a.js';
import { g as getStyleProps } from '../../props-utils-70c2d02a.js';
import 'classnames';
import '@plasmicapp/data-sources-context';
import '@react-aria/ssr';
import '../../render/PlasmicHead/index.js';

function asAriaSwitchProps(props) {
    var ariaProps = __assign(__assign({}, props), { isSelected: props.isChecked, defaultSelected: props.defaultChecked });
    delete ariaProps["isChecked"];
    delete ariaProps["defaultChecked"];
    return ariaProps;
}
function useSwitch(plasmicClass, props, config, ref) {
    var _a, _b;
    if (ref === void 0) { ref = null; }
    var children = props.children, isDisabled = props.isDisabled;
    useEnsureSSRProvider();
    var inputRef = React.useRef(null);
    var rootRef = React.useRef(null);
    var ariaProps = asAriaSwitchProps(props);
    var state = useToggleState(ariaProps);
    var inputProps = useSwitch$1(ariaProps, state, inputRef).inputProps;
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({
        def: config.isDisabledVariant,
        active: isDisabled
    }, {
        def: config.isCheckedVariant,
        active: state.isSelected
    }, {
        def: config.noLabelVariant,
        active: !children
    }));
    var overrides = (_a = {},
        _a[config.root] = {
            as: "label",
            props: mergeProps(getStyleProps(props), {
                ref: rootRef
            }),
            wrapChildren: function (children) { return (React.createElement(React.Fragment, null,
                React.createElement(VisuallyHidden, null,
                    React.createElement("input", __assign({}, inputProps, { ref: inputRef }))),
                children)); }
        },
        _a);
    var args = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (config.labelSlot ? (_b = {}, _b[config.labelSlot] = children, _b) : {}));
    var plumeState = React.useMemo(function () { return ({
        setChecked: function (checked) { return state.setSelected(checked); }
    }); }, [state]);
    React.useImperativeHandle(ref, function () { return ({
        getRoot: function () { return rootRef.current; },
        focus: function () { var _a; return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus(); },
        blur: function () { var _a; return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur(); },
        setChecked: function (checked) { return plumeState.setChecked(checked); }
    }); }, [rootRef, inputRef, plumeState]);
    return {
        plasmicProps: {
            variants: variants,
            overrides: overrides,
            args: args
        },
        state: plumeState
    };
}

export { useSwitch };
//# sourceMappingURL=index.js.map
