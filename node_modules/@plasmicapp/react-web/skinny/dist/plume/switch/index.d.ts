import { AriaSwitchProps } from "@react-types/switch";
import * as React from "react";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
import { StyleProps } from "../props-utils";
export type SwitchRef = React.Ref<SwitchRefValue>;
export interface SwitchRefValue extends SwitchState {
    getRoot: () => HTMLElement | null;
    focus: () => void;
    blur: () => void;
}
interface SwitchState {
    setChecked: (checked: boolean) => void;
}
export interface SwitchProps extends Omit<AriaSwitchProps, "isSelected" | "defaultSelected">, StyleProps {
    /**
     * Whether the Switch is checked or not; controlled
     */
    isChecked?: boolean;
    /**
     * Whether the Switch is checked by default; uncontrolled
     */
    defaultChecked?: boolean;
}
interface SwitchConfig<C extends AnyPlasmicClass> {
    isCheckedVariant: VariantDef<PlasmicClassVariants<C>>;
    isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;
    noLabelVariant?: VariantDef<PlasmicClassVariants<C>>;
    labelSlot?: keyof PlasmicClassArgs<C>;
    root: keyof PlasmicClassOverrides<C>;
}
export declare function useSwitch<P extends SwitchProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: SwitchConfig<C>, ref?: SwitchRef): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        overrides: PlasmicClassOverrides<C>;
        args: PlasmicClassArgs<C>;
    };
    state: SwitchState;
};
export {};
