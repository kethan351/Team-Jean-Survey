import { $StateSpec, InitFunc, Internal$StateSpec, ObjectPath } from "./types";
export interface StateCell<T> {
    initialValue?: T | Symbol;
    path: ObjectPath;
    registeredInitFunc?: InitFunc<T>;
    listeners: (() => void)[];
}
export declare class StateSpecNode<T> {
    private _specs;
    private _edges;
    private _state;
    constructor(specs: Internal$StateSpec<T>[]);
    setSpecs(specs: Internal$StateSpec<T>[]): void;
    edges(): Map<string | symbol, StateSpecNode<any>>;
    state(): Record<string, StateCell<T>>;
    hasEdge(key: string | symbol): boolean;
    addEdge(key: string | symbol, node: StateSpecNode<any>): void;
    clearEdges(): void;
    children(): IterableIterator<StateSpecNode<any>>;
    makeTransition(key: string | symbol | number): StateSpecNode<any> | undefined;
    isLeaf(): boolean;
    hasArrayTransition(): boolean;
    getSpec(): Internal$StateSpec<T>;
    getAllSpecs(): Internal$StateSpec<T>[];
    getState(path: ObjectPath): StateCell<T>;
    getInitFunc(stateCell: StateCell<any>): InitFunc<any> | undefined;
    clearStates(): void;
    states(): StateCell<T>[];
    hasState(path: ObjectPath): boolean;
    createStateCell(path: ObjectPath): void;
    deleteStateCell(prefixPath: ObjectPath): void;
    setInitialValue(path: ObjectPath, value: any): void;
    getInitialValue(path: ObjectPath): Symbol | T | undefined;
    addListener(path: ObjectPath, f: () => void): void;
}
export declare const transformPathStringToObj: (str: string) => (string | symbol)[];
export declare function buildTree(specs: $StateSpec<any>[]): StateSpecNode<any>;
export declare function updateTree(root: StateSpecNode<any>, specs: $StateSpec<any>[]): StateSpecNode<any>;
export declare function getStateCells(root: StateSpecNode<any>): StateSpecNode<any>[];
export declare function findStateCell(root: StateSpecNode<any>, pathStr: string, repetitionIndex?: number[]): {
    node: StateSpecNode<any>;
    realPath: ObjectPath;
};
