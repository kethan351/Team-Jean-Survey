/// <reference path="../survey-core/survey.core.d.ts" />
/// <reference types="react" />
declare module "react/element-factory" {
    export class ReactElementFactory {
        static Instance: ReactElementFactory;
        private creatorHash;
        registerElement(elementType: string, elementCreator: (props: any) => JSX.Element): void;
        getAllTypes(): Array<string>;
        isElementRegistered(elementType: string): boolean;
        createElement(elementType: string, params: any): JSX.Element | any;
    }
}
declare module "react/reactsurveymodel" {
    import { SurveyModel, QuestionMatrixDropdownRenderedCell, SurveyElement, QuestionRowModel, ItemValue, QuestionSelectBase } from "survey-core";
    export class ReactSurveyElementsWrapper {
        static wrapRow(survey: SurveyModel, element: JSX.Element, row: QuestionRowModel): JSX.Element;
        static wrapElement(survey: SurveyModel, element: JSX.Element, question: SurveyElement): JSX.Element;
        static wrapQuestionContent(survey: SurveyModel, element: JSX.Element, question: SurveyElement): JSX.Element;
        static wrapItemValue(survey: SurveyModel, element: JSX.Element, question: QuestionSelectBase, item: ItemValue): JSX.Element;
        static wrapMatrixCell(survey: SurveyModel, element: JSX.Element, cell: QuestionMatrixDropdownRenderedCell, reason?: string): JSX.Element;
    }
}
declare module "react/reactquestion_factory" {
    export class ReactQuestionFactory {
        static Instance: ReactQuestionFactory;
        private creatorHash;
        registerQuestion(questionType: string, questionCreator: (name: string) => JSX.Element): void;
        getAllTypes(): Array<string>;
        createQuestion(questionType: string, params: any): JSX.Element | null;
    }
}
declare module "react/components/character-counter" {
    import { Base, CharacterCounter } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    export interface ICharacterCounterComponentProps {
        counter: CharacterCounter;
        remainingCharacterCounter: string;
    }
    export class CharacterCounterComponent extends SurveyElementBase<ICharacterCounterComponentProps, any> {
        protected getStateElement(): Base;
        renderElement(): JSX.Element | null;
    }
}
declare module "react/reactquestion_comment" {
    import { ReactSurveyElement, SurveyQuestionUncontrolledElement } from "react/reactquestion_element";
    import { QuestionCommentModel } from "survey-core";
    export class SurveyQuestionComment extends SurveyQuestionUncontrolledElement<QuestionCommentModel> {
        constructor(props: any);
        protected renderElement(): JSX.Element;
    }
    export class SurveyQuestionCommentItem extends ReactSurveyElement {
        protected canRender(): boolean;
        protected onCommentChange(event: any): void;
        protected onCommentInput(event: any): void;
        protected getComment(): string;
        protected getId(): string;
        protected getPlaceholder(): string;
        protected renderElement(): JSX.Element;
    }
    export class SurveyQuestionOtherValueItem extends SurveyQuestionCommentItem {
        protected onCommentChange(event: any): void;
        protected onCommentInput(event: any): void;
        protected getComment(): string;
        protected getId(): string;
        protected getPlaceholder(): string;
    }
}
declare module "react/custom-widget" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    export class SurveyCustomWidget extends SurveyQuestionElementBase {
        private widgetRef;
        constructor(props: any);
        private _afterRender;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentWillUnmount(): void;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/svg-icon/svg-icon" {
    import React from "react";
    export class SvgIcon extends React.Component<any, any> {
        private svgIconRef;
        constructor(props: any);
        updateSvg(): void;
        componentDidUpdate(): void;
        render(): JSX.Element | null;
        componentDidMount(): void;
    }
}
declare module "react/components/action-bar/action-bar-separator" {
    import React from "react";
    export class SurveyActionBarSeparator extends React.Component<any, any> {
        constructor(props: any);
        render(): JSX.Element;
    }
}
declare module "react/components/action-bar/action-bar-item" {
    import { Base, Action } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    interface IActionBarItemProps {
        item: Action;
    }
    export class SurveyAction extends SurveyElementBase<IActionBarItemProps, any> {
        get item(): Action;
        protected getStateElement(): Base;
        renderElement(): JSX.Element;
    }
    export class SurveyActionBarItem extends SurveyElementBase<IActionBarItemProps, any> {
        get item(): Action;
        protected getStateElement(): Base;
        renderElement(): JSX.Element;
        renderText(): JSX.Element | null;
        renderButtonContent(): JSX.Element;
        renderInnerButton(): JSX.Element;
    }
}
declare module "react/components/popup/popup" {
    import { Base, PopupModel, PopupBaseViewModel, IDialogOptions } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    interface IPopupProps {
        model: PopupModel;
    }
    export class Popup extends SurveyElementBase<IPopupProps, any> {
        private popup;
        private containerRef;
        constructor(props: IPopupProps);
        get model(): PopupModel;
        protected getStateElement(): Base;
        private createModel;
        private setTargetElement;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentWillUnmount(): void;
        shouldComponentUpdate(nextProps: IPopupProps, nextState: any): boolean;
        render(): JSX.Element;
    }
    export class PopupContainer extends SurveyElementBase<any, any> {
        prevIsVisible: boolean;
        constructor(props: any);
        handleKeydown: (event: any) => void;
        get model(): PopupBaseViewModel;
        protected getStateElement(): Base;
        clickInside: (ev: any) => void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        renderContainer(PopupBaseViewModel: PopupBaseViewModel): JSX.Element;
        renderHeaderContent(): JSX.Element;
        renderContent(): JSX.Element;
        protected renderHeaderPopup(popupModel: PopupBaseViewModel): JSX.Element | null;
        protected renderFooter(popuModel: PopupBaseViewModel): JSX.Element | null;
        render(): JSX.Element;
    }
    export class PopupDropdownContainer extends PopupContainer {
        protected renderHeaderPopup(popupModel: PopupBaseViewModel): JSX.Element | null;
    }
    export function showModal(componentName: string, data: any, onApply: () => boolean, onCancel?: () => void, cssClass?: string, title?: string, displayMode?: "popup" | "overlay"): PopupBaseViewModel;
    export function showDialog(dialogOptions: IDialogOptions): PopupBaseViewModel;
}
declare module "react/components/action-bar/action-bar-item-dropdown" {
    import { SurveyActionBarItem } from "react/components/action-bar/action-bar-item";
    export class SurveyActionBarItemDropdown extends SurveyActionBarItem {
        private viewModel;
        constructor(props: any);
        renderButtonContent(): JSX.Element;
        componentWillUnmount(): void;
    }
}
declare module "react/components/action-bar/action-bar" {
    import { Base, Action, ActionContainer } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    export * from "react/components/action-bar/action-bar-item-dropdown";
    export * from "react/components/action-bar/action-bar-separator";
    interface IActionBarProps {
        model: ActionContainer<Action>;
        handleClick?: boolean;
    }
    export class SurveyActionBar extends SurveyElementBase<IActionBarProps, any> {
        private rootRef;
        constructor(props: IActionBarProps);
        private get handleClick();
        get model(): ActionContainer<Action>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected getStateElement(): Base;
        renderElement(): any;
        renderItems(): JSX.Element[];
    }
}
declare module "react/components/title/title-content" {
    import React from "react";
    import { ITitleOwner } from "survey-core";
    export class TitleContent extends React.Component<any, any> {
        constructor(props: any);
        private get cssClasses();
        private get element();
        render(): JSX.Element;
        protected renderTitleSpans(element: ITitleOwner, cssClasses: any): Array<JSX.Element>;
        private renderRequireText;
    }
}
declare module "react/components/title/title-actions" {
    import React from "react";
    import { SurveyElement } from "survey-core";
    export class TitleActions extends React.Component<any, any> {
        protected get cssClasses(): any;
        protected get element(): SurveyElement;
        render(): JSX.Element;
    }
}
declare module "react/components/title/title-element" {
    import React from "react";
    export class TitleElement extends React.Component<any, any> {
        constructor(props: any);
        private get element();
        render(): JSX.Element | any;
    }
}
declare module "react/element-header" {
    import React from "react";
    export class SurveyElementHeader extends React.Component<any, any> {
        private get element();
        render(): JSX.Element;
    }
}
declare module "react/reactquestion" {
    import * as React from "react";
    import { Base, SurveyElement, SurveyError, Question, QuestionMatrixDropdownRenderedCell } from "survey-core";
    import { SurveyElementBase, ReactSurveyElement } from "react/reactquestion_element";
    export interface ISurveyCreator {
        createQuestionElement(question: Question): JSX.Element | null;
        renderError(key: string, error: SurveyError, cssClasses: any): JSX.Element;
        questionTitleLocation(): string;
        questionErrorLocation(): string;
    }
    export class SurveyQuestion extends SurveyElementBase<any, any> {
        private isNeedFocus;
        static renderQuestionBody(creator: ISurveyCreator, question: Question): JSX.Element | any;
        private rootRef;
        constructor(props: any);
        protected getStateElement(): Base;
        protected get question(): Question;
        private get creator();
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        private doAfterRender;
        protected canRender(): boolean;
        protected renderQuestionContent(): JSX.Element;
        protected renderElement(): JSX.Element;
        protected wrapElement(element: JSX.Element): JSX.Element;
        protected wrapQuestionContent(element: JSX.Element): JSX.Element;
        protected renderQuestion(): JSX.Element;
        protected renderDescription(): JSX.Element;
        protected renderComment(cssClasses: any): JSX.Element;
        protected renderHeader(question: Question): JSX.Element;
        protected renderErrors(cssClasses: any, location: string): JSX.Element;
    }
    export class SurveyElementErrors extends ReactSurveyElement {
        constructor(props: any);
        protected get id(): string;
        protected get element(): SurveyElement;
        private get creator();
        protected get location(): string;
        private getState;
        protected canRender(): boolean;
        private tooltipManager;
        private tooltipRef;
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentWillUnmount(): void;
        private disposeTooltipManager;
        protected renderElement(): JSX.Element;
    }
    export abstract class SurveyQuestionAndErrorsWrapped extends ReactSurveyElement {
        [index: string]: any;
        constructor(props: any);
        protected getStateElement(): Base;
        protected get question(): Question;
        protected get creator(): ISurveyCreator;
        protected getQuestion(): Question;
        protected get itemCss(): string;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        protected doAfterRender(): void;
        protected canRender(): boolean;
        protected renderErrors(errorsLocation: string): JSX.Element | null;
        protected renderContent(): JSX.Element;
        protected abstract renderElement(): JSX.Element;
        protected getShowErrors(): boolean;
        protected renderQuestion(): JSX.Element;
    }
    export class SurveyQuestionAndErrorsCell extends SurveyQuestionAndErrorsWrapped {
        [index: string]: any;
        protected cellRef: React.RefObject<HTMLTableCellElement>;
        constructor(props: any);
        componentWillUnmount(): void;
        protected renderElement(): JSX.Element;
        protected getCellStyle(): any;
        protected getHeaderText(): string;
        protected wrapCell(cell: QuestionMatrixDropdownRenderedCell, element: JSX.Element): JSX.Element;
    }
}
declare module "react/reactquestion_element" {
    import * as React from "react";
    import { Base, PanelModel, LocalizableString, Question } from "survey-core";
    import { ISurveyCreator } from "react/reactquestion";
    export class SurveyElementBase<P, S> extends React.Component<P, S> {
        static renderLocString(locStr: LocalizableString, style?: any, key?: string): JSX.Element;
        static renderQuestionDescription(question: Question | PanelModel): JSX.Element;
        private changedStatePropNameValue;
        constructor(props: any);
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        private _allowComponentUpdate;
        protected allowComponentUpdate(): void;
        protected denyComponentUpdate(): void;
        shouldComponentUpdate(nextProps: any, nextState: any): boolean;
        render(): JSX.Element | null;
        protected wrapElement(element: JSX.Element): JSX.Element;
        protected get isRendering(): boolean;
        protected getRenderedElements(): Base[];
        private startEndRendering;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element | null;
        protected get changedStatePropName(): string | undefined;
        private makeBaseElementsReact;
        private unMakeBaseElementsReact;
        protected getStateElements(): Array<Base>;
        protected getStateElement(): Base | null;
        protected get isDisplayMode(): boolean;
        protected renderLocString(locStr: LocalizableString, style?: any, key?: string): JSX.Element;
        private canMakeReact;
        private makeBaseElementReact;
        protected canUsePropInState(key: string): boolean;
        private unMakeBaseElementReact;
    }
    export class ReactSurveyElement extends SurveyElementBase<any, any> {
        constructor(props: any);
        protected get cssClasses(): any;
    }
    export class SurveyQuestionElementBase extends SurveyElementBase<any, any> {
        control: HTMLElement;
        constructor(props: any);
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected updateDomElement(): void;
        protected get questionBase(): Question;
        protected getRenderedElements(): Base[];
        protected get creator(): ISurveyCreator;
        protected canRender(): boolean;
        shouldComponentUpdate(nextProps: any, nextState: any): boolean;
        protected get isDisplayMode(): boolean;
        protected wrapCell(cell: any, element: JSX.Element, reason: string): JSX.Element;
        setControl(element: HTMLElement | null): void;
    }
    export class SurveyQuestionUncontrolledElement<T extends Question> extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): T;
        updateValueOnEvent: (event: any) => void;
        protected setValueCore(newValue: any): void;
        protected getValueCore(): any;
        protected updateDomElement(): void;
        private getValue;
    }
}
declare module "react/row" {
    import { IElement, Base } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    export class SurveyRow extends SurveyElementBase<any, any> {
        private rootRef;
        constructor(props: any);
        private recalculateCss;
        protected getStateElement(): Base;
        private get row();
        private get survey();
        private get creator();
        protected get css(): any;
        protected canRender(): boolean;
        protected renderElementContent(): JSX.Element;
        protected renderElement(): JSX.Element;
        componentDidMount(): void;
        shouldComponentUpdate(nextProps: any, nextState: any): boolean;
        private stopLazyRendering;
        componentWillUnmount(): void;
        protected createElement(element: IElement, elementIndex?: number): JSX.Element;
    }
}
declare module "react/panel-base" {
    import * as React from "react";
    import { ISurveyCreator } from "react/reactquestion";
    import { Base, SurveyModel, QuestionRowModel, PanelModelBase } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    export class SurveyPanelBase extends SurveyElementBase<any, any> {
        protected rootRef: React.RefObject<HTMLDivElement>;
        constructor(props: any);
        protected getStateElement(): Base;
        protected canUsePropInState(key: string): boolean;
        protected get survey(): SurveyModel | null;
        protected get creator(): ISurveyCreator;
        protected get css(): any;
        get panelBase(): PanelModelBase;
        protected getPanelBase(): PanelModelBase;
        protected getSurvey(): SurveyModel | null;
        protected getCss(): any;
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        private doAfterRender;
        protected canRender(): boolean;
        private renderedRowsCache;
        protected renderRows(css: any): Array<JSX.Element>;
        protected createRow(row: QuestionRowModel, css: any): JSX.Element;
    }
}
declare module "react/page" {
    import { PageModel, PanelModelBase } from "survey-core";
    import { SurveyPanelBase } from "react/panel-base";
    export class SurveyPage extends SurveyPanelBase {
        constructor(props: any);
        protected getPanelBase(): PanelModelBase;
        get page(): PageModel;
        protected renderElement(): JSX.Element;
        protected renderTitle(): JSX.Element;
        protected renderDescription(): JSX.Element | null;
    }
}
declare module "react/string-viewer" {
    import React from "react";
    export class SurveyLocStringViewer extends React.Component<any, any> {
        constructor(props: any);
        private rootRef;
        private get locStr();
        private get style();
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        private isRendering;
        private onChangedHandler;
        private reactOnStrChanged;
        render(): JSX.Element | null;
        protected renderString(): JSX.Element;
    }
}
declare module "react/components/survey-header/survey-header" {
    import React from "react";
    import { SurveyModel } from "survey-core";
    interface ISurveyHeaderProps {
        survey: SurveyModel;
    }
    export class SurveyHeader extends React.Component<ISurveyHeaderProps, any> {
        constructor(props: ISurveyHeaderProps);
        private get survey();
        private get css();
        componentDidMount(): void;
        componentWillUnmount(): void;
        private renderTitle;
        private renderLogoImage;
        render(): JSX.Element | null;
    }
}
declare module "react/reacttimerpanel" {
    import { Base, SurveyTimerModel } from "survey-core";
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyTimerPanel extends ReactSurveyElement {
        constructor(props: any);
        protected getStateElement(): Base;
        protected get timerModel(): SurveyTimerModel;
        private readonly circleLength;
        private get progress();
        render(): JSX.Element | null;
    }
}
declare module "react/components/brand-info" {
    import React from "react";
    export class BrandInfo extends React.Component<any, any> {
        render(): JSX.Element;
    }
}
declare module "react/components/notifier" {
    import { Base, Notifier } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    export interface INotifierComponentProps {
        notifier: Notifier;
    }
    export class NotifierComponent extends SurveyElementBase<INotifierComponentProps, any> {
        get notifier(): Notifier;
        protected getStateElement(): Base;
        renderElement(): JSX.Element | null;
    }
}
declare module "react/components/components-container" {
    import React from "react";
    export class ComponentsContainer extends React.Component<any, any> {
        render(): JSX.Element | null;
    }
}
declare module "react/reactSurvey" {
    import { Base, Question, PageModel, SurveyError, SurveyModel, IAttachKey2clickOptions } from "survey-core";
    import { ISurveyCreator } from "react/reactquestion";
    import { SurveyElementBase } from "react/reactquestion_element";
    export class Survey extends SurveyElementBase<any, any> implements ISurveyCreator {
        private previousJSON;
        private rootRef;
        static get cssType(): string;
        static set cssType(value: string);
        protected survey: SurveyModel;
        private rootNodeId;
        private rootNodeClassName;
        constructor(props: any);
        protected getStateElement(): Base;
        private isSurveyUpdated;
        private onSurveyUpdated;
        shouldComponentUpdate(nextProps: any, nextState: any): boolean;
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentDidMount(): void;
        destroySurvey(): void;
        componentWillUnmount(): void;
        doRender(): JSX.Element;
        protected renderElement(): JSX.Element;
        get css(): any;
        set css(value: any);
        protected renderCompleted(): JSX.Element | null;
        protected renderCompletedBefore(): JSX.Element;
        protected renderLoading(): JSX.Element;
        protected renderSurvey(): JSX.Element;
        protected renderPage(page: PageModel): JSX.Element;
        protected renderEmptySurvey(): JSX.Element;
        protected createSurvey(newProps: any): void;
        private isModelJSONChanged;
        protected updateSurvey(newProps: any, oldProps?: any): void;
        protected setSurveyEvents(): void;
        createQuestionElement(question: Question): JSX.Element | null;
        renderError(key: string, error: SurveyError, cssClasses: any): JSX.Element;
        questionTitleLocation(): string;
        questionErrorLocation(): string;
    }
    export function attachKey2click(element: JSX.Element, viewModel?: any, options?: IAttachKey2clickOptions): JSX.Element;
}
declare module "react/reactSurveyNavigationBase" {
    import * as React from "react";
    import { SurveyModel } from "survey-core";
    export class SurveyNavigationBase extends React.Component<any, any> {
        constructor(props: any);
        protected get survey(): SurveyModel;
        protected get css(): any;
        private updateStateFunction;
        componentDidMount(): void;
        componentWillUnmount(): void;
    }
}
declare module "react/panel" {
    import { SurveyPanelBase } from "react/panel-base";
    import { PanelModel } from "survey-core";
    export class SurveyPanel extends SurveyPanelBase {
        private hasBeenExpanded;
        constructor(props: any);
        get panel(): PanelModel;
        protected renderElement(): JSX.Element;
        protected renderHeader(): JSX.Element | null;
        protected wrapElement(element: JSX.Element): JSX.Element;
        protected renderContent(style: any, rows: JSX.Element[], className: string): JSX.Element;
        protected renderTitle(): JSX.Element | null;
        protected renderDescription(): JSX.Element | null;
        protected renderBottom(): JSX.Element | null;
    }
}
declare module "react/flow-panel" {
    import { FlowPanelModel, Question } from "survey-core";
    import { SurveyPanel } from "react/panel";
    export class SurveyFlowPanel extends SurveyPanel {
        constructor(props: any);
        get flowPanel(): FlowPanelModel;
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected getQuestion(name: string): Question;
        protected renderQuestion(question: Question): string;
        protected renderRows(): Array<JSX.Element>;
        private renderedIndex;
        private getNodeIndex;
        protected renderHtml(): JSX.Element | null;
        protected renderNodes(domNodes: Array<Node>): Array<JSX.Element>;
        private getStyle;
        protected renderParentNode(node: Node): JSX.Element;
        protected renderNode(node: Node): JSX.Element | null;
        private getChildDomNodes;
        private hasTextChildNodesOnly;
        protected renderContent(style: any, rows: JSX.Element[]): JSX.Element;
    }
}
declare module "react/reactquestion_checkbox" {
    import { ReactSurveyElement, SurveyQuestionElementBase } from "react/reactquestion_element";
    import { Base, ItemValue, QuestionCheckboxModel } from "survey-core";
    export class SurveyQuestionCheckbox extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionCheckboxModel;
        protected renderElement(): JSX.Element;
        protected getHeader(): JSX.Element[] | undefined;
        protected getFooter(): JSX.Element[] | undefined;
        protected getColumnedBody(cssClasses: any): JSX.Element;
        protected getColumns(cssClasses: any): JSX.Element[];
        protected getBody(cssClasses: any): JSX.Element;
        protected getItems(cssClasses: any, choices: Array<ItemValue>): Array<any>;
        protected get textStyle(): any;
        protected renderOther(): JSX.Element;
        protected renderItem(key: string, item: any, isFirst: boolean, cssClasses: any, index?: string): JSX.Element;
    }
    export class SurveyQuestionCheckboxItem extends ReactSurveyElement {
        constructor(props: any);
        protected getStateElement(): Base;
        protected get question(): QuestionCheckboxModel;
        protected get item(): ItemValue;
        protected get textStyle(): any;
        protected get isFirst(): any;
        protected get index(): number;
        private get hideCaption();
        shouldComponentUpdate(nextProps: any, nextState: any): boolean;
        handleOnChange: (event: any) => void;
        selectAllChanged: (event: any) => void;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
        protected get inputStyle(): any;
        protected renderCheckbox(isChecked: boolean, otherItem: JSX.Element | null): JSX.Element;
    }
}
declare module "react/reactquestion_ranking" {
    import { ReactSurveyElement, SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionRankingModel, ItemValue } from "survey-core";
    export class SurveyQuestionRanking extends SurveyQuestionElementBase {
        protected get question(): QuestionRankingModel;
        protected renderElement(): JSX.Element;
        protected getItems(): Array<any>;
        protected renderItem(item: ItemValue, i: number, handleKeydown: (event: any) => void, handlePointerDown: (event: PointerEvent) => void, cssClasses: any, itemClass: string, question: QuestionRankingModel): JSX.Element;
    }
    export class SurveyQuestionRankingItem extends ReactSurveyElement {
        protected get text(): string;
        protected get index(): string;
        protected get indexText(): string;
        protected get handleKeydown(): (event: any) => void;
        protected get handlePointerDown(): (event: any) => void;
        protected get cssClasses(): any;
        protected get itemClass(): string;
        protected get itemTabIndex(): number;
        protected get question(): any;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/rating/rating-item" {
    import { QuestionRatingModel, RenderedRatingItem } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    export interface IRatingItemProps {
        question: QuestionRatingModel;
        item: RenderedRatingItem;
        index: any;
        handleOnClick: any;
        isDisplayMode: boolean;
    }
    export class RatingItem extends SurveyElementBase<IRatingItemProps, any> {
        get question(): QuestionRatingModel;
        get item(): RenderedRatingItem;
        get index(): any;
        getStateElement(): RenderedRatingItem;
        render(): JSX.Element | null;
        componentDidMount(): void;
    }
}
declare module "react/components/rating/rating-item-star" {
    import { QuestionRatingModel, RenderedRatingItem } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    import { IRatingItemProps } from "react/components/rating/rating-item";
    export class RatingItemStar extends SurveyElementBase<IRatingItemProps, any> {
        get question(): QuestionRatingModel;
        get item(): RenderedRatingItem;
        get index(): any;
        getStateElement(): RenderedRatingItem;
        render(): JSX.Element | null;
    }
}
declare module "react/tagbox-filter" {
    import { DropdownMultiSelectListModel, QuestionTagboxModel } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    interface ITagboxFilterProps {
        model: DropdownMultiSelectListModel;
        question: QuestionTagboxModel;
    }
    export class TagboxFilterString extends SurveyElementBase<ITagboxFilterProps, any> {
        inputElement: HTMLInputElement | null;
        get model(): DropdownMultiSelectListModel;
        get question(): QuestionTagboxModel;
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentDidMount(): void;
        updateDomElement(): void;
        onChange(e: any): void;
        keyhandler(e: any): void;
        onBlur(e: any): void;
        constructor(props: any);
        getStateElement(): DropdownMultiSelectListModel;
        render(): JSX.Element;
    }
}
declare module "react/dropdown-item" {
    import { ReactSurveyElement } from "react/reactquestion_element";
    import { Base } from "survey-core";
    export class SurveyQuestionOptionItem extends ReactSurveyElement {
        constructor(props: any);
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentWillUnmount(): void;
        private setupModel;
        protected getStateElement(): Base;
        private get item();
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/dropdown-base" {
    import { Question, DropdownListModel } from "survey-core";
    import { SurveyQuestionUncontrolledElement } from "react/reactquestion_element";
    export class SurveyQuestionDropdownBase<T extends Question> extends SurveyQuestionUncontrolledElement<T> {
        inputElement: HTMLInputElement | null;
        click: (event: any) => void;
        clear: (event: any) => void;
        keyhandler: (event: any) => void;
        blur: (event: any) => void;
        protected setValueCore(newValue: any): void;
        protected getValueCore(): any;
        protected renderSelect(cssClasses: any): JSX.Element;
        renderValueElement(dropdownListModel: DropdownListModel): JSX.Element | null;
        protected renderInput(dropdownListModel: DropdownListModel): JSX.Element;
        createClearButton(): JSX.Element | null;
        protected renderOther(cssClasses: any): JSX.Element;
        componentDidUpdate(prevProps: any, prevState: any): void;
        componentDidMount(): void;
        updateInputDomElement(): void;
    }
}
declare module "react/reactquestion_dropdown" {
    import { Question } from "survey-core";
    import { SurveyQuestionDropdownBase } from "react/dropdown-base";
    export class SurveyQuestionDropdown extends SurveyQuestionDropdownBase<Question> {
        constructor(props: any);
        protected renderElement(): JSX.Element;
    }
}
declare module "react/tagbox-item" {
    import { ReactSurveyElement } from "react/reactquestion_element";
    import { Base, QuestionTagboxModel, ItemValue } from "survey-core";
    export class SurveyQuestionTagboxItem extends ReactSurveyElement {
        constructor(props: any);
        protected getStateElement(): Base;
        protected get question(): QuestionTagboxModel;
        protected get item(): ItemValue;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_tagbox" {
    import { QuestionTagboxModel, DropdownListModel } from "survey-core";
    import { SurveyQuestionDropdownBase } from "react/dropdown-base";
    export class SurveyQuestionTagbox extends SurveyQuestionDropdownBase<QuestionTagboxModel> {
        constructor(props: any);
        protected renderItem(key: string, item: any): JSX.Element;
        protected renderInput(dropdownListModel: DropdownListModel): JSX.Element;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/dropdown-select" {
    import { SurveyQuestionDropdown } from "react/reactquestion_dropdown";
    export class SurveyQuestionDropdownSelect extends SurveyQuestionDropdown {
        constructor(props: any);
        protected renderSelect(cssClasses: any): JSX.Element;
    }
}
declare module "react/reactquestion_matrix" {
    import { ReactSurveyElement, SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionMatrixModel } from "survey-core";
    export class SurveyQuestionMatrix extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionMatrixModel;
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected renderElement(): JSX.Element;
    }
    export class SurveyQuestionMatrixRow extends ReactSurveyElement {
        constructor(props: any);
        private get question();
        private get row();
        handleOnChange(event: any): void;
        protected wrapCell(cell: any, element: JSX.Element, reason: string): JSX.Element;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
        generateTds(): JSX.Element[];
        cellClick(row: any, column: any): void;
    }
}
declare module "react/reactquestion_html" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionHtmlModel } from "survey-core";
    export class SurveyQuestionHtml extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionHtmlModel;
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        private reactOnStrChanged;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_file" {
    import { QuestionFileModel } from "survey-core";
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    export class SurveyQuestionFile extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionFileModel;
        protected renderElement(): JSX.Element;
        protected renderFileDecorator(): JSX.Element;
        protected renderClearButton(className: string): JSX.Element | null;
        protected renderFileSign(className: string, val: any): JSX.Element | null;
        protected renderPreview(): JSX.Element | null;
    }
}
declare module "react/reactquestion_multipletext" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { SurveyQuestionAndErrorsWrapped } from "react/reactquestion";
    import { QuestionMultipleTextModel, MultipleTextItemModel } from "survey-core";
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyQuestionMultipleText extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionMultipleTextModel;
        protected renderElement(): JSX.Element;
        protected renderRow(rowIndex: number, items: Array<MultipleTextItemModel>, cssClasses: any): JSX.Element;
    }
    export class SurveyMultipleTextItem extends ReactSurveyElement {
        private get question();
        private get item();
        protected getStateElements(): (MultipleTextItemModel | import("question_text").QuestionTextModel)[];
        private get creator();
        protected renderElement(): JSX.Element;
        protected renderItemTooltipError(item: MultipleTextItemModel, cssClasses: any): JSX.Element | null;
    }
    export class SurveyMultipleTextItemEditor extends SurveyQuestionAndErrorsWrapped {
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_radiogroup" {
    import { SurveyQuestionElementBase, ReactSurveyElement } from "react/reactquestion_element";
    import { QuestionRadiogroupModel, ItemValue, Base } from "survey-core";
    export class SurveyQuestionRadiogroup extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionRadiogroupModel;
        protected renderElement(): JSX.Element;
        protected getFooter(): JSX.Element[] | undefined;
        protected getColumnedBody(cssClasses: any): JSX.Element;
        protected getColumns(cssClasses: any): JSX.Element[];
        protected getBody(cssClasses: any): JSX.Element;
        protected getItems(cssClasses: any, choices: Array<ItemValue>): Array<any>;
        protected get textStyle(): any;
        protected renderOther(cssClasses: any): JSX.Element;
        private renderItem;
        private getStateValue;
    }
    export class SurveyQuestionRadioItem extends ReactSurveyElement {
        constructor(props: any);
        protected getStateElement(): Base;
        protected get question(): QuestionRadiogroupModel;
        protected get item(): ItemValue;
        protected get textStyle(): any;
        protected get index(): number;
        protected get isChecked(): boolean;
        private get hideCaption();
        shouldComponentUpdate(nextProps: any, nextState: any): boolean;
        handleOnChange(event: any): void;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_text" {
    import { SurveyQuestionUncontrolledElement } from "react/reactquestion_element";
    import { QuestionTextModel } from "survey-core";
    export class SurveyQuestionText extends SurveyQuestionUncontrolledElement<QuestionTextModel> {
        constructor(props: any);
        protected renderInput(): JSX.Element;
        protected renderElement(): JSX.Element;
        private renderDataList;
    }
}
declare module "react/boolean" {
    import * as React from "react";
    import { QuestionBooleanModel, Base } from "survey-core";
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    export class SurveyQuestionBoolean extends SurveyQuestionElementBase {
        protected checkRef: React.RefObject<HTMLInputElement>;
        constructor(props: any);
        protected getStateElement(): Base;
        protected get question(): QuestionBooleanModel;
        private doCheck;
        handleOnChange(event: any): void;
        handleOnClick(event: any): void;
        handleOnSwitchClick(event: any): void;
        handleOnLabelClick(event: any, value: boolean): void;
        handleOnKeyDown(event: any): void;
        protected updateDomElement(): void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/boolean-checkbox" {
    import { SurveyQuestionBoolean } from "react/boolean";
    export class SurveyQuestionBooleanCheckbox extends SurveyQuestionBoolean {
        constructor(props: any);
        protected renderElement(): JSX.Element;
    }
}
declare module "react/boolean-radio" {
    import { SurveyQuestionBoolean } from "react/boolean";
    export class SurveyQuestionBooleanRadio extends SurveyQuestionBoolean {
        constructor(props: any);
        private renderRadioItem;
        handleOnChange: (event: any) => void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_empty" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionEmptyModel } from "survey-core";
    export class SurveyQuestionEmpty extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionEmptyModel;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/matrix/row" {
    import { QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownModelBase } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    interface IMatrixRowProps {
        model: QuestionMatrixDropdownRenderedRow;
        parentMatrix: QuestionMatrixDropdownModelBase;
    }
    export class MatrixRow extends SurveyElementBase<IMatrixRowProps, any> {
        constructor(props: IMatrixRowProps);
        get model(): QuestionMatrixDropdownRenderedRow;
        get parentMatrix(): QuestionMatrixDropdownModelBase;
        protected getStateElement(): QuestionMatrixDropdownRenderedRow;
        protected onPointerDownHandler: (event: any) => void;
        render(): JSX.Element;
    }
}
declare module "react/components/matrix-actions/drag-drop-icon/drag-drop-icon" {
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyQuestionMatrixDynamicDragDropIcon extends ReactSurveyElement {
        private get question();
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_matrixdropdownbase" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { SurveyQuestionAndErrorsCell } from "react/reactquestion";
    import { QuestionMatrixDropdownModelBase, QuestionMatrixDropdownRenderedRow, QuestionMatrixDropdownRenderedCell, Question } from "survey-core";
    export class SurveyQuestionMatrixDropdownBase extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionMatrixDropdownModelBase;
        private getState;
        private updateStateOnCallback;
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected renderElement(): JSX.Element;
        renderTableDiv(): JSX.Element;
        renderHeader(): JSX.Element | null;
        renderFooter(): JSX.Element | null;
        renderRows(): JSX.Element;
        renderRow(keyValue: any, row: QuestionMatrixDropdownRenderedRow, cssClasses: any): JSX.Element;
        renderCell(cell: QuestionMatrixDropdownRenderedCell, index: number, cssClasses: any): JSX.Element;
        private renderCellContent;
    }
    export class SurveyQuestionMatrixDropdownCell extends SurveyQuestionAndErrorsCell {
        constructor(props: any);
        private get cell();
        protected get itemCss(): string;
        protected getQuestion(): Question | any;
        protected doAfterRender(): void;
        protected getShowErrors(): boolean;
        protected getCellStyle(): any;
        protected getHeaderText(): string;
        protected renderQuestion(): JSX.Element;
        private renderOtherComment;
        private renderCellCheckboxButton;
        private renderCellRadiogroupButton;
    }
}
declare module "react/reactquestion_matrixdropdown" {
    import { SurveyQuestionMatrixDropdownBase } from "react/reactquestion_matrixdropdownbase";
    export class SurveyQuestionMatrixDropdown extends SurveyQuestionMatrixDropdownBase {
        constructor(props: any);
    }
}
declare module "react/reactquestion_matrixdynamic" {
    import { SurveyQuestionMatrixDropdownBase } from "react/reactquestion_matrixdropdownbase";
    import { QuestionMatrixDynamicModel } from "survey-core";
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyQuestionMatrixDynamic extends SurveyQuestionMatrixDropdownBase {
        constructor(props: any);
        protected get matrix(): QuestionMatrixDynamicModel;
        handleOnRowAddClick(event: any): void;
        protected renderElement(): JSX.Element;
        protected renderAddRowButtonOnTop(cssClasses: any): JSX.Element | null;
        protected renderAddRowButtonOnBottom(cssClasses: any): JSX.Element | null;
        protected renderNoRowsContent(cssClasses: any): JSX.Element;
        protected renderAddRowButton(cssClasses: any, isEmptySection?: boolean): JSX.Element;
    }
    export class SurveyQuestionMatrixDynamicAddButton extends ReactSurveyElement {
        constructor(props: any);
        protected get matrix(): QuestionMatrixDynamicModel;
        handleOnRowAddClick(event: any): void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/paneldynamic-actions/paneldynamic-add-btn" {
    import { QuestionPanelDynamicModel } from "survey-core";
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyQuestionPanelDynamicAction extends ReactSurveyElement {
        constructor(props: any);
        protected get data(): any;
        protected get question(): QuestionPanelDynamicModel;
    }
    export class SurveyQuestionPanelDynamicAddButton extends SurveyQuestionPanelDynamicAction {
        protected handleClick: (event: any) => void;
        protected renderElement(): JSX.Element | null;
    }
}
declare module "react/components/paneldynamic-actions/paneldynamic-next-btn" {
    import { SurveyQuestionPanelDynamicAction } from "react/components/paneldynamic-actions/paneldynamic-add-btn";
    export class SurveyQuestionPanelDynamicNextButton extends SurveyQuestionPanelDynamicAction {
        protected handleClick: (event: any) => void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/paneldynamic-actions/paneldynamic-prev-btn" {
    import { SurveyQuestionPanelDynamicAction } from "react/components/paneldynamic-actions/paneldynamic-add-btn";
    export class SurveyQuestionPanelDynamicPrevButton extends SurveyQuestionPanelDynamicAction {
        protected handleClick: (event: any) => void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/paneldynamic-actions/paneldynamic-progress-text" {
    import { SurveyQuestionPanelDynamicAction } from "react/components/paneldynamic-actions/paneldynamic-add-btn";
    export class SurveyQuestionPanelDynamicProgressText extends SurveyQuestionPanelDynamicAction {
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/paneldynamic-actions/paneldynamic-remove-btn" {
    import { SurveyQuestionPanelDynamicAction } from "react/components/paneldynamic-actions/paneldynamic-add-btn";
    export class SurveyQuestionPanelDynamicRemoveButton extends SurveyQuestionPanelDynamicAction {
        protected handleClick: (event: any) => void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_paneldynamic" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { SurveyModel, QuestionPanelDynamicModel } from "survey-core";
    import { SurveyPanel } from "react/panel";
    export class SurveyQuestionPanelDynamic extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionPanelDynamicModel;
        componentDidMount(): void;
        componentWillUnmount(): void;
        private updateQuestionRendering;
        protected renderElement(): JSX.Element;
        protected renderNavigator(): JSX.Element | null;
        private renderProgressText;
        protected rendrerPrevButton(): JSX.Element;
        protected rendrerNextButton(): JSX.Element;
        protected renderRange(): JSX.Element;
        protected renderAddRowButton(): JSX.Element | null;
        protected renderNavigatorV2(): JSX.Element | null;
        protected renderPlaceholder(): JSX.Element | null;
    }
    export class SurveyQuestionPanelDynamicItem extends SurveyPanel {
        private get question();
        private get index();
        protected getSurvey(): SurveyModel | null;
        protected getCss(): any;
        render(): JSX.Element;
        protected renderButton(): JSX.Element | null;
    }
}
declare module "react/reactSurveyProgress" {
    import { SurveyNavigationBase } from "react/reactSurveyNavigationBase";
    export class SurveyProgress extends SurveyNavigationBase {
        constructor(props: any);
        protected get isTop(): boolean;
        protected get progress(): number;
        protected get progressText(): string;
        render(): JSX.Element;
    }
}
declare module "react/reactSurveyProgressButtons" {
    import { PageModel } from "survey-core";
    import { SurveyNavigationBase } from "react/reactSurveyNavigationBase";
    export class SurveyProgressButtons extends SurveyNavigationBase {
        private progressButtonsModel;
        private updateScroller;
        private listContainerRef;
        constructor(props: any);
        render(): JSX.Element;
        protected getListElements(): JSX.Element[];
        protected renderListElement(page: PageModel, index: number): JSX.Element;
        protected isListElementClickable(index: number): boolean;
        protected getListElementCss(index: number): string;
        protected clickListElement(index: number): void;
        protected getScrollButtonCss(isLeftScroll: boolean): string;
        protected clickScrollButton(listContainerElement: Element | null, isLeftScroll: boolean): void;
        componentDidMount(): void;
        componentWillUnmount(): void;
    }
}
declare module "react/components/list/list-item" {
    import { ListModel } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    interface IListItemProps {
        model: ListModel;
        item: any;
    }
    export class ListItem extends SurveyElementBase<IListItemProps, any> {
        get model(): ListModel;
        get item(): any;
        handleKeydown: (event: any) => void;
        getStateElement(): any;
        render(): JSX.Element | null;
        componentDidMount(): void;
    }
}
declare module "react/components/list/list" {
    import { ListModel } from "survey-core";
    import { SurveyElementBase } from "react/reactquestion_element";
    interface IListProps {
        model: ListModel;
    }
    export class List extends SurveyElementBase<IListProps, any> {
        private listContainerRef;
        constructor(props: any);
        get model(): ListModel;
        handleKeydown: (event: any) => void;
        handleMouseMove: (event: any) => void;
        getStateElement(): ListModel<import("survey-core").Action>;
        componentDidMount(): void;
        renderElement(): JSX.Element;
        renderItems(): JSX.Element[] | null;
        searchElementContent(): JSX.Element | null;
        emptyContent(): JSX.Element;
    }
}
declare module "react/reactSurveyProgressToc" {
    import { SurveyNavigationBase } from "react/reactSurveyNavigationBase";
    export class SurveyProgressToc extends SurveyNavigationBase {
        render(): JSX.Element;
    }
}
declare module "react/reactquestion_rating" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionRatingModel } from "survey-core";
    export class SurveyQuestionRating extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionRatingModel;
        handleOnClick(event: any): void;
        protected renderItem(item: any, index: Number): JSX.Element;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/rating-dropdown" {
    import { QuestionRatingModel } from "survey-core";
    import { SurveyQuestionDropdownBase } from "react/dropdown-base";
    export class SurveyQuestionRatingDropdown extends SurveyQuestionDropdownBase<QuestionRatingModel> {
        constructor(props: any);
        protected renderElement(): JSX.Element;
    }
}
declare module "react/reactquestion_expression" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionExpressionModel } from "survey-core";
    export class SurveyQuestionExpression extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionExpressionModel;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/react-popup-survey" {
    import { Survey } from "react/reactSurvey";
    import { Base, PopupSurveyModel } from "survey-core";
    export class PopupSurvey extends Survey {
        protected popup: PopupSurveyModel;
        constructor(props: any);
        protected getStateElements(): Array<Base>;
        handleOnExpanded(event: any): void;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
        protected renderWindowHeader(): JSX.Element;
        protected renderBody(): JSX.Element;
        protected createSurvey(newProps: any): void;
    }
    /**
     * Obsolete. Please use PopupSurvey
     */
    export class SurveyWindow extends PopupSurvey {
    }
}
declare module "react/imagepicker" {
    import { ReactSurveyElement, SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionImagePickerModel, ImageItemValue } from "survey-core";
    export class SurveyQuestionImagePicker extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionImagePickerModel;
        protected renderElement(): JSX.Element;
        protected getColumns(cssClasses: any): JSX.Element[];
        protected getItems(cssClasses: any): Array<any>;
        protected get textStyle(): any;
        protected renderItem(key: string, item: ImageItemValue, cssClasses: any): JSX.Element;
    }
    export class SurveyQuestionImagePickerItem extends ReactSurveyElement {
        constructor(props: any);
        protected getStateElement(): any;
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidUpdate(prevProps: any, prevState: any): void;
        private reactOnStrChanged;
        protected get cssClasses(): any;
        protected get item(): any;
        protected get question(): any;
        handleOnChange(event: any): void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/image" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionImageModel } from "survey-core";
    export class SurveyQuestionImage extends SurveyQuestionElementBase {
        constructor(props: any);
        componentDidMount(): void;
        componentWillUnmount(): void;
        protected get question(): QuestionImageModel;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/signaturepad" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { QuestionSignaturePadModel } from "survey-core";
    export class SurveyQuestionSignaturePad extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionSignaturePadModel;
        protected renderElement(): JSX.Element;
        renderCleanButton(): JSX.Element | null;
    }
}
declare module "react/reactquestion_buttongroup" {
    import { SurveyQuestionElementBase } from "react/reactquestion_element";
    import { SurveyElementBase } from "react/reactquestion_element";
    import { QuestionButtonGroupModel, ButtonGroupItemValue, ButtonGroupItemModel } from "survey-core";
    export class SurveyQuestionButtonGroup extends SurveyQuestionElementBase {
        constructor(props: any);
        protected get question(): QuestionButtonGroupModel;
        getStateElement(): QuestionButtonGroupModel;
        renderElement(): JSX.Element;
        renderItems(): JSX.Element[];
    }
    export class SurveyButtonGroupItem extends SurveyElementBase<any, any> {
        model: ButtonGroupItemModel;
        constructor(props: any);
        get index(): number;
        get question(): QuestionButtonGroupModel;
        get item(): ButtonGroupItemValue;
        getStateElement(): ButtonGroupItemValue;
        renderElement(): JSX.Element;
        protected renderIcon(): JSX.Element | null;
        protected renderInput(): JSX.Element;
        protected renderCaption(): JSX.Element | null;
    }
}
declare module "react/reactquestion_custom" {
    import { SurveyQuestionUncontrolledElement } from "react/reactquestion_element";
    import { Base, QuestionCustomModel, QuestionCompositeModel } from "survey-core";
    export class SurveyQuestionCustom extends SurveyQuestionUncontrolledElement<QuestionCustomModel> {
        constructor(props: any);
        protected getStateElements(): Array<Base>;
        protected renderElement(): JSX.Element;
    }
    export class SurveyQuestionComposite extends SurveyQuestionUncontrolledElement<QuestionCompositeModel> {
        constructor(props: any);
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/survey-header/logo-image" {
    import React from "react";
    import { SurveyModel } from "survey-core";
    interface ILogoImageProps {
        data: SurveyModel;
    }
    export class LogoImage extends React.Component<ILogoImageProps, any> {
        constructor(props: ILogoImageProps);
        private get survey();
        render(): JSX.Element;
    }
}
declare module "react/components/matrix-actions/remove-button/remove-button" {
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyQuestionMatrixDynamicRemoveButton extends ReactSurveyElement {
        constructor(props: any);
        private get question();
        private get row();
        handleOnRowRemoveClick(event: any): void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/matrix-actions/detail-button/detail-button" {
    import { Action } from "survey-core";
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyQuestionMatrixDetailButton extends ReactSurveyElement {
        constructor(props: any);
        protected getStateElement(): any;
        get item(): Action;
        private get question();
        private get row();
        handleOnShowHideClick(event: any): void;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/survey-actions/survey-nav-button" {
    import { Action } from "survey-core";
    import { ReactSurveyElement } from "react/reactquestion_element";
    export class SurveyNavigationButton extends ReactSurveyElement {
        protected get item(): Action;
        protected canRender(): boolean;
        protected renderElement(): JSX.Element;
    }
}
declare module "react/components/skeleton" {
    import React from "react";
    export class Skeleton extends React.Component<any, any> {
        render(): JSX.Element;
    }
}
declare module "react/string-editor" {
    import React from "react";
    export class SurveyLocStringEditor extends React.Component<any, any> {
        constructor(props: any);
        private get locStr();
        private get style();
        componentDidMount(): void;
        componentWillUnmount(): void;
        onInput: (event: any) => void;
        onClick: (event: any) => void;
        render(): JSX.Element | null;
    }
}
declare module "entries/react-ui-model" {
    export { Survey, attachKey2click } from "react/reactSurvey";
    export { ReactSurveyElementsWrapper } from "react/reactsurveymodel";
    export { SurveyNavigationBase } from "react/reactSurveyNavigationBase";
    export { SurveyTimerPanel } from "react/reacttimerpanel";
    export { SurveyPage } from "react/page";
    export { SurveyRow } from "react/row";
    export { SurveyPanel } from "react/panel";
    export { SurveyFlowPanel } from "react/flow-panel";
    export { SurveyQuestion, SurveyElementErrors, SurveyQuestionAndErrorsCell, ISurveyCreator } from "react/reactquestion";
    export { ReactSurveyElement, SurveyElementBase, SurveyQuestionElementBase, } from "react/reactquestion_element";
    export { SurveyQuestionCommentItem, SurveyQuestionComment, } from "react/reactquestion_comment";
    export { SurveyQuestionCheckbox, SurveyQuestionCheckboxItem, } from "react/reactquestion_checkbox";
    export { SurveyQuestionRanking, SurveyQuestionRankingItem, } from "react/reactquestion_ranking";
    export { RatingItem } from "react/components/rating/rating-item";
    export { RatingItemStar } from "react/components/rating/rating-item-star";
    export { TagboxFilterString } from "react/tagbox-filter";
    export { SurveyQuestionOptionItem } from "react/dropdown-item";
    export { SurveyQuestionDropdownBase } from "react/dropdown-base";
    export { SurveyQuestionDropdown } from "react/reactquestion_dropdown";
    export { SurveyQuestionTagboxItem } from "react/tagbox-item";
    export { SurveyQuestionTagbox } from "react/reactquestion_tagbox";
    export { SurveyQuestionDropdownSelect } from "react/dropdown-select";
    export { SurveyQuestionMatrix, SurveyQuestionMatrixRow, } from "react/reactquestion_matrix";
    export { SurveyQuestionHtml } from "react/reactquestion_html";
    export { SurveyQuestionFile } from "react/reactquestion_file";
    export { SurveyQuestionMultipleText } from "react/reactquestion_multipletext";
    export { SurveyQuestionRadiogroup, SurveyQuestionRadioItem } from "react/reactquestion_radiogroup";
    export { SurveyQuestionText } from "react/reactquestion_text";
    export { SurveyQuestionBoolean } from "react/boolean";
    export { SurveyQuestionBooleanCheckbox } from "react/boolean-checkbox";
    export { SurveyQuestionBooleanRadio } from "react/boolean-radio";
    export { SurveyQuestionEmpty } from "react/reactquestion_empty";
    export { SurveyQuestionMatrixDropdownCell, SurveyQuestionMatrixDropdownBase } from "react/reactquestion_matrixdropdownbase";
    export { SurveyQuestionMatrixDropdown } from "react/reactquestion_matrixdropdown";
    export { SurveyQuestionMatrixDynamic, SurveyQuestionMatrixDynamicAddButton } from "react/reactquestion_matrixdynamic";
    export { SurveyQuestionPanelDynamic } from "react/reactquestion_paneldynamic";
    export { SurveyProgress } from "react/reactSurveyProgress";
    export { SurveyProgressButtons } from "react/reactSurveyProgressButtons";
    export { SurveyProgressToc } from "react/reactSurveyProgressToc";
    export { SurveyQuestionRating } from "react/reactquestion_rating";
    export { SurveyQuestionRatingDropdown } from "react/rating-dropdown";
    export { SurveyQuestionExpression } from "react/reactquestion_expression";
    export { PopupSurvey, SurveyWindow } from "react/react-popup-survey";
    export { ReactQuestionFactory } from "react/reactquestion_factory";
    export { ReactElementFactory } from "react/element-factory";
    export { SurveyQuestionImagePicker } from "react/imagepicker";
    export { SurveyQuestionImage } from "react/image";
    export { SurveyQuestionSignaturePad } from "react/signaturepad";
    export { SurveyQuestionButtonGroup } from "react/reactquestion_buttongroup";
    export { SurveyQuestionCustom, SurveyQuestionComposite } from "react/reactquestion_custom";
    export { Popup } from "react/components/popup/popup";
    export { List } from "react/components/list/list";
    export { TitleActions } from "react/components/title/title-actions";
    export { TitleElement } from "react/components/title/title-element";
    export { SurveyActionBar } from "react/components/action-bar/action-bar";
    export { LogoImage } from "react/components/survey-header/logo-image";
    export { SurveyHeader } from "react/components/survey-header/survey-header";
    export { SvgIcon } from "react/components/svg-icon/svg-icon";
    export { SurveyQuestionMatrixDynamicRemoveButton } from "react/components/matrix-actions/remove-button/remove-button";
    export { SurveyQuestionMatrixDetailButton } from "react/components/matrix-actions/detail-button/detail-button";
    export { SurveyQuestionMatrixDynamicDragDropIcon } from "react/components/matrix-actions/drag-drop-icon/drag-drop-icon";
    export { SurveyQuestionPanelDynamicAddButton } from "react/components/paneldynamic-actions/paneldynamic-add-btn";
    export { SurveyQuestionPanelDynamicRemoveButton } from "react/components/paneldynamic-actions/paneldynamic-remove-btn";
    export { SurveyQuestionPanelDynamicPrevButton } from "react/components/paneldynamic-actions/paneldynamic-prev-btn";
    export { SurveyQuestionPanelDynamicNextButton } from "react/components/paneldynamic-actions/paneldynamic-next-btn";
    export { SurveyQuestionPanelDynamicProgressText } from "react/components/paneldynamic-actions/paneldynamic-progress-text";
    export { SurveyNavigationButton } from "react/components/survey-actions/survey-nav-button";
    export { MatrixRow } from "react/components/matrix/row";
    export { Skeleton } from "react/components/skeleton";
    export { NotifierComponent } from "react/components/notifier";
    export { ComponentsContainer } from "react/components/components-container";
    export { CharacterCounterComponent } from "react/components/character-counter";
    export { SurveyLocStringViewer } from "react/string-viewer";
    export { SurveyLocStringEditor } from "react/string-editor";
}

declare module "survey-react-ui" { import main = require("entries/react-ui-model"); export = main; }