// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9An8zqKqHunPYYo4cu2raH
// Component: 9rfm_ZacEO

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: SwkFEueqEZ5/component
import Content from "../../Content"; // plasmic-import: MINeB5eUWi/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jean_survey_2.module.css"; // plasmic-import: 9An8zqKqHunPYYo4cu2raH/projectcss
import sty from "./PlasmicTab.module.css"; // plasmic-import: 9rfm_ZacEO/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 14bXXZYT-it/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: TkrW8X0T1WG/icon
import imageLMeKblmuJ7W from "./images/image.svg"; // plasmic-import: lMeKblmuJ7w/picture

export type PlasmicTab__VariantMembers = {};
export type PlasmicTab__VariantsArgs = {};
type VariantPropType = keyof PlasmicTab__VariantsArgs;
export const PlasmicTab__VariantProps = new Array<VariantPropType>();

export type PlasmicTab__ArgsType = {};
type ArgPropType = keyof PlasmicTab__ArgsType;
export const PlasmicTab__ArgProps = new Array<ArgPropType>();

export type PlasmicTab__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<"img">;
  content?: p.Flex<typeof Content>;
};

export interface DefaultTabProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTab__RenderFunc(props: {
  variants: PlasmicTab__VariantsArgs;
  args: PlasmicTab__ArgsType;
  overrides: PlasmicTab__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rpf0A)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rExlp)}
        >
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(projectcss.all, projectcss.img, sty.img)}
            src={imageLMeKblmuJ7W}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kzKXk)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__vHFhL)}
              color={"clear" as const}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__nLfrN)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__smj6P)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t8An
                )}
              >
                {"Services"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__qd9Wz)}
              color={"clear" as const}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__bqhC0)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__yFhQp)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hOaS8
                )}
              >
                {"Features"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__aSvhy)}
              color={"clear" as const}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__vq9Bb)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg___7Ajck)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qlZvl
                )}
              >
                {"Company"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__uY96S)}
              color={"clear" as const}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__qblsq)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__cFu77)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6DBoH
                )}
              >
                {"Contact"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__cnNkc)}
              color={"clear" as const}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__xw1Kz)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__hvm3Q)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lpLxz
                )}
              >
                {"Log in"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__jpCQh)}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___6KCfP)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__vRnzC)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vGvIf
                )}
              >
                {"Sign up"}
              </div>
            </Button>
          </p.Stack>
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__mHhWb)}>
              <button
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button__q8J5D
                )}
              >
                {"Sign up"}
              </button>
              {true ? (
                <Button
                  className={classNames("__wab_instance", sty.button__b23K2)}
                  color={"clear" as const}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__jGxr5)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__zcz09)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dLEov
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button>
              ) : null}
            </div>
          ) : null}
        </p.Stack>
      </p.Stack>
      <Content
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames("__wab_instance", sty.content)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "content"],
  img: ["img"],
  content: ["content"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: "img";
  content: typeof Content;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTab__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTab__VariantsArgs;
    args?: PlasmicTab__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTab__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTab__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTab__ArgProps,
          internalVariantPropNames: PlasmicTab__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTab";
  } else {
    func.displayName = `PlasmicTab.${nodeName}`;
  }
  return func;
}

export const PlasmicTab = Object.assign(
  // Top-level PlasmicTab renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicTab
    internalVariantProps: PlasmicTab__VariantProps,
    internalArgProps: PlasmicTab__ArgProps
  }
);

export default PlasmicTab;
/* prettier-ignore-end */
