// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9An8zqKqHunPYYo4cu2raH
// Component: 0RXpCpGOOAec
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ToggleButton from "../../ToggleButton"; // plasmic-import: _2Xum1BZtJR4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jean_survey_2.module.css"; // plasmic-import: 9An8zqKqHunPYYo4cu2raH/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: 0RXpCpGOOAec/css

export type PlasmicFooter__VariantMembers = {
  state: "hasCompleted" | "singularLeft" | "empty";
};
export type PlasmicFooter__VariantsArgs = {
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>("state");

export type PlasmicFooter__ArgsType = {
  count?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>("count");

export type PlasmicFooter__OverridesType = {
  footerContainer?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  count?: React.ReactNode;
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.state
          : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.footerContainer
      )}
    >
      {(
        hasVariant($state, "state", "empty")
          ? false
          : hasVariant($state, "state", "singularLeft")
          ? true
          : hasVariant($state, "state", "hasCompleted")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__yy52C, {
            [sty.freeBoxstate_empty__yy52CxFN]: hasVariant(
              $state,
              "state",
              "empty"
            ),
            [sty.freeBoxstate_hasCompleted__yy52CZsjVo]: hasVariant(
              $state,
              "state",
              "hasCompleted"
            ),
            [sty.freeBoxstate_singularLeft__yy52CgupF]: hasVariant(
              $state,
              "state",
              "singularLeft"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "2",
            value: args.count,
            className: classNames(sty.slotTargetCount, {
              [sty.slotTargetCountstate_hasCompleted]: hasVariant(
                $state,
                "state",
                "hasCompleted"
              ),
              [sty.slotTargetCountstate_singularLeft]: hasVariant(
                $state,
                "state",
                "singularLeft"
              )
            })
          })}
          {(hasVariant($state, "state", "singularLeft") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cLr69,
                {
                  [sty.textstate_empty__cLr69XFN]: hasVariant(
                    $state,
                    "state",
                    "empty"
                  ),
                  [sty.textstate_hasCompleted__cLr69ZsjVo]: hasVariant(
                    $state,
                    "state",
                    "hasCompleted"
                  ),
                  [sty.textstate_singularLeft__cLr69GupF]: hasVariant(
                    $state,
                    "state",
                    "singularLeft"
                  )
                }
              )}
            >
              {hasVariant($state, "state", "singularLeft")
                ? " item left"
                : " items left"}
            </div>
          ) : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__vpiia)}
      >
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__d25Yz)}
          state={"selected" as const}
        >
          {"All"}
        </ToggleButton>

        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton___8CyPt)}
        >
          {"Completed"}
        </ToggleButton>

        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__cydrj)}
        >
          {"Active"}
        </ToggleButton>
      </p.Stack>

      {(hasVariant($state, "state", "hasCompleted") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uu5Cp,
            {
              [sty.textstate_hasCompleted__uu5CpZsjVo]: hasVariant(
                $state,
                "state",
                "hasCompleted"
              )
            }
          )}
        >
          {"Clear completed"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footerContainer: ["footerContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footerContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
