// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9An8zqKqHunPYYo4cu2raH
// Component: 3iJDl4ivTUAA

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: RXlRRbGyjc5/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: UV276DGguN-J/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jean_survey_2.module.css"; // plasmic-import: 9An8zqKqHunPYYo4cu2raH/projectcss
import sty from "./PlasmicMultipleChoice.module.css"; // plasmic-import: 3iJDl4ivTUAA/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: CwzDQHwdyWv/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 14bXXZYT-it/icon

export type PlasmicMultipleChoice__VariantMembers = {
  state: "checked" | "editing";
};
export type PlasmicMultipleChoice__VariantsArgs = {
  state?: SingleChoiceArg<"checked" | "editing">;
};
type VariantPropType = keyof PlasmicMultipleChoice__VariantsArgs;
export const PlasmicMultipleChoice__VariantProps = new Array<VariantPropType>(
  "state"
);

export type PlasmicMultipleChoice__ArgsType = {};
type ArgPropType = keyof PlasmicMultipleChoice__ArgsType;
export const PlasmicMultipleChoice__ArgProps = new Array<ArgPropType>();

export type PlasmicMultipleChoice__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  deleteBtn?: p.Flex<"button">;
  button?: p.Flex<"button">;
};

export interface DefaultMultipleChoiceProps {
  state?: SingleChoiceArg<"checked" | "editing">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicMultipleChoice__RenderFunc(props: {
  variants: PlasmicMultipleChoice__VariantsArgs;
  args: PlasmicMultipleChoice__ArgsType;
  overrides: PlasmicMultipleChoice__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      },
      {
        path: "textbox.textboxValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.rootstate_checked]: hasVariant($state, "state", "checked"),
          [sty.rootstate_editing]: hasVariant($state, "state", "editing"),
          [sty.rootstate_editing_global_theme_dark]:
            hasVariant($state, "state", "editing") &&
            hasVariant(globalVariants, "theme", "dark")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.freeBoxstate_editing]: hasVariant($state, "state", "editing"),
          [sty.freeBoxstate_editing_global_theme_dark]:
            hasVariant($state, "state", "editing") &&
            hasVariant(globalVariants, "theme", "dark")
        })}
      >
        {(hasVariant($state, "state", "editing") ? true : false) ? (
          <input
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.textInput__wtaaP,
              {
                [sty.textInputstate_editing__wtaaP6USF]: hasVariant(
                  $state,
                  "state",
                  "editing"
                ),
                [sty.textInputstate_editing_global_theme_dark__wtaaP6USFLCthO]:
                  hasVariant($state, "state", "editing") &&
                  hasVariant(globalVariants, "theme", "dark")
              }
            )}
            placeholder={"Some placeholder text" as const}
            type={"text" as const}
          />
        ) : null}
        <input
          data-plasmic-name={"textbox"}
          data-plasmic-override={overrides.textbox}
          className={classNames(projectcss.all, projectcss.input, sty.textbox, {
            [sty.textboxglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.textboxstate_editing]: hasVariant($state, "state", "editing")
          })}
          onChange={e => {
            p.generateStateOnChangeProp($state, ["textbox", "textboxValue"])(
              e.target.value
            );
          }}
          placeholder={"Enter Choices Here" as const}
          ref={ref => {
            $refs["textbox"] = ref;
          }}
          type={"text" as const}
          value={p.generateStateValueProp($state, ["textbox", "textboxValue"])}
        />

        {(hasVariant($state, "state", "editing") ? true : true) ? (
          <TextInput
            className={classNames("__wab_instance", sty.textInput__mnj1D, {
              [sty.textInputstate_editing__mnj1D6USF]: hasVariant(
                $state,
                "state",
                "editing"
              )
            })}
            onChange={(...eventArgs) => {
              p.generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            value={p.generateStateValueProp($state, ["textInput", "value"])}
          />
        ) : null}
        <button
          data-plasmic-name={"deleteBtn"}
          data-plasmic-override={overrides.deleteBtn}
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.deleteBtn,
            {
              [sty.deleteBtnstate_editing]: hasVariant(
                $state,
                "state",
                "editing"
              )
            }
          )}
          onClick={async event => {
            const $steps = {};
            $steps["setTextboxTextboxValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "EWJtcLfDg",
                        componentUuid: "3iJDl4ivTUAA",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["textbox", "textboxValue"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "EWJtcLfDg",
                        componentUuid: "3iJDl4ivTUAA",
                        argName: "operation"
                      },
                      () => 0
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "EWJtcLfDg",
                      componentUuid: "3iJDl4ivTUAA"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["setTextboxTextboxValue"] === "object" &&
              typeof $steps["setTextboxTextboxValue"].then === "function"
            ) {
              $steps["setTextboxTextboxValue"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "EWJtcLfDg",
                  componentUuid: "3iJDl4ivTUAA"
                },
                $steps["setTextboxTextboxValue"]
              );
            }
          }}
          ref={ref => {
            $refs["deleteBtn"] = ref;
          }}
        >
          {triggers.hover_root ? "×" : "×"}
        </button>
      </div>
      {(hasVariant($state, "state", "editing") ? true : true) ? (
        <button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.button,
            {
              [sty.buttonstate_editing]: hasVariant($state, "state", "editing")
            }
          )}
          onClick={async event => {
            const $steps = {};
            $steps["setTextboxTextboxValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "PNjxR9LUp",
                        componentUuid: "3iJDl4ivTUAA",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["textbox", "textboxValue"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "PNjxR9LUp",
                        componentUuid: "3iJDl4ivTUAA",
                        argName: "operation"
                      },
                      () => 0
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "PNjxR9LUp",
                      componentUuid: "3iJDl4ivTUAA"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["setTextboxTextboxValue"] === "object" &&
              typeof $steps["setTextboxTextboxValue"].then === "function"
            ) {
              $steps["setTextboxTextboxValue"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "PNjxR9LUp",
                  componentUuid: "3iJDl4ivTUAA"
                },
                $steps["setTextboxTextboxValue"]
              );
            }
          }}
        >
          {hasVariant($state, "state", "editing") ? "Click Me" : "Click Me"}
        </button>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "textbox", "deleteBtn", "button"],
  freeBox: ["freeBox", "textbox", "deleteBtn"],
  textbox: ["textbox"],
  deleteBtn: ["deleteBtn"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  textbox: "input";
  deleteBtn: "button";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMultipleChoice__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMultipleChoice__VariantsArgs;
    args?: PlasmicMultipleChoice__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMultipleChoice__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMultipleChoice__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMultipleChoice__ArgProps,
          internalVariantPropNames: PlasmicMultipleChoice__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMultipleChoice__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultipleChoice";
  } else {
    func.displayName = `PlasmicMultipleChoice.${nodeName}`;
  }
  return func;
}

export const PlasmicMultipleChoice = Object.assign(
  // Top-level PlasmicMultipleChoice renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    textbox: makeNodeComponent("textbox"),
    deleteBtn: makeNodeComponent("deleteBtn"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicMultipleChoice
    internalVariantProps: PlasmicMultipleChoice__VariantProps,
    internalArgProps: PlasmicMultipleChoice__ArgProps
  }
);

export default PlasmicMultipleChoice;
/* prettier-ignore-end */
