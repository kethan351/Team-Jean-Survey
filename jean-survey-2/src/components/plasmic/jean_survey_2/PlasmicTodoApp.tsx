// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9An8zqKqHunPYYo4cu2raH
// Component: m3dFsaanQg1o

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: RXlRRbGyjc5/component
import Button from "../../Button"; // plasmic-import: SwkFEueqEZ5/component
import Header from "../../Header"; // plasmic-import: 7AS_v3mllVy9/component
import MultipleChoice from "../../MultipleChoice"; // plasmic-import: 3iJDl4ivTUAA/component
import Footer from "../../Footer"; // plasmic-import: 0RXpCpGOOAec/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: UV276DGguN-J/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jean_survey_2.module.css"; // plasmic-import: 9An8zqKqHunPYYo4cu2raH/projectcss
import sty from "./PlasmicTodoApp.module.css"; // plasmic-import: m3dFsaanQg1o/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: CwzDQHwdyWv/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 14bXXZYT-it/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: TkrW8X0T1WG/icon

export type PlasmicTodoApp__VariantMembers = {
  state: "empty" | "unnamedVariant";
};
export type PlasmicTodoApp__VariantsArgs = {
  state?: SingleChoiceArg<"empty" | "unnamedVariant">;
};
type VariantPropType = keyof PlasmicTodoApp__VariantsArgs;
export const PlasmicTodoApp__VariantProps = new Array<VariantPropType>("state");

export type PlasmicTodoApp__ArgsType = {};
type ArgPropType = keyof PlasmicTodoApp__ArgsType;
export const PlasmicTodoApp__ArgProps = new Array<ArgPropType>();

export type PlasmicTodoApp__OverridesType = {
  root?: p.Flex<"div">;
  appTitle?: p.Flex<"div">;
  textInput2?: p.Flex<typeof TextInput>;
  questionPanel?: p.Flex<"div">;
  mcBtn?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  saBtn?: p.Flex<typeof Button>;
  appBody?: p.Flex<"div">;
  tasksContainer?: p.Flex<"div">;
  appBody2?: p.Flex<"div">;
};

export interface DefaultTodoAppProps {
  state?: SingleChoiceArg<"empty" | "unnamedVariant">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTodoApp__RenderFunc(props: {
  variants: PlasmicTodoApp__VariantsArgs;
  args: PlasmicTodoApp__ArgsType;
  overrides: PlasmicTodoApp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.rootstate_empty]: hasVariant($state, "state", "empty")
        }
      )}
    >
      <div
        data-plasmic-name={"appTitle"}
        data-plasmic-override={overrides.appTitle}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.appTitle,
          {
            [sty.appTitleglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.appTitlestate_unnamedVariant]: hasVariant(
              $state,
              "state",
              "unnamedVariant"
            )
          }
        )}
        onClick={async event => {
          const $steps = {};
          $steps["setVariable"] = true
            ? (() => {
                const actionArgs = {};
                return __wrapUserFunction(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "X0fdph9W-",
                    componentUuid: "m3dFsaanQg1o"
                  },
                  () =>
                    (({ variable, value, startIndex, deleteCount }) => {
                      const { objRoot, variablePath } = variable;
                      undefined;
                    })?.apply(null, [actionArgs]),
                  actionArgs
                );
              })()
            : undefined;
          if (
            typeof $steps["setVariable"] === "object" &&
            typeof $steps["setVariable"].then === "function"
          ) {
            $steps["setVariable"] = await __wrapUserPromise(
              {
                type: "InteractionLoc",
                actionName: "updateVariable",
                interactionUuid: "X0fdph9W-",
                componentUuid: "m3dFsaanQg1o"
              },
              $steps["setVariable"]
            );
          }
        }}
      >
        {"JEAN Survey"}
      </div>
      <TextInput
        data-plasmic-name={"textInput2"}
        data-plasmic-override={overrides.textInput2}
        className={classNames("__wab_instance", sty.textInput2)}
        name={"Survey Title Here" as const}
        onChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ["textInput2", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={"Enter Survey Title" as const}
        value={p.generateStateValueProp($state, ["textInput2", "value"])}
      />

      {true ? (
        <div
          data-plasmic-name={"questionPanel"}
          data-plasmic-override={overrides.questionPanel}
          className={classNames(projectcss.all, sty.questionPanel)}
        >
          <Button
            data-plasmic-name={"mcBtn"}
            data-plasmic-override={overrides.mcBtn}
            className={classNames("__wab_instance", sty.mcBtn, {
              [sty.mcBtnglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
            color={"sand" as const}
            onClick={async event => {
              const $steps = {};
            }}
            startIcon={
              (hasVariant(globalVariants, "theme", "dark") ? true : true) ? (
                <ChecksvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg, {
                    [sty.svgglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                  role={"img"}
                />
              ) : null
            }
          >
            {"Multiple Choice"}
          </Button>
          <Button
            data-plasmic-name={"saBtn"}
            data-plasmic-override={overrides.saBtn}
            className={classNames("__wab_instance", sty.saBtn)}
            color={"sand" as const}
            onClick={async event => {
              const $steps = {};
              $steps["setTextInput2Value"] = true
                ? (() => {
                    const actionArgs = {
                      variable: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "ho_t4EVi3",
                          componentUuid: "m3dFsaanQg1o",
                          argName: "variable"
                        },
                        () => ({
                          objRoot: $state,
                          variablePath: ["textInput2", "value"]
                        })
                      ),
                      operation: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "updateVariable",
                          interactionUuid: "ho_t4EVi3",
                          componentUuid: "m3dFsaanQg1o",
                          argName: "operation"
                        },
                        () => 0
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "ho_t4EVi3",
                        componentUuid: "m3dFsaanQg1o"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          const { objRoot, variablePath } = variable;

                          p.set(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["setTextInput2Value"] === "object" &&
                typeof $steps["setTextInput2Value"].then === "function"
              ) {
                $steps["setTextInput2Value"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "ho_t4EVi3",
                    componentUuid: "m3dFsaanQg1o"
                  },
                  $steps["setTextInput2Value"]
                );
              }
            }}
          >
            {"Short Answer"}
          </Button>
        </div>
      ) : null}
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__wGgfr, {
            [sty.freeBoxglobal_theme_dark__wGgfrlCthO]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.freeBoxstate_empty__wGgfr35NFz]: hasVariant(
              $state,
              "state",
              "empty"
            )
          })}
        >
          <div
            data-plasmic-name={"appBody"}
            data-plasmic-override={overrides.appBody}
            className={classNames(projectcss.all, sty.appBody, {
              [sty.appBodyglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.appBodystate_empty]: hasVariant($state, "state", "empty")
            })}
          >
            <Header
              className={classNames("__wab_instance", sty.header__krYgz, {
                [sty.headerglobal_theme_dark__krYgzLCthO]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.headerstate_empty__krYgz35NFz]: hasVariant(
                  $state,
                  "state",
                  "empty"
                )
              })}
              state={
                hasVariant($state, "state", "empty")
                  ? ("empty" as const)
                  : ("empty" as const)
              }
            />

            {(hasVariant($state, "state", "empty") ? false : true) ? (
              <div
                data-plasmic-name={"tasksContainer"}
                data-plasmic-override={overrides.tasksContainer}
                className={classNames(projectcss.all, sty.tasksContainer, {
                  [sty.tasksContainerstate_empty]: hasVariant(
                    $state,
                    "state",
                    "empty"
                  )
                })}
              >
                <MultipleChoice
                  className={classNames(
                    "__wab_instance",
                    sty.multipleChoice__v8BTo,
                    {
                      [sty.multipleChoiceglobal_theme_dark__v8BToLCthO]:
                        hasVariant(globalVariants, "theme", "dark"),
                      [sty.multipleChoicestate_empty__v8BTo35NFz]: hasVariant(
                        $state,
                        "state",
                        "empty"
                      )
                    }
                  )}
                  state={"editing" as const}
                />

                <MultipleChoice
                  className={classNames(
                    "__wab_instance",
                    sty.multipleChoice__cLiKx
                  )}
                  state={"checked" as const}
                />

                <MultipleChoice
                  className={classNames(
                    "__wab_instance",
                    sty.multipleChoice__ypH81,
                    {
                      [sty.multipleChoiceglobal_theme_dark__ypH81LCthO]:
                        hasVariant(globalVariants, "theme", "dark")
                    }
                  )}
                />

                <MultipleChoice
                  className={classNames(
                    "__wab_instance",
                    sty.multipleChoice__fasiK,
                    {
                      [sty.multipleChoiceglobal_theme_dark__fasiKlCthO]:
                        hasVariant(globalVariants, "theme", "dark"),
                      [sty.multipleChoicestate_empty__fasiK35NFz]: hasVariant(
                        $state,
                        "state",
                        "empty"
                      )
                    }
                  )}
                />
              </div>
            ) : null}
            {(hasVariant($state, "state", "empty") ? false : true) ? (
              <Footer
                className={classNames("__wab_instance", sty.footer__gnKnk, {
                  [sty.footerglobal_theme_dark__gnKnklCthO]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.footerstate_empty__gnKnk35NFz]: hasVariant(
                    $state,
                    "state",
                    "empty"
                  )
                })}
                state={["hasCompleted"]}
              />
            ) : null}
          </div>
        </div>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__gmN6A, {
          [sty.freeBoxglobal_theme_dark__gmN6ALCthO]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        <div
          data-plasmic-name={"appBody2"}
          data-plasmic-override={overrides.appBody2}
          className={classNames(projectcss.all, sty.appBody2, {
            [sty.appBody2global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <Header
            className={classNames("__wab_instance", sty.header___5H7F5, {
              [sty.headerglobal_theme_dark___5H7F5LCthO]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.headerstate_empty___5H7F535NFz]: hasVariant(
                $state,
                "state",
                "empty"
              )
            })}
            state={
              hasVariant($state, "state", "empty")
                ? ("empty" as const)
                : undefined
            }
          />

          {(hasVariant($state, "state", "empty") ? false : true) ? (
            <Footer
              className={classNames("__wab_instance", sty.footer___5Mje5, {
                [sty.footerglobal_theme_dark___5Mje5LCthO]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.footerstate_empty___5Mje535NFz]: hasVariant(
                  $state,
                  "state",
                  "empty"
                )
              })}
              state={["hasCompleted"]}
            />
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "textInput2",
    "questionPanel",
    "mcBtn",
    "svg",
    "saBtn",
    "appBody",
    "tasksContainer",
    "appBody2"
  ],
  appTitle: ["appTitle"],
  textInput2: ["textInput2"],
  questionPanel: ["questionPanel", "mcBtn", "svg", "saBtn"],
  mcBtn: ["mcBtn", "svg"],
  svg: ["svg"],
  saBtn: ["saBtn"],
  appBody: ["appBody", "tasksContainer"],
  tasksContainer: ["tasksContainer"],
  appBody2: ["appBody2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appTitle: "div";
  textInput2: typeof TextInput;
  questionPanel: "div";
  mcBtn: typeof Button;
  svg: "svg";
  saBtn: typeof Button;
  appBody: "div";
  tasksContainer: "div";
  appBody2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTodoApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTodoApp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTodoApp__ArgProps,
          internalVariantPropNames: PlasmicTodoApp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    textInput2: makeNodeComponent("textInput2"),
    questionPanel: makeNodeComponent("questionPanel"),
    mcBtn: makeNodeComponent("mcBtn"),
    svg: makeNodeComponent("svg"),
    saBtn: makeNodeComponent("saBtn"),
    appBody: makeNodeComponent("appBody"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    appBody2: makeNodeComponent("appBody2"),

    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
